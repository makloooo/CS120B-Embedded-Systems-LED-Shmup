
Shift Register Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000204  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  0000029c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000023a  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000189  00000000  00000000  0000059e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000255  00000000  00000000  00000727  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  0000097c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001fb  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000111  00000000  00000000  00000c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00000d3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e0       	ldi	r30, 0x04	; 4
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7b d0       	rcall	.+246    	; 0x1ba <main>
  c4:	9d c0       	rjmp	.+314    	; 0x200 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <transmit_char>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	27 e0       	ldi	r18, 0x07	; 7
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	58 e0       	ldi	r21, 0x08	; 8
  ce:	e8 2f       	mov	r30, r24
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	52 b9       	out	0x02, r21	; 2
  d4:	42 b1       	in	r20, 0x02	; 2
  d6:	bf 01       	movw	r22, r30
  d8:	02 2e       	mov	r0, r18
  da:	02 c0       	rjmp	.+4      	; 0xe0 <transmit_char+0x18>
  dc:	75 95       	asr	r23
  de:	67 95       	ror	r22
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <transmit_char+0x14>
  e4:	96 2f       	mov	r25, r22
  e6:	91 70       	andi	r25, 0x01	; 1
  e8:	94 2b       	or	r25, r20
  ea:	92 b9       	out	0x02, r25	; 2
  ec:	12 9a       	sbi	0x02, 2	; 2
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	31 09       	sbc	r19, r1
  f2:	78 f7       	brcc	.-34     	; 0xd2 <transmit_char+0xa>
  f4:	11 9a       	sbi	0x02, 1	; 2
  f6:	12 b8       	out	0x02, r1	; 2
  f8:	08 95       	ret

000000fa <TimerOn>:
  fa:	8b e0       	ldi	r24, 0x0B	; 11
  fc:	80 93 81 00 	sts	0x0081, r24
 100:	8d e7       	ldi	r24, 0x7D	; 125
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 89 00 	sts	0x0089, r25
 108:	80 93 88 00 	sts	0x0088, r24
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	80 93 6f 00 	sts	0x006F, r24
 112:	10 92 85 00 	sts	0x0085, r1
 116:	10 92 84 00 	sts	0x0084, r1
 11a:	80 91 00 01 	lds	r24, 0x0100
 11e:	90 91 01 01 	lds	r25, 0x0101
 122:	a0 91 02 01 	lds	r26, 0x0102
 126:	b0 91 03 01 	lds	r27, 0x0103
 12a:	80 93 04 01 	sts	0x0104, r24
 12e:	90 93 05 01 	sts	0x0105, r25
 132:	a0 93 06 01 	sts	0x0106, r26
 136:	b0 93 07 01 	sts	0x0107, r27
 13a:	8f b7       	in	r24, 0x3f	; 63
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	8f bf       	out	0x3f, r24	; 63
 140:	08 95       	ret

00000142 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 154:	80 91 04 01 	lds	r24, 0x0104
 158:	90 91 05 01 	lds	r25, 0x0105
 15c:	a0 91 06 01 	lds	r26, 0x0106
 160:	b0 91 07 01 	lds	r27, 0x0107
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	a1 09       	sbc	r26, r1
 168:	b1 09       	sbc	r27, r1
 16a:	80 93 04 01 	sts	0x0104, r24
 16e:	90 93 05 01 	sts	0x0105, r25
 172:	a0 93 06 01 	sts	0x0106, r26
 176:	b0 93 07 01 	sts	0x0107, r27
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 17a:	89 2b       	or	r24, r25
 17c:	8a 2b       	or	r24, r26
 17e:	8b 2b       	or	r24, r27
 180:	99 f4       	brne	.+38     	; 0x1a8 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 08 01 	sts	0x0108, r24
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 188:	80 91 00 01 	lds	r24, 0x0100
 18c:	90 91 01 01 	lds	r25, 0x0101
 190:	a0 91 02 01 	lds	r26, 0x0102
 194:	b0 91 03 01 	lds	r27, 0x0103
 198:	80 93 04 01 	sts	0x0104, r24
 19c:	90 93 05 01 	sts	0x0105, r25
 1a0:	a0 93 06 01 	sts	0x0106, r26
 1a4:	b0 93 07 01 	sts	0x0107, r27
	}
}
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <main>:
#include "timer.h"

int main(void)
{
    /* Replace with your application code */
	DDRA = 0xFF; PORTA = 0x00;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	81 b9       	out	0x01, r24	; 1
 1be:	12 b8       	out	0x02, r1	; 2
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 1c0:	84 ef       	ldi	r24, 0xF4	; 244
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	a0 e0       	ldi	r26, 0x00	; 0
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	80 93 00 01 	sts	0x0100, r24
 1cc:	90 93 01 01 	sts	0x0101, r25
 1d0:	a0 93 02 01 	sts	0x0102, r26
 1d4:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
 1d8:	80 93 04 01 	sts	0x0104, r24
 1dc:	90 93 05 01 	sts	0x0105, r25
 1e0:	a0 93 06 01 	sts	0x0106, r26
 1e4:	b0 93 07 01 	sts	0x0107, r27
	
	unsigned char data = 0xAA;
	
	TimerSet(500);
	TimerOn();
 1e8:	88 df       	rcall	.-240    	; 0xfa <TimerOn>
int main(void)
{
    /* Replace with your application code */
	DDRA = 0xFF; PORTA = 0x00;
	
	unsigned char data = 0xAA;
 1ea:	ca ea       	ldi	r28, 0xAA	; 170
	TimerSet(500);
	TimerOn();
	
    while (1) 
    {
		transmit_char(data);
 1ec:	8c 2f       	mov	r24, r28
 1ee:	6c df       	rcall	.-296    	; 0xc8 <transmit_char>
		while(!TimerFlag);
 1f0:	90 91 08 01 	lds	r25, 0x0108
 1f4:	99 23       	and	r25, r25
 1f6:	e1 f3       	breq	.-8      	; 0x1f0 <main+0x36>
		data = ~data;
 1f8:	c0 95       	com	r28
		TimerFlag = 0;
 1fa:	10 92 08 01 	sts	0x0108, r1
	}
 1fe:	f6 cf       	rjmp	.-20     	; 0x1ec <main+0x32>

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
