
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00002452  000024e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002452  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f9  00800146  00800146  0000252c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000252c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000255c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000578  00000000  00000000  0000259c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cddc  00000000  00000000  00002b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001dec  00000000  00000000  0000f8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002051  00000000  00000000  000116dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001750  00000000  00000000  00013730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002a2a  00000000  00000000  00014e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000af69  00000000  00000000  000178aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000650  00000000  00000000  00022813  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__ctors_end>
       4:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
       8:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
       c:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
      10:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
      14:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
      18:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
      1c:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
      20:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
      24:	0c 94 15 08 	jmp	0x102a	; 0x102a <__vector_9>
      28:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
      2c:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
      30:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
      34:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__vector_13>
      38:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
      3c:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
      40:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__vector_16>
      44:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
      48:	0c 94 f2 0e 	jmp	0x1de4	; 0x1de4 <__vector_18>
      4c:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__vector_19>
      50:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
      54:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
      58:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
      5c:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
      60:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
      64:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 3e       	cpi	r16, 0xE0	; 224
      6e:	5b 4f       	sbci	r21, 0xFB	; 251
      70:	5b 3e       	cpi	r21, 0xEB	; 235
      72:	3e 6b       	ori	r19, 0xBE	; 190
      74:	4f 6b       	ori	r20, 0xBF	; 191
      76:	3e 1c       	adc	r3, r14
      78:	3e 7c       	andi	r19, 0xCE	; 206
      7a:	3e 1c       	adc	r3, r14
      7c:	18 3c       	cpi	r17, 0xC8	; 200
      7e:	7e 3c       	cpi	r23, 0xCE	; 206
      80:	18 1c       	adc	r1, r8
      82:	57 7d       	andi	r21, 0xD7	; 215
      84:	57 1c       	adc	r5, r7
      86:	1c 5e       	subi	r17, 0xEC	; 236
      88:	7f 5e       	subi	r23, 0xEF	; 239
      8a:	1c 00       	.word	0x001c	; ????
      8c:	18 3c       	cpi	r17, 0xC8	; 200
      8e:	18 00       	.word	0x0018	; ????
      90:	ff e7       	ldi	r31, 0x7F	; 127
      92:	c3 e7       	ldi	r28, 0x73	; 115
      94:	ff 00       	.word	0x00ff	; ????
      96:	18 24       	eor	r1, r8
      98:	18 00       	.word	0x0018	; ????
      9a:	ff e7       	ldi	r31, 0x7F	; 127
      9c:	db e7       	ldi	r29, 0x7B	; 123
      9e:	ff 30       	cpi	r31, 0x0F	; 15
      a0:	48 3a       	cpi	r20, 0xA8	; 168
      a2:	06 0e       	add	r0, r22
      a4:	26 29       	or	r18, r6
      a6:	79 29       	or	r23, r9
      a8:	26 40       	sbci	r18, 0x06	; 6
      aa:	7f 05       	cpc	r23, r15
      ac:	05 07       	cpc	r16, r21
      ae:	40 7f       	andi	r20, 0xF0	; 240
      b0:	05 25       	eor	r16, r5
      b2:	3f 5a       	subi	r19, 0xAF	; 175
      b4:	3c e7       	ldi	r19, 0x7C	; 124
      b6:	3c 5a       	subi	r19, 0xAC	; 172
      b8:	7f 3e       	cpi	r23, 0xEF	; 239
      ba:	1c 1c       	adc	r1, r12
      bc:	08 08       	sbc	r0, r8
      be:	1c 1c       	adc	r1, r12
      c0:	3e 7f       	andi	r19, 0xFE	; 254
      c2:	14 22       	and	r1, r20
      c4:	7f 22       	and	r7, r31
      c6:	14 5f       	subi	r17, 0xF4	; 244
      c8:	5f 00       	.word	0x005f	; ????
      ca:	5f 5f       	subi	r21, 0xFF	; 255
      cc:	06 09       	sbc	r16, r6
      ce:	7f 01       	movw	r14, r30
      d0:	7f 00       	.word	0x007f	; ????
      d2:	66 89       	ldd	r22, Z+22	; 0x16
      d4:	95 6a       	ori	r25, 0xA5	; 165
      d6:	60 60       	ori	r22, 0x00	; 0
      d8:	60 60       	ori	r22, 0x00	; 0
      da:	60 94       	com	r6
      dc:	a2 ff       	sbrs	r26, 2
      de:	a2 94       	swap	r10
      e0:	08 04       	cpc	r0, r8
      e2:	7e 04       	cpc	r7, r14
      e4:	08 10       	cpse	r0, r8
      e6:	20 7e       	andi	r18, 0xE0	; 224
      e8:	20 10       	cpse	r2, r0
      ea:	08 08       	sbc	r0, r8
      ec:	2a 1c       	adc	r2, r10
      ee:	08 08       	sbc	r0, r8
      f0:	1c 2a       	or	r1, r28
      f2:	08 08       	sbc	r0, r8
      f4:	1e 10       	cpse	r1, r14
      f6:	10 10       	cpse	r1, r0
      f8:	10 0c       	add	r1, r0
      fa:	1e 0c       	add	r1, r14
      fc:	1e 0c       	add	r1, r14
      fe:	30 38       	cpi	r19, 0x80	; 128
     100:	3e 38       	cpi	r19, 0x8E	; 142
     102:	30 06       	cpc	r3, r16
     104:	0e 3e       	cpi	r16, 0xEE	; 238
     106:	0e 06       	cpc	r0, r30
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	00 5f       	subi	r16, 0xF0	; 240
     110:	00 00       	nop
     112:	00 07       	cpc	r16, r16
     114:	00 07       	cpc	r16, r16
     116:	00 14       	cp	r0, r0
     118:	7f 14       	cp	r7, r15
     11a:	7f 14       	cp	r7, r15
     11c:	24 2a       	or	r2, r20
     11e:	7f 2a       	or	r7, r31
     120:	12 23       	and	r17, r18
     122:	13 08       	sbc	r1, r3
     124:	64 62       	ori	r22, 0x24	; 36
     126:	36 49       	sbci	r19, 0x96	; 150
     128:	56 20       	and	r5, r6
     12a:	50 00       	.word	0x0050	; ????
     12c:	08 07       	cpc	r16, r24
     12e:	03 00       	.word	0x0003	; ????
     130:	00 1c       	adc	r0, r0
     132:	22 41       	sbci	r18, 0x12	; 18
     134:	00 00       	nop
     136:	41 22       	and	r4, r17
     138:	1c 00       	.word	0x001c	; ????
     13a:	2a 1c       	adc	r2, r10
     13c:	7f 1c       	adc	r7, r15
     13e:	2a 08       	sbc	r2, r10
     140:	08 3e       	cpi	r16, 0xE8	; 232
     142:	08 08       	sbc	r0, r8
     144:	00 80       	ld	r0, Z
     146:	70 30       	cpi	r23, 0x00	; 0
     148:	00 08       	sbc	r0, r0
     14a:	08 08       	sbc	r0, r8
     14c:	08 08       	sbc	r0, r8
     14e:	00 00       	nop
     150:	60 60       	ori	r22, 0x00	; 0
     152:	00 20       	and	r0, r0
     154:	10 08       	sbc	r1, r0
     156:	04 02       	muls	r16, r20
     158:	3e 51       	subi	r19, 0x1E	; 30
     15a:	49 45       	sbci	r20, 0x59	; 89
     15c:	3e 00       	.word	0x003e	; ????
     15e:	42 7f       	andi	r20, 0xF2	; 242
     160:	40 00       	.word	0x0040	; ????
     162:	72 49       	sbci	r23, 0x92	; 146
     164:	49 49       	sbci	r20, 0x99	; 153
     166:	46 21       	and	r20, r6
     168:	41 49       	sbci	r20, 0x91	; 145
     16a:	4d 33       	cpi	r20, 0x3D	; 61
     16c:	18 14       	cp	r1, r8
     16e:	12 7f       	andi	r17, 0xF2	; 242
     170:	10 27       	eor	r17, r16
     172:	45 45       	sbci	r20, 0x55	; 85
     174:	45 39       	cpi	r20, 0x95	; 149
     176:	3c 4a       	sbci	r19, 0xAC	; 172
     178:	49 49       	sbci	r20, 0x99	; 153
     17a:	31 41       	sbci	r19, 0x11	; 17
     17c:	21 11       	cpse	r18, r1
     17e:	09 07       	cpc	r16, r25
     180:	36 49       	sbci	r19, 0x96	; 150
     182:	49 49       	sbci	r20, 0x99	; 153
     184:	36 46       	sbci	r19, 0x66	; 102
     186:	49 49       	sbci	r20, 0x99	; 153
     188:	29 1e       	adc	r2, r25
     18a:	00 00       	nop
     18c:	14 00       	.word	0x0014	; ????
     18e:	00 00       	nop
     190:	40 34       	cpi	r20, 0x40	; 64
     192:	00 00       	nop
     194:	00 08       	sbc	r0, r0
     196:	14 22       	and	r1, r20
     198:	41 14       	cp	r4, r1
     19a:	14 14       	cp	r1, r4
     19c:	14 14       	cp	r1, r4
     19e:	00 41       	sbci	r16, 0x10	; 16
     1a0:	22 14       	cp	r2, r2
     1a2:	08 02       	muls	r16, r24
     1a4:	01 59       	subi	r16, 0x91	; 145
     1a6:	09 06       	cpc	r0, r25
     1a8:	3e 41       	sbci	r19, 0x1E	; 30
     1aa:	5d 59       	subi	r21, 0x9D	; 157
     1ac:	4e 7c       	andi	r20, 0xCE	; 206
     1ae:	12 11       	cpse	r17, r2
     1b0:	12 7c       	andi	r17, 0xC2	; 194
     1b2:	7f 49       	sbci	r23, 0x9F	; 159
     1b4:	49 49       	sbci	r20, 0x99	; 153
     1b6:	36 3e       	cpi	r19, 0xE6	; 230
     1b8:	41 41       	sbci	r20, 0x11	; 17
     1ba:	41 22       	and	r4, r17
     1bc:	7f 41       	sbci	r23, 0x1F	; 31
     1be:	41 41       	sbci	r20, 0x11	; 17
     1c0:	3e 7f       	andi	r19, 0xFE	; 254
     1c2:	49 49       	sbci	r20, 0x99	; 153
     1c4:	49 41       	sbci	r20, 0x19	; 25
     1c6:	7f 09       	sbc	r23, r15
     1c8:	09 09       	sbc	r16, r9
     1ca:	01 3e       	cpi	r16, 0xE1	; 225
     1cc:	41 41       	sbci	r20, 0x11	; 17
     1ce:	51 73       	andi	r21, 0x31	; 49
     1d0:	7f 08       	sbc	r7, r15
     1d2:	08 08       	sbc	r0, r8
     1d4:	7f 00       	.word	0x007f	; ????
     1d6:	41 7f       	andi	r20, 0xF1	; 241
     1d8:	41 00       	.word	0x0041	; ????
     1da:	20 40       	sbci	r18, 0x00	; 0
     1dc:	41 3f       	cpi	r20, 0xF1	; 241
     1de:	01 7f       	andi	r16, 0xF1	; 241
     1e0:	08 14       	cp	r0, r8
     1e2:	22 41       	sbci	r18, 0x12	; 18
     1e4:	7f 40       	sbci	r23, 0x0F	; 15
     1e6:	40 40       	sbci	r20, 0x00	; 0
     1e8:	40 7f       	andi	r20, 0xF0	; 240
     1ea:	02 1c       	adc	r0, r2
     1ec:	02 7f       	andi	r16, 0xF2	; 242
     1ee:	7f 04       	cpc	r7, r15
     1f0:	08 10       	cpse	r0, r8
     1f2:	7f 3e       	cpi	r23, 0xEF	; 239
     1f4:	41 41       	sbci	r20, 0x11	; 17
     1f6:	41 3e       	cpi	r20, 0xE1	; 225
     1f8:	7f 09       	sbc	r23, r15
     1fa:	09 09       	sbc	r16, r9
     1fc:	06 3e       	cpi	r16, 0xE6	; 230
     1fe:	41 51       	subi	r20, 0x11	; 17
     200:	21 5e       	subi	r18, 0xE1	; 225
     202:	7f 09       	sbc	r23, r15
     204:	19 29       	or	r17, r9
     206:	46 26       	eor	r4, r22
     208:	49 49       	sbci	r20, 0x99	; 153
     20a:	49 32       	cpi	r20, 0x29	; 41
     20c:	03 01       	movw	r0, r6
     20e:	7f 01       	movw	r14, r30
     210:	03 3f       	cpi	r16, 0xF3	; 243
     212:	40 40       	sbci	r20, 0x00	; 0
     214:	40 3f       	cpi	r20, 0xF0	; 240
     216:	1f 20       	and	r1, r15
     218:	40 20       	and	r4, r0
     21a:	1f 3f       	cpi	r17, 0xFF	; 255
     21c:	40 38       	cpi	r20, 0x80	; 128
     21e:	40 3f       	cpi	r20, 0xF0	; 240
     220:	63 14       	cp	r6, r3
     222:	08 14       	cp	r0, r8
     224:	63 03       	mulsu	r22, r19
     226:	04 78       	andi	r16, 0x84	; 132
     228:	04 03       	mulsu	r16, r20
     22a:	61 59       	subi	r22, 0x91	; 145
     22c:	49 4d       	sbci	r20, 0xD9	; 217
     22e:	43 00       	.word	0x0043	; ????
     230:	7f 41       	sbci	r23, 0x1F	; 31
     232:	41 41       	sbci	r20, 0x11	; 17
     234:	02 04       	cpc	r0, r2
     236:	08 10       	cpse	r0, r8
     238:	20 00       	.word	0x0020	; ????
     23a:	41 41       	sbci	r20, 0x11	; 17
     23c:	41 7f       	andi	r20, 0xF1	; 241
     23e:	04 02       	muls	r16, r20
     240:	01 02       	muls	r16, r17
     242:	04 40       	sbci	r16, 0x04	; 4
     244:	40 40       	sbci	r20, 0x00	; 0
     246:	40 40       	sbci	r20, 0x00	; 0
     248:	00 03       	mulsu	r16, r16
     24a:	07 08       	sbc	r0, r7
     24c:	00 20       	and	r0, r0
     24e:	54 54       	subi	r21, 0x44	; 68
     250:	78 40       	sbci	r23, 0x08	; 8
     252:	7f 28       	or	r7, r15
     254:	44 44       	sbci	r20, 0x44	; 68
     256:	38 38       	cpi	r19, 0x88	; 136
     258:	44 44       	sbci	r20, 0x44	; 68
     25a:	44 28       	or	r4, r4
     25c:	38 44       	sbci	r19, 0x48	; 72
     25e:	44 28       	or	r4, r4
     260:	7f 38       	cpi	r23, 0x8F	; 143
     262:	54 54       	subi	r21, 0x44	; 68
     264:	54 18       	sub	r5, r4
     266:	00 08       	sbc	r0, r0
     268:	7e 09       	sbc	r23, r14
     26a:	02 18       	sub	r0, r2
     26c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     26e:	9c 78       	andi	r25, 0x8C	; 140
     270:	7f 08       	sbc	r7, r15
     272:	04 04       	cpc	r0, r4
     274:	78 00       	.word	0x0078	; ????
     276:	44 7d       	andi	r20, 0xD4	; 212
     278:	40 00       	.word	0x0040	; ????
     27a:	20 40       	sbci	r18, 0x00	; 0
     27c:	40 3d       	cpi	r20, 0xD0	; 208
     27e:	00 7f       	andi	r16, 0xF0	; 240
     280:	10 28       	or	r1, r0
     282:	44 00       	.word	0x0044	; ????
     284:	00 41       	sbci	r16, 0x10	; 16
     286:	7f 40       	sbci	r23, 0x0F	; 15
     288:	00 7c       	andi	r16, 0xC0	; 192
     28a:	04 78       	andi	r16, 0x84	; 132
     28c:	04 78       	andi	r16, 0x84	; 132
     28e:	7c 08       	sbc	r7, r12
     290:	04 04       	cpc	r0, r4
     292:	78 38       	cpi	r23, 0x88	; 136
     294:	44 44       	sbci	r20, 0x44	; 68
     296:	44 38       	cpi	r20, 0x84	; 132
     298:	fc 18       	sub	r15, r12
     29a:	24 24       	eor	r2, r4
     29c:	18 18       	sub	r1, r8
     29e:	24 24       	eor	r2, r4
     2a0:	18 fc       	.word	0xfc18	; ????
     2a2:	7c 08       	sbc	r7, r12
     2a4:	04 04       	cpc	r0, r4
     2a6:	08 48       	sbci	r16, 0x88	; 136
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	54 24       	eor	r5, r4
     2ac:	04 04       	cpc	r0, r4
     2ae:	3f 44       	sbci	r19, 0x4F	; 79
     2b0:	24 3c       	cpi	r18, 0xC4	; 196
     2b2:	40 40       	sbci	r20, 0x00	; 0
     2b4:	20 7c       	andi	r18, 0xC0	; 192
     2b6:	1c 20       	and	r1, r12
     2b8:	40 20       	and	r4, r0
     2ba:	1c 3c       	cpi	r17, 0xCC	; 204
     2bc:	40 30       	cpi	r20, 0x00	; 0
     2be:	40 3c       	cpi	r20, 0xC0	; 192
     2c0:	44 28       	or	r4, r4
     2c2:	10 28       	or	r1, r0
     2c4:	44 4c       	sbci	r20, 0xC4	; 196
     2c6:	90 90 90 7c 	lds	r9, 0x7C90
     2ca:	44 64       	ori	r20, 0x44	; 68
     2cc:	54 4c       	sbci	r21, 0xC4	; 196
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	08 36       	cpi	r16, 0x68	; 104
     2d2:	41 00       	.word	0x0041	; ????
     2d4:	00 00       	nop
     2d6:	77 00       	.word	0x0077	; ????
     2d8:	00 00       	nop
     2da:	41 36       	cpi	r20, 0x61	; 97
     2dc:	08 00       	.word	0x0008	; ????
     2de:	02 01       	movw	r0, r4
     2e0:	02 04       	cpc	r0, r2
     2e2:	02 3c       	cpi	r16, 0xC2	; 194
     2e4:	26 23       	and	r18, r22
     2e6:	26 3c       	cpi	r18, 0xC6	; 198
     2e8:	1e a1       	ldd	r17, Y+38	; 0x26
     2ea:	a1 61       	ori	r26, 0x11	; 17
     2ec:	12 3a       	cpi	r17, 0xA2	; 162
     2ee:	40 40       	sbci	r20, 0x00	; 0
     2f0:	20 7a       	andi	r18, 0xA0	; 160
     2f2:	38 54       	subi	r19, 0x48	; 72
     2f4:	54 55       	subi	r21, 0x54	; 84
     2f6:	59 21       	and	r21, r9
     2f8:	55 55       	subi	r21, 0x55	; 85
     2fa:	79 41       	sbci	r23, 0x19	; 25
     2fc:	22 54       	subi	r18, 0x42	; 66
     2fe:	54 78       	andi	r21, 0x84	; 132
     300:	42 21       	and	r20, r2
     302:	55 54       	subi	r21, 0x45	; 69
     304:	78 40       	sbci	r23, 0x08	; 8
     306:	20 54       	subi	r18, 0x40	; 64
     308:	55 79       	andi	r21, 0x95	; 149
     30a:	40 0c       	add	r4, r0
     30c:	1e 52       	subi	r17, 0x2E	; 46
     30e:	72 12       	cpse	r7, r18
     310:	39 55       	subi	r19, 0x59	; 89
     312:	55 55       	subi	r21, 0x55	; 85
     314:	59 39       	cpi	r21, 0x99	; 153
     316:	54 54       	subi	r21, 0x44	; 68
     318:	54 59       	subi	r21, 0x94	; 148
     31a:	39 55       	subi	r19, 0x59	; 89
     31c:	54 54       	subi	r21, 0x44	; 68
     31e:	58 00       	.word	0x0058	; ????
     320:	00 45       	sbci	r16, 0x50	; 80
     322:	7c 41       	sbci	r23, 0x1C	; 28
     324:	00 02       	muls	r16, r16
     326:	45 7d       	andi	r20, 0xD5	; 213
     328:	42 00       	.word	0x0042	; ????
     32a:	01 45       	sbci	r16, 0x51	; 81
     32c:	7c 40       	sbci	r23, 0x0C	; 12
     32e:	7d 12       	cpse	r7, r29
     330:	11 12       	cpse	r1, r17
     332:	7d f0       	brhs	.+30     	; 0x352 <__trampolines_end+0x2ea>
     334:	28 25       	eor	r18, r8
     336:	28 f0       	brcs	.+10     	; 0x342 <__trampolines_end+0x2da>
     338:	7c 54       	subi	r23, 0x4C	; 76
     33a:	55 45       	sbci	r21, 0x55	; 85
     33c:	00 20       	and	r0, r0
     33e:	54 54       	subi	r21, 0x44	; 68
     340:	7c 54       	subi	r23, 0x4C	; 76
     342:	7c 0a       	sbc	r7, r28
     344:	09 7f       	andi	r16, 0xF9	; 249
     346:	49 32       	cpi	r20, 0x29	; 41
     348:	49 49       	sbci	r20, 0x99	; 153
     34a:	49 32       	cpi	r20, 0x29	; 41
     34c:	3a 44       	sbci	r19, 0x4A	; 74
     34e:	44 44       	sbci	r20, 0x44	; 68
     350:	3a 32       	cpi	r19, 0x2A	; 42
     352:	4a 48       	sbci	r20, 0x8A	; 138
     354:	48 30       	cpi	r20, 0x08	; 8
     356:	3a 41       	sbci	r19, 0x1A	; 26
     358:	41 21       	and	r20, r1
     35a:	7a 3a       	cpi	r23, 0xAA	; 170
     35c:	42 40       	sbci	r20, 0x02	; 2
     35e:	20 78       	andi	r18, 0x80	; 128
     360:	00 9d       	mul	r16, r0
     362:	a0 a0       	ldd	r10, Z+32	; 0x20
     364:	7d 3d       	cpi	r23, 0xDD	; 221
     366:	42 42       	sbci	r20, 0x22	; 34
     368:	42 3d       	cpi	r20, 0xD2	; 210
     36a:	3d 40       	sbci	r19, 0x0D	; 13
     36c:	40 40       	sbci	r20, 0x00	; 0
     36e:	3d 3c       	cpi	r19, 0xCD	; 205
     370:	24 ff       	sbrs	r18, 4
     372:	24 24       	eor	r2, r4
     374:	48 7e       	andi	r20, 0xE8	; 232
     376:	49 43       	sbci	r20, 0x39	; 57
     378:	66 2b       	or	r22, r22
     37a:	2f fc       	.word	0xfc2f	; ????
     37c:	2f 2b       	or	r18, r31
     37e:	ff 09       	sbc	r31, r15
     380:	29 f6       	brne	.-118    	; 0x30c <__trampolines_end+0x2a4>
     382:	20 c0       	rjmp	.+64     	; 0x3c4 <__trampolines_end+0x35c>
     384:	88 7e       	andi	r24, 0xE8	; 232
     386:	09 03       	fmul	r16, r17
     388:	20 54       	subi	r18, 0x40	; 64
     38a:	54 79       	andi	r21, 0x94	; 148
     38c:	41 00       	.word	0x0041	; ????
     38e:	00 44       	sbci	r16, 0x40	; 64
     390:	7d 41       	sbci	r23, 0x1D	; 29
     392:	30 48       	sbci	r19, 0x80	; 128
     394:	48 4a       	sbci	r20, 0xA8	; 168
     396:	32 38       	cpi	r19, 0x82	; 130
     398:	40 40       	sbci	r20, 0x00	; 0
     39a:	22 7a       	andi	r18, 0xA2	; 162
     39c:	00 7a       	andi	r16, 0xA0	; 160
     39e:	0a 0a       	sbc	r0, r26
     3a0:	72 7d       	andi	r23, 0xD2	; 210
     3a2:	0d 19       	sub	r16, r13
     3a4:	31 7d       	andi	r19, 0xD1	; 209
     3a6:	26 29       	or	r18, r6
     3a8:	29 2f       	mov	r18, r25
     3aa:	28 26       	eor	r2, r24
     3ac:	29 29       	or	r18, r9
     3ae:	29 26       	eor	r2, r25
     3b0:	30 48       	sbci	r19, 0x80	; 128
     3b2:	4d 40       	sbci	r20, 0x0D	; 13
     3b4:	20 38       	cpi	r18, 0x80	; 128
     3b6:	08 08       	sbc	r0, r8
     3b8:	08 08       	sbc	r0, r8
     3ba:	08 08       	sbc	r0, r8
     3bc:	08 08       	sbc	r0, r8
     3be:	38 2f       	mov	r19, r24
     3c0:	10 c8       	rjmp	.-4064   	; 0xfffff3e2 <__eeprom_end+0xff7ef3e2>
     3c2:	ac ba       	out	0x1c, r10	; 28
     3c4:	2f 10       	cpse	r2, r15
     3c6:	28 34       	cpi	r18, 0x48	; 72
     3c8:	fa 00       	.word	0x00fa	; ????
     3ca:	00 7b       	andi	r16, 0xB0	; 176
     3cc:	00 00       	nop
     3ce:	08 14       	cp	r0, r8
     3d0:	2a 14       	cp	r2, r10
     3d2:	22 22       	and	r2, r18
     3d4:	14 2a       	or	r1, r20
     3d6:	14 08       	sbc	r1, r4
     3d8:	55 00       	.word	0x0055	; ????
     3da:	55 00       	.word	0x0055	; ????
     3dc:	55 aa       	std	Z+53, r5	; 0x35
     3de:	55 aa       	std	Z+53, r5	; 0x35
     3e0:	55 aa       	std	Z+53, r5	; 0x35
     3e2:	ff 55       	subi	r31, 0x5F	; 95
     3e4:	ff 55       	subi	r31, 0x5F	; 95
     3e6:	ff 00       	.word	0x00ff	; ????
     3e8:	00 00       	nop
     3ea:	ff 00       	.word	0x00ff	; ????
     3ec:	10 10       	cpse	r1, r0
     3ee:	10 ff       	sbrs	r17, 0
     3f0:	00 14       	cp	r0, r0
     3f2:	14 14       	cp	r1, r4
     3f4:	ff 00       	.word	0x00ff	; ????
     3f6:	10 10       	cpse	r1, r0
     3f8:	ff 00       	.word	0x00ff	; ????
     3fa:	ff 10       	cpse	r15, r15
     3fc:	10 f0       	brcs	.+4      	; 0x402 <__trampolines_end+0x39a>
     3fe:	10 f0       	brcs	.+4      	; 0x404 <__trampolines_end+0x39c>
     400:	14 14       	cp	r1, r4
     402:	14 fc       	sbrc	r1, 4
     404:	00 14       	cp	r0, r0
     406:	14 f7       	brge	.-60     	; 0x3cc <__trampolines_end+0x364>
     408:	00 ff       	sbrs	r16, 0
     40a:	00 00       	nop
     40c:	ff 00       	.word	0x00ff	; ????
     40e:	ff 14       	cp	r15, r15
     410:	14 f4       	brge	.+4      	; 0x416 <__trampolines_end+0x3ae>
     412:	04 fc       	sbrc	r0, 4
     414:	14 14       	cp	r1, r4
     416:	17 10       	cpse	r1, r7
     418:	1f 10       	cpse	r1, r15
     41a:	10 1f       	adc	r17, r16
     41c:	10 1f       	adc	r17, r16
     41e:	14 14       	cp	r1, r4
     420:	14 1f       	adc	r17, r20
     422:	00 10       	cpse	r0, r0
     424:	10 10       	cpse	r1, r0
     426:	f0 00       	.word	0x00f0	; ????
     428:	00 00       	nop
     42a:	00 1f       	adc	r16, r16
     42c:	10 10       	cpse	r1, r0
     42e:	10 10       	cpse	r1, r0
     430:	1f 10       	cpse	r1, r15
     432:	10 10       	cpse	r1, r0
     434:	10 f0       	brcs	.+4      	; 0x43a <__trampolines_end+0x3d2>
     436:	10 00       	.word	0x0010	; ????
     438:	00 00       	nop
     43a:	ff 10       	cpse	r15, r15
     43c:	10 10       	cpse	r1, r0
     43e:	10 10       	cpse	r1, r0
     440:	10 10       	cpse	r1, r0
     442:	10 10       	cpse	r1, r0
     444:	ff 10       	cpse	r15, r15
     446:	00 00       	nop
     448:	00 ff       	sbrs	r16, 0
     44a:	14 00       	.word	0x0014	; ????
     44c:	00 ff       	sbrs	r16, 0
     44e:	00 ff       	sbrs	r16, 0
     450:	00 00       	nop
     452:	1f 10       	cpse	r1, r15
     454:	17 00       	.word	0x0017	; ????
     456:	00 fc       	sbrc	r0, 0
     458:	04 f4       	brge	.+0      	; 0x45a <__trampolines_end+0x3f2>
     45a:	14 14       	cp	r1, r4
     45c:	17 10       	cpse	r1, r7
     45e:	17 14       	cp	r1, r7
     460:	14 f4       	brge	.+4      	; 0x466 <__trampolines_end+0x3fe>
     462:	04 f4       	brge	.+0      	; 0x464 <__trampolines_end+0x3fc>
     464:	00 00       	nop
     466:	ff 00       	.word	0x00ff	; ????
     468:	f7 14       	cp	r15, r7
     46a:	14 14       	cp	r1, r4
     46c:	14 14       	cp	r1, r4
     46e:	14 14       	cp	r1, r4
     470:	f7 00       	.word	0x00f7	; ????
     472:	f7 14       	cp	r15, r7
     474:	14 14       	cp	r1, r4
     476:	17 14       	cp	r1, r7
     478:	10 10       	cpse	r1, r0
     47a:	1f 10       	cpse	r1, r15
     47c:	1f 14       	cp	r1, r15
     47e:	14 14       	cp	r1, r4
     480:	f4 14       	cp	r15, r4
     482:	10 10       	cpse	r1, r0
     484:	f0 10       	cpse	r15, r0
     486:	f0 00       	.word	0x00f0	; ????
     488:	00 1f       	adc	r16, r16
     48a:	10 1f       	adc	r17, r16
     48c:	00 00       	nop
     48e:	00 1f       	adc	r16, r16
     490:	14 00       	.word	0x0014	; ????
     492:	00 00       	nop
     494:	fc 14       	cp	r15, r12
     496:	00 00       	nop
     498:	f0 10       	cpse	r15, r0
     49a:	f0 10       	cpse	r15, r0
     49c:	10 ff       	sbrs	r17, 0
     49e:	10 ff       	sbrs	r17, 0
     4a0:	14 14       	cp	r1, r4
     4a2:	14 ff       	sbrs	r17, 4
     4a4:	14 10       	cpse	r1, r4
     4a6:	10 10       	cpse	r1, r0
     4a8:	1f 00       	.word	0x001f	; ????
     4aa:	00 00       	nop
     4ac:	00 f0       	brcs	.+0      	; 0x4ae <__trampolines_end+0x446>
     4ae:	10 ff       	sbrs	r17, 0
     4b0:	ff ff       	.word	0xffff	; ????
     4b2:	ff ff       	.word	0xffff	; ????
     4b4:	f0 f0       	brcs	.+60     	; 0x4f2 <__trampolines_end+0x48a>
     4b6:	f0 f0       	brcs	.+60     	; 0x4f4 <__trampolines_end+0x48c>
     4b8:	f0 ff       	sbrs	r31, 0
     4ba:	ff ff       	.word	0xffff	; ????
     4bc:	00 00       	nop
     4be:	00 00       	nop
     4c0:	00 ff       	sbrs	r16, 0
     4c2:	ff 0f       	add	r31, r31
     4c4:	0f 0f       	add	r16, r31
     4c6:	0f 0f       	add	r16, r31
     4c8:	38 44       	sbci	r19, 0x48	; 72
     4ca:	44 38       	cpi	r20, 0x84	; 132
     4cc:	44 fc       	sbrc	r4, 4
     4ce:	4a 4a       	sbci	r20, 0xAA	; 170
     4d0:	4a 34       	cpi	r20, 0x4A	; 74
     4d2:	7e 02       	muls	r23, r30
     4d4:	02 06       	cpc	r0, r18
     4d6:	06 02       	muls	r16, r22
     4d8:	7e 02       	muls	r23, r30
     4da:	7e 02       	muls	r23, r30
     4dc:	63 55       	subi	r22, 0x53	; 83
     4de:	49 41       	sbci	r20, 0x19	; 25
     4e0:	63 38       	cpi	r22, 0x83	; 131
     4e2:	44 44       	sbci	r20, 0x44	; 68
     4e4:	3c 04       	cpc	r3, r12
     4e6:	40 7e       	andi	r20, 0xE0	; 224
     4e8:	20 1e       	adc	r2, r16
     4ea:	20 06       	cpc	r2, r16
     4ec:	02 7e       	andi	r16, 0xE2	; 226
     4ee:	02 02       	muls	r16, r18
     4f0:	99 a5       	ldd	r25, Y+41	; 0x29
     4f2:	e7 a5       	ldd	r30, Z+47	; 0x2f
     4f4:	99 1c       	adc	r9, r9
     4f6:	2a 49       	sbci	r18, 0x9A	; 154
     4f8:	2a 1c       	adc	r2, r10
     4fa:	4c 72       	andi	r20, 0x2C	; 44
     4fc:	01 72       	andi	r16, 0x21	; 33
     4fe:	4c 30       	cpi	r20, 0x0C	; 12
     500:	4a 4d       	sbci	r20, 0xDA	; 218
     502:	4d 30       	cpi	r20, 0x0D	; 13
     504:	30 48       	sbci	r19, 0x80	; 128
     506:	78 48       	sbci	r23, 0x88	; 136
     508:	30 bc       	out	0x20, r3	; 32
     50a:	62 5a       	subi	r22, 0xA2	; 162
     50c:	46 3d       	cpi	r20, 0xD6	; 214
     50e:	3e 49       	sbci	r19, 0x9E	; 158
     510:	49 49       	sbci	r20, 0x99	; 153
     512:	00 7e       	andi	r16, 0xE0	; 224
     514:	01 01       	movw	r0, r2
     516:	01 7e       	andi	r16, 0xE1	; 225
     518:	2a 2a       	or	r2, r26
     51a:	2a 2a       	or	r2, r26
     51c:	2a 44       	sbci	r18, 0x4A	; 74
     51e:	44 5f       	subi	r20, 0xF4	; 244
     520:	44 44       	sbci	r20, 0x44	; 68
     522:	40 51       	subi	r20, 0x10	; 16
     524:	4a 44       	sbci	r20, 0x4A	; 74
     526:	40 40       	sbci	r20, 0x00	; 0
     528:	44 4a       	sbci	r20, 0xA4	; 164
     52a:	51 40       	sbci	r21, 0x01	; 1
     52c:	00 00       	nop
     52e:	ff 01       	movw	r30, r30
     530:	03 e0       	ldi	r16, 0x03	; 3
     532:	80 ff       	sbrs	r24, 0
     534:	00 00       	nop
     536:	08 08       	sbc	r0, r8
     538:	6b 6b       	ori	r22, 0xBB	; 187
     53a:	08 36       	cpi	r16, 0x68	; 104
     53c:	12 36       	cpi	r17, 0x62	; 98
     53e:	24 36       	cpi	r18, 0x64	; 100
     540:	06 0f       	add	r16, r22
     542:	09 0f       	add	r16, r25
     544:	06 00       	.word	0x0006	; ????
     546:	00 18       	sub	r0, r0
     548:	18 00       	.word	0x0018	; ????
     54a:	00 00       	nop
     54c:	10 10       	cpse	r1, r0
     54e:	00 30       	cpi	r16, 0x00	; 0
     550:	40 ff       	sbrs	r20, 0
     552:	01 01       	movw	r0, r2
     554:	00 1f       	adc	r16, r16
     556:	01 01       	movw	r0, r2
     558:	1e 00       	.word	0x001e	; ????
     55a:	19 1d       	adc	r17, r9
     55c:	17 12       	cpse	r1, r23
     55e:	00 3c       	cpi	r16, 0xC0	; 192
     560:	3c 3c       	cpi	r19, 0xCC	; 204
     562:	3c 00       	.word	0x003c	; ????
     564:	00 00       	nop
	...

00000568 <digital_pin_to_bit_mask_PGM>:
     568:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     578:	04 08 10 20                                         ... 

0000057c <digital_pin_to_port_PGM>:
     57c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     58c:	03 03 03 03                                         ....

00000590 <port_to_output_PGM>:
     590:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000059a <port_to_mode_PGM>:
     59a:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000005a4 <__ctors_start>:
     5a4:	11 03       	mulsu	r17, r17
     5a6:	54 0f       	add	r21, r20

000005a8 <__ctors_end>:
     5a8:	11 24       	eor	r1, r1
     5aa:	1f be       	out	0x3f, r1	; 63
     5ac:	cf ef       	ldi	r28, 0xFF	; 255
     5ae:	d8 e0       	ldi	r29, 0x08	; 8
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	cd bf       	out	0x3d, r28	; 61

000005b4 <__do_copy_data>:
     5b4:	11 e0       	ldi	r17, 0x01	; 1
     5b6:	a0 e0       	ldi	r26, 0x00	; 0
     5b8:	b1 e0       	ldi	r27, 0x01	; 1
     5ba:	e2 e5       	ldi	r30, 0x52	; 82
     5bc:	f4 e2       	ldi	r31, 0x24	; 36
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <__do_copy_data+0x10>
     5c0:	05 90       	lpm	r0, Z+
     5c2:	0d 92       	st	X+, r0
     5c4:	a6 34       	cpi	r26, 0x46	; 70
     5c6:	b1 07       	cpc	r27, r17
     5c8:	d9 f7       	brne	.-10     	; 0x5c0 <__do_copy_data+0xc>

000005ca <__do_clear_bss>:
     5ca:	22 e0       	ldi	r18, 0x02	; 2
     5cc:	a6 e4       	ldi	r26, 0x46	; 70
     5ce:	b1 e0       	ldi	r27, 0x01	; 1
     5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <.do_clear_bss_start>

000005d2 <.do_clear_bss_loop>:
     5d2:	1d 92       	st	X+, r1

000005d4 <.do_clear_bss_start>:
     5d4:	af 33       	cpi	r26, 0x3F	; 63
     5d6:	b2 07       	cpc	r27, r18
     5d8:	e1 f7       	brne	.-8      	; 0x5d2 <.do_clear_bss_loop>

000005da <__do_global_ctors>:
     5da:	12 e0       	ldi	r17, 0x02	; 2
     5dc:	c4 ed       	ldi	r28, 0xD4	; 212
     5de:	d2 e0       	ldi	r29, 0x02	; 2
     5e0:	04 c0       	rjmp	.+8      	; 0x5ea <__do_global_ctors+0x10>
     5e2:	21 97       	sbiw	r28, 0x01	; 1
     5e4:	fe 01       	movw	r30, r28
     5e6:	0e 94 df 10 	call	0x21be	; 0x21be <__tablejump2__>
     5ea:	c2 3d       	cpi	r28, 0xD2	; 210
     5ec:	d1 07       	cpc	r29, r17
     5ee:	c9 f7       	brne	.-14     	; 0x5e2 <__do_global_ctors+0x8>
     5f0:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <main>
     5f4:	0c 94 27 12 	jmp	0x244e	; 0x244e <_exit>

000005f8 <__bad_interrupt>:
     5f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005fc <setup>:
  matrix.drawPixel(x, 15, matrix.Color333(2, 2, 2));
  x = (x < 32) ? x+1 : 0;
}

void setup() {
  matrix.begin();
     5fc:	87 e4       	ldi	r24, 0x47	; 71
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	0e 94 bb 0a 	call	0x1576	; 0x1576 <_ZN14RGBmatrixPanel5beginEv>
  MsTimer2::set(50, flash);
     604:	4e e2       	ldi	r20, 0x2E	; 46
     606:	53 e0       	ldi	r21, 0x03	; 3
     608:	62 e3       	ldi	r22, 0x32	; 50
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN8MsTimer23setEmPFvvE>
  MsTimer2::start();
     614:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <_ZN8MsTimer25startEv>

00000618 <loop>:
}

void loop() {
  // put your main code here, to run repeatedly:
  matrix.swapBuffers(false);
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	87 e4       	ldi	r24, 0x47	; 71
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <_ZN14RGBmatrixPanel11swapBuffersEb>

00000622 <_GLOBAL__sub_I_matrix>:
}
     622:	8f 92       	push	r8
     624:	af 92       	push	r10
     626:	cf 92       	push	r12
     628:	ef 92       	push	r14
     62a:	0f 93       	push	r16
#define A   A0
#define B   A1
#define C   A2
#define D   A3

RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false);
     62c:	80 e2       	ldi	r24, 0x20	; 32
     62e:	8f 93       	push	r24
     630:	81 2c       	mov	r8, r1
     632:	89 e0       	ldi	r24, 0x09	; 9
     634:	a8 2e       	mov	r10, r24
     636:	9a e0       	ldi	r25, 0x0A	; 10
     638:	c9 2e       	mov	r12, r25
     63a:	28 e0       	ldi	r18, 0x08	; 8
     63c:	e2 2e       	mov	r14, r18
     63e:	01 e1       	ldi	r16, 0x11	; 17
     640:	20 e1       	ldi	r18, 0x10	; 16
     642:	4f e0       	ldi	r20, 0x0F	; 15
     644:	6e e0       	ldi	r22, 0x0E	; 14
     646:	87 e4       	ldi	r24, 0x47	; 71
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN14RGBmatrixPanelC1Ehhhhhhhbh>
     64e:	0f 90       	pop	r0
}

void loop() {
  // put your main code here, to run repeatedly:
  matrix.swapBuffers(false);
}
     650:	0f 91       	pop	r16
     652:	ef 90       	pop	r14
     654:	cf 90       	pop	r12
     656:	af 90       	pop	r10
     658:	8f 90       	pop	r8
     65a:	08 95       	ret

0000065c <_Z5flashv>:
RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false);

byte x = 0;

void flash() {
  matrix.fillScreen(0);
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	87 e4       	ldi	r24, 0x47	; 71
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN14RGBmatrixPanel10fillScreenEj>
  
  matrix.drawPixel(x, 15, matrix.Color333(2, 2, 2));
     668:	22 e0       	ldi	r18, 0x02	; 2
     66a:	42 e0       	ldi	r20, 0x02	; 2
     66c:	62 e0       	ldi	r22, 0x02	; 2
     66e:	87 e4       	ldi	r24, 0x47	; 71
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	0e 94 36 0b 	call	0x166c	; 0x166c <_ZN14RGBmatrixPanel8Color333Ehhh>
     676:	60 91 46 01 	lds	r22, 0x0146
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	9c 01       	movw	r18, r24
     67e:	4f e0       	ldi	r20, 0x0F	; 15
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	87 e4       	ldi	r24, 0x47	; 71
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN14RGBmatrixPanel9drawPixelEiij>
  x = (x < 32) ? x+1 : 0;
     68a:	80 91 46 01 	lds	r24, 0x0146
     68e:	80 32       	cpi	r24, 0x20	; 32
     690:	10 f4       	brcc	.+4      	; 0x696 <_Z5flashv+0x3a>
     692:	8f 5f       	subi	r24, 0xFF	; 255
     694:	01 c0       	rjmp	.+2      	; 0x698 <_Z5flashv+0x3c>
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	80 93 46 01 	sts	0x0146, r24
     69c:	08 95       	ret

0000069e <_ZN12Adafruit_GFX8drawLineEiiiij>:
  }
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
 uint16_t color) {
     69e:	2f 92       	push	r2
     6a0:	3f 92       	push	r3
     6a2:	4f 92       	push	r4
     6a4:	5f 92       	push	r5
     6a6:	6f 92       	push	r6
     6a8:	7f 92       	push	r7
     6aa:	8f 92       	push	r8
     6ac:	9f 92       	push	r9
     6ae:	af 92       	push	r10
     6b0:	bf 92       	push	r11
     6b2:	cf 92       	push	r12
     6b4:	df 92       	push	r13
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	00 d0       	rcall	.+0      	; 0x6c4 <_ZN12Adafruit_GFX8drawLineEiiiij+0x26>
     6c4:	1f 92       	push	r1
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
     6ca:	4c 01       	movw	r8, r24
     6cc:	7b 83       	std	Y+3, r23	; 0x03
     6ce:	6a 83       	std	Y+2, r22	; 0x02
     6d0:	6a 01       	movw	r12, r20
     6d2:	59 01       	movw	r10, r18
     6d4:	17 01       	movw	r2, r14
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
     6d6:	98 01       	movw	r18, r16
     6d8:	24 1b       	sub	r18, r20
     6da:	35 0b       	sbc	r19, r21
     6dc:	37 ff       	sbrs	r19, 7
     6de:	03 c0       	rjmp	.+6      	; 0x6e6 <_ZN12Adafruit_GFX8drawLineEiiiij+0x48>
     6e0:	31 95       	neg	r19
     6e2:	21 95       	neg	r18
     6e4:	31 09       	sbc	r19, r1
     6e6:	c5 01       	movw	r24, r10
     6e8:	4a 81       	ldd	r20, Y+2	; 0x02
     6ea:	5b 81       	ldd	r21, Y+3	; 0x03
     6ec:	84 1b       	sub	r24, r20
     6ee:	95 0b       	sbc	r25, r21
     6f0:	97 ff       	sbrs	r25, 7
     6f2:	03 c0       	rjmp	.+6      	; 0x6fa <_ZN12Adafruit_GFX8drawLineEiiiij+0x5c>
     6f4:	91 95       	neg	r25
     6f6:	81 95       	neg	r24
     6f8:	91 09       	sbc	r25, r1
     6fa:	51 e0       	ldi	r21, 0x01	; 1
     6fc:	59 83       	std	Y+1, r21	; 0x01
     6fe:	82 17       	cp	r24, r18
     700:	93 07       	cpc	r25, r19
     702:	14 f0       	brlt	.+4      	; 0x708 <_ZN12Adafruit_GFX8drawLineEiiiij+0x6a>
     704:	19 82       	std	Y+1, r1	; 0x01
     706:	0b c0       	rjmp	.+22     	; 0x71e <_ZN12Adafruit_GFX8drawLineEiiiij+0x80>
  if (steep) {
     708:	9a 2d       	mov	r25, r10
     70a:	8b 2d       	mov	r24, r11
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
     70c:	58 01       	movw	r10, r16
     70e:	09 2f       	mov	r16, r25
     710:	18 2f       	mov	r17, r24

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
 uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
     712:	9a 81       	ldd	r25, Y+2	; 0x02
     714:	8b 81       	ldd	r24, Y+3	; 0x03
    _swap_int16_t(x0, y0);
     716:	db 82       	std	Y+3, r13	; 0x03
     718:	ca 82       	std	Y+2, r12	; 0x02
     71a:	c9 2e       	mov	r12, r25
     71c:	d8 2e       	mov	r13, r24
    _swap_int16_t(x1, y1);
  }

  if (x0 > x1) {
     71e:	8a 81       	ldd	r24, Y+2	; 0x02
     720:	9b 81       	ldd	r25, Y+3	; 0x03
     722:	a8 16       	cp	r10, r24
     724:	b9 06       	cpc	r11, r25
     726:	5c f4       	brge	.+22     	; 0x73e <_ZN12Adafruit_GFX8drawLineEiiiij+0xa0>
     728:	9c 2d       	mov	r25, r12
     72a:	8d 2d       	mov	r24, r13
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
     72c:	68 01       	movw	r12, r16
     72e:	09 2f       	mov	r16, r25
     730:	18 2f       	mov	r17, r24
  if (steep) {
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
  }

  if (x0 > x1) {
     732:	9a 81       	ldd	r25, Y+2	; 0x02
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	bb 82       	std	Y+3, r11	; 0x03
     738:	aa 82       	std	Y+2, r10	; 0x02
     73a:	a9 2e       	mov	r10, r25
     73c:	b8 2e       	mov	r11, r24
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
     73e:	25 01       	movw	r4, r10
     740:	aa 81       	ldd	r26, Y+2	; 0x02
     742:	bb 81       	ldd	r27, Y+3	; 0x03
     744:	4a 1a       	sub	r4, r26
     746:	5b 0a       	sbc	r5, r27
  dy = abs(y1 - y0);
     748:	38 01       	movw	r6, r16
     74a:	6c 18       	sub	r6, r12
     74c:	7d 08       	sbc	r7, r13
     74e:	77 fe       	sbrs	r7, 7
     750:	03 c0       	rjmp	.+6      	; 0x758 <_ZN12Adafruit_GFX8drawLineEiiiij+0xba>
     752:	71 94       	neg	r7
     754:	61 94       	neg	r6
     756:	71 08       	sbc	r7, r1

  int16_t err = dx / 2;
     758:	72 01       	movw	r14, r4
     75a:	57 fe       	sbrs	r5, 7
     75c:	03 c0       	rjmp	.+6      	; 0x764 <_ZN12Adafruit_GFX8drawLineEiiiij+0xc6>
     75e:	bf ef       	ldi	r27, 0xFF	; 255
     760:	eb 1a       	sub	r14, r27
     762:	fb 0a       	sbc	r15, r27
     764:	f5 94       	asr	r15
     766:	e7 94       	ror	r14
  int16_t ystep;

  if (y0 < y1) {
     768:	c0 16       	cp	r12, r16
     76a:	d1 06       	cpc	r13, r17
     76c:	1c f0       	brlt	.+6      	; 0x774 <_ZN12Adafruit_GFX8drawLineEiiiij+0xd6>
    ystep = 1;
  } else {
    ystep = -1;
     76e:	0f ef       	ldi	r16, 0xFF	; 255
     770:	1f ef       	ldi	r17, 0xFF	; 255
     772:	1f c0       	rjmp	.+62     	; 0x7b2 <_ZN12Adafruit_GFX8drawLineEiiiij+0x114>

  int16_t err = dx / 2;
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
     774:	01 e0       	ldi	r16, 0x01	; 1
     776:	10 e0       	ldi	r17, 0x00	; 0
     778:	1c c0       	rjmp	.+56     	; 0x7b2 <_ZN12Adafruit_GFX8drawLineEiiiij+0x114>
     77a:	d4 01       	movw	r26, r8
     77c:	ed 91       	ld	r30, X+
     77e:	fc 91       	ld	r31, X
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
     780:	b9 81       	ldd	r27, Y+1	; 0x01
      drawPixel(y0, x0, color);
     782:	04 80       	ldd	r0, Z+4	; 0x04
     784:	f5 81       	ldd	r31, Z+5	; 0x05
     786:	e0 2d       	mov	r30, r0
     788:	91 01       	movw	r18, r2
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
     78a:	bb 23       	and	r27, r27
     78c:	c1 f0       	breq	.+48     	; 0x7be <_ZN12Adafruit_GFX8drawLineEiiiij+0x120>
      drawPixel(y0, x0, color);
     78e:	4a 81       	ldd	r20, Y+2	; 0x02
     790:	5b 81       	ldd	r21, Y+3	; 0x03
     792:	b6 01       	movw	r22, r12
    } else {
      drawPixel(x0, y0, color);
     794:	c4 01       	movw	r24, r8
     796:	09 95       	icall
    }
    err -= dy;
     798:	e6 18       	sub	r14, r6
     79a:	f7 08       	sbc	r15, r7
    if (err < 0) {
     79c:	f7 fe       	sbrs	r15, 7
     79e:	04 c0       	rjmp	.+8      	; 0x7a8 <_ZN12Adafruit_GFX8drawLineEiiiij+0x10a>
      y0 += ystep;
     7a0:	c0 0e       	add	r12, r16
     7a2:	d1 1e       	adc	r13, r17
      err += dx;
     7a4:	e4 0c       	add	r14, r4
     7a6:	f5 1c       	adc	r15, r5
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
     7a8:	ea 81       	ldd	r30, Y+2	; 0x02
     7aa:	fb 81       	ldd	r31, Y+3	; 0x03
     7ac:	31 96       	adiw	r30, 0x01	; 1
     7ae:	fb 83       	std	Y+3, r31	; 0x03
     7b0:	ea 83       	std	Y+2, r30	; 0x02
     7b2:	4a 81       	ldd	r20, Y+2	; 0x02
     7b4:	5b 81       	ldd	r21, Y+3	; 0x03
     7b6:	a4 16       	cp	r10, r20
     7b8:	b5 06       	cpc	r11, r21
     7ba:	fc f6       	brge	.-66     	; 0x77a <_ZN12Adafruit_GFX8drawLineEiiiij+0xdc>
     7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <_ZN12Adafruit_GFX8drawLineEiiiij+0x128>
    if (steep) {
      drawPixel(y0, x0, color);
    } else {
      drawPixel(x0, y0, color);
     7be:	a6 01       	movw	r20, r12
     7c0:	6a 81       	ldd	r22, Y+2	; 0x02
     7c2:	7b 81       	ldd	r23, Y+3	; 0x03
     7c4:	e7 cf       	rjmp	.-50     	; 0x794 <_ZN12Adafruit_GFX8drawLineEiiiij+0xf6>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	ff 90       	pop	r15
     7d6:	ef 90       	pop	r14
     7d8:	df 90       	pop	r13
     7da:	cf 90       	pop	r12
     7dc:	bf 90       	pop	r11
     7de:	af 90       	pop	r10
     7e0:	9f 90       	pop	r9
     7e2:	8f 90       	pop	r8
     7e4:	7f 90       	pop	r7
     7e6:	6f 90       	pop	r6
     7e8:	5f 90       	pop	r5
     7ea:	4f 90       	pop	r4
     7ec:	3f 90       	pop	r3
     7ee:	2f 90       	pop	r2
     7f0:	08 95       	ret

000007f2 <_ZN12Adafruit_GFX8drawRectEiiiij>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
     7f2:	6f 92       	push	r6
     7f4:	7f 92       	push	r7
     7f6:	8f 92       	push	r8
     7f8:	9f 92       	push	r9
     7fa:	af 92       	push	r10
     7fc:	bf 92       	push	r11
     7fe:	cf 92       	push	r12
     800:	df 92       	push	r13
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	ec 01       	movw	r28, r24
     810:	4b 01       	movw	r8, r22
     812:	5a 01       	movw	r10, r20
     814:	69 01       	movw	r12, r18
     816:	38 01       	movw	r6, r16
  drawFastHLine(x, y, w, color);
     818:	e8 81       	ld	r30, Y
     81a:	f9 81       	ldd	r31, Y+1	; 0x01
     81c:	02 84       	ldd	r0, Z+10	; 0x0a
     81e:	f3 85       	ldd	r31, Z+11	; 0x0b
     820:	e0 2d       	mov	r30, r0
     822:	87 01       	movw	r16, r14
     824:	09 95       	icall
  drawFastHLine(x, y+h-1, w, color);
     826:	e8 81       	ld	r30, Y
     828:	f9 81       	ldd	r31, Y+1	; 0x01
     82a:	a5 01       	movw	r20, r10
     82c:	46 0d       	add	r20, r6
     82e:	57 1d       	adc	r21, r7
     830:	41 50       	subi	r20, 0x01	; 1
     832:	51 09       	sbc	r21, r1
     834:	02 84       	ldd	r0, Z+10	; 0x0a
     836:	f3 85       	ldd	r31, Z+11	; 0x0b
     838:	e0 2d       	mov	r30, r0
     83a:	96 01       	movw	r18, r12
     83c:	b4 01       	movw	r22, r8
     83e:	ce 01       	movw	r24, r28
     840:	09 95       	icall
  drawFastVLine(x, y, h, color);
     842:	e8 81       	ld	r30, Y
     844:	f9 81       	ldd	r31, Y+1	; 0x01
     846:	00 84       	ldd	r0, Z+8	; 0x08
     848:	f1 85       	ldd	r31, Z+9	; 0x09
     84a:	e0 2d       	mov	r30, r0
     84c:	93 01       	movw	r18, r6
     84e:	a5 01       	movw	r20, r10
     850:	b4 01       	movw	r22, r8
     852:	ce 01       	movw	r24, r28
     854:	09 95       	icall
  drawFastVLine(x+w-1, y, h, color);
     856:	e8 81       	ld	r30, Y
     858:	f9 81       	ldd	r31, Y+1	; 0x01
     85a:	c8 0c       	add	r12, r8
     85c:	d9 1c       	adc	r13, r9
     85e:	b6 01       	movw	r22, r12
     860:	61 50       	subi	r22, 0x01	; 1
     862:	71 09       	sbc	r23, r1
     864:	00 84       	ldd	r0, Z+8	; 0x08
     866:	f1 85       	ldd	r31, Z+9	; 0x09
     868:	e0 2d       	mov	r30, r0
     86a:	93 01       	movw	r18, r6
     86c:	a5 01       	movw	r20, r10
     86e:	ce 01       	movw	r24, r28
     870:	09 95       	icall
}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	df 90       	pop	r13
     880:	cf 90       	pop	r12
     882:	bf 90       	pop	r11
     884:	af 90       	pop	r10
     886:	9f 90       	pop	r9
     888:	8f 90       	pop	r8
     88a:	7f 90       	pop	r7
     88c:	6f 90       	pop	r6
     88e:	08 95       	ret

00000890 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
 int16_t h, uint16_t color) {
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	78 01       	movw	r14, r16
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
     89a:	dc 01       	movw	r26, r24
     89c:	ed 91       	ld	r30, X+
     89e:	fc 91       	ld	r31, X
     8a0:	24 0f       	add	r18, r20
     8a2:	35 1f       	adc	r19, r21
     8a4:	89 01       	movw	r16, r18
     8a6:	01 50       	subi	r16, 0x01	; 1
     8a8:	11 09       	sbc	r17, r1
     8aa:	06 80       	ldd	r0, Z+6	; 0x06
     8ac:	f7 81       	ldd	r31, Z+7	; 0x07
     8ae:	e0 2d       	mov	r30, r0
     8b0:	9b 01       	movw	r18, r22
     8b2:	09 95       	icall
}
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	08 95       	ret

000008be <_ZN12Adafruit_GFX13drawFastHLineEiiij>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
 int16_t w, uint16_t color) {
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
     8c6:	dc 01       	movw	r26, r24
     8c8:	ed 91       	ld	r30, X+
     8ca:	fc 91       	ld	r31, X
     8cc:	26 0f       	add	r18, r22
     8ce:	37 1f       	adc	r19, r23
     8d0:	21 50       	subi	r18, 0x01	; 1
     8d2:	31 09       	sbc	r19, r1
     8d4:	06 80       	ldd	r0, Z+6	; 0x06
     8d6:	f7 81       	ldd	r31, Z+7	; 0x07
     8d8:	e0 2d       	mov	r30, r0
     8da:	78 01       	movw	r14, r16
     8dc:	8a 01       	movw	r16, r20
     8de:	09 95       	icall
}
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	08 95       	ret

000008ea <_ZN12Adafruit_GFX8fillRectEiiiij>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
     8ea:	6f 92       	push	r6
     8ec:	7f 92       	push	r7
     8ee:	8f 92       	push	r8
     8f0:	9f 92       	push	r9
     8f2:	af 92       	push	r10
     8f4:	bf 92       	push	r11
     8f6:	cf 92       	push	r12
     8f8:	df 92       	push	r13
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	6c 01       	movw	r12, r24
     908:	5a 01       	movw	r10, r20
     90a:	48 01       	movw	r8, r16
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
     90c:	eb 01       	movw	r28, r22
     90e:	3b 01       	movw	r6, r22
     910:	62 0e       	add	r6, r18
     912:	73 1e       	adc	r7, r19
     914:	c6 15       	cp	r28, r6
     916:	d7 05       	cpc	r29, r7
     918:	74 f4       	brge	.+28     	; 0x936 <__stack+0x37>
    drawFastVLine(i, y, h, color);
     91a:	d6 01       	movw	r26, r12
     91c:	ed 91       	ld	r30, X+
     91e:	fc 91       	ld	r31, X
     920:	00 84       	ldd	r0, Z+8	; 0x08
     922:	f1 85       	ldd	r31, Z+9	; 0x09
     924:	e0 2d       	mov	r30, r0
     926:	87 01       	movw	r16, r14
     928:	94 01       	movw	r18, r8
     92a:	a5 01       	movw	r20, r10
     92c:	be 01       	movw	r22, r28
     92e:	c6 01       	movw	r24, r12
     930:	09 95       	icall
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
     932:	21 96       	adiw	r28, 0x01	; 1
     934:	ef cf       	rjmp	.-34     	; 0x914 <__stack+0x15>
    drawFastVLine(i, y, h, color);
  }
}
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	df 90       	pop	r13
     944:	cf 90       	pop	r12
     946:	bf 90       	pop	r11
     948:	af 90       	pop	r10
     94a:	9f 90       	pop	r9
     94c:	8f 90       	pop	r8
     94e:	7f 90       	pop	r7
     950:	6f 90       	pop	r6
     952:	08 95       	ret

00000954 <_ZN12Adafruit_GFX10fillScreenEj>:

void Adafruit_GFX::fillScreen(uint16_t color) {
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
  fillRect(0, 0, _width, _height, color);
     95c:	dc 01       	movw	r26, r24
     95e:	ed 91       	ld	r30, X+
     960:	fc 91       	ld	r31, X
     962:	11 97       	sbiw	r26, 0x01	; 1
     964:	1a 96       	adiw	r26, 0x0a	; 10
     966:	0d 91       	ld	r16, X+
     968:	1c 91       	ld	r17, X
     96a:	1b 97       	sbiw	r26, 0x0b	; 11
     96c:	18 96       	adiw	r26, 0x08	; 8
     96e:	2d 91       	ld	r18, X+
     970:	3c 91       	ld	r19, X
     972:	19 97       	sbiw	r26, 0x09	; 9
     974:	06 84       	ldd	r0, Z+14	; 0x0e
     976:	f7 85       	ldd	r31, Z+15	; 0x0f
     978:	e0 2d       	mov	r30, r0
     97a:	7b 01       	movw	r14, r22
     97c:	40 e0       	ldi	r20, 0x00	; 0
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	09 95       	icall
}
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	ff 90       	pop	r15
     98c:	ef 90       	pop	r14
     98e:	08 95       	ret

00000990 <_ZN12Adafruit_GFX13invertDisplayEb>:

int16_t Adafruit_GFX::height(void) const {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
     990:	08 95       	ret

00000992 <_ZN12Adafruit_GFXC1Eii>:

#ifndef _swap_int16_t
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
#endif

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
     992:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     994:	13 82       	std	Z+3, r1	; 0x03
     996:	12 82       	std	Z+2, r1	; 0x02
  WIDTH(w), HEIGHT(h)
     998:	8a e0       	ldi	r24, 0x0A	; 10
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	91 83       	std	Z+1, r25	; 0x01
     99e:	80 83       	st	Z, r24
     9a0:	75 83       	std	Z+5, r23	; 0x05
     9a2:	64 83       	std	Z+4, r22	; 0x04
     9a4:	57 83       	std	Z+7, r21	; 0x07
     9a6:	46 83       	std	Z+6, r20	; 0x06
{
  _width    = WIDTH;
     9a8:	71 87       	std	Z+9, r23	; 0x09
     9aa:	60 87       	std	Z+8, r22	; 0x08
  _height   = HEIGHT;
     9ac:	53 87       	std	Z+11, r21	; 0x0b
     9ae:	42 87       	std	Z+10, r20	; 0x0a
  rotation  = 0;
     9b0:	15 8a       	std	Z+21, r1	; 0x15
  cursor_y  = cursor_x    = 0;
     9b2:	15 86       	std	Z+13, r1	; 0x0d
     9b4:	14 86       	std	Z+12, r1	; 0x0c
     9b6:	17 86       	std	Z+15, r1	; 0x0f
     9b8:	16 86       	std	Z+14, r1	; 0x0e
  textsize  = 1;
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	84 8b       	std	Z+20, r24	; 0x14
  textcolor = textbgcolor = 0xFFFF;
     9be:	2f ef       	ldi	r18, 0xFF	; 255
     9c0:	3f ef       	ldi	r19, 0xFF	; 255
     9c2:	33 8b       	std	Z+19, r19	; 0x13
     9c4:	22 8b       	std	Z+18, r18	; 0x12
     9c6:	31 8b       	std	Z+17, r19	; 0x11
     9c8:	20 8b       	std	Z+16, r18	; 0x10
  wrap      = true;
     9ca:	86 8b       	std	Z+22, r24	; 0x16
  _cp437    = false;
     9cc:	17 8a       	std	Z+23, r1	; 0x17
  gfxFont   = NULL;
     9ce:	11 8e       	std	Z+25, r1	; 0x19
     9d0:	10 8e       	std	Z+24, r1	; 0x18
     9d2:	08 95       	ret

000009d4 <_ZN12Adafruit_GFX8drawCharEiihjjh>:
#endif
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
 uint16_t color, uint16_t bg, uint8_t size) {
     9d4:	2f 92       	push	r2
     9d6:	3f 92       	push	r3
     9d8:	4f 92       	push	r4
     9da:	5f 92       	push	r5
     9dc:	6f 92       	push	r6
     9de:	7f 92       	push	r7
     9e0:	8f 92       	push	r8
     9e2:	9f 92       	push	r9
     9e4:	af 92       	push	r10
     9e6:	bf 92       	push	r11
     9e8:	cf 92       	push	r12
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	69 97       	sbiw	r28, 0x19	; 25
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	cd bf       	out	0x3d, r28	; 61
     a08:	3c 01       	movw	r6, r24
     a0a:	4a 01       	movw	r8, r20
     a0c:	1f 83       	std	Y+7, r17	; 0x07
     a0e:	0e 83       	std	Y+6, r16	; 0x06
     a10:	fd 82       	std	Y+5, r15	; 0x05
     a12:	ec 82       	std	Y+4, r14	; 0x04
     a14:	ca 82       	std	Y+2, r12	; 0x02

  if(!gfxFont) { // 'Classic' built-in font
     a16:	dc 01       	movw	r26, r24
     a18:	58 96       	adiw	r26, 0x18	; 24
     a1a:	4d 91       	ld	r20, X+
     a1c:	5c 91       	ld	r21, X
     a1e:	59 97       	sbiw	r26, 0x19	; 25
     a20:	41 15       	cp	r20, r1
     a22:	51 05       	cpc	r21, r1
     a24:	09 f0       	breq	.+2      	; 0xa28 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x54>
     a26:	a8 c0       	rjmp	.+336    	; 0xb78 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1a4>

    if((x >= _width)            || // Clip right
     a28:	18 96       	adiw	r26, 0x08	; 8
     a2a:	8d 91       	ld	r24, X+
     a2c:	9c 91       	ld	r25, X
     a2e:	19 97       	sbiw	r26, 0x09	; 9
     a30:	68 17       	cp	r22, r24
     a32:	79 07       	cpc	r23, r25
     a34:	0c f0       	brlt	.+2      	; 0xa38 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x64>
     a36:	60 c1       	rjmp	.+704    	; 0xcf8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
     a38:	1a 96       	adiw	r26, 0x0a	; 10
     a3a:	8d 91       	ld	r24, X+
     a3c:	9c 91       	ld	r25, X
     a3e:	1b 97       	sbiw	r26, 0x0b	; 11
     a40:	88 16       	cp	r8, r24
     a42:	99 06       	cpc	r9, r25
     a44:	0c f0       	brlt	.+2      	; 0xa48 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x74>
     a46:	58 c1       	rjmp	.+688    	; 0xcf8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
       (y >= _height)           || // Clip bottom
       ((x + 6 * size - 1) < 0) || // Clip left
     a48:	d1 2c       	mov	r13, r1
     a4a:	cb 01       	movw	r24, r22
     a4c:	ea 81       	ldd	r30, Y+2	; 0x02
     a4e:	b6 e0       	ldi	r27, 0x06	; 6
     a50:	eb 9f       	mul	r30, r27
     a52:	80 0d       	add	r24, r0
     a54:	91 1d       	adc	r25, r1
     a56:	11 24       	eor	r1, r1
 uint16_t color, uint16_t bg, uint8_t size) {

  if(!gfxFont) { // 'Classic' built-in font

    if((x >= _width)            || // Clip right
       (y >= _height)           || // Clip bottom
     a58:	18 16       	cp	r1, r24
     a5a:	19 06       	cpc	r1, r25
     a5c:	0c f0       	brlt	.+2      	; 0xa60 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x8c>
     a5e:	4c c1       	rjmp	.+664    	; 0xcf8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
       ((x + 6 * size - 1) < 0) || // Clip left
       ((y + 8 * size - 1) < 0))   // Clip top
     a60:	c6 01       	movw	r24, r12
     a62:	33 e0       	ldi	r19, 0x03	; 3
     a64:	88 0f       	add	r24, r24
     a66:	99 1f       	adc	r25, r25
     a68:	3a 95       	dec	r19
     a6a:	e1 f7       	brne	.-8      	; 0xa64 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x90>
     a6c:	88 0d       	add	r24, r8
     a6e:	99 1d       	adc	r25, r9

  if(!gfxFont) { // 'Classic' built-in font

    if((x >= _width)            || // Clip right
       (y >= _height)           || // Clip bottom
       ((x + 6 * size - 1) < 0) || // Clip left
     a70:	18 16       	cp	r1, r24
     a72:	19 06       	cpc	r1, r25
     a74:	0c f0       	brlt	.+2      	; 0xa78 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xa4>
     a76:	40 c1       	rjmp	.+640    	; 0xcf8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
     a78:	d3 01       	movw	r26, r6
     a7a:	57 96       	adiw	r26, 0x17	; 23
     a7c:	8c 91       	ld	r24, X
     a7e:	81 11       	cpse	r24, r1
     a80:	03 c0       	rjmp	.+6      	; 0xa88 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xb4>
     a82:	20 3b       	cpi	r18, 0xB0	; 176
     a84:	08 f0       	brcs	.+2      	; 0xa88 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xb4>
     a86:	2f 5f       	subi	r18, 0xFF	; 255

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
     a88:	b5 e0       	ldi	r27, 0x05	; 5
     a8a:	2b 9f       	mul	r18, r27
     a8c:	90 01       	movw	r18, r0
     a8e:	11 24       	eor	r1, r1
     a90:	7e 87       	std	Y+14, r23	; 0x0e
     a92:	6d 87       	std	Y+13, r22	; 0x0d
     a94:	2b 01       	movw	r4, r22
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

    for(int8_t i=0; i<6; i++ ) {
     a96:	1b 82       	std	Y+3, r1	; 0x03
     a98:	f9 01       	movw	r30, r18
     a9a:	e6 1b       	sub	r30, r22
     a9c:	f7 0b       	sbc	r31, r23
     a9e:	f9 87       	std	Y+9, r31	; 0x09
     aa0:	e8 87       	std	Y+8, r30	; 0x08
     aa2:	94 01       	movw	r18, r8
     aa4:	28 5f       	subi	r18, 0xF8	; 248
     aa6:	3f 4f       	sbci	r19, 0xFF	; 255
     aa8:	3b 87       	std	Y+11, r19	; 0x0b
     aaa:	2a 87       	std	Y+10, r18	; 0x0a
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
     aac:	3b 81       	ldd	r19, Y+3	; 0x03
     aae:	35 30       	cpi	r19, 0x05	; 5
     ab0:	59 f0       	breq	.+22     	; 0xac8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xf4>
     ab2:	e8 85       	ldd	r30, Y+8	; 0x08
     ab4:	f9 85       	ldd	r31, Y+9	; 0x09
     ab6:	4d 85       	ldd	r20, Y+13	; 0x0d
     ab8:	5e 85       	ldd	r21, Y+14	; 0x0e
     aba:	e4 0f       	add	r30, r20
     abc:	f5 1f       	adc	r31, r21
     abe:	e8 59       	subi	r30, 0x98	; 152
     ac0:	ff 4f       	sbci	r31, 0xFF	; 255
     ac2:	54 91       	lpm	r21, Z
     ac4:	59 83       	std	Y+1, r21	; 0x01
     ac6:	01 c0       	rjmp	.+2      	; 0xaca <_ZN12Adafruit_GFX8drawCharEiihjjh+0xf6>
      else      line = 0x0;
     ac8:	19 82       	std	Y+1, r1	; 0x01
     aca:	14 01       	movw	r2, r8
     acc:	54 01       	movw	r10, r8
      for(int8_t j=0; j<8; j++, line >>= 1) {
        if(line & 0x1) {
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	80 ff       	sbrs	r24, 0
     ad2:	12 c0       	rjmp	.+36     	; 0xaf8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x124>
     ad4:	d3 01       	movw	r26, r6
     ad6:	ed 91       	ld	r30, X+
     ad8:	fc 91       	ld	r31, X
          if(size == 1) drawPixel(x+i, y+j, color);
     ada:	ba 81       	ldd	r27, Y+2	; 0x02
     adc:	b1 30       	cpi	r27, 0x01	; 1
     ade:	31 f4       	brne	.+12     	; 0xaec <_ZN12Adafruit_GFX8drawCharEiihjjh+0x118>
     ae0:	04 80       	ldd	r0, Z+4	; 0x04
     ae2:	f5 81       	ldd	r31, Z+5	; 0x05
     ae4:	e0 2d       	mov	r30, r0
     ae6:	2e 81       	ldd	r18, Y+6	; 0x06
     ae8:	3f 81       	ldd	r19, Y+7	; 0x07
     aea:	18 c0       	rjmp	.+48     	; 0xb1c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x148>
          else          fillRect(x+(i*size), y+(j*size), size, size, color);
     aec:	06 84       	ldd	r0, Z+14	; 0x0e
     aee:	f7 85       	ldd	r31, Z+15	; 0x0f
     af0:	e0 2d       	mov	r30, r0
     af2:	ee 80       	ldd	r14, Y+6	; 0x06
     af4:	ff 80       	ldd	r15, Y+7	; 0x07
     af6:	1d c0       	rjmp	.+58     	; 0xb32 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x15e>
        } else if(bg != color) {
     af8:	ec 81       	ldd	r30, Y+4	; 0x04
     afa:	fd 81       	ldd	r31, Y+5	; 0x05
     afc:	2e 81       	ldd	r18, Y+6	; 0x06
     afe:	3f 81       	ldd	r19, Y+7	; 0x07
     b00:	e2 17       	cp	r30, r18
     b02:	f3 07       	cpc	r31, r19
     b04:	e1 f0       	breq	.+56     	; 0xb3e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x16a>
     b06:	d3 01       	movw	r26, r6
     b08:	ed 91       	ld	r30, X+
     b0a:	fc 91       	ld	r31, X
          if(size == 1) drawPixel(x+i, y+j, bg);
     b0c:	ba 81       	ldd	r27, Y+2	; 0x02
     b0e:	b1 30       	cpi	r27, 0x01	; 1
     b10:	59 f4       	brne	.+22     	; 0xb28 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x154>
     b12:	04 80       	ldd	r0, Z+4	; 0x04
     b14:	f5 81       	ldd	r31, Z+5	; 0x05
     b16:	e0 2d       	mov	r30, r0
     b18:	2c 81       	ldd	r18, Y+4	; 0x04
     b1a:	3d 81       	ldd	r19, Y+5	; 0x05
     b1c:	a5 01       	movw	r20, r10
     b1e:	6d 85       	ldd	r22, Y+13	; 0x0d
     b20:	7e 85       	ldd	r23, Y+14	; 0x0e
     b22:	c3 01       	movw	r24, r6
     b24:	09 95       	icall
     b26:	0b c0       	rjmp	.+22     	; 0xb3e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x16a>
          else          fillRect(x+i*size, y+j*size, size, size, bg);
     b28:	06 84       	ldd	r0, Z+14	; 0x0e
     b2a:	f7 85       	ldd	r31, Z+15	; 0x0f
     b2c:	e0 2d       	mov	r30, r0
     b2e:	ec 80       	ldd	r14, Y+4	; 0x04
     b30:	fd 80       	ldd	r15, Y+5	; 0x05
     b32:	86 01       	movw	r16, r12
     b34:	96 01       	movw	r18, r12
     b36:	a1 01       	movw	r20, r2
     b38:	b2 01       	movw	r22, r4
     b3a:	c3 01       	movw	r24, r6
     b3c:	09 95       	icall

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
      else      line = 0x0;
      for(int8_t j=0; j<8; j++, line >>= 1) {
     b3e:	e9 81       	ldd	r30, Y+1	; 0x01
     b40:	e6 95       	lsr	r30
     b42:	e9 83       	std	Y+1, r30	; 0x01
     b44:	2c 0c       	add	r2, r12
     b46:	3d 1c       	adc	r3, r13
     b48:	ff ef       	ldi	r31, 0xFF	; 255
     b4a:	af 1a       	sub	r10, r31
     b4c:	bf 0a       	sbc	r11, r31
     b4e:	2a 85       	ldd	r18, Y+10	; 0x0a
     b50:	3b 85       	ldd	r19, Y+11	; 0x0b
     b52:	a2 16       	cp	r10, r18
     b54:	b3 06       	cpc	r11, r19
     b56:	09 f0       	breq	.+2      	; 0xb5a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x186>
     b58:	ba cf       	rjmp	.-140    	; 0xace <_ZN12Adafruit_GFX8drawCharEiihjjh+0xfa>
     b5a:	3b 81       	ldd	r19, Y+3	; 0x03
     b5c:	3f 5f       	subi	r19, 0xFF	; 255
     b5e:	3b 83       	std	Y+3, r19	; 0x03
     b60:	4c 0c       	add	r4, r12
     b62:	5d 1c       	adc	r5, r13
     b64:	4d 85       	ldd	r20, Y+13	; 0x0d
     b66:	5e 85       	ldd	r21, Y+14	; 0x0e
     b68:	4f 5f       	subi	r20, 0xFF	; 255
     b6a:	5f 4f       	sbci	r21, 0xFF	; 255
     b6c:	5e 87       	std	Y+14, r21	; 0x0e
     b6e:	4d 87       	std	Y+13, r20	; 0x0d
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

    for(int8_t i=0; i<6; i++ ) {
     b70:	36 30       	cpi	r19, 0x06	; 6
     b72:	09 f0       	breq	.+2      	; 0xb76 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1a2>
     b74:	9b cf       	rjmp	.-202    	; 0xaac <_ZN12Adafruit_GFX8drawCharEiihjjh+0xd8>
     b76:	c0 c0       	rjmp	.+384    	; 0xcf8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling drawChar()
    // directly with 'bad' characters of font may cause mayhem!

    c -= pgm_read_byte(&gfxFont->first);
     b78:	fa 01       	movw	r30, r20
     b7a:	34 96       	adiw	r30, 0x04	; 4
     b7c:	34 91       	lpm	r19, Z
    GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
     b7e:	32 97       	sbiw	r30, 0x02	; 2
     b80:	85 91       	lpm	r24, Z+
     b82:	94 91       	lpm	r25, Z

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling drawChar()
    // directly with 'bad' characters of font may cause mayhem!

    c -= pgm_read_byte(&gfxFont->first);
     b84:	23 1b       	sub	r18, r19
    GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
     b86:	a7 e0       	ldi	r26, 0x07	; 7
     b88:	2a 9f       	mul	r18, r26
     b8a:	80 0d       	add	r24, r0
     b8c:	91 1d       	adc	r25, r1
     b8e:	11 24       	eor	r1, r1
    uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
     b90:	fa 01       	movw	r30, r20
     b92:	25 91       	lpm	r18, Z+
     b94:	34 91       	lpm	r19, Z
     b96:	38 8b       	std	Y+16, r19	; 0x10
     b98:	2f 87       	std	Y+15, r18	; 0x0f

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
     b9a:	fc 01       	movw	r30, r24
     b9c:	25 90       	lpm	r2, Z+
     b9e:	34 90       	lpm	r3, Z
    uint8_t  w  = pgm_read_byte(&glyph->width),
     ba0:	fc 01       	movw	r30, r24
     ba2:	32 96       	adiw	r30, 0x02	; 2
     ba4:	34 91       	lpm	r19, Z
     ba6:	3b 83       	std	Y+3, r19	; 0x03
             h  = pgm_read_byte(&glyph->height),
     ba8:	31 96       	adiw	r30, 0x01	; 1
     baa:	44 91       	lpm	r20, Z
     bac:	4c 87       	std	Y+12, r20	; 0x0c
             xa = pgm_read_byte(&glyph->xAdvance);
     bae:	31 96       	adiw	r30, 0x01	; 1
     bb0:	e4 91       	lpm	r30, Z
    int8_t   xo = pgm_read_byte(&glyph->xOffset),
     bb2:	fc 01       	movw	r30, r24
     bb4:	35 96       	adiw	r30, 0x05	; 5
     bb6:	a4 91       	lpm	r26, Z
             yo = pgm_read_byte(&glyph->yOffset);
     bb8:	31 96       	adiw	r30, 0x01	; 1
     bba:	84 91       	lpm	r24, Z
    uint8_t  xx, yy, bits, bit = 0;
    int16_t  xo16, yo16;

    if(size > 1) {
     bbc:	5a 81       	ldd	r21, Y+2	; 0x02
     bbe:	52 30       	cpi	r21, 0x02	; 2
     bc0:	50 f0       	brcs	.+20     	; 0xbd6 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x202>
      xo16 = xo;
     bc2:	4a 2e       	mov	r4, r26
     bc4:	0a 2e       	mov	r0, r26
     bc6:	00 0c       	add	r0, r0
     bc8:	55 08       	sbc	r5, r5
      yo16 = yo;
     bca:	e8 2f       	mov	r30, r24
     bcc:	08 2e       	mov	r0, r24
     bce:	00 0c       	add	r0, r0
     bd0:	ff 0b       	sbc	r31, r31
     bd2:	f9 87       	std	Y+9, r31	; 0x09
     bd4:	e8 87       	std	Y+8, r30	; 0x08
     bd6:	fa 81       	ldd	r31, Y+2	; 0x02
     bd8:	cf 2e       	mov	r12, r31
     bda:	d1 2c       	mov	r13, r1
     bdc:	4c 9c       	mul	r4, r12
     bde:	90 01       	movw	r18, r0
     be0:	4d 9c       	mul	r4, r13
     be2:	30 0d       	add	r19, r0
     be4:	5c 9c       	mul	r5, r12
     be6:	30 0d       	add	r19, r0
     be8:	11 24       	eor	r1, r1
     bea:	a9 01       	movw	r20, r18
     bec:	46 0f       	add	r20, r22
     bee:	57 1f       	adc	r21, r23
     bf0:	5b 87       	std	Y+11, r21	; 0x0b
     bf2:	4a 87       	std	Y+10, r20	; 0x0a
    uint8_t  w  = pgm_read_byte(&glyph->width),
             h  = pgm_read_byte(&glyph->height),
             xa = pgm_read_byte(&glyph->xAdvance);
    int8_t   xo = pgm_read_byte(&glyph->xOffset),
             yo = pgm_read_byte(&glyph->yOffset);
    uint8_t  xx, yy, bits, bit = 0;
     bf4:	19 82       	std	Y+1, r1	; 0x01
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
     bf6:	a1 2c       	mov	r10, r1
     bf8:	ea 2f       	mov	r30, r26
     bfa:	aa 0f       	add	r26, r26
     bfc:	ff 0b       	sbc	r31, r31
     bfe:	db 01       	movw	r26, r22
     c00:	ae 0f       	add	r26, r30
     c02:	bf 1f       	adc	r27, r31
     c04:	bd 83       	std	Y+5, r27	; 0x05
     c06:	ac 83       	std	Y+4, r26	; 0x04
     c08:	bb 81       	ldd	r27, Y+3	; 0x03
     c0a:	6b 0f       	add	r22, r27
     c0c:	71 1d       	adc	r23, r1
     c0e:	9b 01       	movw	r18, r22
     c10:	2e 0f       	add	r18, r30
     c12:	3f 1f       	adc	r19, r31
     c14:	3d 8b       	std	Y+21, r19	; 0x15
     c16:	2c 8b       	std	Y+20, r18	; 0x14
        if(!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
     c18:	a4 01       	movw	r20, r8
     c1a:	48 0f       	add	r20, r24
     c1c:	51 1d       	adc	r21, r1
     c1e:	87 fd       	sbrc	r24, 7
     c20:	5a 95       	dec	r21
     c22:	5f 8b       	std	Y+23, r21	; 0x17
     c24:	4e 8b       	std	Y+22, r20	; 0x16
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
     c26:	9c 85       	ldd	r25, Y+12	; 0x0c
     c28:	a9 16       	cp	r10, r25
     c2a:	08 f0       	brcs	.+2      	; 0xc2e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x25a>
     c2c:	65 c0       	rjmp	.+202    	; 0xcf8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
          } else {
            fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
     c2e:	8a 2d       	mov	r24, r10
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	48 85       	ldd	r20, Y+8	; 0x08
     c34:	59 85       	ldd	r21, Y+9	; 0x09
     c36:	48 0f       	add	r20, r24
     c38:	59 1f       	adc	r21, r25
     c3a:	4c 9d       	mul	r20, r12
     c3c:	90 01       	movw	r18, r0
     c3e:	4d 9d       	mul	r20, r13
     c40:	30 0d       	add	r19, r0
     c42:	5c 9d       	mul	r21, r12
     c44:	30 0d       	add	r19, r0
     c46:	11 24       	eor	r1, r1
     c48:	d9 01       	movw	r26, r18
     c4a:	a8 0d       	add	r26, r8
     c4c:	b9 1d       	adc	r27, r9
     c4e:	be 87       	std	Y+14, r27	; 0x0e
     c50:	ad 87       	std	Y+13, r26	; 0x0d
     c52:	ec 81       	ldd	r30, Y+4	; 0x04
     c54:	fd 81       	ldd	r31, Y+5	; 0x05
     c56:	f9 8f       	std	Y+25, r31	; 0x19
     c58:	e8 8f       	std	Y+24, r30	; 0x18
     c5a:	4a 84       	ldd	r4, Y+10	; 0x0a
     c5c:	5b 84       	ldd	r5, Y+11	; 0x0b
     c5e:	f9 81       	ldd	r31, Y+1	; 0x01
     c60:	2c 81       	ldd	r18, Y+4	; 0x04
     c62:	f2 1b       	sub	r31, r18
     c64:	f9 8b       	std	Y+17, r31	; 0x11
        if(!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
     c66:	4e 89       	ldd	r20, Y+22	; 0x16
     c68:	5f 89       	ldd	r21, Y+23	; 0x17
     c6a:	48 0f       	add	r20, r24
     c6c:	59 1f       	adc	r21, r25
     c6e:	5b 8b       	std	Y+19, r21	; 0x13
     c70:	4a 8b       	std	Y+18, r20	; 0x12
     c72:	89 89       	ldd	r24, Y+17	; 0x11
     c74:	f8 8d       	ldd	r31, Y+24	; 0x18
     c76:	8f 0f       	add	r24, r31
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
      for(xx=0; xx<w; xx++) {
     c78:	28 8d       	ldd	r18, Y+24	; 0x18
     c7a:	39 8d       	ldd	r19, Y+25	; 0x19
     c7c:	4c 89       	ldd	r20, Y+20	; 0x14
     c7e:	5d 89       	ldd	r21, Y+21	; 0x15
     c80:	24 17       	cp	r18, r20
     c82:	35 07       	cpc	r19, r21
     c84:	99 f1       	breq	.+102    	; 0xcec <_ZN12Adafruit_GFX8drawCharEiihjjh+0x318>
        if(!(bit++ & 7)) {
     c86:	87 70       	andi	r24, 0x07	; 7
     c88:	41 f4       	brne	.+16     	; 0xc9a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2c6>
          bits = pgm_read_byte(&bitmap[bo++]);
     c8a:	c1 01       	movw	r24, r2
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	ef 85       	ldd	r30, Y+15	; 0x0f
     c90:	f8 89       	ldd	r31, Y+16	; 0x10
     c92:	e2 0d       	add	r30, r2
     c94:	f3 1d       	adc	r31, r3
     c96:	b4 90       	lpm	r11, Z
     c98:	1c 01       	movw	r2, r24
        }
        if(bits & 0x80) {
     c9a:	b7 fe       	sbrs	r11, 7
     c9c:	1e c0       	rjmp	.+60     	; 0xcda <_ZN12Adafruit_GFX8drawCharEiihjjh+0x306>
     c9e:	d3 01       	movw	r26, r6
     ca0:	ed 91       	ld	r30, X+
     ca2:	fc 91       	ld	r31, X
          if(size == 1) {
     ca4:	ba 81       	ldd	r27, Y+2	; 0x02
     ca6:	b1 30       	cpi	r27, 0x01	; 1
     ca8:	61 f4       	brne	.+24     	; 0xcc2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2ee>
            drawPixel(x+xo+xx, y+yo+yy, color);
     caa:	04 80       	ldd	r0, Z+4	; 0x04
     cac:	f5 81       	ldd	r31, Z+5	; 0x05
     cae:	e0 2d       	mov	r30, r0
     cb0:	2e 81       	ldd	r18, Y+6	; 0x06
     cb2:	3f 81       	ldd	r19, Y+7	; 0x07
     cb4:	4a 89       	ldd	r20, Y+18	; 0x12
     cb6:	5b 89       	ldd	r21, Y+19	; 0x13
     cb8:	68 8d       	ldd	r22, Y+24	; 0x18
     cba:	79 8d       	ldd	r23, Y+25	; 0x19
     cbc:	c3 01       	movw	r24, r6
     cbe:	09 95       	icall
     cc0:	0c c0       	rjmp	.+24     	; 0xcda <_ZN12Adafruit_GFX8drawCharEiihjjh+0x306>
          } else {
            fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
     cc2:	06 84       	ldd	r0, Z+14	; 0x0e
     cc4:	f7 85       	ldd	r31, Z+15	; 0x0f
     cc6:	e0 2d       	mov	r30, r0
     cc8:	ee 80       	ldd	r14, Y+6	; 0x06
     cca:	ff 80       	ldd	r15, Y+7	; 0x07
     ccc:	86 01       	movw	r16, r12
     cce:	96 01       	movw	r18, r12
     cd0:	4d 85       	ldd	r20, Y+13	; 0x0d
     cd2:	5e 85       	ldd	r21, Y+14	; 0x0e
     cd4:	b2 01       	movw	r22, r4
     cd6:	c3 01       	movw	r24, r6
     cd8:	09 95       	icall
          }
        }
        bits <<= 1;
     cda:	bb 0c       	add	r11, r11
     cdc:	4c 0c       	add	r4, r12
     cde:	5d 1c       	adc	r5, r13
     ce0:	e8 8d       	ldd	r30, Y+24	; 0x18
     ce2:	f9 8d       	ldd	r31, Y+25	; 0x19
     ce4:	31 96       	adiw	r30, 0x01	; 1
     ce6:	f9 8f       	std	Y+25, r31	; 0x19
     ce8:	e8 8f       	std	Y+24, r30	; 0x18
     cea:	c3 cf       	rjmp	.-122    	; 0xc72 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x29e>
     cec:	59 81       	ldd	r21, Y+1	; 0x01
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	58 0f       	add	r21, r24
     cf2:	59 83       	std	Y+1, r21	; 0x01
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
     cf4:	a3 94       	inc	r10
     cf6:	97 cf       	rjmp	.-210    	; 0xc26 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x252>
        bits <<= 1;
      }
    }

  } // End classic vs custom font
}
     cf8:	69 96       	adiw	r28, 0x19	; 25
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	ff 90       	pop	r15
     d0e:	ef 90       	pop	r14
     d10:	df 90       	pop	r13
     d12:	cf 90       	pop	r12
     d14:	bf 90       	pop	r11
     d16:	af 90       	pop	r10
     d18:	9f 90       	pop	r9
     d1a:	8f 90       	pop	r8
     d1c:	7f 90       	pop	r7
     d1e:	6f 90       	pop	r6
     d20:	5f 90       	pop	r5
     d22:	4f 90       	pop	r4
     d24:	3f 90       	pop	r3
     d26:	2f 90       	pop	r2
     d28:	08 95       	ret

00000d2a <_ZN12Adafruit_GFX5writeEh>:
    }
  }
}

#if ARDUINO >= 100
size_t Adafruit_GFX::write(uint8_t c) {
     d2a:	af 92       	push	r10
     d2c:	bf 92       	push	r11
     d2e:	cf 92       	push	r12
     d30:	ef 92       	push	r14
     d32:	ff 92       	push	r15
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	ec 01       	movw	r28, r24
     d3e:	26 2f       	mov	r18, r22
#else
void Adafruit_GFX::write(uint8_t c) {
#endif

  if(!gfxFont) { // 'Classic' built-in font
     d40:	88 8d       	ldd	r24, Y+24	; 0x18
     d42:	99 8d       	ldd	r25, Y+25	; 0x19
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	09 f0       	breq	.+2      	; 0xd4a <_ZN12Adafruit_GFX5writeEh+0x20>
     d48:	42 c0       	rjmp	.+132    	; 0xdce <_ZN12Adafruit_GFX5writeEh+0xa4>

    if(c == '\n') {
     d4a:	6a 30       	cpi	r22, 0x0A	; 10
     d4c:	69 f4       	brne	.+26     	; 0xd68 <_ZN12Adafruit_GFX5writeEh+0x3e>
      cursor_y += textsize*8;
     d4e:	2c 89       	ldd	r18, Y+20	; 0x14
     d50:	8e 85       	ldd	r24, Y+14	; 0x0e
     d52:	9f 85       	ldd	r25, Y+15	; 0x0f
     d54:	38 e0       	ldi	r19, 0x08	; 8
     d56:	23 9f       	mul	r18, r19
     d58:	80 0d       	add	r24, r0
     d5a:	91 1d       	adc	r25, r1
     d5c:	11 24       	eor	r1, r1
     d5e:	9f 87       	std	Y+15, r25	; 0x0f
     d60:	8e 87       	std	Y+14, r24	; 0x0e
      cursor_x  = 0;
     d62:	1d 86       	std	Y+13, r1	; 0x0d
     d64:	1c 86       	std	Y+12, r1	; 0x0c
     d66:	ac c0       	rjmp	.+344    	; 0xec0 <_ZN12Adafruit_GFX5writeEh+0x196>
    } else if(c == '\r') {
     d68:	6d 30       	cpi	r22, 0x0D	; 13
     d6a:	09 f4       	brne	.+2      	; 0xd6e <_ZN12Adafruit_GFX5writeEh+0x44>
     d6c:	a9 c0       	rjmp	.+338    	; 0xec0 <_ZN12Adafruit_GFX5writeEh+0x196>
      // skip em
    } else {
      if(wrap && ((cursor_x + textsize * 6) >= _width)) { // Heading off edge?
     d6e:	8e 89       	ldd	r24, Y+22	; 0x16
     d70:	88 23       	and	r24, r24
     d72:	c1 f0       	breq	.+48     	; 0xda4 <_ZN12Adafruit_GFX5writeEh+0x7a>
     d74:	3c 89       	ldd	r19, Y+20	; 0x14
     d76:	8c 85       	ldd	r24, Y+12	; 0x0c
     d78:	9d 85       	ldd	r25, Y+13	; 0x0d
     d7a:	46 e0       	ldi	r20, 0x06	; 6
     d7c:	34 9f       	mul	r19, r20
     d7e:	80 0d       	add	r24, r0
     d80:	91 1d       	adc	r25, r1
     d82:	11 24       	eor	r1, r1
     d84:	48 85       	ldd	r20, Y+8	; 0x08
     d86:	59 85       	ldd	r21, Y+9	; 0x09
     d88:	84 17       	cp	r24, r20
     d8a:	95 07       	cpc	r25, r21
     d8c:	5c f0       	brlt	.+22     	; 0xda4 <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x  = 0;            // Reset x to zero
     d8e:	1d 86       	std	Y+13, r1	; 0x0d
     d90:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize * 8; // Advance y one line
     d92:	8e 85       	ldd	r24, Y+14	; 0x0e
     d94:	9f 85       	ldd	r25, Y+15	; 0x0f
     d96:	e8 e0       	ldi	r30, 0x08	; 8
     d98:	3e 9f       	mul	r19, r30
     d9a:	80 0d       	add	r24, r0
     d9c:	91 1d       	adc	r25, r1
     d9e:	11 24       	eor	r1, r1
     da0:	9f 87       	std	Y+15, r25	; 0x0f
     da2:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
     da4:	ea 88       	ldd	r14, Y+18	; 0x12
     da6:	fb 88       	ldd	r15, Y+19	; 0x13
     da8:	08 89       	ldd	r16, Y+16	; 0x10
     daa:	19 89       	ldd	r17, Y+17	; 0x11
     dac:	4e 85       	ldd	r20, Y+14	; 0x0e
     dae:	5f 85       	ldd	r21, Y+15	; 0x0f
     db0:	6c 85       	ldd	r22, Y+12	; 0x0c
     db2:	7d 85       	ldd	r23, Y+13	; 0x0d
     db4:	cc 88       	ldd	r12, Y+20	; 0x14
     db6:	ce 01       	movw	r24, r28
     db8:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN12Adafruit_GFX8drawCharEiihjjh>
      cursor_x += textsize * 6;
     dbc:	2c 89       	ldd	r18, Y+20	; 0x14
     dbe:	8c 85       	ldd	r24, Y+12	; 0x0c
     dc0:	9d 85       	ldd	r25, Y+13	; 0x0d
     dc2:	f6 e0       	ldi	r31, 0x06	; 6
     dc4:	2f 9f       	mul	r18, r31
     dc6:	80 0d       	add	r24, r0
     dc8:	91 1d       	adc	r25, r1
     dca:	11 24       	eor	r1, r1
     dcc:	41 c0       	rjmp	.+130    	; 0xe50 <_ZN12Adafruit_GFX5writeEh+0x126>
    }

  } else { // Custom font

    if(c == '\n') {
     dce:	6a 30       	cpi	r22, 0x0A	; 10
     dd0:	79 f4       	brne	.+30     	; 0xdf0 <_ZN12Adafruit_GFX5writeEh+0xc6>
      cursor_x  = 0;
     dd2:	1d 86       	std	Y+13, r1	; 0x0d
     dd4:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += (int16_t)textsize *
     dd6:	2c 89       	ldd	r18, Y+20	; 0x14
                  (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
     dd8:	fc 01       	movw	r30, r24
     dda:	36 96       	adiw	r30, 0x06	; 6
     ddc:	e4 91       	lpm	r30, Z
     dde:	8e 85       	ldd	r24, Y+14	; 0x0e
     de0:	9f 85       	ldd	r25, Y+15	; 0x0f
     de2:	2e 9f       	mul	r18, r30
     de4:	80 0d       	add	r24, r0
     de6:	91 1d       	adc	r25, r1
     de8:	11 24       	eor	r1, r1
     dea:	9f 87       	std	Y+15, r25	; 0x0f
     dec:	8e 87       	std	Y+14, r24	; 0x0e
     dee:	68 c0       	rjmp	.+208    	; 0xec0 <_ZN12Adafruit_GFX5writeEh+0x196>
    } else if(c != '\r') {
     df0:	6d 30       	cpi	r22, 0x0D	; 13
     df2:	09 f4       	brne	.+2      	; 0xdf6 <_ZN12Adafruit_GFX5writeEh+0xcc>
     df4:	65 c0       	rjmp	.+202    	; 0xec0 <_ZN12Adafruit_GFX5writeEh+0x196>
      uint8_t first = pgm_read_byte(&gfxFont->first);
     df6:	ac 01       	movw	r20, r24
     df8:	4c 5f       	subi	r20, 0xFC	; 252
     dfa:	5f 4f       	sbci	r21, 0xFF	; 255
     dfc:	fa 01       	movw	r30, r20
     dfe:	34 91       	lpm	r19, Z
      if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
     e00:	63 17       	cp	r22, r19
     e02:	08 f4       	brcc	.+2      	; 0xe06 <_ZN12Adafruit_GFX5writeEh+0xdc>
     e04:	5d c0       	rjmp	.+186    	; 0xec0 <_ZN12Adafruit_GFX5writeEh+0x196>
     e06:	31 96       	adiw	r30, 0x01	; 1
     e08:	e4 91       	lpm	r30, Z
     e0a:	e6 17       	cp	r30, r22
     e0c:	08 f4       	brcc	.+2      	; 0xe10 <_ZN12Adafruit_GFX5writeEh+0xe6>
     e0e:	58 c0       	rjmp	.+176    	; 0xec0 <_ZN12Adafruit_GFX5writeEh+0x196>
        uint8_t   c2    = c - pgm_read_byte(&gfxFont->first);
     e10:	fa 01       	movw	r30, r20
     e12:	44 91       	lpm	r20, Z
     e14:	36 2f       	mov	r19, r22
     e16:	34 1b       	sub	r19, r20
        GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c2]);
     e18:	fc 01       	movw	r30, r24
     e1a:	32 96       	adiw	r30, 0x02	; 2
     e1c:	a5 90       	lpm	r10, Z+
     e1e:	b4 90       	lpm	r11, Z
     e20:	f7 e0       	ldi	r31, 0x07	; 7
     e22:	3f 9f       	mul	r19, r31
     e24:	a0 0c       	add	r10, r0
     e26:	b1 1c       	adc	r11, r1
     e28:	11 24       	eor	r1, r1
        uint8_t   w     = pgm_read_byte(&glyph->width),
     e2a:	f5 01       	movw	r30, r10
     e2c:	32 96       	adiw	r30, 0x02	; 2
     e2e:	34 91       	lpm	r19, Z
                  h     = pgm_read_byte(&glyph->height);
     e30:	31 96       	adiw	r30, 0x01	; 1
     e32:	e4 91       	lpm	r30, Z
        if((w > 0) && (h > 0)) { // Is there an associated bitmap?
     e34:	33 23       	and	r19, r19
     e36:	11 f0       	breq	.+4      	; 0xe3c <_ZN12Adafruit_GFX5writeEh+0x112>
     e38:	e1 11       	cpse	r30, r1
     e3a:	0d c0       	rjmp	.+26     	; 0xe56 <_ZN12Adafruit_GFX5writeEh+0x12c>
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
        }
        cursor_x += pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
     e3c:	f5 01       	movw	r30, r10
     e3e:	34 96       	adiw	r30, 0x04	; 4
     e40:	e4 91       	lpm	r30, Z
     e42:	2c 89       	ldd	r18, Y+20	; 0x14
     e44:	8c 85       	ldd	r24, Y+12	; 0x0c
     e46:	9d 85       	ldd	r25, Y+13	; 0x0d
     e48:	e2 9f       	mul	r30, r18
     e4a:	80 0d       	add	r24, r0
     e4c:	91 1d       	adc	r25, r1
     e4e:	11 24       	eor	r1, r1
     e50:	9d 87       	std	Y+13, r25	; 0x0d
     e52:	8c 87       	std	Y+12, r24	; 0x0c
     e54:	35 c0       	rjmp	.+106    	; 0xec0 <_ZN12Adafruit_GFX5writeEh+0x196>
        uint8_t   c2    = c - pgm_read_byte(&gfxFont->first);
        GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c2]);
        uint8_t   w     = pgm_read_byte(&glyph->width),
                  h     = pgm_read_byte(&glyph->height);
        if((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
     e56:	f5 01       	movw	r30, r10
     e58:	35 96       	adiw	r30, 0x05	; 5
     e5a:	44 91       	lpm	r20, Z
          if(wrap && ((cursor_x + textsize * (xo + w)) >= _width)) {
     e5c:	5e 89       	ldd	r21, Y+22	; 0x16
     e5e:	55 23       	and	r21, r21
     e60:	11 f1       	breq	.+68     	; 0xea6 <_ZN12Adafruit_GFX5writeEh+0x17c>
     e62:	6c 89       	ldd	r22, Y+20	; 0x14
     e64:	e3 2f       	mov	r30, r19
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	e4 0f       	add	r30, r20
     e6a:	f1 1d       	adc	r31, r1
     e6c:	47 fd       	sbrc	r20, 7
     e6e:	fa 95       	dec	r31
     e70:	6e 9f       	mul	r22, r30
     e72:	d0 01       	movw	r26, r0
     e74:	6f 9f       	mul	r22, r31
     e76:	b0 0d       	add	r27, r0
     e78:	11 24       	eor	r1, r1
     e7a:	4c 85       	ldd	r20, Y+12	; 0x0c
     e7c:	5d 85       	ldd	r21, Y+13	; 0x0d
     e7e:	4a 0f       	add	r20, r26
     e80:	5b 1f       	adc	r21, r27
     e82:	e8 85       	ldd	r30, Y+8	; 0x08
     e84:	f9 85       	ldd	r31, Y+9	; 0x09
     e86:	4e 17       	cp	r20, r30
     e88:	5f 07       	cpc	r21, r31
     e8a:	6c f0       	brlt	.+26     	; 0xea6 <_ZN12Adafruit_GFX5writeEh+0x17c>
            // Drawing character would go off right edge; wrap to new line
            cursor_x  = 0;
     e8c:	1d 86       	std	Y+13, r1	; 0x0d
     e8e:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
     e90:	fc 01       	movw	r30, r24
     e92:	36 96       	adiw	r30, 0x06	; 6
     e94:	e4 91       	lpm	r30, Z
     e96:	8e 85       	ldd	r24, Y+14	; 0x0e
     e98:	9f 85       	ldd	r25, Y+15	; 0x0f
     e9a:	6e 9f       	mul	r22, r30
     e9c:	80 0d       	add	r24, r0
     e9e:	91 1d       	adc	r25, r1
     ea0:	11 24       	eor	r1, r1
     ea2:	9f 87       	std	Y+15, r25	; 0x0f
     ea4:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
     ea6:	ea 88       	ldd	r14, Y+18	; 0x12
     ea8:	fb 88       	ldd	r15, Y+19	; 0x13
     eaa:	08 89       	ldd	r16, Y+16	; 0x10
     eac:	19 89       	ldd	r17, Y+17	; 0x11
     eae:	4e 85       	ldd	r20, Y+14	; 0x0e
     eb0:	5f 85       	ldd	r21, Y+15	; 0x0f
     eb2:	6c 85       	ldd	r22, Y+12	; 0x0c
     eb4:	7d 85       	ldd	r23, Y+13	; 0x0d
     eb6:	cc 88       	ldd	r12, Y+20	; 0x14
     eb8:	ce 01       	movw	r24, r28
     eba:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN12Adafruit_GFX8drawCharEiihjjh>
     ebe:	be cf       	rjmp	.-132    	; 0xe3c <_ZN12Adafruit_GFX5writeEh+0x112>

  }
#if ARDUINO >= 100
  return 1;
#endif
}
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	ff 90       	pop	r15
     ece:	ef 90       	pop	r14
     ed0:	cf 90       	pop	r12
     ed2:	bf 90       	pop	r11
     ed4:	af 90       	pop	r10
     ed6:	08 95       	ret

00000ed8 <_ZN8MsTimer23setEmPFvvE>:
#endif

void MsTimer2::set(unsigned long ms, void (*f)()) {
	float prescaler = 0.0;
	
	if (ms == 0)
     ed8:	61 15       	cp	r22, r1
     eda:	71 05       	cpc	r23, r1
     edc:	81 05       	cpc	r24, r1
     ede:	91 05       	cpc	r25, r1
     ee0:	69 f4       	brne	.+26     	; 0xefc <_ZN8MsTimer23setEmPFvvE+0x24>
		msecs = 1;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	a0 e0       	ldi	r26, 0x00	; 0
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	80 93 8f 01 	sts	0x018F, r24
     eee:	90 93 90 01 	sts	0x0190, r25
     ef2:	a0 93 91 01 	sts	0x0191, r26
     ef6:	b0 93 92 01 	sts	0x0192, r27
     efa:	08 c0       	rjmp	.+16     	; 0xf0c <_ZN8MsTimer23setEmPFvvE+0x34>
	else
		msecs = ms;
     efc:	60 93 8f 01 	sts	0x018F, r22
     f00:	70 93 90 01 	sts	0x0190, r23
     f04:	80 93 91 01 	sts	0x0191, r24
     f08:	90 93 92 01 	sts	0x0192, r25
		
	func = f;
     f0c:	50 93 8e 01 	sts	0x018E, r21
     f10:	40 93 8d 01 	sts	0x018D, r20

#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TIMSK2 &= ~(1<<TOIE2);
     f14:	80 91 70 00 	lds	r24, 0x0070
     f18:	8e 7f       	andi	r24, 0xFE	; 254
     f1a:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~((1<<WGM21) | (1<<WGM20));
     f1e:	80 91 b0 00 	lds	r24, 0x00B0
     f22:	8c 7f       	andi	r24, 0xFC	; 252
     f24:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B &= ~(1<<WGM22);
     f28:	80 91 b1 00 	lds	r24, 0x00B1
     f2c:	87 7f       	andi	r24, 0xF7	; 247
     f2e:	80 93 b1 00 	sts	0x00B1, r24
	ASSR &= ~(1<<AS2);
     f32:	80 91 b6 00 	lds	r24, 0x00B6
     f36:	8f 7d       	andi	r24, 0xDF	; 223
     f38:	80 93 b6 00 	sts	0x00B6, r24
	TIMSK2 &= ~(1<<OCIE2A);
     f3c:	80 91 70 00 	lds	r24, 0x0070
     f40:	8d 7f       	andi	r24, 0xFD	; 253
     f42:	80 93 70 00 	sts	0x0070, r24
	
	if ((F_CPU >= 1000000UL) && (F_CPU <= 16000000UL)) {	// prescaler set to 64
		TCCR2B |= (1<<CS22);
     f46:	80 91 b1 00 	lds	r24, 0x00B1
     f4a:	84 60       	ori	r24, 0x04	; 4
     f4c:	80 93 b1 00 	sts	0x00B1, r24
		TCCR2B &= ~((1<<CS21) | (1<<CS20));
     f50:	80 91 b1 00 	lds	r24, 0x00B1
     f54:	8c 7f       	andi	r24, 0xFC	; 252
     f56:	80 93 b1 00 	sts	0x00B1, r24
	// nothing needed here
#else
#error Unsupported CPU type
#endif

	tcnt2 = 256 - (int)((float)F_CPU * 0.001 / prescaler);
     f5a:	86 e0       	ldi	r24, 0x06	; 6
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	90 93 87 01 	sts	0x0187, r25
     f62:	80 93 86 01 	sts	0x0186, r24
     f66:	08 95       	ret

00000f68 <_ZN8MsTimer25startEv>:
}

void MsTimer2::start() {
	count = 0;
     f68:	10 92 89 01 	sts	0x0189, r1
     f6c:	10 92 8a 01 	sts	0x018A, r1
     f70:	10 92 8b 01 	sts	0x018B, r1
     f74:	10 92 8c 01 	sts	0x018C, r1
	overflowing = 0;
     f78:	10 92 88 01 	sts	0x0188, r1
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined (__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TCNT2 = tcnt2;
     f7c:	80 91 86 01 	lds	r24, 0x0186
     f80:	90 91 87 01 	lds	r25, 0x0187
     f84:	80 93 b2 00 	sts	0x00B2, r24
	TIMSK2 |= (1<<TOIE2);
     f88:	e0 e7       	ldi	r30, 0x70	; 112
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	81 60       	ori	r24, 0x01	; 1
     f90:	80 83       	st	Z, r24
     f92:	08 95       	ret

00000f94 <_ZN8MsTimer29_overflowEv>:
	itimer.end();
#endif
}

void MsTimer2::_overflow() {
	count += 1;
     f94:	80 91 89 01 	lds	r24, 0x0189
     f98:	90 91 8a 01 	lds	r25, 0x018A
     f9c:	a0 91 8b 01 	lds	r26, 0x018B
     fa0:	b0 91 8c 01 	lds	r27, 0x018C
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	a1 1d       	adc	r26, r1
     fa8:	b1 1d       	adc	r27, r1
     faa:	80 93 89 01 	sts	0x0189, r24
     fae:	90 93 8a 01 	sts	0x018A, r25
     fb2:	a0 93 8b 01 	sts	0x018B, r26
     fb6:	b0 93 8c 01 	sts	0x018C, r27
	
	if (count >= msecs && !overflowing) {
     fba:	80 91 89 01 	lds	r24, 0x0189
     fbe:	90 91 8a 01 	lds	r25, 0x018A
     fc2:	a0 91 8b 01 	lds	r26, 0x018B
     fc6:	b0 91 8c 01 	lds	r27, 0x018C
     fca:	40 91 8f 01 	lds	r20, 0x018F
     fce:	50 91 90 01 	lds	r21, 0x0190
     fd2:	60 91 91 01 	lds	r22, 0x0191
     fd6:	70 91 92 01 	lds	r23, 0x0192
     fda:	84 17       	cp	r24, r20
     fdc:	95 07       	cpc	r25, r21
     fde:	a6 07       	cpc	r26, r22
     fe0:	b7 07       	cpc	r27, r23
     fe2:	10 f1       	brcs	.+68     	; 0x1028 <_ZN8MsTimer29_overflowEv+0x94>
     fe4:	80 91 88 01 	lds	r24, 0x0188
     fe8:	81 11       	cpse	r24, r1
     fea:	1e c0       	rjmp	.+60     	; 0x1028 <_ZN8MsTimer29_overflowEv+0x94>
		overflowing = 1;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	80 93 88 01 	sts	0x0188, r24
		count = count - msecs; // subtract ms to catch missed overflows
     ff2:	80 91 89 01 	lds	r24, 0x0189
     ff6:	90 91 8a 01 	lds	r25, 0x018A
     ffa:	a0 91 8b 01 	lds	r26, 0x018B
     ffe:	b0 91 8c 01 	lds	r27, 0x018C
    1002:	84 1b       	sub	r24, r20
    1004:	95 0b       	sbc	r25, r21
    1006:	a6 0b       	sbc	r26, r22
    1008:	b7 0b       	sbc	r27, r23
    100a:	80 93 89 01 	sts	0x0189, r24
    100e:	90 93 8a 01 	sts	0x018A, r25
    1012:	a0 93 8b 01 	sts	0x018B, r26
    1016:	b0 93 8c 01 	sts	0x018C, r27
					// set to 0 if you don't want this.
		(*func)();
    101a:	e0 91 8d 01 	lds	r30, 0x018D
    101e:	f0 91 8e 01 	lds	r31, 0x018E
    1022:	09 95       	icall
		overflowing = 0;
    1024:	10 92 88 01 	sts	0x0188, r1
    1028:	08 95       	ret

0000102a <__vector_9>:

#if defined (__AVR__)
#if defined (__AVR_ATmega32U4__)
ISR(TIMER4_OVF_vect) {
#else
ISR(TIMER2_OVF_vect) {
    102a:	1f 92       	push	r1
    102c:	0f 92       	push	r0
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	0f 92       	push	r0
    1032:	11 24       	eor	r1, r1
    1034:	2f 93       	push	r18
    1036:	3f 93       	push	r19
    1038:	4f 93       	push	r20
    103a:	5f 93       	push	r21
    103c:	6f 93       	push	r22
    103e:	7f 93       	push	r23
    1040:	8f 93       	push	r24
    1042:	9f 93       	push	r25
    1044:	af 93       	push	r26
    1046:	bf 93       	push	r27
    1048:	ef 93       	push	r30
    104a:	ff 93       	push	r31
#endif
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined (__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TCNT2 = MsTimer2::tcnt2;
    104c:	80 91 86 01 	lds	r24, 0x0186
    1050:	90 91 87 01 	lds	r25, 0x0187
    1054:	80 93 b2 00 	sts	0x00B2, r24
#elif defined (__AVR_ATmega8__)
	TCNT2 = MsTimer2::tcnt2;
#elif defined (__AVR_ATmega32U4__)
	// not necessary on 32u4's high speed timer4
#endif
	MsTimer2::_overflow();
    1058:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN8MsTimer29_overflowEv>
}
    105c:	ff 91       	pop	r31
    105e:	ef 91       	pop	r30
    1060:	bf 91       	pop	r27
    1062:	af 91       	pop	r26
    1064:	9f 91       	pop	r25
    1066:	8f 91       	pop	r24
    1068:	7f 91       	pop	r23
    106a:	6f 91       	pop	r22
    106c:	5f 91       	pop	r21
    106e:	4f 91       	pop	r20
    1070:	3f 91       	pop	r19
    1072:	2f 91       	pop	r18
    1074:	0f 90       	pop	r0
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	0f 90       	pop	r0
    107a:	1f 90       	pop	r1
    107c:	18 95       	reti

0000107e <_ZN14RGBmatrixPanel9drawPixelEiij>:
  return (r << 12) | ((r & 0x8) << 8) | // 4/4/4 -> 5/6/5
         (g <<  7) | ((g & 0xC) << 3) |
         (b <<  1) | ( b        >> 3);
}

void RGBmatrixPanel::drawPixel(int16_t x, int16_t y, uint16_t c) {
    107e:	cf 92       	push	r12
    1080:	df 92       	push	r13
    1082:	ef 92       	push	r14
    1084:	ff 92       	push	r15
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	dc 01       	movw	r26, r24
  uint8_t r, g, b, bit, limit, *ptr;

  if((x < 0) || (x >= _width) || (y < 0) || (y >= _height)) return;
    1090:	77 fd       	sbrc	r23, 7
    1092:	22 c1       	rjmp	.+580    	; 0x12d8 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
    1094:	18 96       	adiw	r26, 0x08	; 8
    1096:	8d 91       	ld	r24, X+
    1098:	9c 91       	ld	r25, X
    109a:	19 97       	sbiw	r26, 0x09	; 9
    109c:	68 17       	cp	r22, r24
    109e:	79 07       	cpc	r23, r25
    10a0:	0c f0       	brlt	.+2      	; 0x10a4 <_ZN14RGBmatrixPanel9drawPixelEiij+0x26>
    10a2:	1a c1       	rjmp	.+564    	; 0x12d8 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
    10a4:	57 fd       	sbrc	r21, 7
    10a6:	18 c1       	rjmp	.+560    	; 0x12d8 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
    10a8:	1a 96       	adiw	r26, 0x0a	; 10
    10aa:	8d 91       	ld	r24, X+
    10ac:	9c 91       	ld	r25, X
    10ae:	1b 97       	sbiw	r26, 0x0b	; 11
    10b0:	48 17       	cp	r20, r24
    10b2:	59 07       	cpc	r21, r25
    10b4:	0c f0       	brlt	.+2      	; 0x10b8 <_ZN14RGBmatrixPanel9drawPixelEiij+0x3a>
    10b6:	10 c1       	rjmp	.+544    	; 0x12d8 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>

  switch(rotation) {
    10b8:	55 96       	adiw	r26, 0x15	; 21
    10ba:	ec 91       	ld	r30, X
    10bc:	55 97       	sbiw	r26, 0x15	; 21
    10be:	14 96       	adiw	r26, 0x04	; 4
    10c0:	8d 91       	ld	r24, X+
    10c2:	9c 91       	ld	r25, X
    10c4:	15 97       	sbiw	r26, 0x05	; 5
    10c6:	e2 30       	cpi	r30, 0x02	; 2
    10c8:	59 f0       	breq	.+22     	; 0x10e0 <_ZN14RGBmatrixPanel9drawPixelEiij+0x62>
    10ca:	e3 30       	cpi	r30, 0x03	; 3
    10cc:	c9 f0       	breq	.+50     	; 0x1100 <_ZN14RGBmatrixPanel9drawPixelEiij+0x82>
    10ce:	e1 30       	cpi	r30, 0x01	; 1
    10d0:	01 f5       	brne	.+64     	; 0x1112 <_ZN14RGBmatrixPanel9drawPixelEiij+0x94>
   case 1:
    _swap_int16_t(x, y);
    x = WIDTH  - 1 - x;
    10d2:	fc 01       	movw	r30, r24
    10d4:	31 97       	sbiw	r30, 0x01	; 1
    10d6:	e4 1b       	sub	r30, r20
    10d8:	f5 0b       	sbc	r31, r21
    10da:	ab 01       	movw	r20, r22
    10dc:	bf 01       	movw	r22, r30
    10de:	19 c0       	rjmp	.+50     	; 0x1112 <_ZN14RGBmatrixPanel9drawPixelEiij+0x94>
    break;
   case 2:
    x = WIDTH  - 1 - x;
    10e0:	fc 01       	movw	r30, r24
    10e2:	31 97       	sbiw	r30, 0x01	; 1
    10e4:	ef 01       	movw	r28, r30
    10e6:	c6 1b       	sub	r28, r22
    10e8:	d7 0b       	sbc	r29, r23
    10ea:	be 01       	movw	r22, r28
    y = HEIGHT - 1 - y;
    10ec:	16 96       	adiw	r26, 0x06	; 6
    10ee:	ed 91       	ld	r30, X+
    10f0:	fc 91       	ld	r31, X
    10f2:	17 97       	sbiw	r26, 0x07	; 7
    10f4:	31 97       	sbiw	r30, 0x01	; 1
    10f6:	ef 01       	movw	r28, r30
    10f8:	c4 1b       	sub	r28, r20
    10fa:	d5 0b       	sbc	r29, r21
    10fc:	ae 01       	movw	r20, r28
    10fe:	09 c0       	rjmp	.+18     	; 0x1112 <_ZN14RGBmatrixPanel9drawPixelEiij+0x94>
    break;
   case 3:
    _swap_int16_t(x, y);
    y = HEIGHT - 1 - y;
    1100:	16 96       	adiw	r26, 0x06	; 6
    1102:	ed 91       	ld	r30, X+
    1104:	fc 91       	ld	r31, X
    1106:	17 97       	sbiw	r26, 0x07	; 7
    1108:	31 97       	sbiw	r30, 0x01	; 1
    110a:	e6 1b       	sub	r30, r22
    110c:	f7 0b       	sbc	r31, r23
    110e:	ba 01       	movw	r22, r20
    1110:	af 01       	movw	r20, r30
    break;
  }

  // Adafruit_GFX uses 16-bit color in 5/6/5 format, while matrix needs
  // 4/4/4.  Pluck out relevant bits while separating into R,G,B:
  r =  c >> 12;        // RRRRrggggggbbbbb
    1112:	89 01       	movw	r16, r18
    1114:	01 2f       	mov	r16, r17
    1116:	11 27       	eor	r17, r17
    1118:	02 95       	swap	r16
    111a:	0f 70       	andi	r16, 0x0F	; 15
    111c:	f0 2e       	mov	r15, r16
  g = (c >>  7) & 0xF; // rrrrrGGGGggbbbbb
    111e:	e9 01       	movw	r28, r18
    1120:	cc 0f       	add	r28, r28
    1122:	cd 2f       	mov	r28, r29
    1124:	cc 1f       	adc	r28, r28
    1126:	dd 0b       	sbc	r29, r29
    1128:	d1 95       	neg	r29
    112a:	ec 2f       	mov	r30, r28
    112c:	ef 70       	andi	r30, 0x0F	; 15
    112e:	ee 2e       	mov	r14, r30
  b = (c >>  1) & 0xF; // rrrrrggggggBBBBb
    1130:	36 95       	lsr	r19
    1132:	27 95       	ror	r18
    1134:	e2 2f       	mov	r30, r18
    1136:	ef 70       	andi	r30, 0x0F	; 15
    1138:	de 2e       	mov	r13, r30

  // Loop counter stuff
  bit   = 2;
  limit = 1 << nPlanes;

  if(y < nRows) {
    113a:	5e 96       	adiw	r26, 0x1e	; 30
    113c:	ec 91       	ld	r30, X
    113e:	5e 97       	sbiw	r26, 0x1e	; 30
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	01 70       	andi	r16, 0x01	; 1
    1144:	11 27       	eor	r17, r17
    1146:	3c 2f       	mov	r19, r28
    1148:	31 70       	andi	r19, 0x01	; 1
    114a:	21 70       	andi	r18, 0x01	; 1
    114c:	4e 17       	cp	r20, r30
    114e:	5f 07       	cpc	r21, r31
    1150:	0c f0       	brlt	.+2      	; 0x1154 <_ZN14RGBmatrixPanel9drawPixelEiij+0xd6>
    1152:	6c c0       	rjmp	.+216    	; 0x122c <_ZN14RGBmatrixPanel9drawPixelEiij+0x1ae>
    // Data for the upper half of the display is stored in the lower
    // bits of each byte.
    ptr = &matrixbuff[backindex][y * WIDTH * (nPlanes - 1) + x]; // Base addr
    1154:	5f 96       	adiw	r26, 0x1f	; 31
    1156:	ec 91       	ld	r30, X
    1158:	5f 97       	sbiw	r26, 0x1f	; 31
    115a:	ed 01       	movw	r28, r26
    115c:	ce 0f       	add	r28, r30
    115e:	d1 1d       	adc	r29, r1
    1160:	ce 0f       	add	r28, r30
    1162:	d1 1d       	adc	r29, r1
    1164:	48 9f       	mul	r20, r24
    1166:	f0 01       	movw	r30, r0
    1168:	49 9f       	mul	r20, r25
    116a:	f0 0d       	add	r31, r0
    116c:	58 9f       	mul	r21, r24
    116e:	f0 0d       	add	r31, r0
    1170:	11 24       	eor	r1, r1
    1172:	af 01       	movw	r20, r30
    1174:	44 0f       	add	r20, r20
    1176:	55 1f       	adc	r21, r21
    1178:	e4 0f       	add	r30, r20
    117a:	f5 1f       	adc	r31, r21
    117c:	6e 0f       	add	r22, r30
    117e:	7f 1f       	adc	r23, r31
    1180:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1182:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1184:	e6 0f       	add	r30, r22
    1186:	f7 1f       	adc	r31, r23
    // Plane 0 is a tricky case -- its data is spread about,
    // stored in least two bits not used by the other planes.
    ptr[WIDTH*2] &= ~B00000011;           // Plane 0 R,G mask out in one op
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	ef 01       	movw	r28, r30
    118e:	c8 0f       	add	r28, r24
    1190:	d9 1f       	adc	r29, r25
    1192:	88 81       	ld	r24, Y
    1194:	8c 7f       	andi	r24, 0xFC	; 252
    1196:	88 83       	st	Y, r24
    if(r & 1) ptr[WIDTH*2] |=  B00000001; // Plane 0 R: 64 bytes ahead, bit 0
    1198:	01 2b       	or	r16, r17
    119a:	59 f0       	breq	.+22     	; 0x11b2 <_ZN14RGBmatrixPanel9drawPixelEiij+0x134>
    119c:	14 96       	adiw	r26, 0x04	; 4
    119e:	cd 91       	ld	r28, X+
    11a0:	dc 91       	ld	r29, X
    11a2:	15 97       	sbiw	r26, 0x05	; 5
    11a4:	cc 0f       	add	r28, r28
    11a6:	dd 1f       	adc	r29, r29
    11a8:	ce 0f       	add	r28, r30
    11aa:	df 1f       	adc	r29, r31
    11ac:	88 81       	ld	r24, Y
    11ae:	81 60       	ori	r24, 0x01	; 1
    11b0:	88 83       	st	Y, r24
    if(g & 1) ptr[WIDTH*2] |=  B00000010; // Plane 0 G: 64 bytes ahead, bit 1
    11b2:	33 23       	and	r19, r19
    11b4:	59 f0       	breq	.+22     	; 0x11cc <_ZN14RGBmatrixPanel9drawPixelEiij+0x14e>
    11b6:	14 96       	adiw	r26, 0x04	; 4
    11b8:	cd 91       	ld	r28, X+
    11ba:	dc 91       	ld	r29, X
    11bc:	15 97       	sbiw	r26, 0x05	; 5
    11be:	cc 0f       	add	r28, r28
    11c0:	dd 1f       	adc	r29, r29
    11c2:	ce 0f       	add	r28, r30
    11c4:	df 1f       	adc	r29, r31
    11c6:	88 81       	ld	r24, Y
    11c8:	82 60       	ori	r24, 0x02	; 2
    11ca:	88 83       	st	Y, r24
    11cc:	14 96       	adiw	r26, 0x04	; 4
    11ce:	cd 91       	ld	r28, X+
    11d0:	dc 91       	ld	r29, X
    11d2:	15 97       	sbiw	r26, 0x05	; 5
    if(b & 1) ptr[WIDTH]   |=  B00000001; // Plane 0 B: 32 bytes ahead, bit 0
    11d4:	ce 0f       	add	r28, r30
    11d6:	df 1f       	adc	r29, r31
    11d8:	88 81       	ld	r24, Y
    11da:	22 23       	and	r18, r18
    11dc:	31 f0       	breq	.+12     	; 0x11ea <_ZN14RGBmatrixPanel9drawPixelEiij+0x16c>
    11de:	81 60       	ori	r24, 0x01	; 1
    11e0:	88 83       	st	Y, r24
    x = WIDTH  - 1 - x;
    y = HEIGHT - 1 - y;
    break;
   case 3:
    _swap_int16_t(x, y);
    y = HEIGHT - 1 - y;
    11e2:	23 e0       	ldi	r18, 0x03	; 3
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	92 e0       	ldi	r25, 0x02	; 2
    11e8:	1a c0       	rjmp	.+52     	; 0x121e <_ZN14RGBmatrixPanel9drawPixelEiij+0x1a0>
    // stored in least two bits not used by the other planes.
    ptr[WIDTH*2] &= ~B00000011;           // Plane 0 R,G mask out in one op
    if(r & 1) ptr[WIDTH*2] |=  B00000001; // Plane 0 R: 64 bytes ahead, bit 0
    if(g & 1) ptr[WIDTH*2] |=  B00000010; // Plane 0 G: 64 bytes ahead, bit 1
    if(b & 1) ptr[WIDTH]   |=  B00000001; // Plane 0 B: 32 bytes ahead, bit 0
    else      ptr[WIDTH]   &= ~B00000001; // Plane 0 B unset; mask out
    11ea:	8e 7f       	andi	r24, 0xFE	; 254
    11ec:	f9 cf       	rjmp	.-14     	; 0x11e0 <_ZN14RGBmatrixPanel9drawPixelEiij+0x162>
    // The remaining three image planes are more normal-ish.
    // Data is stored in the high 6 bits so it can be quickly
    // copied to the DATAPORT register w/6 output lines.
    for(; bit < limit; bit <<= 1) {
      *ptr &= ~B00011100;            // Mask out R,G,B in one op
      if(r & bit) *ptr |= B00000100; // Plane N R: bit 2
    11ee:	80 83       	st	Z, r24
      if(g & bit) *ptr |= B00001000; // Plane N G: bit 3
    11f0:	89 2f       	mov	r24, r25
    11f2:	8e 21       	and	r24, r14
    11f4:	19 f0       	breq	.+6      	; 0x11fc <_ZN14RGBmatrixPanel9drawPixelEiij+0x17e>
    11f6:	80 81       	ld	r24, Z
    11f8:	88 60       	ori	r24, 0x08	; 8
    11fa:	80 83       	st	Z, r24
      if(b & bit) *ptr |= B00010000; // Plane N B: bit 4
    11fc:	89 2f       	mov	r24, r25
    11fe:	8d 21       	and	r24, r13
    1200:	19 f0       	breq	.+6      	; 0x1208 <_ZN14RGBmatrixPanel9drawPixelEiij+0x18a>
    1202:	80 81       	ld	r24, Z
    1204:	80 61       	ori	r24, 0x10	; 16
    1206:	80 83       	st	Z, r24
      ptr  += WIDTH;                 // Advance to next bit plane
    1208:	14 96       	adiw	r26, 0x04	; 4
    120a:	4d 91       	ld	r20, X+
    120c:	5c 91       	ld	r21, X
    120e:	15 97       	sbiw	r26, 0x05	; 5
    1210:	e4 0f       	add	r30, r20
    1212:	f5 1f       	adc	r31, r21
    if(b & 1) ptr[WIDTH]   |=  B00000001; // Plane 0 B: 32 bytes ahead, bit 0
    else      ptr[WIDTH]   &= ~B00000001; // Plane 0 B unset; mask out
    // The remaining three image planes are more normal-ish.
    // Data is stored in the high 6 bits so it can be quickly
    // copied to the DATAPORT register w/6 output lines.
    for(; bit < limit; bit <<= 1) {
    1214:	99 0f       	add	r25, r25
    1216:	21 50       	subi	r18, 0x01	; 1
    1218:	31 09       	sbc	r19, r1
    121a:	09 f4       	brne	.+2      	; 0x121e <_ZN14RGBmatrixPanel9drawPixelEiij+0x1a0>
    121c:	5d c0       	rjmp	.+186    	; 0x12d8 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
      *ptr &= ~B00011100;            // Mask out R,G,B in one op
    121e:	80 81       	ld	r24, Z
    1220:	83 7e       	andi	r24, 0xE3	; 227
      if(r & bit) *ptr |= B00000100; // Plane N R: bit 2
    1222:	49 2f       	mov	r20, r25
    1224:	4f 21       	and	r20, r15
    1226:	19 f3       	breq	.-58     	; 0x11ee <_ZN14RGBmatrixPanel9drawPixelEiij+0x170>
    1228:	84 60       	ori	r24, 0x04	; 4
    122a:	e1 cf       	rjmp	.-62     	; 0x11ee <_ZN14RGBmatrixPanel9drawPixelEiij+0x170>
      ptr  += WIDTH;                 // Advance to next bit plane
    }
  } else {
    // Data for the lower half of the display is stored in the upper
    // bits, except for the plane 0 stuff, using 2 least bits.
    ptr = &matrixbuff[backindex][(y - nRows) * WIDTH * (nPlanes - 1) + x];
    122c:	5f 96       	adiw	r26, 0x1f	; 31
    122e:	cc 90       	ld	r12, X
    1230:	5f 97       	sbiw	r26, 0x1f	; 31
    1232:	ed 01       	movw	r28, r26
    1234:	cc 0d       	add	r28, r12
    1236:	d1 1d       	adc	r29, r1
    1238:	cc 0d       	add	r28, r12
    123a:	d1 1d       	adc	r29, r1
    123c:	4e 1b       	sub	r20, r30
    123e:	5f 0b       	sbc	r21, r31
    1240:	48 9f       	mul	r20, r24
    1242:	f0 01       	movw	r30, r0
    1244:	49 9f       	mul	r20, r25
    1246:	f0 0d       	add	r31, r0
    1248:	58 9f       	mul	r21, r24
    124a:	f0 0d       	add	r31, r0
    124c:	11 24       	eor	r1, r1
    124e:	cf 01       	movw	r24, r30
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	e8 0f       	add	r30, r24
    1256:	f9 1f       	adc	r31, r25
    1258:	6e 0f       	add	r22, r30
    125a:	7f 1f       	adc	r23, r31
    125c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    125e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1260:	e6 0f       	add	r30, r22
    1262:	f7 1f       	adc	r31, r23
    *ptr &= ~B00000011;                  // Plane 0 G,B mask out in one op
    1264:	80 81       	ld	r24, Z
    1266:	8c 7f       	andi	r24, 0xFC	; 252
    1268:	80 83       	st	Z, r24
    126a:	14 96       	adiw	r26, 0x04	; 4
    126c:	cd 91       	ld	r28, X+
    126e:	dc 91       	ld	r29, X
    1270:	15 97       	sbiw	r26, 0x05	; 5
    if(r & 1)  ptr[WIDTH] |=  B00000010; // Plane 0 R: 32 bytes ahead, bit 1
    1272:	ce 0f       	add	r28, r30
    1274:	df 1f       	adc	r29, r31
    1276:	88 81       	ld	r24, Y
    1278:	01 2b       	or	r16, r17
    127a:	11 f0       	breq	.+4      	; 0x1280 <_ZN14RGBmatrixPanel9drawPixelEiij+0x202>
    127c:	82 60       	ori	r24, 0x02	; 2
    127e:	01 c0       	rjmp	.+2      	; 0x1282 <_ZN14RGBmatrixPanel9drawPixelEiij+0x204>
    else       ptr[WIDTH] &= ~B00000010; // Plane 0 R unset; mask out
    1280:	8d 7f       	andi	r24, 0xFD	; 253
    1282:	88 83       	st	Y, r24
    if(g & 1) *ptr        |=  B00000001; // Plane 0 G: bit 0
    1284:	33 23       	and	r19, r19
    1286:	19 f0       	breq	.+6      	; 0x128e <_ZN14RGBmatrixPanel9drawPixelEiij+0x210>
    1288:	80 81       	ld	r24, Z
    128a:	81 60       	ori	r24, 0x01	; 1
    128c:	80 83       	st	Z, r24
    if(b & 1) *ptr        |=  B00000010; // Plane 0 B: bit 0
    128e:	22 23       	and	r18, r18
    1290:	19 f0       	breq	.+6      	; 0x1298 <_ZN14RGBmatrixPanel9drawPixelEiij+0x21a>
    1292:	80 81       	ld	r24, Z
    1294:	82 60       	ori	r24, 0x02	; 2
    1296:	80 83       	st	Z, r24
    x = WIDTH  - 1 - x;
    y = HEIGHT - 1 - y;
    break;
   case 3:
    _swap_int16_t(x, y);
    y = HEIGHT - 1 - y;
    1298:	23 e0       	ldi	r18, 0x03	; 3
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	92 e0       	ldi	r25, 0x02	; 2
    if(r & 1)  ptr[WIDTH] |=  B00000010; // Plane 0 R: 32 bytes ahead, bit 1
    else       ptr[WIDTH] &= ~B00000010; // Plane 0 R unset; mask out
    if(g & 1) *ptr        |=  B00000001; // Plane 0 G: bit 0
    if(b & 1) *ptr        |=  B00000010; // Plane 0 B: bit 0
    for(; bit < limit; bit <<= 1) {
      *ptr &= ~B11100000;            // Mask out R,G,B in one op
    129e:	80 81       	ld	r24, Z
    12a0:	8f 71       	andi	r24, 0x1F	; 31
      if(r & bit) *ptr |= B00100000; // Plane N R: bit 5
    12a2:	49 2f       	mov	r20, r25
    12a4:	4f 21       	and	r20, r15
    12a6:	09 f0       	breq	.+2      	; 0x12aa <_ZN14RGBmatrixPanel9drawPixelEiij+0x22c>
    12a8:	80 62       	ori	r24, 0x20	; 32
    12aa:	80 83       	st	Z, r24
      if(g & bit) *ptr |= B01000000; // Plane N G: bit 6
    12ac:	89 2f       	mov	r24, r25
    12ae:	8e 21       	and	r24, r14
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <_ZN14RGBmatrixPanel9drawPixelEiij+0x23a>
    12b2:	80 81       	ld	r24, Z
    12b4:	80 64       	ori	r24, 0x40	; 64
    12b6:	80 83       	st	Z, r24
      if(b & bit) *ptr |= B10000000; // Plane N B: bit 7
    12b8:	89 2f       	mov	r24, r25
    12ba:	8d 21       	and	r24, r13
    12bc:	19 f0       	breq	.+6      	; 0x12c4 <_ZN14RGBmatrixPanel9drawPixelEiij+0x246>
    12be:	80 81       	ld	r24, Z
    12c0:	80 68       	ori	r24, 0x80	; 128
    12c2:	80 83       	st	Z, r24
      ptr  += WIDTH;                 // Advance to next bit plane
    12c4:	14 96       	adiw	r26, 0x04	; 4
    12c6:	4d 91       	ld	r20, X+
    12c8:	5c 91       	ld	r21, X
    12ca:	15 97       	sbiw	r26, 0x05	; 5
    12cc:	e4 0f       	add	r30, r20
    12ce:	f5 1f       	adc	r31, r21
    *ptr &= ~B00000011;                  // Plane 0 G,B mask out in one op
    if(r & 1)  ptr[WIDTH] |=  B00000010; // Plane 0 R: 32 bytes ahead, bit 1
    else       ptr[WIDTH] &= ~B00000010; // Plane 0 R unset; mask out
    if(g & 1) *ptr        |=  B00000001; // Plane 0 G: bit 0
    if(b & 1) *ptr        |=  B00000010; // Plane 0 B: bit 0
    for(; bit < limit; bit <<= 1) {
    12d0:	99 0f       	add	r25, r25
    12d2:	21 50       	subi	r18, 0x01	; 1
    12d4:	31 09       	sbc	r19, r1
    12d6:	19 f7       	brne	.-58     	; 0x129e <_ZN14RGBmatrixPanel9drawPixelEiij+0x220>
      if(g & bit) *ptr |= B01000000; // Plane N G: bit 6
      if(b & bit) *ptr |= B10000000; // Plane N B: bit 7
      ptr  += WIDTH;                 // Advance to next bit plane
    }
  }
}
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	df 90       	pop	r13
    12e6:	cf 90       	pop	r12
    12e8:	08 95       	ret

000012ea <_ZN14RGBmatrixPanel4initEhhhhhhhbh>:
// are even an actual need.
static RGBmatrixPanel *activePanel = NULL;

// Code common to both the 16x32 and 32x32 constructors:
void RGBmatrixPanel::init(uint8_t rows, uint8_t a, uint8_t b, uint8_t c,
  uint8_t sclk, uint8_t latch, uint8_t oe, boolean dbuf, uint8_t width) {
    12ea:	2f 92       	push	r2
    12ec:	3f 92       	push	r3
    12ee:	4f 92       	push	r4
    12f0:	5f 92       	push	r5
    12f2:	6f 92       	push	r6
    12f4:	7f 92       	push	r7
    12f6:	8f 92       	push	r8
    12f8:	af 92       	push	r10
    12fa:	cf 92       	push	r12
    12fc:	df 92       	push	r13
    12fe:	ef 92       	push	r14
    1300:	ff 92       	push	r15
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	00 d0       	rcall	.+0      	; 0x130c <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x22>
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	3c 01       	movw	r6, r24
    1312:	16 2f       	mov	r17, r22
    1314:	d4 2e       	mov	r13, r20
    1316:	f2 2e       	mov	r15, r18

  nRows = rows; // Number of multiplexed rows; actual height is 2X this
    1318:	dc 01       	movw	r26, r24
    131a:	5e 96       	adiw	r26, 0x1e	; 30
    131c:	6c 93       	st	X, r22

  // Allocate and initialize matrix buffer:
  int buffsize  = width * nRows * 3, // x3 = 3 bytes holds 4 planes "packed"
    131e:	4d 88       	ldd	r4, Y+21	; 0x15
    1320:	46 9e       	mul	r4, r22
    1322:	c0 01       	movw	r24, r0
    1324:	11 24       	eor	r1, r1
    1326:	2c 01       	movw	r4, r24
    1328:	44 0c       	add	r4, r4
    132a:	55 1c       	adc	r5, r5
    132c:	48 0e       	add	r4, r24
    132e:	59 1e       	adc	r5, r25
      allocsize = (dbuf == true) ? (buffsize * 2) : buffsize;
    1330:	a2 01       	movw	r20, r4
    1332:	88 20       	and	r8, r8
    1334:	11 f0       	breq	.+4      	; 0x133a <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x50>
    1336:	44 0f       	add	r20, r20
    1338:	55 1f       	adc	r21, r21
  if(NULL == (matrixbuff[0] = (uint8_t *)malloc(allocsize))) return;
    133a:	ca 01       	movw	r24, r20
    133c:	49 83       	std	Y+1, r20	; 0x01
    133e:	5a 83       	std	Y+2, r21	; 0x02
    1340:	0e 94 e5 10 	call	0x21ca	; 0x21ca <malloc>
    1344:	1c 01       	movw	r2, r24
    1346:	f3 01       	movw	r30, r6
    1348:	93 8f       	std	Z+27, r25	; 0x1b
    134a:	82 8f       	std	Z+26, r24	; 0x1a
    134c:	49 81       	ldd	r20, Y+1	; 0x01
    134e:	5a 81       	ldd	r21, Y+2	; 0x02
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	09 f4       	brne	.+2      	; 0x1356 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x6c>
    1354:	a9 c0       	rjmp	.+338    	; 0x14a8 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x1be>
  memset(matrixbuff[0], 0, allocsize);
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	0e 94 20 12 	call	0x2440	; 0x2440 <memset>
  // If not double-buffered, both buffers then point to the same address:
  matrixbuff[1] = (dbuf == true) ? &matrixbuff[0][buffsize] : matrixbuff[0];
    135e:	88 20       	and	r8, r8
    1360:	19 f0       	breq	.+6      	; 0x1368 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x7e>
    1362:	42 0c       	add	r4, r2
    1364:	53 1c       	adc	r5, r3
    1366:	01 c0       	rjmp	.+2      	; 0x136a <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x80>
    1368:	21 01       	movw	r4, r2
    136a:	d3 01       	movw	r26, r6
    136c:	5d 96       	adiw	r26, 0x1d	; 29
    136e:	5c 92       	st	X, r5
    1370:	4e 92       	st	-X, r4
    1372:	5c 97       	sbiw	r26, 0x1c	; 28

  // Save pin numbers for use by begin() method later.
  _a     = a;
    1374:	d7 96       	adiw	r26, 0x37	; 55
    1376:	dc 92       	st	X, r13
    1378:	d7 97       	sbiw	r26, 0x37	; 55
  _b     = b;
    137a:	d8 96       	adiw	r26, 0x38	; 56
    137c:	fc 92       	st	X, r15
    137e:	d8 97       	sbiw	r26, 0x38	; 56
  _c     = c;
    1380:	d9 96       	adiw	r26, 0x39	; 57
    1382:	0c 93       	st	X, r16
    1384:	d9 97       	sbiw	r26, 0x39	; 57
  _sclk  = sclk;
    1386:	d4 96       	adiw	r26, 0x34	; 52
    1388:	ec 92       	st	X, r14
    138a:	d4 97       	sbiw	r26, 0x34	; 52
  _latch = latch;
    138c:	d5 96       	adiw	r26, 0x35	; 53
    138e:	cc 92       	st	X, r12
    1390:	d5 97       	sbiw	r26, 0x35	; 53
  _oe    = oe;
    1392:	d6 96       	adiw	r26, 0x36	; 54
    1394:	ac 92       	st	X, r10
    1396:	d6 97       	sbiw	r26, 0x36	; 54

  // Look up port registers and pin masks ahead of time,
  // avoids many slow digitalWrite() calls later.
  sclkpin   = digitalPinToBitMask(sclk);
    1398:	ee 2d       	mov	r30, r14
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	e8 59       	subi	r30, 0x98	; 152
    139e:	fa 4f       	sbci	r31, 0xFA	; 250
    13a0:	e4 91       	lpm	r30, Z
    13a2:	9d 96       	adiw	r26, 0x2d	; 45
    13a4:	ec 93       	st	X, r30
    13a6:	9d 97       	sbiw	r26, 0x2d	; 45
  latport   = portOutputRegister(digitalPinToPort(latch));
    13a8:	2c 2d       	mov	r18, r12
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	f9 01       	movw	r30, r18
    13ae:	e4 58       	subi	r30, 0x84	; 132
    13b0:	fa 4f       	sbci	r31, 0xFA	; 250
    13b2:	e4 91       	lpm	r30, Z
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	ee 0f       	add	r30, r30
    13b8:	ff 1f       	adc	r31, r31
    13ba:	e0 57       	subi	r30, 0x70	; 112
    13bc:	fa 4f       	sbci	r31, 0xFA	; 250
    13be:	85 91       	lpm	r24, Z+
    13c0:	94 91       	lpm	r25, Z
    13c2:	f3 01       	movw	r30, r6
    13c4:	92 a3       	std	Z+34, r25	; 0x22
    13c6:	81 a3       	std	Z+33, r24	; 0x21
  latpin    = digitalPinToBitMask(latch);
    13c8:	f9 01       	movw	r30, r18
    13ca:	e8 59       	subi	r30, 0x98	; 152
    13cc:	fa 4f       	sbci	r31, 0xFA	; 250
    13ce:	24 91       	lpm	r18, Z
    13d0:	9e 96       	adiw	r26, 0x2e	; 46
    13d2:	2c 93       	st	X, r18
    13d4:	9e 97       	sbiw	r26, 0x2e	; 46
  oeport    = portOutputRegister(digitalPinToPort(oe));
    13d6:	8a 2d       	mov	r24, r10
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	fc 01       	movw	r30, r24
    13dc:	e4 58       	subi	r30, 0x84	; 132
    13de:	fa 4f       	sbci	r31, 0xFA	; 250
    13e0:	e4 91       	lpm	r30, Z
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	ee 0f       	add	r30, r30
    13e6:	ff 1f       	adc	r31, r31
    13e8:	e0 57       	subi	r30, 0x70	; 112
    13ea:	fa 4f       	sbci	r31, 0xFA	; 250
    13ec:	25 91       	lpm	r18, Z+
    13ee:	34 91       	lpm	r19, Z
    13f0:	f3 01       	movw	r30, r6
    13f2:	34 a3       	std	Z+36, r19	; 0x24
    13f4:	23 a3       	std	Z+35, r18	; 0x23
  oepin     = digitalPinToBitMask(oe);
    13f6:	fc 01       	movw	r30, r24
    13f8:	e8 59       	subi	r30, 0x98	; 152
    13fa:	fa 4f       	sbci	r31, 0xFA	; 250
    13fc:	84 91       	lpm	r24, Z
    13fe:	9f 96       	adiw	r26, 0x2f	; 47
    1400:	8c 93       	st	X, r24
    1402:	9f 97       	sbiw	r26, 0x2f	; 47
  addraport = portOutputRegister(digitalPinToPort(a));
    1404:	4d 2d       	mov	r20, r13
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	fa 01       	movw	r30, r20
    140a:	e4 58       	subi	r30, 0x84	; 132
    140c:	fa 4f       	sbci	r31, 0xFA	; 250
    140e:	e4 91       	lpm	r30, Z
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	e0 57       	subi	r30, 0x70	; 112
    1418:	fa 4f       	sbci	r31, 0xFA	; 250
    141a:	85 91       	lpm	r24, Z+
    141c:	94 91       	lpm	r25, Z
    141e:	f3 01       	movw	r30, r6
    1420:	96 a3       	std	Z+38, r25	; 0x26
    1422:	85 a3       	std	Z+37, r24	; 0x25
  addrapin  = digitalPinToBitMask(a);
    1424:	fa 01       	movw	r30, r20
    1426:	e8 59       	subi	r30, 0x98	; 152
    1428:	fa 4f       	sbci	r31, 0xFA	; 250
    142a:	e4 91       	lpm	r30, Z
    142c:	d0 96       	adiw	r26, 0x30	; 48
    142e:	ec 93       	st	X, r30
    1430:	d0 97       	sbiw	r26, 0x30	; 48
  addrbport = portOutputRegister(digitalPinToPort(b));
    1432:	2f 2d       	mov	r18, r15
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	f9 01       	movw	r30, r18
    1438:	e4 58       	subi	r30, 0x84	; 132
    143a:	fa 4f       	sbci	r31, 0xFA	; 250
    143c:	e4 91       	lpm	r30, Z
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	ee 0f       	add	r30, r30
    1442:	ff 1f       	adc	r31, r31
    1444:	e0 57       	subi	r30, 0x70	; 112
    1446:	fa 4f       	sbci	r31, 0xFA	; 250
    1448:	85 91       	lpm	r24, Z+
    144a:	94 91       	lpm	r25, Z
    144c:	f3 01       	movw	r30, r6
    144e:	90 a7       	std	Z+40, r25	; 0x28
    1450:	87 a3       	std	Z+39, r24	; 0x27
  addrbpin  = digitalPinToBitMask(b);
    1452:	f9 01       	movw	r30, r18
    1454:	e8 59       	subi	r30, 0x98	; 152
    1456:	fa 4f       	sbci	r31, 0xFA	; 250
    1458:	24 91       	lpm	r18, Z
    145a:	d1 96       	adiw	r26, 0x31	; 49
    145c:	2c 93       	st	X, r18
    145e:	d1 97       	sbiw	r26, 0x31	; 49
  addrcport = portOutputRegister(digitalPinToPort(c));
    1460:	80 2f       	mov	r24, r16
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	fc 01       	movw	r30, r24
    1466:	e4 58       	subi	r30, 0x84	; 132
    1468:	fa 4f       	sbci	r31, 0xFA	; 250
    146a:	e4 91       	lpm	r30, Z
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	ee 0f       	add	r30, r30
    1470:	ff 1f       	adc	r31, r31
    1472:	e0 57       	subi	r30, 0x70	; 112
    1474:	fa 4f       	sbci	r31, 0xFA	; 250
    1476:	25 91       	lpm	r18, Z+
    1478:	34 91       	lpm	r19, Z
    147a:	f3 01       	movw	r30, r6
    147c:	32 a7       	std	Z+42, r19	; 0x2a
    147e:	21 a7       	std	Z+41, r18	; 0x29
  addrcpin  = digitalPinToBitMask(c); 
    1480:	fc 01       	movw	r30, r24
    1482:	e8 59       	subi	r30, 0x98	; 152
    1484:	fa 4f       	sbci	r31, 0xFA	; 250
    1486:	84 91       	lpm	r24, Z
    1488:	d2 96       	adiw	r26, 0x32	; 50
    148a:	8c 93       	st	X, r24
    148c:	d2 97       	sbiw	r26, 0x32	; 50
  plane     = nPlanes - 1;
    148e:	83 e0       	ldi	r24, 0x03	; 3
    1490:	dc 96       	adiw	r26, 0x3c	; 60
    1492:	8c 93       	st	X, r24
    1494:	dc 97       	sbiw	r26, 0x3c	; 60
  row       = nRows   - 1;
    1496:	11 50       	subi	r17, 0x01	; 1
    1498:	db 96       	adiw	r26, 0x3b	; 59
    149a:	1c 93       	st	X, r17
    149c:	db 97       	sbiw	r26, 0x3b	; 59
  swapflag  = false;
    149e:	90 96       	adiw	r26, 0x20	; 32
    14a0:	1c 92       	st	X, r1
    14a2:	90 97       	sbiw	r26, 0x20	; 32
  backindex = 0;     // Array index of back buffer
    14a4:	5f 96       	adiw	r26, 0x1f	; 31
    14a6:	1c 92       	st	X, r1
}
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	ff 90       	pop	r15
    14b6:	ef 90       	pop	r14
    14b8:	df 90       	pop	r13
    14ba:	cf 90       	pop	r12
    14bc:	af 90       	pop	r10
    14be:	8f 90       	pop	r8
    14c0:	7f 90       	pop	r7
    14c2:	6f 90       	pop	r6
    14c4:	5f 90       	pop	r5
    14c6:	4f 90       	pop	r4
    14c8:	3f 90       	pop	r3
    14ca:	2f 90       	pop	r2
    14cc:	08 95       	ret

000014ce <_ZN14RGBmatrixPanelC1Ehhhhhhhbh>:

  init(8, a, b, c, sclk, latch, oe, dbuf, 32);
}

// Constructor for 32x32 or 32x64 panel:
RGBmatrixPanel::RGBmatrixPanel(
    14ce:	6f 92       	push	r6
    14d0:	7f 92       	push	r7
    14d2:	8f 92       	push	r8
    14d4:	af 92       	push	r10
    14d6:	bf 92       	push	r11
    14d8:	cf 92       	push	r12
    14da:	df 92       	push	r13
    14dc:	ef 92       	push	r14
    14de:	ff 92       	push	r15
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	1f 92       	push	r1
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	3c 01       	movw	r6, r24
    14f0:	d6 2e       	mov	r13, r22
    14f2:	b4 2e       	mov	r11, r20
    14f4:	10 2f       	mov	r17, r16
    14f6:	f9 88       	ldd	r15, Y+17	; 0x11
  uint8_t a, uint8_t b, uint8_t c, uint8_t d,
  uint8_t sclk, uint8_t latch, uint8_t oe, boolean dbuf, uint8_t width) :
  Adafruit_GFX(width, 32) {
    14f8:	6f 2d       	mov	r22, r15
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	40 e2       	ldi	r20, 0x20	; 32
    14fe:	50 e0       	ldi	r21, 0x00	; 0
    1500:	29 83       	std	Y+1, r18	; 0x01
    1502:	0e 94 c9 04 	call	0x992	; 0x992 <_ZN12Adafruit_GFXC1Eii>
    1506:	82 e2       	ldi	r24, 0x22	; 34
    1508:	91 e0       	ldi	r25, 0x01	; 1
    150a:	d3 01       	movw	r26, r6
    150c:	8d 93       	st	X+, r24
    150e:	9c 93       	st	X, r25

  init(16, a, b, c, sclk, latch, oe, dbuf, width);
    1510:	ff 92       	push	r15
    1512:	29 81       	ldd	r18, Y+1	; 0x01
    1514:	02 2f       	mov	r16, r18
    1516:	2b 2d       	mov	r18, r11
    1518:	4d 2d       	mov	r20, r13
    151a:	60 e1       	ldi	r22, 0x10	; 16
    151c:	c3 01       	movw	r24, r6
    151e:	0e 94 75 09 	call	0x12ea	; 0x12ea <_ZN14RGBmatrixPanel4initEhhhhhhhbh>

  // Init a few extra 32x32-specific elements:
  _d        = d;
    1522:	f3 01       	movw	r30, r6
    1524:	12 af       	std	Z+58, r17	; 0x3a
  addrdport = portOutputRegister(digitalPinToPort(d));
    1526:	01 2f       	mov	r16, r17
    1528:	10 e0       	ldi	r17, 0x00	; 0
    152a:	f8 01       	movw	r30, r16
    152c:	e4 58       	subi	r30, 0x84	; 132
    152e:	fa 4f       	sbci	r31, 0xFA	; 250
    1530:	e4 91       	lpm	r30, Z
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	ee 0f       	add	r30, r30
    1536:	ff 1f       	adc	r31, r31
    1538:	e0 57       	subi	r30, 0x70	; 112
    153a:	fa 4f       	sbci	r31, 0xFA	; 250
    153c:	85 91       	lpm	r24, Z+
    153e:	94 91       	lpm	r25, Z
    1540:	d3 01       	movw	r26, r6
    1542:	9c 96       	adiw	r26, 0x2c	; 44
    1544:	9c 93       	st	X, r25
    1546:	8e 93       	st	-X, r24
    1548:	9b 97       	sbiw	r26, 0x2b	; 43
  addrdpin  = digitalPinToBitMask(d);
    154a:	f8 01       	movw	r30, r16
    154c:	e8 59       	subi	r30, 0x98	; 152
    154e:	fa 4f       	sbci	r31, 0xFA	; 250
    1550:	e4 91       	lpm	r30, Z
    1552:	d3 96       	adiw	r26, 0x33	; 51
    1554:	ec 93       	st	X, r30
}
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	1f 91       	pop	r17
    1560:	0f 91       	pop	r16
    1562:	ff 90       	pop	r15
    1564:	ef 90       	pop	r14
    1566:	df 90       	pop	r13
    1568:	cf 90       	pop	r12
    156a:	bf 90       	pop	r11
    156c:	af 90       	pop	r10
    156e:	8f 90       	pop	r8
    1570:	7f 90       	pop	r7
    1572:	6f 90       	pop	r6
    1574:	08 95       	ret

00001576 <_ZN14RGBmatrixPanel5beginEv>:

void RGBmatrixPanel::begin(void) {
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	ec 01       	movw	r28, r24

  backindex   = 0;                         // Back buffer
    157c:	1f 8e       	std	Y+31, r1	; 0x1f
  buffptr     = matrixbuff[1 - backindex]; // -> front buffer
    157e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1580:	e1 e0       	ldi	r30, 0x01	; 1
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	e8 1b       	sub	r30, r24
    1586:	f1 09       	sbc	r31, r1
    1588:	3d 96       	adiw	r30, 0x0d	; 13
    158a:	ee 0f       	add	r30, r30
    158c:	ff 1f       	adc	r31, r31
    158e:	ec 0f       	add	r30, r28
    1590:	fd 1f       	adc	r31, r29
    1592:	80 81       	ld	r24, Z
    1594:	91 81       	ldd	r25, Z+1	; 0x01
    1596:	9e af       	std	Y+62, r25	; 0x3e
    1598:	8d af       	std	Y+61, r24	; 0x3d
  activePanel = this;                      // For interrupt hander
    159a:	d0 93 94 01 	sts	0x0194, r29
    159e:	c0 93 93 01 	sts	0x0193, r28

  // Enable all comm & address pins as outputs, set default states:
  pinMode(_sclk , OUTPUT); SCLKPORT   &= ~sclkpin;  // Low
    15a2:	61 e0       	ldi	r22, 0x01	; 1
    15a4:	8c a9       	ldd	r24, Y+52	; 0x34
    15a6:	0e 94 a2 10 	call	0x2144	; 0x2144 <pinMode>
    15aa:	95 b1       	in	r25, 0x05	; 5
    15ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    15ae:	80 95       	com	r24
    15b0:	89 23       	and	r24, r25
    15b2:	85 b9       	out	0x05, r24	; 5
  pinMode(_latch, OUTPUT); *latport   &= ~latpin;   // Low
    15b4:	61 e0       	ldi	r22, 0x01	; 1
    15b6:	8d a9       	ldd	r24, Y+53	; 0x35
    15b8:	0e 94 a2 10 	call	0x2144	; 0x2144 <pinMode>
    15bc:	e9 a1       	ldd	r30, Y+33	; 0x21
    15be:	fa a1       	ldd	r31, Y+34	; 0x22
    15c0:	90 81       	ld	r25, Z
    15c2:	8e a5       	ldd	r24, Y+46	; 0x2e
    15c4:	80 95       	com	r24
    15c6:	89 23       	and	r24, r25
    15c8:	80 83       	st	Z, r24
  pinMode(_oe   , OUTPUT); *oeport    |= oepin;     // High (disable output)
    15ca:	61 e0       	ldi	r22, 0x01	; 1
    15cc:	8e a9       	ldd	r24, Y+54	; 0x36
    15ce:	0e 94 a2 10 	call	0x2144	; 0x2144 <pinMode>
    15d2:	eb a1       	ldd	r30, Y+35	; 0x23
    15d4:	fc a1       	ldd	r31, Y+36	; 0x24
    15d6:	90 81       	ld	r25, Z
    15d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    15da:	89 2b       	or	r24, r25
    15dc:	80 83       	st	Z, r24
  pinMode(_a    , OUTPUT); *addraport &= ~addrapin; // Low
    15de:	61 e0       	ldi	r22, 0x01	; 1
    15e0:	8f a9       	ldd	r24, Y+55	; 0x37
    15e2:	0e 94 a2 10 	call	0x2144	; 0x2144 <pinMode>
    15e6:	ed a1       	ldd	r30, Y+37	; 0x25
    15e8:	fe a1       	ldd	r31, Y+38	; 0x26
    15ea:	90 81       	ld	r25, Z
    15ec:	88 a9       	ldd	r24, Y+48	; 0x30
    15ee:	80 95       	com	r24
    15f0:	89 23       	and	r24, r25
    15f2:	80 83       	st	Z, r24
  pinMode(_b    , OUTPUT); *addrbport &= ~addrbpin; // Low
    15f4:	61 e0       	ldi	r22, 0x01	; 1
    15f6:	88 ad       	ldd	r24, Y+56	; 0x38
    15f8:	0e 94 a2 10 	call	0x2144	; 0x2144 <pinMode>
    15fc:	ef a1       	ldd	r30, Y+39	; 0x27
    15fe:	f8 a5       	ldd	r31, Y+40	; 0x28
    1600:	90 81       	ld	r25, Z
    1602:	89 a9       	ldd	r24, Y+49	; 0x31
    1604:	80 95       	com	r24
    1606:	89 23       	and	r24, r25
    1608:	80 83       	st	Z, r24
  pinMode(_c    , OUTPUT); *addrcport &= ~addrcpin; // Low
    160a:	61 e0       	ldi	r22, 0x01	; 1
    160c:	89 ad       	ldd	r24, Y+57	; 0x39
    160e:	0e 94 a2 10 	call	0x2144	; 0x2144 <pinMode>
    1612:	e9 a5       	ldd	r30, Y+41	; 0x29
    1614:	fa a5       	ldd	r31, Y+42	; 0x2a
    1616:	90 81       	ld	r25, Z
    1618:	8a a9       	ldd	r24, Y+50	; 0x32
    161a:	80 95       	com	r24
    161c:	89 23       	and	r24, r25
    161e:	80 83       	st	Z, r24
  if(nRows > 8) {
    1620:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1622:	89 30       	cpi	r24, 0x09	; 9
    1624:	58 f0       	brcs	.+22     	; 0x163c <_ZN14RGBmatrixPanel5beginEv+0xc6>
    pinMode(_d  , OUTPUT); *addrdport &= ~addrdpin; // Low
    1626:	61 e0       	ldi	r22, 0x01	; 1
    1628:	8a ad       	ldd	r24, Y+58	; 0x3a
    162a:	0e 94 a2 10 	call	0x2144	; 0x2144 <pinMode>
    162e:	eb a5       	ldd	r30, Y+43	; 0x2b
    1630:	fc a5       	ldd	r31, Y+44	; 0x2c
    1632:	90 81       	ld	r25, Z
    1634:	8b a9       	ldd	r24, Y+51	; 0x33
    1636:	80 95       	com	r24
    1638:	89 23       	and	r24, r25
    163a:	80 83       	st	Z, r24
  }

  // The high six bits of the data port are set as outputs;
  // Might make this configurable in the future, but not yet.
  DATADIR  = B11111100;
    163c:	8c ef       	ldi	r24, 0xFC	; 252
    163e:	8a b9       	out	0x0a, r24	; 10
  DATAPORT = 0;
    1640:	1b b8       	out	0x0b, r1	; 11

  // Set up Timer1 for interrupt:
  TCCR1A  = _BV(WGM11); // Mode 14 (fast PWM), OC1A off
    1642:	82 e0       	ldi	r24, 0x02	; 2
    1644:	80 93 80 00 	sts	0x0080, r24
  TCCR1B  = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // Mode 14, no prescale
    1648:	89 e1       	ldi	r24, 0x19	; 25
    164a:	80 93 81 00 	sts	0x0081, r24
  ICR1    = 100;
    164e:	84 e6       	ldi	r24, 0x64	; 100
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	90 93 87 00 	sts	0x0087, r25
    1656:	80 93 86 00 	sts	0x0086, r24
  TIMSK1 |= _BV(TOIE1); // Enable Timer1 interrupt
    165a:	80 91 6f 00 	lds	r24, 0x006F
    165e:	81 60       	ori	r24, 0x01	; 1
    1660:	80 93 6f 00 	sts	0x006F, r24
  sei();                // Enable global interrupts
    1664:	78 94       	sei
}
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	08 95       	ret

0000166c <_ZN14RGBmatrixPanel8Color333Ehhh>:
// Promote 3/3/3 RGB to Adafruit_GFX 5/6/5
uint16_t RGBmatrixPanel::Color333(uint8_t r, uint8_t g, uint8_t b) {
  // RRRrrGGGgggBBBbb
  return ((r & 0x7) << 13) | ((r & 0x6) << 10) |
         ((g & 0x7) <<  8) | ((g & 0x7) <<  5) |
         ((b & 0x7) <<  2) | ((b & 0x6) >>  1);
    166c:	82 2f       	mov	r24, r18
    166e:	86 70       	andi	r24, 0x06	; 6
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	95 95       	asr	r25
    1674:	87 95       	ror	r24
    1676:	27 70       	andi	r18, 0x07	; 7
    1678:	54 e0       	ldi	r21, 0x04	; 4
    167a:	25 9f       	mul	r18, r21
    167c:	90 01       	movw	r18, r0
    167e:	11 24       	eor	r1, r1
    1680:	28 2b       	or	r18, r24
    1682:	39 2b       	or	r19, r25
// benefit of older code using one of the original color formats.

// Promote 3/3/3 RGB to Adafruit_GFX 5/6/5
uint16_t RGBmatrixPanel::Color333(uint8_t r, uint8_t g, uint8_t b) {
  // RRRrrGGGgggBBBbb
  return ((r & 0x7) << 13) | ((r & 0x6) << 10) |
    1684:	86 2f       	mov	r24, r22
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	98 2f       	mov	r25, r24
    168a:	88 27       	eor	r24, r24
    168c:	92 95       	swap	r25
    168e:	99 0f       	add	r25, r25
    1690:	90 7e       	andi	r25, 0xE0	; 224
    1692:	82 2b       	or	r24, r18
    1694:	93 2b       	or	r25, r19
         ((g & 0x7) <<  8) | ((g & 0x7) <<  5) |
    1696:	24 2f       	mov	r18, r20
    1698:	27 70       	andi	r18, 0x07	; 7
    169a:	92 2b       	or	r25, r18
    169c:	20 e2       	ldi	r18, 0x20	; 32
    169e:	42 9f       	mul	r20, r18
    16a0:	a0 01       	movw	r20, r0
    16a2:	11 24       	eor	r1, r1
    16a4:	55 27       	eor	r21, r21
    16a6:	84 2b       	or	r24, r20
    16a8:	95 2b       	or	r25, r21
// benefit of older code using one of the original color formats.

// Promote 3/3/3 RGB to Adafruit_GFX 5/6/5
uint16_t RGBmatrixPanel::Color333(uint8_t r, uint8_t g, uint8_t b) {
  // RRRrrGGGgggBBBbb
  return ((r & 0x7) << 13) | ((r & 0x6) << 10) |
    16aa:	66 70       	andi	r22, 0x06	; 6
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	76 2f       	mov	r23, r22
    16b0:	66 27       	eor	r22, r22
    16b2:	77 0f       	add	r23, r23
    16b4:	77 0f       	add	r23, r23
         ((g & 0x7) <<  8) | ((g & 0x7) <<  5) |
         ((b & 0x7) <<  2) | ((b & 0x6) >>  1);
}
    16b6:	86 2b       	or	r24, r22
    16b8:	97 2b       	or	r25, r23
    16ba:	08 95       	ret

000016bc <_ZN14RGBmatrixPanel11swapBuffersEb>:
// this method pushes it to the "front" for display.  Passing "true", the
// updated display contents are then copied to the new back buffer and can
// be incrementally modified.  If "false", the back buffer then contains
// the old front buffer contents -- your code can either clear this or
// draw over every pixel.  (No effect if double-buffering is not enabled.)
void RGBmatrixPanel::swapBuffers(boolean copy) {
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	ec 01       	movw	r28, r24
  if(matrixbuff[0] != matrixbuff[1]) {
    16c4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    16c6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    16c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16ca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16cc:	28 17       	cp	r18, r24
    16ce:	39 07       	cpc	r19, r25
    16d0:	a9 f1       	breq	.+106    	; 0x173c <_ZN14RGBmatrixPanel11swapBuffersEb+0x80>
    16d2:	16 2f       	mov	r17, r22
    // To avoid 'tearing' display, actual swap takes place in the interrupt
    // handler, at the end of a complete screen refresh cycle.
    swapflag = true;                  // Set flag here, then...
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	88 a3       	std	Y+32, r24	; 0x20
    while(swapflag == true) delay(1); // wait for interrupt to clear it
    16d8:	88 a1       	ldd	r24, Y+32	; 0x20
    16da:	88 23       	and	r24, r24
    16dc:	39 f0       	breq	.+14     	; 0x16ec <_ZN14RGBmatrixPanel11swapBuffersEb+0x30>
    16de:	61 e0       	ldi	r22, 0x01	; 1
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 2b 10 	call	0x2056	; 0x2056 <delay>
    16ea:	f6 cf       	rjmp	.-20     	; 0x16d8 <_ZN14RGBmatrixPanel11swapBuffersEb+0x1c>
    if(copy == true)
    16ec:	11 23       	and	r17, r17
    16ee:	31 f1       	breq	.+76     	; 0x173c <_ZN14RGBmatrixPanel11swapBuffersEb+0x80>
      memcpy(matrixbuff[backindex], matrixbuff[1-backindex], WIDTH * nRows * 3);
    16f0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    16f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16f4:	fe 01       	movw	r30, r28
    16f6:	e8 0f       	add	r30, r24
    16f8:	f1 1d       	adc	r31, r1
    16fa:	e8 0f       	add	r30, r24
    16fc:	f1 1d       	adc	r31, r1
    16fe:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1700:	8c 81       	ldd	r24, Y+4	; 0x04
    1702:	9d 81       	ldd	r25, Y+5	; 0x05
    1704:	38 9f       	mul	r19, r24
    1706:	a0 01       	movw	r20, r0
    1708:	39 9f       	mul	r19, r25
    170a:	50 0d       	add	r21, r0
    170c:	11 24       	eor	r1, r1
    170e:	ca 01       	movw	r24, r20
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	48 0f       	add	r20, r24
    1716:	59 1f       	adc	r21, r25
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	82 1b       	sub	r24, r18
    171e:	91 09       	sbc	r25, r1
    1720:	0d 96       	adiw	r24, 0x0d	; 13
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	c8 0f       	add	r28, r24
    1728:	d9 1f       	adc	r29, r25
    172a:	68 81       	ld	r22, Y
    172c:	79 81       	ldd	r23, Y+1	; 0x01
    172e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1730:	93 8d       	ldd	r25, Z+27	; 0x1b
  }
}
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	1f 91       	pop	r17
    // To avoid 'tearing' display, actual swap takes place in the interrupt
    // handler, at the end of a complete screen refresh cycle.
    swapflag = true;                  // Set flag here, then...
    while(swapflag == true) delay(1); // wait for interrupt to clear it
    if(copy == true)
      memcpy(matrixbuff[backindex], matrixbuff[1-backindex], WIDTH * nRows * 3);
    1738:	0c 94 17 12 	jmp	0x242e	; 0x242e <memcpy>
  }
}
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	08 95       	ret

00001744 <_ZN14RGBmatrixPanel13updateDisplayEv>:
// being issued to the LED matrix for the *next* bitplane and/or row
// while the *current* plane/row is being shown.  As a result, the
// counter variables change between past/present/future tense in mid-
// function...hopefully tenses are sufficiently commented.

void RGBmatrixPanel::updateDisplay(void) {
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ff 92       	push	r15
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	dc 01       	movw	r26, r24
  uint8_t  i, tick, tock, *ptr;
  uint16_t t, duration;

  *oeport  |= oepin;  // Disable LED output during row/plane switchover
    1754:	93 96       	adiw	r26, 0x23	; 35
    1756:	ed 91       	ld	r30, X+
    1758:	fc 91       	ld	r31, X
    175a:	94 97       	sbiw	r26, 0x24	; 36
    175c:	90 81       	ld	r25, Z
    175e:	9f 96       	adiw	r26, 0x2f	; 47
    1760:	8c 91       	ld	r24, X
    1762:	9f 97       	sbiw	r26, 0x2f	; 47
    1764:	89 2b       	or	r24, r25
    1766:	80 83       	st	Z, r24
  *latport |= latpin; // Latch data loaded during *prior* interrupt
    1768:	91 96       	adiw	r26, 0x21	; 33
    176a:	ed 91       	ld	r30, X+
    176c:	fc 91       	ld	r31, X
    176e:	92 97       	sbiw	r26, 0x22	; 34
    1770:	90 81       	ld	r25, Z
    1772:	9e 96       	adiw	r26, 0x2e	; 46
    1774:	8c 91       	ld	r24, X
    1776:	9e 97       	sbiw	r26, 0x2e	; 46
    1778:	89 2b       	or	r24, r25
    177a:	80 83       	st	Z, r24
  // This is because duration is the display time for the data loaded
  // on the PRIOR interrupt.  CALLOVERHEAD is subtracted from the
  // result because that time is implicit between the timer overflow
  // (interrupt triggered) and the initial LEDs-off line at the start
  // of this method.
  t = (nRows > 8) ? LOOPTIME : (LOOPTIME * 2);
    177c:	5e 96       	adiw	r26, 0x1e	; 30
    177e:	3c 91       	ld	r19, X
    1780:	5e 97       	sbiw	r26, 0x1e	; 30
    1782:	39 30       	cpi	r19, 0x09	; 9
    1784:	18 f4       	brcc	.+6      	; 0x178c <_ZN14RGBmatrixPanel13updateDisplayEv+0x48>
    1786:	80 e9       	ldi	r24, 0x90	; 144
    1788:	91 e0       	ldi	r25, 0x01	; 1
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <_ZN14RGBmatrixPanel13updateDisplayEv+0x4c>
    178c:	88 ec       	ldi	r24, 0xC8	; 200
    178e:	90 e0       	ldi	r25, 0x00	; 0
  duration = ((t + CALLOVERHEAD * 2) << plane) - CALLOVERHEAD;
    1790:	dc 96       	adiw	r26, 0x3c	; 60
    1792:	2c 91       	ld	r18, X
    1794:	dc 97       	sbiw	r26, 0x3c	; 60
    1796:	88 58       	subi	r24, 0x88	; 136
    1798:	9f 4f       	sbci	r25, 0xFF	; 255
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <_ZN14RGBmatrixPanel13updateDisplayEv+0x5c>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	2a 95       	dec	r18
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <_ZN14RGBmatrixPanel13updateDisplayEv+0x58>
    17a4:	cc 97       	sbiw	r24, 0x3c	; 60
  // advancing to the next line.  While it might seem beneficial to
  // advance lines every time and interleave the planes to reduce
  // vertical scanning artifacts, in practice with this panel it causes
  // a green 'ghosting' effect on black pixels, a much worse artifact.

  if(++plane >= nPlanes) {      // Advance plane counter.  Maxed out?
    17a6:	dc 96       	adiw	r26, 0x3c	; 60
    17a8:	2c 91       	ld	r18, X
    17aa:	dc 97       	sbiw	r26, 0x3c	; 60
    17ac:	2f 5f       	subi	r18, 0xFF	; 255
    17ae:	dc 96       	adiw	r26, 0x3c	; 60
    17b0:	2c 93       	st	X, r18
    17b2:	dc 97       	sbiw	r26, 0x3c	; 60
    17b4:	24 30       	cpi	r18, 0x04	; 4
    17b6:	98 f1       	brcs	.+102    	; 0x181e <_ZN14RGBmatrixPanel13updateDisplayEv+0xda>
    plane = 0;                  // Yes, reset to plane 0, and
    17b8:	dc 96       	adiw	r26, 0x3c	; 60
    17ba:	1c 92       	st	X, r1
    17bc:	dc 97       	sbiw	r26, 0x3c	; 60
    if(++row >= nRows) {        // advance row counter.  Maxed out?
    17be:	db 96       	adiw	r26, 0x3b	; 59
    17c0:	2c 91       	ld	r18, X
    17c2:	db 97       	sbiw	r26, 0x3b	; 59
    17c4:	2f 5f       	subi	r18, 0xFF	; 255
    17c6:	db 96       	adiw	r26, 0x3b	; 59
    17c8:	2c 93       	st	X, r18
    17ca:	db 97       	sbiw	r26, 0x3b	; 59
    17cc:	23 17       	cp	r18, r19
    17ce:	08 f4       	brcc	.+2      	; 0x17d2 <_ZN14RGBmatrixPanel13updateDisplayEv+0x8e>
    17d0:	7d c0       	rjmp	.+250    	; 0x18cc <_ZN14RGBmatrixPanel13updateDisplayEv+0x188>
      row     = 0;              // Yes, reset row counter, then...
    17d2:	db 96       	adiw	r26, 0x3b	; 59
    17d4:	1c 92       	st	X, r1
    17d6:	db 97       	sbiw	r26, 0x3b	; 59
      if(swapflag == true) {    // Swap front/back buffers if requested
    17d8:	90 96       	adiw	r26, 0x20	; 32
    17da:	2c 91       	ld	r18, X
    17dc:	90 97       	sbiw	r26, 0x20	; 32
    17de:	22 23       	and	r18, r18
    17e0:	59 f0       	breq	.+22     	; 0x17f8 <_ZN14RGBmatrixPanel13updateDisplayEv+0xb4>
        backindex = 1 - backindex;
    17e2:	5f 96       	adiw	r26, 0x1f	; 31
    17e4:	3c 91       	ld	r19, X
    17e6:	5f 97       	sbiw	r26, 0x1f	; 31
    17e8:	21 e0       	ldi	r18, 0x01	; 1
    17ea:	23 1b       	sub	r18, r19
    17ec:	5f 96       	adiw	r26, 0x1f	; 31
    17ee:	2c 93       	st	X, r18
    17f0:	5f 97       	sbiw	r26, 0x1f	; 31
        swapflag  = false;
    17f2:	90 96       	adiw	r26, 0x20	; 32
    17f4:	1c 92       	st	X, r1
    17f6:	90 97       	sbiw	r26, 0x20	; 32
      }
      buffptr = matrixbuff[1-backindex]; // Reset into front buffer
    17f8:	5f 96       	adiw	r26, 0x1f	; 31
    17fa:	2c 91       	ld	r18, X
    17fc:	5f 97       	sbiw	r26, 0x1f	; 31
    17fe:	e1 e0       	ldi	r30, 0x01	; 1
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	e2 1b       	sub	r30, r18
    1804:	f1 09       	sbc	r31, r1
    1806:	3d 96       	adiw	r30, 0x0d	; 13
    1808:	ee 0f       	add	r30, r30
    180a:	ff 1f       	adc	r31, r31
    180c:	ea 0f       	add	r30, r26
    180e:	fb 1f       	adc	r31, r27
    1810:	20 81       	ld	r18, Z
    1812:	31 81       	ldd	r19, Z+1	; 0x01
    1814:	de 96       	adiw	r26, 0x3e	; 62
    1816:	3c 93       	st	X, r19
    1818:	2e 93       	st	-X, r18
    181a:	dd 97       	sbiw	r26, 0x3d	; 61
    181c:	57 c0       	rjmp	.+174    	; 0x18cc <_ZN14RGBmatrixPanel13updateDisplayEv+0x188>
    }
  } else if(plane == 1) {
    181e:	dc 96       	adiw	r26, 0x3c	; 60
    1820:	2c 91       	ld	r18, X
    1822:	dc 97       	sbiw	r26, 0x3c	; 60
    1824:	21 30       	cpi	r18, 0x01	; 1
    1826:	09 f0       	breq	.+2      	; 0x182a <_ZN14RGBmatrixPanel13updateDisplayEv+0xe6>
    1828:	51 c0       	rjmp	.+162    	; 0x18cc <_ZN14RGBmatrixPanel13updateDisplayEv+0x188>
    // Plane 0 was loaded on prior interrupt invocation and is about to
    // latch now, so update the row address lines before we do that:
    if(row & 0x1)   *addraport |=  addrapin;
    182a:	db 96       	adiw	r26, 0x3b	; 59
    182c:	3c 91       	ld	r19, X
    182e:	db 97       	sbiw	r26, 0x3b	; 59
    1830:	95 96       	adiw	r26, 0x25	; 37
    1832:	ed 91       	ld	r30, X+
    1834:	fc 91       	ld	r31, X
    1836:	96 97       	sbiw	r26, 0x26	; 38
    1838:	d0 96       	adiw	r26, 0x30	; 48
    183a:	2c 91       	ld	r18, X
    183c:	d0 97       	sbiw	r26, 0x30	; 48
    183e:	30 ff       	sbrs	r19, 0
    1840:	03 c0       	rjmp	.+6      	; 0x1848 <_ZN14RGBmatrixPanel13updateDisplayEv+0x104>
    1842:	30 81       	ld	r19, Z
    1844:	23 2b       	or	r18, r19
    1846:	03 c0       	rjmp	.+6      	; 0x184e <_ZN14RGBmatrixPanel13updateDisplayEv+0x10a>
    else            *addraport &= ~addrapin;
    1848:	30 81       	ld	r19, Z
    184a:	20 95       	com	r18
    184c:	23 23       	and	r18, r19
    184e:	20 83       	st	Z, r18
    if(row & 0x2)   *addrbport |=  addrbpin;
    1850:	db 96       	adiw	r26, 0x3b	; 59
    1852:	3c 91       	ld	r19, X
    1854:	db 97       	sbiw	r26, 0x3b	; 59
    1856:	97 96       	adiw	r26, 0x27	; 39
    1858:	ed 91       	ld	r30, X+
    185a:	fc 91       	ld	r31, X
    185c:	98 97       	sbiw	r26, 0x28	; 40
    185e:	d1 96       	adiw	r26, 0x31	; 49
    1860:	2c 91       	ld	r18, X
    1862:	d1 97       	sbiw	r26, 0x31	; 49
    1864:	31 ff       	sbrs	r19, 1
    1866:	03 c0       	rjmp	.+6      	; 0x186e <_ZN14RGBmatrixPanel13updateDisplayEv+0x12a>
    1868:	30 81       	ld	r19, Z
    186a:	23 2b       	or	r18, r19
    186c:	03 c0       	rjmp	.+6      	; 0x1874 <_ZN14RGBmatrixPanel13updateDisplayEv+0x130>
    else            *addrbport &= ~addrbpin;
    186e:	30 81       	ld	r19, Z
    1870:	20 95       	com	r18
    1872:	23 23       	and	r18, r19
    1874:	20 83       	st	Z, r18
    if(row & 0x4)   *addrcport |=  addrcpin;
    1876:	db 96       	adiw	r26, 0x3b	; 59
    1878:	3c 91       	ld	r19, X
    187a:	db 97       	sbiw	r26, 0x3b	; 59
    187c:	99 96       	adiw	r26, 0x29	; 41
    187e:	ed 91       	ld	r30, X+
    1880:	fc 91       	ld	r31, X
    1882:	9a 97       	sbiw	r26, 0x2a	; 42
    1884:	d2 96       	adiw	r26, 0x32	; 50
    1886:	2c 91       	ld	r18, X
    1888:	d2 97       	sbiw	r26, 0x32	; 50
    188a:	32 ff       	sbrs	r19, 2
    188c:	03 c0       	rjmp	.+6      	; 0x1894 <_ZN14RGBmatrixPanel13updateDisplayEv+0x150>
    188e:	30 81       	ld	r19, Z
    1890:	23 2b       	or	r18, r19
    1892:	03 c0       	rjmp	.+6      	; 0x189a <_ZN14RGBmatrixPanel13updateDisplayEv+0x156>
    else            *addrcport &= ~addrcpin;
    1894:	30 81       	ld	r19, Z
    1896:	20 95       	com	r18
    1898:	23 23       	and	r18, r19
    189a:	20 83       	st	Z, r18
    if(nRows > 8) {
    189c:	5e 96       	adiw	r26, 0x1e	; 30
    189e:	2c 91       	ld	r18, X
    18a0:	5e 97       	sbiw	r26, 0x1e	; 30
    18a2:	29 30       	cpi	r18, 0x09	; 9
    18a4:	98 f0       	brcs	.+38     	; 0x18cc <_ZN14RGBmatrixPanel13updateDisplayEv+0x188>
      if(row & 0x8) *addrdport |=  addrdpin;
    18a6:	db 96       	adiw	r26, 0x3b	; 59
    18a8:	3c 91       	ld	r19, X
    18aa:	db 97       	sbiw	r26, 0x3b	; 59
    18ac:	9b 96       	adiw	r26, 0x2b	; 43
    18ae:	ed 91       	ld	r30, X+
    18b0:	fc 91       	ld	r31, X
    18b2:	9c 97       	sbiw	r26, 0x2c	; 44
    18b4:	d3 96       	adiw	r26, 0x33	; 51
    18b6:	2c 91       	ld	r18, X
    18b8:	d3 97       	sbiw	r26, 0x33	; 51
    18ba:	33 ff       	sbrs	r19, 3
    18bc:	03 c0       	rjmp	.+6      	; 0x18c4 <_ZN14RGBmatrixPanel13updateDisplayEv+0x180>
    18be:	30 81       	ld	r19, Z
    18c0:	23 2b       	or	r18, r19
    18c2:	03 c0       	rjmp	.+6      	; 0x18ca <_ZN14RGBmatrixPanel13updateDisplayEv+0x186>
      else          *addrdport &= ~addrdpin;
    18c4:	30 81       	ld	r19, Z
    18c6:	20 95       	com	r18
    18c8:	23 23       	and	r18, r19
    18ca:	20 83       	st	Z, r18
    }
  }

  // buffptr, being 'volatile' type, doesn't take well to optimization.
  // A local register copy can speed some things up:
  ptr = (uint8_t *)buffptr;
    18cc:	dd 96       	adiw	r26, 0x3d	; 61
    18ce:	ed 91       	ld	r30, X+
    18d0:	fc 91       	ld	r31, X
    18d2:	de 97       	sbiw	r26, 0x3e	; 62

  ICR1      = duration; // Set interval for next interrupt
    18d4:	90 93 87 00 	sts	0x0087, r25
    18d8:	80 93 86 00 	sts	0x0086, r24
  TCNT1     = 0;        // Restart interrupt timer
    18dc:	10 92 85 00 	sts	0x0085, r1
    18e0:	10 92 84 00 	sts	0x0084, r1
  *oeport  &= ~oepin;   // Re-enable output
    18e4:	93 96       	adiw	r26, 0x23	; 35
    18e6:	cd 91       	ld	r28, X+
    18e8:	dc 91       	ld	r29, X
    18ea:	94 97       	sbiw	r26, 0x24	; 36
    18ec:	98 81       	ld	r25, Y
    18ee:	9f 96       	adiw	r26, 0x2f	; 47
    18f0:	8c 91       	ld	r24, X
    18f2:	9f 97       	sbiw	r26, 0x2f	; 47
    18f4:	80 95       	com	r24
    18f6:	89 23       	and	r24, r25
    18f8:	88 83       	st	Y, r24
  *latport &= ~latpin;  // Latch down
    18fa:	91 96       	adiw	r26, 0x21	; 33
    18fc:	cd 91       	ld	r28, X+
    18fe:	dc 91       	ld	r29, X
    1900:	92 97       	sbiw	r26, 0x22	; 34
    1902:	98 81       	ld	r25, Y
    1904:	9e 96       	adiw	r26, 0x2e	; 46
    1906:	8c 91       	ld	r24, X
    1908:	9e 97       	sbiw	r26, 0x2e	; 46
    190a:	80 95       	com	r24
    190c:	89 23       	and	r24, r25
    190e:	88 83       	st	Y, r24
  // not have to load/modify/store bits every single time.  It's a
  // somewhat rude trick that ONLY works because the interrupt
  // handler is set ISR_BLOCK, halting any other interrupts that
  // might otherwise also be twiddling the port at the same time
  // (else this would clobber them).
  tock = SCLKPORT;
    1910:	25 b1       	in	r18, 0x05	; 5
  tick = tock | sclkpin;
    1912:	9d 96       	adiw	r26, 0x2d	; 45
    1914:	9c 91       	ld	r25, X
    1916:	9d 97       	sbiw	r26, 0x2d	; 45
    1918:	92 2b       	or	r25, r18

  if(plane > 0) { // 188 ticks from TCNT1=0 (above) to end of function
    191a:	dc 96       	adiw	r26, 0x3c	; 60
    191c:	8c 91       	ld	r24, X
    191e:	dc 97       	sbiw	r26, 0x3c	; 60
    1920:	88 23       	and	r24, r24
    1922:	09 f4       	brne	.+2      	; 0x1926 <_ZN14RGBmatrixPanel13updateDisplayEv+0x1e2>
    1924:	0d c1       	rjmp	.+538    	; 0x1b40 <_ZN14RGBmatrixPanel13updateDisplayEv+0x3fc>
         [clk]  "I" (_SFR_IO_ADDR(SCLKPORT)), \
         [tick] "r" (tick),                   \
         [tock] "r" (tock));

    // Loop is unrolled for speed:
    pew pew pew pew pew pew pew pew
    1926:	01 90       	ld	r0, Z+
    1928:	0b b8       	out	0x0b, r0	; 11
    192a:	95 b9       	out	0x05, r25	; 5
    192c:	25 b9       	out	0x05, r18	; 5
    192e:	01 90       	ld	r0, Z+
    1930:	0b b8       	out	0x0b, r0	; 11
    1932:	95 b9       	out	0x05, r25	; 5
    1934:	25 b9       	out	0x05, r18	; 5
    1936:	01 90       	ld	r0, Z+
    1938:	0b b8       	out	0x0b, r0	; 11
    193a:	95 b9       	out	0x05, r25	; 5
    193c:	25 b9       	out	0x05, r18	; 5
    193e:	01 90       	ld	r0, Z+
    1940:	0b b8       	out	0x0b, r0	; 11
    1942:	95 b9       	out	0x05, r25	; 5
    1944:	25 b9       	out	0x05, r18	; 5
    1946:	01 90       	ld	r0, Z+
    1948:	0b b8       	out	0x0b, r0	; 11
    194a:	95 b9       	out	0x05, r25	; 5
    194c:	25 b9       	out	0x05, r18	; 5
    194e:	01 90       	ld	r0, Z+
    1950:	0b b8       	out	0x0b, r0	; 11
    1952:	95 b9       	out	0x05, r25	; 5
    1954:	25 b9       	out	0x05, r18	; 5
    1956:	01 90       	ld	r0, Z+
    1958:	0b b8       	out	0x0b, r0	; 11
    195a:	95 b9       	out	0x05, r25	; 5
    195c:	25 b9       	out	0x05, r18	; 5
    195e:	01 90       	ld	r0, Z+
    1960:	0b b8       	out	0x0b, r0	; 11
    1962:	95 b9       	out	0x05, r25	; 5
    1964:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1966:	01 90       	ld	r0, Z+
    1968:	0b b8       	out	0x0b, r0	; 11
    196a:	95 b9       	out	0x05, r25	; 5
    196c:	25 b9       	out	0x05, r18	; 5
    196e:	01 90       	ld	r0, Z+
    1970:	0b b8       	out	0x0b, r0	; 11
    1972:	95 b9       	out	0x05, r25	; 5
    1974:	25 b9       	out	0x05, r18	; 5
    1976:	01 90       	ld	r0, Z+
    1978:	0b b8       	out	0x0b, r0	; 11
    197a:	95 b9       	out	0x05, r25	; 5
    197c:	25 b9       	out	0x05, r18	; 5
    197e:	01 90       	ld	r0, Z+
    1980:	0b b8       	out	0x0b, r0	; 11
    1982:	95 b9       	out	0x05, r25	; 5
    1984:	25 b9       	out	0x05, r18	; 5
    1986:	01 90       	ld	r0, Z+
    1988:	0b b8       	out	0x0b, r0	; 11
    198a:	95 b9       	out	0x05, r25	; 5
    198c:	25 b9       	out	0x05, r18	; 5
    198e:	01 90       	ld	r0, Z+
    1990:	0b b8       	out	0x0b, r0	; 11
    1992:	95 b9       	out	0x05, r25	; 5
    1994:	25 b9       	out	0x05, r18	; 5
    1996:	01 90       	ld	r0, Z+
    1998:	0b b8       	out	0x0b, r0	; 11
    199a:	95 b9       	out	0x05, r25	; 5
    199c:	25 b9       	out	0x05, r18	; 5
    199e:	01 90       	ld	r0, Z+
    19a0:	0b b8       	out	0x0b, r0	; 11
    19a2:	95 b9       	out	0x05, r25	; 5
    19a4:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    19a6:	01 90       	ld	r0, Z+
    19a8:	0b b8       	out	0x0b, r0	; 11
    19aa:	95 b9       	out	0x05, r25	; 5
    19ac:	25 b9       	out	0x05, r18	; 5
    19ae:	01 90       	ld	r0, Z+
    19b0:	0b b8       	out	0x0b, r0	; 11
    19b2:	95 b9       	out	0x05, r25	; 5
    19b4:	25 b9       	out	0x05, r18	; 5
    19b6:	01 90       	ld	r0, Z+
    19b8:	0b b8       	out	0x0b, r0	; 11
    19ba:	95 b9       	out	0x05, r25	; 5
    19bc:	25 b9       	out	0x05, r18	; 5
    19be:	01 90       	ld	r0, Z+
    19c0:	0b b8       	out	0x0b, r0	; 11
    19c2:	95 b9       	out	0x05, r25	; 5
    19c4:	25 b9       	out	0x05, r18	; 5
    19c6:	01 90       	ld	r0, Z+
    19c8:	0b b8       	out	0x0b, r0	; 11
    19ca:	95 b9       	out	0x05, r25	; 5
    19cc:	25 b9       	out	0x05, r18	; 5
    19ce:	01 90       	ld	r0, Z+
    19d0:	0b b8       	out	0x0b, r0	; 11
    19d2:	95 b9       	out	0x05, r25	; 5
    19d4:	25 b9       	out	0x05, r18	; 5
    19d6:	01 90       	ld	r0, Z+
    19d8:	0b b8       	out	0x0b, r0	; 11
    19da:	95 b9       	out	0x05, r25	; 5
    19dc:	25 b9       	out	0x05, r18	; 5
    19de:	01 90       	ld	r0, Z+
    19e0:	0b b8       	out	0x0b, r0	; 11
    19e2:	95 b9       	out	0x05, r25	; 5
    19e4:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    19e6:	01 90       	ld	r0, Z+
    19e8:	0b b8       	out	0x0b, r0	; 11
    19ea:	95 b9       	out	0x05, r25	; 5
    19ec:	25 b9       	out	0x05, r18	; 5
    19ee:	01 90       	ld	r0, Z+
    19f0:	0b b8       	out	0x0b, r0	; 11
    19f2:	95 b9       	out	0x05, r25	; 5
    19f4:	25 b9       	out	0x05, r18	; 5
    19f6:	01 90       	ld	r0, Z+
    19f8:	0b b8       	out	0x0b, r0	; 11
    19fa:	95 b9       	out	0x05, r25	; 5
    19fc:	25 b9       	out	0x05, r18	; 5
    19fe:	01 90       	ld	r0, Z+
    1a00:	0b b8       	out	0x0b, r0	; 11
    1a02:	95 b9       	out	0x05, r25	; 5
    1a04:	25 b9       	out	0x05, r18	; 5
    1a06:	01 90       	ld	r0, Z+
    1a08:	0b b8       	out	0x0b, r0	; 11
    1a0a:	95 b9       	out	0x05, r25	; 5
    1a0c:	25 b9       	out	0x05, r18	; 5
    1a0e:	01 90       	ld	r0, Z+
    1a10:	0b b8       	out	0x0b, r0	; 11
    1a12:	95 b9       	out	0x05, r25	; 5
    1a14:	25 b9       	out	0x05, r18	; 5
    1a16:	01 90       	ld	r0, Z+
    1a18:	0b b8       	out	0x0b, r0	; 11
    1a1a:	95 b9       	out	0x05, r25	; 5
    1a1c:	25 b9       	out	0x05, r18	; 5
    1a1e:	01 90       	ld	r0, Z+
    1a20:	0b b8       	out	0x0b, r0	; 11
    1a22:	95 b9       	out	0x05, r25	; 5
    1a24:	25 b9       	out	0x05, r18	; 5

      if (WIDTH == 64) {
    1a26:	14 96       	adiw	r26, 0x04	; 4
    1a28:	4d 91       	ld	r20, X+
    1a2a:	5c 91       	ld	r21, X
    1a2c:	15 97       	sbiw	r26, 0x05	; 5
    1a2e:	40 34       	cpi	r20, 0x40	; 64
    1a30:	51 05       	cpc	r21, r1
    1a32:	09 f0       	breq	.+2      	; 0x1a36 <_ZN14RGBmatrixPanel13updateDisplayEv+0x2f2>
    1a34:	80 c0       	rjmp	.+256    	; 0x1b36 <_ZN14RGBmatrixPanel13updateDisplayEv+0x3f2>
    pew pew pew pew pew pew pew pew
    1a36:	01 90       	ld	r0, Z+
    1a38:	0b b8       	out	0x0b, r0	; 11
    1a3a:	95 b9       	out	0x05, r25	; 5
    1a3c:	25 b9       	out	0x05, r18	; 5
    1a3e:	01 90       	ld	r0, Z+
    1a40:	0b b8       	out	0x0b, r0	; 11
    1a42:	95 b9       	out	0x05, r25	; 5
    1a44:	25 b9       	out	0x05, r18	; 5
    1a46:	01 90       	ld	r0, Z+
    1a48:	0b b8       	out	0x0b, r0	; 11
    1a4a:	95 b9       	out	0x05, r25	; 5
    1a4c:	25 b9       	out	0x05, r18	; 5
    1a4e:	01 90       	ld	r0, Z+
    1a50:	0b b8       	out	0x0b, r0	; 11
    1a52:	95 b9       	out	0x05, r25	; 5
    1a54:	25 b9       	out	0x05, r18	; 5
    1a56:	01 90       	ld	r0, Z+
    1a58:	0b b8       	out	0x0b, r0	; 11
    1a5a:	95 b9       	out	0x05, r25	; 5
    1a5c:	25 b9       	out	0x05, r18	; 5
    1a5e:	01 90       	ld	r0, Z+
    1a60:	0b b8       	out	0x0b, r0	; 11
    1a62:	95 b9       	out	0x05, r25	; 5
    1a64:	25 b9       	out	0x05, r18	; 5
    1a66:	01 90       	ld	r0, Z+
    1a68:	0b b8       	out	0x0b, r0	; 11
    1a6a:	95 b9       	out	0x05, r25	; 5
    1a6c:	25 b9       	out	0x05, r18	; 5
    1a6e:	01 90       	ld	r0, Z+
    1a70:	0b b8       	out	0x0b, r0	; 11
    1a72:	95 b9       	out	0x05, r25	; 5
    1a74:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1a76:	01 90       	ld	r0, Z+
    1a78:	0b b8       	out	0x0b, r0	; 11
    1a7a:	95 b9       	out	0x05, r25	; 5
    1a7c:	25 b9       	out	0x05, r18	; 5
    1a7e:	01 90       	ld	r0, Z+
    1a80:	0b b8       	out	0x0b, r0	; 11
    1a82:	95 b9       	out	0x05, r25	; 5
    1a84:	25 b9       	out	0x05, r18	; 5
    1a86:	01 90       	ld	r0, Z+
    1a88:	0b b8       	out	0x0b, r0	; 11
    1a8a:	95 b9       	out	0x05, r25	; 5
    1a8c:	25 b9       	out	0x05, r18	; 5
    1a8e:	01 90       	ld	r0, Z+
    1a90:	0b b8       	out	0x0b, r0	; 11
    1a92:	95 b9       	out	0x05, r25	; 5
    1a94:	25 b9       	out	0x05, r18	; 5
    1a96:	01 90       	ld	r0, Z+
    1a98:	0b b8       	out	0x0b, r0	; 11
    1a9a:	95 b9       	out	0x05, r25	; 5
    1a9c:	25 b9       	out	0x05, r18	; 5
    1a9e:	01 90       	ld	r0, Z+
    1aa0:	0b b8       	out	0x0b, r0	; 11
    1aa2:	95 b9       	out	0x05, r25	; 5
    1aa4:	25 b9       	out	0x05, r18	; 5
    1aa6:	01 90       	ld	r0, Z+
    1aa8:	0b b8       	out	0x0b, r0	; 11
    1aaa:	95 b9       	out	0x05, r25	; 5
    1aac:	25 b9       	out	0x05, r18	; 5
    1aae:	01 90       	ld	r0, Z+
    1ab0:	0b b8       	out	0x0b, r0	; 11
    1ab2:	95 b9       	out	0x05, r25	; 5
    1ab4:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1ab6:	01 90       	ld	r0, Z+
    1ab8:	0b b8       	out	0x0b, r0	; 11
    1aba:	95 b9       	out	0x05, r25	; 5
    1abc:	25 b9       	out	0x05, r18	; 5
    1abe:	01 90       	ld	r0, Z+
    1ac0:	0b b8       	out	0x0b, r0	; 11
    1ac2:	95 b9       	out	0x05, r25	; 5
    1ac4:	25 b9       	out	0x05, r18	; 5
    1ac6:	01 90       	ld	r0, Z+
    1ac8:	0b b8       	out	0x0b, r0	; 11
    1aca:	95 b9       	out	0x05, r25	; 5
    1acc:	25 b9       	out	0x05, r18	; 5
    1ace:	01 90       	ld	r0, Z+
    1ad0:	0b b8       	out	0x0b, r0	; 11
    1ad2:	95 b9       	out	0x05, r25	; 5
    1ad4:	25 b9       	out	0x05, r18	; 5
    1ad6:	01 90       	ld	r0, Z+
    1ad8:	0b b8       	out	0x0b, r0	; 11
    1ada:	95 b9       	out	0x05, r25	; 5
    1adc:	25 b9       	out	0x05, r18	; 5
    1ade:	01 90       	ld	r0, Z+
    1ae0:	0b b8       	out	0x0b, r0	; 11
    1ae2:	95 b9       	out	0x05, r25	; 5
    1ae4:	25 b9       	out	0x05, r18	; 5
    1ae6:	01 90       	ld	r0, Z+
    1ae8:	0b b8       	out	0x0b, r0	; 11
    1aea:	95 b9       	out	0x05, r25	; 5
    1aec:	25 b9       	out	0x05, r18	; 5
    1aee:	01 90       	ld	r0, Z+
    1af0:	0b b8       	out	0x0b, r0	; 11
    1af2:	95 b9       	out	0x05, r25	; 5
    1af4:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1af6:	01 90       	ld	r0, Z+
    1af8:	0b b8       	out	0x0b, r0	; 11
    1afa:	95 b9       	out	0x05, r25	; 5
    1afc:	25 b9       	out	0x05, r18	; 5
    1afe:	01 90       	ld	r0, Z+
    1b00:	0b b8       	out	0x0b, r0	; 11
    1b02:	95 b9       	out	0x05, r25	; 5
    1b04:	25 b9       	out	0x05, r18	; 5
    1b06:	01 90       	ld	r0, Z+
    1b08:	0b b8       	out	0x0b, r0	; 11
    1b0a:	95 b9       	out	0x05, r25	; 5
    1b0c:	25 b9       	out	0x05, r18	; 5
    1b0e:	01 90       	ld	r0, Z+
    1b10:	0b b8       	out	0x0b, r0	; 11
    1b12:	95 b9       	out	0x05, r25	; 5
    1b14:	25 b9       	out	0x05, r18	; 5
    1b16:	01 90       	ld	r0, Z+
    1b18:	0b b8       	out	0x0b, r0	; 11
    1b1a:	95 b9       	out	0x05, r25	; 5
    1b1c:	25 b9       	out	0x05, r18	; 5
    1b1e:	01 90       	ld	r0, Z+
    1b20:	0b b8       	out	0x0b, r0	; 11
    1b22:	95 b9       	out	0x05, r25	; 5
    1b24:	25 b9       	out	0x05, r18	; 5
    1b26:	01 90       	ld	r0, Z+
    1b28:	0b b8       	out	0x0b, r0	; 11
    1b2a:	95 b9       	out	0x05, r25	; 5
    1b2c:	25 b9       	out	0x05, r18	; 5
    1b2e:	01 90       	ld	r0, Z+
    1b30:	0b b8       	out	0x0b, r0	; 11
    1b32:	95 b9       	out	0x05, r25	; 5
    1b34:	25 b9       	out	0x05, r18	; 5
      }

    buffptr = ptr; //+= 32;
    1b36:	de 96       	adiw	r26, 0x3e	; 62
    1b38:	fc 93       	st	X, r31
    1b3a:	ee 93       	st	-X, r30
    1b3c:	dd 97       	sbiw	r26, 0x3d	; 61
    1b3e:	32 c0       	rjmp	.+100    	; 0x1ba4 <_ZN14RGBmatrixPanel13updateDisplayEv+0x460>
    1b40:	f1 2c       	mov	r15, r1
    // the slack, with all its data packed into the 2 least bits not
    // used by the other planes.  This works because the unpacking and
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<WIDTH; i++) {
    1b42:	cf 2c       	mov	r12, r15
    1b44:	d1 2c       	mov	r13, r1
    1b46:	14 96       	adiw	r26, 0x04	; 4
    1b48:	6d 91       	ld	r22, X+
    1b4a:	7c 91       	ld	r23, X
    1b4c:	15 97       	sbiw	r26, 0x05	; 5
    1b4e:	c6 16       	cp	r12, r22
    1b50:	d7 06       	cpc	r13, r23
    1b52:	44 f5       	brge	.+80     	; 0x1ba4 <_ZN14RGBmatrixPanel13updateDisplayEv+0x460>
      DATAPORT =
        ( ptr[i]    << 6)         |
        ((ptr[i+WIDTH] << 4) & 0x30) |
    1b54:	86 01       	movw	r16, r12
    1b56:	06 0f       	add	r16, r22
    1b58:	17 1f       	adc	r17, r23
    1b5a:	af 01       	movw	r20, r30
    1b5c:	40 0f       	add	r20, r16
    1b5e:	51 1f       	adc	r21, r17
    1b60:	ea 01       	movw	r28, r20
    1b62:	48 81       	ld	r20, Y
    1b64:	d0 e1       	ldi	r29, 0x10	; 16
    1b66:	4d 9f       	mul	r20, r29
    1b68:	a0 01       	movw	r20, r0
    1b6a:	11 24       	eor	r1, r1
        ((ptr[i+WIDTH*2] << 2) & 0x0C);
    1b6c:	34 2f       	mov	r19, r20
    1b6e:	30 73       	andi	r19, 0x30	; 48
    1b70:	6e 0f       	add	r22, r30
    1b72:	7f 1f       	adc	r23, r31
    1b74:	60 0f       	add	r22, r16
    1b76:	71 1f       	adc	r23, r17
    1b78:	eb 01       	movw	r28, r22
    1b7a:	88 81       	ld	r24, Y
    1b7c:	d4 e0       	ldi	r29, 0x04	; 4
    1b7e:	8d 9f       	mul	r24, r29
    1b80:	a0 01       	movw	r20, r0
    1b82:	11 24       	eor	r1, r1
    1b84:	4c 70       	andi	r20, 0x0C	; 12
    1b86:	43 2b       	or	r20, r19
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<WIDTH; i++) {
      DATAPORT =
        ( ptr[i]    << 6)         |
    1b88:	e6 01       	movw	r28, r12
    1b8a:	ce 0f       	add	r28, r30
    1b8c:	df 1f       	adc	r29, r31
    1b8e:	68 81       	ld	r22, Y
    1b90:	80 e4       	ldi	r24, 0x40	; 64
    1b92:	68 9f       	mul	r22, r24
    1b94:	b0 01       	movw	r22, r0
    1b96:	11 24       	eor	r1, r1
        ((ptr[i+WIDTH] << 4) & 0x30) |
        ((ptr[i+WIDTH*2] << 2) & 0x0C);
    1b98:	46 2b       	or	r20, r22
    1b9a:	4b b9       	out	0x0b, r20	; 11
      SCLKPORT = tick; // Clock lo
    1b9c:	95 b9       	out	0x05, r25	; 5
      SCLKPORT = tock; // Clock hi
    1b9e:	25 b9       	out	0x05, r18	; 5
    // the slack, with all its data packed into the 2 least bits not
    // used by the other planes.  This works because the unpacking and
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<WIDTH; i++) {
    1ba0:	f3 94       	inc	r15
    1ba2:	cf cf       	rjmp	.-98     	; 0x1b42 <_ZN14RGBmatrixPanel13updateDisplayEv+0x3fe>
        ((ptr[i+WIDTH*2] << 2) & 0x0C);
      SCLKPORT = tick; // Clock lo
      SCLKPORT = tock; // Clock hi
    } 
  }
}
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	ff 90       	pop	r15
    1bae:	df 90       	pop	r13
    1bb0:	cf 90       	pop	r12
    1bb2:	08 95       	ret

00001bb4 <__vector_13>:
  Serial.println(F("\n};"));
}

// -------------------- Interrupt handler stuff --------------------

ISR(TIMER1_OVF_vect, ISR_BLOCK) { // ISR_BLOCK important -- see notes later
    1bb4:	1f 92       	push	r1
    1bb6:	0f 92       	push	r0
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	0f 92       	push	r0
    1bbc:	11 24       	eor	r1, r1
    1bbe:	2f 93       	push	r18
    1bc0:	3f 93       	push	r19
    1bc2:	4f 93       	push	r20
    1bc4:	5f 93       	push	r21
    1bc6:	6f 93       	push	r22
    1bc8:	7f 93       	push	r23
    1bca:	8f 93       	push	r24
    1bcc:	9f 93       	push	r25
    1bce:	af 93       	push	r26
    1bd0:	bf 93       	push	r27
    1bd2:	ef 93       	push	r30
    1bd4:	ff 93       	push	r31
  activePanel->updateDisplay();   // Call refresh func for active display
    1bd6:	80 91 93 01 	lds	r24, 0x0193
    1bda:	90 91 94 01 	lds	r25, 0x0194
    1bde:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN14RGBmatrixPanel13updateDisplayEv>
  TIFR1 |= TOV1;                  // Clear Timer1 interrupt flag
    1be2:	86 b3       	in	r24, 0x16	; 22
    1be4:	86 bb       	out	0x16, r24	; 22
}
    1be6:	ff 91       	pop	r31
    1be8:	ef 91       	pop	r30
    1bea:	bf 91       	pop	r27
    1bec:	af 91       	pop	r26
    1bee:	9f 91       	pop	r25
    1bf0:	8f 91       	pop	r24
    1bf2:	7f 91       	pop	r23
    1bf4:	6f 91       	pop	r22
    1bf6:	5f 91       	pop	r21
    1bf8:	4f 91       	pop	r20
    1bfa:	3f 91       	pop	r19
    1bfc:	2f 91       	pop	r18
    1bfe:	0f 90       	pop	r0
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	0f 90       	pop	r0
    1c04:	1f 90       	pop	r1
    1c06:	18 95       	reti

00001c08 <_ZN14RGBmatrixPanel10fillScreenEj>:
    }
  }
}

void RGBmatrixPanel::fillScreen(uint16_t c) {
  if((c == 0x0000) || (c == 0xffff)) {
    1c08:	9b 01       	movw	r18, r22
    1c0a:	21 50       	subi	r18, 0x01	; 1
    1c0c:	31 09       	sbc	r19, r1
    1c0e:	2e 3f       	cpi	r18, 0xFE	; 254
    1c10:	3f 4f       	sbci	r19, 0xFF	; 255
    1c12:	f0 f0       	brcs	.+60     	; 0x1c50 <_ZN14RGBmatrixPanel10fillScreenEj+0x48>
    // For black or white, all bits in frame buffer will be identically
    // set or unset (regardless of weird bit packing), so it's OK to just
    // quickly memset the whole thing:
    memset(matrixbuff[backindex], c, WIDTH * nRows * 3);
    1c14:	dc 01       	movw	r26, r24
    1c16:	5f 96       	adiw	r26, 0x1f	; 31
    1c18:	2c 91       	ld	r18, X
    1c1a:	5f 97       	sbiw	r26, 0x1f	; 31
    1c1c:	5e 96       	adiw	r26, 0x1e	; 30
    1c1e:	3c 91       	ld	r19, X
    1c20:	5e 97       	sbiw	r26, 0x1e	; 30
    1c22:	14 96       	adiw	r26, 0x04	; 4
    1c24:	ed 91       	ld	r30, X+
    1c26:	fc 91       	ld	r31, X
    1c28:	15 97       	sbiw	r26, 0x05	; 5
    1c2a:	3e 9f       	mul	r19, r30
    1c2c:	a0 01       	movw	r20, r0
    1c2e:	3f 9f       	mul	r19, r31
    1c30:	50 0d       	add	r21, r0
    1c32:	11 24       	eor	r1, r1
    1c34:	fa 01       	movw	r30, r20
    1c36:	ee 0f       	add	r30, r30
    1c38:	ff 1f       	adc	r31, r31
    1c3a:	4e 0f       	add	r20, r30
    1c3c:	5f 1f       	adc	r21, r31
    1c3e:	fc 01       	movw	r30, r24
    1c40:	e2 0f       	add	r30, r18
    1c42:	f1 1d       	adc	r31, r1
    1c44:	e2 0f       	add	r30, r18
    1c46:	f1 1d       	adc	r31, r1
    1c48:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c4a:	93 8d       	ldd	r25, Z+27	; 0x1b
    1c4c:	0c 94 20 12 	jmp	0x2440	; 0x2440 <memset>
  } else {
    // Otherwise, need to handle it the long way:
    Adafruit_GFX::fillScreen(c);
    1c50:	0c 94 aa 04 	jmp	0x954	; 0x954 <_ZN12Adafruit_GFX10fillScreenEj>

00001c54 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    1c54:	0e 94 12 12 	call	0x2424	; 0x2424 <abort>

00001c58 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1c58:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1c5a:	91 8d       	ldd	r25, Z+25	; 0x19
    1c5c:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c5e:	89 2f       	mov	r24, r25
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	80 5c       	subi	r24, 0xC0	; 192
    1c64:	9f 4f       	sbci	r25, 0xFF	; 255
    1c66:	82 1b       	sub	r24, r18
    1c68:	91 09       	sbc	r25, r1
}
    1c6a:	8f 73       	andi	r24, 0x3F	; 63
    1c6c:	99 27       	eor	r25, r25
    1c6e:	08 95       	ret

00001c70 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1c70:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1c72:	91 8d       	ldd	r25, Z+25	; 0x19
    1c74:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c76:	98 17       	cp	r25, r24
    1c78:	31 f0       	breq	.+12     	; 0x1c86 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1c7a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c7c:	e8 0f       	add	r30, r24
    1c7e:	f1 1d       	adc	r31, r1
    1c80:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1c86:	8f ef       	ldi	r24, 0xFF	; 255
    1c88:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1c8a:	08 95       	ret

00001c8c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1c8c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1c8e:	91 8d       	ldd	r25, Z+25	; 0x19
    1c90:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c92:	98 17       	cp	r25, r24
    1c94:	61 f0       	breq	.+24     	; 0x1cae <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1c96:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c98:	df 01       	movw	r26, r30
    1c9a:	a8 0f       	add	r26, r24
    1c9c:	b1 1d       	adc	r27, r1
    1c9e:	5d 96       	adiw	r26, 0x1d	; 29
    1ca0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1ca2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ca4:	9f 5f       	subi	r25, 0xFF	; 255
    1ca6:	9f 73       	andi	r25, 0x3F	; 63
    1ca8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1cae:	8f ef       	ldi	r24, 0xFF	; 255
    1cb0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1cb2:	08 95       	ret

00001cb4 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1cb4:	8a e4       	ldi	r24, 0x4A	; 74
    1cb6:	9f e0       	ldi	r25, 0x0F	; 15
    1cb8:	89 2b       	or	r24, r25
    1cba:	49 f0       	breq	.+18     	; 0x1cce <_Z14serialEventRunv+0x1a>
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	89 2b       	or	r24, r25
    1cc2:	29 f0       	breq	.+10     	; 0x1cce <_Z14serialEventRunv+0x1a>
    1cc4:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <_Z17Serial0_availablev>
    1cc8:	81 11       	cpse	r24, r1
    1cca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1cce:	08 95       	ret

00001cd0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1cd0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1cd2:	84 8d       	ldd	r24, Z+28	; 0x1c
    1cd4:	df 01       	movw	r26, r30
    1cd6:	a8 0f       	add	r26, r24
    1cd8:	b1 1d       	adc	r27, r1
    1cda:	a3 5a       	subi	r26, 0xA3	; 163
    1cdc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cde:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1ce0:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	8f 73       	andi	r24, 0x3F	; 63
    1ce8:	99 27       	eor	r25, r25
    1cea:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1cec:	a6 89       	ldd	r26, Z+22	; 0x16
    1cee:	b7 89       	ldd	r27, Z+23	; 0x17
    1cf0:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1cf2:	a0 89       	ldd	r26, Z+16	; 0x10
    1cf4:	b1 89       	ldd	r27, Z+17	; 0x11
    1cf6:	8c 91       	ld	r24, X
    1cf8:	80 64       	ori	r24, 0x40	; 64
    1cfa:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1cfc:	93 8d       	ldd	r25, Z+27	; 0x1b
    1cfe:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d00:	98 13       	cpse	r25, r24
    1d02:	06 c0       	rjmp	.+12     	; 0x1d10 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1d04:	02 88       	ldd	r0, Z+18	; 0x12
    1d06:	f3 89       	ldd	r31, Z+19	; 0x13
    1d08:	e0 2d       	mov	r30, r0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	8f 7d       	andi	r24, 0xDF	; 223
    1d0e:	80 83       	st	Z, r24
    1d10:	08 95       	ret

00001d12 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1d18:	88 8d       	ldd	r24, Y+24	; 0x18
    1d1a:	88 23       	and	r24, r24
    1d1c:	c9 f0       	breq	.+50     	; 0x1d50 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1d1e:	ea 89       	ldd	r30, Y+18	; 0x12
    1d20:	fb 89       	ldd	r31, Y+19	; 0x13
    1d22:	80 81       	ld	r24, Z
    1d24:	85 fd       	sbrc	r24, 5
    1d26:	05 c0       	rjmp	.+10     	; 0x1d32 <_ZN14HardwareSerial5flushEv+0x20>
    1d28:	a8 89       	ldd	r26, Y+16	; 0x10
    1d2a:	b9 89       	ldd	r27, Y+17	; 0x11
    1d2c:	8c 91       	ld	r24, X
    1d2e:	86 fd       	sbrc	r24, 6
    1d30:	0f c0       	rjmp	.+30     	; 0x1d50 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	07 fc       	sbrc	r0, 7
    1d36:	f5 cf       	rjmp	.-22     	; 0x1d22 <_ZN14HardwareSerial5flushEv+0x10>
    1d38:	80 81       	ld	r24, Z
    1d3a:	85 ff       	sbrs	r24, 5
    1d3c:	f2 cf       	rjmp	.-28     	; 0x1d22 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1d3e:	a8 89       	ldd	r26, Y+16	; 0x10
    1d40:	b9 89       	ldd	r27, Y+17	; 0x11
    1d42:	8c 91       	ld	r24, X
    1d44:	85 ff       	sbrs	r24, 5
    1d46:	ed cf       	rjmp	.-38     	; 0x1d22 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1d48:	ce 01       	movw	r24, r28
    1d4a:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1d4e:	e7 cf       	rjmp	.-50     	; 0x1d1e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	08 95       	ret

00001d56 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1d56:	ef 92       	push	r14
    1d58:	ff 92       	push	r15
    1d5a:	0f 93       	push	r16
    1d5c:	1f 93       	push	r17
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	ec 01       	movw	r28, r24
  _written = true;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1d68:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d6a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d6c:	98 13       	cpse	r25, r24
    1d6e:	05 c0       	rjmp	.+10     	; 0x1d7a <_ZN14HardwareSerial5writeEh+0x24>
    1d70:	e8 89       	ldd	r30, Y+16	; 0x10
    1d72:	f9 89       	ldd	r31, Y+17	; 0x11
    1d74:	80 81       	ld	r24, Z
    1d76:	85 fd       	sbrc	r24, 5
    1d78:	24 c0       	rjmp	.+72     	; 0x1dc2 <_ZN14HardwareSerial5writeEh+0x6c>
    1d7a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1d7c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1d7e:	10 e0       	ldi	r17, 0x00	; 0
    1d80:	0f 5f       	subi	r16, 0xFF	; 255
    1d82:	1f 4f       	sbci	r17, 0xFF	; 255
    1d84:	0f 73       	andi	r16, 0x3F	; 63
    1d86:	11 27       	eor	r17, r17
    1d88:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1d8a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d8c:	e8 12       	cpse	r14, r24
    1d8e:	0c c0       	rjmp	.+24     	; 0x1da8 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	07 fc       	sbrc	r0, 7
    1d94:	fa cf       	rjmp	.-12     	; 0x1d8a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1d96:	e8 89       	ldd	r30, Y+16	; 0x10
    1d98:	f9 89       	ldd	r31, Y+17	; 0x11
    1d9a:	80 81       	ld	r24, Z
    1d9c:	85 ff       	sbrs	r24, 5
    1d9e:	f5 cf       	rjmp	.-22     	; 0x1d8a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1da0:	ce 01       	movw	r24, r28
    1da2:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1da6:	f1 cf       	rjmp	.-30     	; 0x1d8a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1daa:	fe 01       	movw	r30, r28
    1dac:	e8 0f       	add	r30, r24
    1dae:	f1 1d       	adc	r31, r1
    1db0:	e3 5a       	subi	r30, 0xA3	; 163
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1db6:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1db8:	ea 89       	ldd	r30, Y+18	; 0x12
    1dba:	fb 89       	ldd	r31, Y+19	; 0x13
    1dbc:	80 81       	ld	r24, Z
    1dbe:	80 62       	ori	r24, 0x20	; 32
    1dc0:	07 c0       	rjmp	.+14     	; 0x1dd0 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1dc2:	ee 89       	ldd	r30, Y+22	; 0x16
    1dc4:	ff 89       	ldd	r31, Y+23	; 0x17
    1dc6:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1dc8:	e8 89       	ldd	r30, Y+16	; 0x10
    1dca:	f9 89       	ldd	r31, Y+17	; 0x11
    1dcc:	80 81       	ld	r24, Z
    1dce:	80 64       	ori	r24, 0x40	; 64
    1dd0:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	1f 91       	pop	r17
    1ddc:	0f 91       	pop	r16
    1dde:	ff 90       	pop	r15
    1de0:	ef 90       	pop	r14
    1de2:	08 95       	ret

00001de4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1de4:	1f 92       	push	r1
    1de6:	0f 92       	push	r0
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	0f 92       	push	r0
    1dec:	11 24       	eor	r1, r1
    1dee:	2f 93       	push	r18
    1df0:	8f 93       	push	r24
    1df2:	9f 93       	push	r25
    1df4:	ef 93       	push	r30
    1df6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1df8:	e0 91 a5 01 	lds	r30, 0x01A5
    1dfc:	f0 91 a6 01 	lds	r31, 0x01A6
    1e00:	80 81       	ld	r24, Z
    1e02:	e0 91 ab 01 	lds	r30, 0x01AB
    1e06:	f0 91 ac 01 	lds	r31, 0x01AC
    1e0a:	82 fd       	sbrc	r24, 2
    1e0c:	12 c0       	rjmp	.+36     	; 0x1e32 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1e0e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1e10:	80 91 ae 01 	lds	r24, 0x01AE
    1e14:	8f 5f       	subi	r24, 0xFF	; 255
    1e16:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1e18:	20 91 af 01 	lds	r18, 0x01AF
    1e1c:	82 17       	cp	r24, r18
    1e1e:	51 f0       	breq	.+20     	; 0x1e34 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1e20:	e0 91 ae 01 	lds	r30, 0x01AE
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	eb 56       	subi	r30, 0x6B	; 107
    1e28:	fe 4f       	sbci	r31, 0xFE	; 254
    1e2a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1e2c:	80 93 ae 01 	sts	0x01AE, r24
    1e30:	01 c0       	rjmp	.+2      	; 0x1e34 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1e32:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1e34:	ff 91       	pop	r31
    1e36:	ef 91       	pop	r30
    1e38:	9f 91       	pop	r25
    1e3a:	8f 91       	pop	r24
    1e3c:	2f 91       	pop	r18
    1e3e:	0f 90       	pop	r0
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	0f 90       	pop	r0
    1e44:	1f 90       	pop	r1
    1e46:	18 95       	reti

00001e48 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1e48:	1f 92       	push	r1
    1e4a:	0f 92       	push	r0
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	0f 92       	push	r0
    1e50:	11 24       	eor	r1, r1
    1e52:	2f 93       	push	r18
    1e54:	3f 93       	push	r19
    1e56:	4f 93       	push	r20
    1e58:	5f 93       	push	r21
    1e5a:	6f 93       	push	r22
    1e5c:	7f 93       	push	r23
    1e5e:	8f 93       	push	r24
    1e60:	9f 93       	push	r25
    1e62:	af 93       	push	r26
    1e64:	bf 93       	push	r27
    1e66:	ef 93       	push	r30
    1e68:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1e6a:	85 e9       	ldi	r24, 0x95	; 149
    1e6c:	91 e0       	ldi	r25, 0x01	; 1
    1e6e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1e72:	ff 91       	pop	r31
    1e74:	ef 91       	pop	r30
    1e76:	bf 91       	pop	r27
    1e78:	af 91       	pop	r26
    1e7a:	9f 91       	pop	r25
    1e7c:	8f 91       	pop	r24
    1e7e:	7f 91       	pop	r23
    1e80:	6f 91       	pop	r22
    1e82:	5f 91       	pop	r21
    1e84:	4f 91       	pop	r20
    1e86:	3f 91       	pop	r19
    1e88:	2f 91       	pop	r18
    1e8a:	0f 90       	pop	r0
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	0f 90       	pop	r0
    1e90:	1f 90       	pop	r1
    1e92:	18 95       	reti

00001e94 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1e94:	85 e9       	ldi	r24, 0x95	; 149
    1e96:	91 e0       	ldi	r25, 0x01	; 1
    1e98:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <_ZN14HardwareSerial9availableEv>
    1e9c:	21 e0       	ldi	r18, 0x01	; 1
    1e9e:	89 2b       	or	r24, r25
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <_Z17Serial0_availablev+0x10>
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
}
    1ea4:	82 2f       	mov	r24, r18
    1ea6:	08 95       	ret

00001ea8 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1ea8:	e5 e9       	ldi	r30, 0x95	; 149
    1eaa:	f1 e0       	ldi	r31, 0x01	; 1
    1eac:	13 82       	std	Z+3, r1	; 0x03
    1eae:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1eb0:	88 ee       	ldi	r24, 0xE8	; 232
    1eb2:	93 e0       	ldi	r25, 0x03	; 3
    1eb4:	a0 e0       	ldi	r26, 0x00	; 0
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	84 83       	std	Z+4, r24	; 0x04
    1eba:	95 83       	std	Z+5, r25	; 0x05
    1ebc:	a6 83       	std	Z+6, r26	; 0x06
    1ebe:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1ec0:	8a e3       	ldi	r24, 0x3A	; 58
    1ec2:	91 e0       	ldi	r25, 0x01	; 1
    1ec4:	91 83       	std	Z+1, r25	; 0x01
    1ec6:	80 83       	st	Z, r24
    1ec8:	85 ec       	ldi	r24, 0xC5	; 197
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	95 87       	std	Z+13, r25	; 0x0d
    1ece:	84 87       	std	Z+12, r24	; 0x0c
    1ed0:	84 ec       	ldi	r24, 0xC4	; 196
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	97 87       	std	Z+15, r25	; 0x0f
    1ed6:	86 87       	std	Z+14, r24	; 0x0e
    1ed8:	80 ec       	ldi	r24, 0xC0	; 192
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	91 8b       	std	Z+17, r25	; 0x11
    1ede:	80 8b       	std	Z+16, r24	; 0x10
    1ee0:	81 ec       	ldi	r24, 0xC1	; 193
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	93 8b       	std	Z+19, r25	; 0x13
    1ee6:	82 8b       	std	Z+18, r24	; 0x12
    1ee8:	82 ec       	ldi	r24, 0xC2	; 194
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	95 8b       	std	Z+21, r25	; 0x15
    1eee:	84 8b       	std	Z+20, r24	; 0x14
    1ef0:	86 ec       	ldi	r24, 0xC6	; 198
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	97 8b       	std	Z+23, r25	; 0x17
    1ef6:	86 8b       	std	Z+22, r24	; 0x16
    1ef8:	11 8e       	std	Z+25, r1	; 0x19
    1efa:	12 8e       	std	Z+26, r1	; 0x1a
    1efc:	13 8e       	std	Z+27, r1	; 0x1b
    1efe:	14 8e       	std	Z+28, r1	; 0x1c
    1f00:	08 95       	ret

00001f02 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1f02:	08 95       	ret

00001f04 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1f04:	0e 94 67 10 	call	0x20ce	; 0x20ce <init>

	initVariant();
    1f08:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1f0c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1f10:	ca e5       	ldi	r28, 0x5A	; 90
    1f12:	de e0       	ldi	r29, 0x0E	; 14
#endif
	
	setup();
    
	for (;;) {
		loop();
    1f14:	0e 94 0c 03 	call	0x618	; 0x618 <loop>
		if (serialEventRun) serialEventRun();
    1f18:	20 97       	sbiw	r28, 0x00	; 0
    1f1a:	e1 f3       	breq	.-8      	; 0x1f14 <main+0x10>
    1f1c:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <_Z14serialEventRunv>
    1f20:	f9 cf       	rjmp	.-14     	; 0x1f14 <main+0x10>

00001f22 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1f22:	cf 92       	push	r12
    1f24:	df 92       	push	r13
    1f26:	ef 92       	push	r14
    1f28:	ff 92       	push	r15
    1f2a:	0f 93       	push	r16
    1f2c:	1f 93       	push	r17
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	6c 01       	movw	r12, r24
    1f34:	7a 01       	movw	r14, r20
    1f36:	8b 01       	movw	r16, r22
  size_t n = 0;
    1f38:	c0 e0       	ldi	r28, 0x00	; 0
    1f3a:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    1f3c:	ce 15       	cp	r28, r14
    1f3e:	df 05       	cpc	r29, r15
    1f40:	89 f0       	breq	.+34     	; 0x1f64 <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
    1f42:	d8 01       	movw	r26, r16
    1f44:	6d 91       	ld	r22, X+
    1f46:	8d 01       	movw	r16, r26
    1f48:	d6 01       	movw	r26, r12
    1f4a:	ed 91       	ld	r30, X+
    1f4c:	fc 91       	ld	r31, X
    1f4e:	01 90       	ld	r0, Z+
    1f50:	f0 81       	ld	r31, Z
    1f52:	e0 2d       	mov	r30, r0
    1f54:	c6 01       	movw	r24, r12
    1f56:	09 95       	icall
    1f58:	89 2b       	or	r24, r25
    1f5a:	11 f4       	brne	.+4      	; 0x1f60 <_ZN5Print5writeEPKhj+0x3e>
    1f5c:	7e 01       	movw	r14, r28
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <_ZN5Print5writeEPKhj+0x42>
    1f60:	21 96       	adiw	r28, 0x01	; 1
    1f62:	ec cf       	rjmp	.-40     	; 0x1f3c <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
    1f64:	c7 01       	movw	r24, r14
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	1f 91       	pop	r17
    1f6c:	0f 91       	pop	r16
    1f6e:	ff 90       	pop	r15
    1f70:	ef 90       	pop	r14
    1f72:	df 90       	pop	r13
    1f74:	cf 90       	pop	r12
    1f76:	08 95       	ret

00001f78 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1f78:	1f 92       	push	r1
    1f7a:	0f 92       	push	r0
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	0f 92       	push	r0
    1f80:	11 24       	eor	r1, r1
    1f82:	2f 93       	push	r18
    1f84:	3f 93       	push	r19
    1f86:	8f 93       	push	r24
    1f88:	9f 93       	push	r25
    1f8a:	af 93       	push	r26
    1f8c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1f8e:	80 91 33 02 	lds	r24, 0x0233
    1f92:	90 91 34 02 	lds	r25, 0x0234
    1f96:	a0 91 35 02 	lds	r26, 0x0235
    1f9a:	b0 91 36 02 	lds	r27, 0x0236
	unsigned char f = timer0_fract;
    1f9e:	30 91 32 02 	lds	r19, 0x0232

	m += MILLIS_INC;
	f += FRACT_INC;
    1fa2:	23 e0       	ldi	r18, 0x03	; 3
    1fa4:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1fa6:	2d 37       	cpi	r18, 0x7D	; 125
    1fa8:	20 f4       	brcc	.+8      	; 0x1fb2 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1faa:	01 96       	adiw	r24, 0x01	; 1
    1fac:	a1 1d       	adc	r26, r1
    1fae:	b1 1d       	adc	r27, r1
    1fb0:	05 c0       	rjmp	.+10     	; 0x1fbc <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1fb2:	26 e8       	ldi	r18, 0x86	; 134
    1fb4:	23 0f       	add	r18, r19
		m += 1;
    1fb6:	02 96       	adiw	r24, 0x02	; 2
    1fb8:	a1 1d       	adc	r26, r1
    1fba:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1fbc:	20 93 32 02 	sts	0x0232, r18
	timer0_millis = m;
    1fc0:	80 93 33 02 	sts	0x0233, r24
    1fc4:	90 93 34 02 	sts	0x0234, r25
    1fc8:	a0 93 35 02 	sts	0x0235, r26
    1fcc:	b0 93 36 02 	sts	0x0236, r27
	timer0_overflow_count++;
    1fd0:	80 91 37 02 	lds	r24, 0x0237
    1fd4:	90 91 38 02 	lds	r25, 0x0238
    1fd8:	a0 91 39 02 	lds	r26, 0x0239
    1fdc:	b0 91 3a 02 	lds	r27, 0x023A
    1fe0:	01 96       	adiw	r24, 0x01	; 1
    1fe2:	a1 1d       	adc	r26, r1
    1fe4:	b1 1d       	adc	r27, r1
    1fe6:	80 93 37 02 	sts	0x0237, r24
    1fea:	90 93 38 02 	sts	0x0238, r25
    1fee:	a0 93 39 02 	sts	0x0239, r26
    1ff2:	b0 93 3a 02 	sts	0x023A, r27
}
    1ff6:	bf 91       	pop	r27
    1ff8:	af 91       	pop	r26
    1ffa:	9f 91       	pop	r25
    1ffc:	8f 91       	pop	r24
    1ffe:	3f 91       	pop	r19
    2000:	2f 91       	pop	r18
    2002:	0f 90       	pop	r0
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	0f 90       	pop	r0
    2008:	1f 90       	pop	r1
    200a:	18 95       	reti

0000200c <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    200c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    200e:	f8 94       	cli
	m = timer0_overflow_count;
    2010:	80 91 37 02 	lds	r24, 0x0237
    2014:	90 91 38 02 	lds	r25, 0x0238
    2018:	a0 91 39 02 	lds	r26, 0x0239
    201c:	b0 91 3a 02 	lds	r27, 0x023A
#if defined(TCNT0)
	t = TCNT0;
    2020:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2022:	a8 9b       	sbis	0x15, 0	; 21
    2024:	05 c0       	rjmp	.+10     	; 0x2030 <micros+0x24>
    2026:	2f 3f       	cpi	r18, 0xFF	; 255
    2028:	19 f0       	breq	.+6      	; 0x2030 <micros+0x24>
		m++;
    202a:	01 96       	adiw	r24, 0x01	; 1
    202c:	a1 1d       	adc	r26, r1
    202e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2030:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2032:	ba 2f       	mov	r27, r26
    2034:	a9 2f       	mov	r26, r25
    2036:	98 2f       	mov	r25, r24
    2038:	88 27       	eor	r24, r24
    203a:	82 0f       	add	r24, r18
    203c:	91 1d       	adc	r25, r1
    203e:	a1 1d       	adc	r26, r1
    2040:	b1 1d       	adc	r27, r1
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	42 e0       	ldi	r20, 0x02	; 2
    2048:	66 0f       	add	r22, r22
    204a:	77 1f       	adc	r23, r23
    204c:	88 1f       	adc	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	4a 95       	dec	r20
    2052:	d1 f7       	brne	.-12     	; 0x2048 <micros+0x3c>
}
    2054:	08 95       	ret

00002056 <delay>:

void delay(unsigned long ms)
{
    2056:	8f 92       	push	r8
    2058:	9f 92       	push	r9
    205a:	af 92       	push	r10
    205c:	bf 92       	push	r11
    205e:	cf 92       	push	r12
    2060:	df 92       	push	r13
    2062:	ef 92       	push	r14
    2064:	ff 92       	push	r15
    2066:	6b 01       	movw	r12, r22
    2068:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    206a:	0e 94 06 10 	call	0x200c	; 0x200c <micros>
    206e:	4b 01       	movw	r8, r22
    2070:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2072:	c1 14       	cp	r12, r1
    2074:	d1 04       	cpc	r13, r1
    2076:	e1 04       	cpc	r14, r1
    2078:	f1 04       	cpc	r15, r1
    207a:	01 f1       	breq	.+64     	; 0x20bc <delay+0x66>
		yield();
    207c:	0e 94 de 10 	call	0x21bc	; 0x21bc <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2080:	0e 94 06 10 	call	0x200c	; 0x200c <micros>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	88 19       	sub	r24, r8
    208a:	99 09       	sbc	r25, r9
    208c:	aa 09       	sbc	r26, r10
    208e:	bb 09       	sbc	r27, r11
    2090:	88 3e       	cpi	r24, 0xE8	; 232
    2092:	93 40       	sbci	r25, 0x03	; 3
    2094:	a1 05       	cpc	r26, r1
    2096:	b1 05       	cpc	r27, r1
    2098:	60 f3       	brcs	.-40     	; 0x2072 <delay+0x1c>
			ms--;
    209a:	21 e0       	ldi	r18, 0x01	; 1
    209c:	c2 1a       	sub	r12, r18
    209e:	d1 08       	sbc	r13, r1
    20a0:	e1 08       	sbc	r14, r1
    20a2:	f1 08       	sbc	r15, r1
			start += 1000;
    20a4:	88 ee       	ldi	r24, 0xE8	; 232
    20a6:	88 0e       	add	r8, r24
    20a8:	83 e0       	ldi	r24, 0x03	; 3
    20aa:	98 1e       	adc	r9, r24
    20ac:	a1 1c       	adc	r10, r1
    20ae:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    20b0:	c1 14       	cp	r12, r1
    20b2:	d1 04       	cpc	r13, r1
    20b4:	e1 04       	cpc	r14, r1
    20b6:	f1 04       	cpc	r15, r1
    20b8:	19 f7       	brne	.-58     	; 0x2080 <delay+0x2a>
    20ba:	db cf       	rjmp	.-74     	; 0x2072 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    20bc:	ff 90       	pop	r15
    20be:	ef 90       	pop	r14
    20c0:	df 90       	pop	r13
    20c2:	cf 90       	pop	r12
    20c4:	bf 90       	pop	r11
    20c6:	af 90       	pop	r10
    20c8:	9f 90       	pop	r9
    20ca:	8f 90       	pop	r8
    20cc:	08 95       	ret

000020ce <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    20ce:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    20d0:	84 b5       	in	r24, 0x24	; 36
    20d2:	82 60       	ori	r24, 0x02	; 2
    20d4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    20d6:	84 b5       	in	r24, 0x24	; 36
    20d8:	81 60       	ori	r24, 0x01	; 1
    20da:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    20dc:	85 b5       	in	r24, 0x25	; 37
    20de:	82 60       	ori	r24, 0x02	; 2
    20e0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    20e2:	85 b5       	in	r24, 0x25	; 37
    20e4:	81 60       	ori	r24, 0x01	; 1
    20e6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    20e8:	ee e6       	ldi	r30, 0x6E	; 110
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	81 60       	ori	r24, 0x01	; 1
    20f0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    20f2:	e1 e8       	ldi	r30, 0x81	; 129
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    20f8:	80 81       	ld	r24, Z
    20fa:	82 60       	ori	r24, 0x02	; 2
    20fc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    20fe:	80 81       	ld	r24, Z
    2100:	81 60       	ori	r24, 0x01	; 1
    2102:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2104:	e0 e8       	ldi	r30, 0x80	; 128
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	81 60       	ori	r24, 0x01	; 1
    210c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    210e:	e1 eb       	ldi	r30, 0xB1	; 177
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	84 60       	ori	r24, 0x04	; 4
    2116:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2118:	e0 eb       	ldi	r30, 0xB0	; 176
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	81 60       	ori	r24, 0x01	; 1
    2120:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2122:	ea e7       	ldi	r30, 0x7A	; 122
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	84 60       	ori	r24, 0x04	; 4
    212a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    212c:	80 81       	ld	r24, Z
    212e:	82 60       	ori	r24, 0x02	; 2
    2130:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2132:	80 81       	ld	r24, Z
    2134:	81 60       	ori	r24, 0x01	; 1
    2136:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2138:	80 81       	ld	r24, Z
    213a:	80 68       	ori	r24, 0x80	; 128
    213c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    213e:	10 92 c1 00 	sts	0x00C1, r1
    2142:	08 95       	ret

00002144 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2144:	cf 93       	push	r28
    2146:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	fc 01       	movw	r30, r24
    214c:	e8 59       	subi	r30, 0x98	; 152
    214e:	fa 4f       	sbci	r31, 0xFA	; 250
    2150:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2152:	fc 01       	movw	r30, r24
    2154:	e4 58       	subi	r30, 0x84	; 132
    2156:	fa 4f       	sbci	r31, 0xFA	; 250
    2158:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    215a:	88 23       	and	r24, r24
    215c:	61 f1       	breq	.+88     	; 0x21b6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	88 0f       	add	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	fc 01       	movw	r30, r24
    2166:	e6 56       	subi	r30, 0x66	; 102
    2168:	fa 4f       	sbci	r31, 0xFA	; 250
    216a:	c5 91       	lpm	r28, Z+
    216c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    216e:	fc 01       	movw	r30, r24
    2170:	e0 57       	subi	r30, 0x70	; 112
    2172:	fa 4f       	sbci	r31, 0xFA	; 250
    2174:	a5 91       	lpm	r26, Z+
    2176:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2178:	61 11       	cpse	r22, r1
    217a:	09 c0       	rjmp	.+18     	; 0x218e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    217c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    217e:	f8 94       	cli
		*reg &= ~bit;
    2180:	88 81       	ld	r24, Y
    2182:	20 95       	com	r18
    2184:	82 23       	and	r24, r18
    2186:	88 83       	st	Y, r24
		*out &= ~bit;
    2188:	ec 91       	ld	r30, X
    218a:	2e 23       	and	r18, r30
    218c:	0b c0       	rjmp	.+22     	; 0x21a4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    218e:	62 30       	cpi	r22, 0x02	; 2
    2190:	61 f4       	brne	.+24     	; 0x21aa <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2192:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2194:	f8 94       	cli
		*reg &= ~bit;
    2196:	38 81       	ld	r19, Y
    2198:	82 2f       	mov	r24, r18
    219a:	80 95       	com	r24
    219c:	83 23       	and	r24, r19
    219e:	88 83       	st	Y, r24
		*out |= bit;
    21a0:	ec 91       	ld	r30, X
    21a2:	2e 2b       	or	r18, r30
    21a4:	2c 93       	st	X, r18
		SREG = oldSREG;
    21a6:	9f bf       	out	0x3f, r25	; 63
    21a8:	06 c0       	rjmp	.+12     	; 0x21b6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    21aa:	8f b7       	in	r24, 0x3f	; 63
                cli();
    21ac:	f8 94       	cli
		*reg |= bit;
    21ae:	e8 81       	ld	r30, Y
    21b0:	2e 2b       	or	r18, r30
    21b2:	28 83       	st	Y, r18
		SREG = oldSREG;
    21b4:	8f bf       	out	0x3f, r24	; 63
	}
}
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	08 95       	ret

000021bc <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    21bc:	08 95       	ret

000021be <__tablejump2__>:
    21be:	ee 0f       	add	r30, r30
    21c0:	ff 1f       	adc	r31, r31
    21c2:	05 90       	lpm	r0, Z+
    21c4:	f4 91       	lpm	r31, Z
    21c6:	e0 2d       	mov	r30, r0
    21c8:	09 94       	ijmp

000021ca <malloc>:
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	82 30       	cpi	r24, 0x02	; 2
    21d0:	91 05       	cpc	r25, r1
    21d2:	10 f4       	brcc	.+4      	; 0x21d8 <malloc+0xe>
    21d4:	82 e0       	ldi	r24, 0x02	; 2
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	e0 91 3d 02 	lds	r30, 0x023D
    21dc:	f0 91 3e 02 	lds	r31, 0x023E
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	c0 e0       	ldi	r28, 0x00	; 0
    21e6:	d0 e0       	ldi	r29, 0x00	; 0
    21e8:	30 97       	sbiw	r30, 0x00	; 0
    21ea:	11 f1       	breq	.+68     	; 0x2230 <malloc+0x66>
    21ec:	40 81       	ld	r20, Z
    21ee:	51 81       	ldd	r21, Z+1	; 0x01
    21f0:	48 17       	cp	r20, r24
    21f2:	59 07       	cpc	r21, r25
    21f4:	c0 f0       	brcs	.+48     	; 0x2226 <malloc+0x5c>
    21f6:	48 17       	cp	r20, r24
    21f8:	59 07       	cpc	r21, r25
    21fa:	61 f4       	brne	.+24     	; 0x2214 <malloc+0x4a>
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	20 97       	sbiw	r28, 0x00	; 0
    2202:	19 f0       	breq	.+6      	; 0x220a <malloc+0x40>
    2204:	9b 83       	std	Y+3, r25	; 0x03
    2206:	8a 83       	std	Y+2, r24	; 0x02
    2208:	2b c0       	rjmp	.+86     	; 0x2260 <malloc+0x96>
    220a:	90 93 3e 02 	sts	0x023E, r25
    220e:	80 93 3d 02 	sts	0x023D, r24
    2212:	26 c0       	rjmp	.+76     	; 0x2260 <malloc+0x96>
    2214:	21 15       	cp	r18, r1
    2216:	31 05       	cpc	r19, r1
    2218:	19 f0       	breq	.+6      	; 0x2220 <malloc+0x56>
    221a:	42 17       	cp	r20, r18
    221c:	53 07       	cpc	r21, r19
    221e:	18 f4       	brcc	.+6      	; 0x2226 <malloc+0x5c>
    2220:	9a 01       	movw	r18, r20
    2222:	be 01       	movw	r22, r28
    2224:	df 01       	movw	r26, r30
    2226:	ef 01       	movw	r28, r30
    2228:	02 80       	ldd	r0, Z+2	; 0x02
    222a:	f3 81       	ldd	r31, Z+3	; 0x03
    222c:	e0 2d       	mov	r30, r0
    222e:	dc cf       	rjmp	.-72     	; 0x21e8 <malloc+0x1e>
    2230:	21 15       	cp	r18, r1
    2232:	31 05       	cpc	r19, r1
    2234:	09 f1       	breq	.+66     	; 0x2278 <malloc+0xae>
    2236:	28 1b       	sub	r18, r24
    2238:	39 0b       	sbc	r19, r25
    223a:	24 30       	cpi	r18, 0x04	; 4
    223c:	31 05       	cpc	r19, r1
    223e:	90 f4       	brcc	.+36     	; 0x2264 <malloc+0x9a>
    2240:	12 96       	adiw	r26, 0x02	; 2
    2242:	8d 91       	ld	r24, X+
    2244:	9c 91       	ld	r25, X
    2246:	13 97       	sbiw	r26, 0x03	; 3
    2248:	61 15       	cp	r22, r1
    224a:	71 05       	cpc	r23, r1
    224c:	21 f0       	breq	.+8      	; 0x2256 <malloc+0x8c>
    224e:	fb 01       	movw	r30, r22
    2250:	93 83       	std	Z+3, r25	; 0x03
    2252:	82 83       	std	Z+2, r24	; 0x02
    2254:	04 c0       	rjmp	.+8      	; 0x225e <malloc+0x94>
    2256:	90 93 3e 02 	sts	0x023E, r25
    225a:	80 93 3d 02 	sts	0x023D, r24
    225e:	fd 01       	movw	r30, r26
    2260:	32 96       	adiw	r30, 0x02	; 2
    2262:	44 c0       	rjmp	.+136    	; 0x22ec <malloc+0x122>
    2264:	fd 01       	movw	r30, r26
    2266:	e2 0f       	add	r30, r18
    2268:	f3 1f       	adc	r31, r19
    226a:	81 93       	st	Z+, r24
    226c:	91 93       	st	Z+, r25
    226e:	22 50       	subi	r18, 0x02	; 2
    2270:	31 09       	sbc	r19, r1
    2272:	2d 93       	st	X+, r18
    2274:	3c 93       	st	X, r19
    2276:	3a c0       	rjmp	.+116    	; 0x22ec <malloc+0x122>
    2278:	20 91 3b 02 	lds	r18, 0x023B
    227c:	30 91 3c 02 	lds	r19, 0x023C
    2280:	23 2b       	or	r18, r19
    2282:	41 f4       	brne	.+16     	; 0x2294 <malloc+0xca>
    2284:	20 91 02 01 	lds	r18, 0x0102
    2288:	30 91 03 01 	lds	r19, 0x0103
    228c:	30 93 3c 02 	sts	0x023C, r19
    2290:	20 93 3b 02 	sts	0x023B, r18
    2294:	20 91 00 01 	lds	r18, 0x0100
    2298:	30 91 01 01 	lds	r19, 0x0101
    229c:	21 15       	cp	r18, r1
    229e:	31 05       	cpc	r19, r1
    22a0:	41 f4       	brne	.+16     	; 0x22b2 <malloc+0xe8>
    22a2:	2d b7       	in	r18, 0x3d	; 61
    22a4:	3e b7       	in	r19, 0x3e	; 62
    22a6:	40 91 04 01 	lds	r20, 0x0104
    22aa:	50 91 05 01 	lds	r21, 0x0105
    22ae:	24 1b       	sub	r18, r20
    22b0:	35 0b       	sbc	r19, r21
    22b2:	e0 91 3b 02 	lds	r30, 0x023B
    22b6:	f0 91 3c 02 	lds	r31, 0x023C
    22ba:	e2 17       	cp	r30, r18
    22bc:	f3 07       	cpc	r31, r19
    22be:	a0 f4       	brcc	.+40     	; 0x22e8 <malloc+0x11e>
    22c0:	2e 1b       	sub	r18, r30
    22c2:	3f 0b       	sbc	r19, r31
    22c4:	28 17       	cp	r18, r24
    22c6:	39 07       	cpc	r19, r25
    22c8:	78 f0       	brcs	.+30     	; 0x22e8 <malloc+0x11e>
    22ca:	ac 01       	movw	r20, r24
    22cc:	4e 5f       	subi	r20, 0xFE	; 254
    22ce:	5f 4f       	sbci	r21, 0xFF	; 255
    22d0:	24 17       	cp	r18, r20
    22d2:	35 07       	cpc	r19, r21
    22d4:	48 f0       	brcs	.+18     	; 0x22e8 <malloc+0x11e>
    22d6:	4e 0f       	add	r20, r30
    22d8:	5f 1f       	adc	r21, r31
    22da:	50 93 3c 02 	sts	0x023C, r21
    22de:	40 93 3b 02 	sts	0x023B, r20
    22e2:	81 93       	st	Z+, r24
    22e4:	91 93       	st	Z+, r25
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <malloc+0x122>
    22e8:	e0 e0       	ldi	r30, 0x00	; 0
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	cf 01       	movw	r24, r30
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	08 95       	ret

000022f4 <free>:
    22f4:	0f 93       	push	r16
    22f6:	1f 93       	push	r17
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	09 f4       	brne	.+2      	; 0x2302 <free+0xe>
    2300:	8c c0       	rjmp	.+280    	; 0x241a <free+0x126>
    2302:	fc 01       	movw	r30, r24
    2304:	32 97       	sbiw	r30, 0x02	; 2
    2306:	13 82       	std	Z+3, r1	; 0x03
    2308:	12 82       	std	Z+2, r1	; 0x02
    230a:	00 91 3d 02 	lds	r16, 0x023D
    230e:	10 91 3e 02 	lds	r17, 0x023E
    2312:	01 15       	cp	r16, r1
    2314:	11 05       	cpc	r17, r1
    2316:	81 f4       	brne	.+32     	; 0x2338 <free+0x44>
    2318:	20 81       	ld	r18, Z
    231a:	31 81       	ldd	r19, Z+1	; 0x01
    231c:	82 0f       	add	r24, r18
    231e:	93 1f       	adc	r25, r19
    2320:	20 91 3b 02 	lds	r18, 0x023B
    2324:	30 91 3c 02 	lds	r19, 0x023C
    2328:	28 17       	cp	r18, r24
    232a:	39 07       	cpc	r19, r25
    232c:	79 f5       	brne	.+94     	; 0x238c <free+0x98>
    232e:	f0 93 3c 02 	sts	0x023C, r31
    2332:	e0 93 3b 02 	sts	0x023B, r30
    2336:	71 c0       	rjmp	.+226    	; 0x241a <free+0x126>
    2338:	d8 01       	movw	r26, r16
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	50 e0       	ldi	r21, 0x00	; 0
    233e:	ae 17       	cp	r26, r30
    2340:	bf 07       	cpc	r27, r31
    2342:	50 f4       	brcc	.+20     	; 0x2358 <free+0x64>
    2344:	12 96       	adiw	r26, 0x02	; 2
    2346:	2d 91       	ld	r18, X+
    2348:	3c 91       	ld	r19, X
    234a:	13 97       	sbiw	r26, 0x03	; 3
    234c:	ad 01       	movw	r20, r26
    234e:	21 15       	cp	r18, r1
    2350:	31 05       	cpc	r19, r1
    2352:	09 f1       	breq	.+66     	; 0x2396 <free+0xa2>
    2354:	d9 01       	movw	r26, r18
    2356:	f3 cf       	rjmp	.-26     	; 0x233e <free+0x4a>
    2358:	9d 01       	movw	r18, r26
    235a:	da 01       	movw	r26, r20
    235c:	33 83       	std	Z+3, r19	; 0x03
    235e:	22 83       	std	Z+2, r18	; 0x02
    2360:	60 81       	ld	r22, Z
    2362:	71 81       	ldd	r23, Z+1	; 0x01
    2364:	86 0f       	add	r24, r22
    2366:	97 1f       	adc	r25, r23
    2368:	82 17       	cp	r24, r18
    236a:	93 07       	cpc	r25, r19
    236c:	69 f4       	brne	.+26     	; 0x2388 <free+0x94>
    236e:	ec 01       	movw	r28, r24
    2370:	28 81       	ld	r18, Y
    2372:	39 81       	ldd	r19, Y+1	; 0x01
    2374:	26 0f       	add	r18, r22
    2376:	37 1f       	adc	r19, r23
    2378:	2e 5f       	subi	r18, 0xFE	; 254
    237a:	3f 4f       	sbci	r19, 0xFF	; 255
    237c:	31 83       	std	Z+1, r19	; 0x01
    237e:	20 83       	st	Z, r18
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	9b 81       	ldd	r25, Y+3	; 0x03
    2384:	93 83       	std	Z+3, r25	; 0x03
    2386:	82 83       	std	Z+2, r24	; 0x02
    2388:	45 2b       	or	r20, r21
    238a:	29 f4       	brne	.+10     	; 0x2396 <free+0xa2>
    238c:	f0 93 3e 02 	sts	0x023E, r31
    2390:	e0 93 3d 02 	sts	0x023D, r30
    2394:	42 c0       	rjmp	.+132    	; 0x241a <free+0x126>
    2396:	13 96       	adiw	r26, 0x03	; 3
    2398:	fc 93       	st	X, r31
    239a:	ee 93       	st	-X, r30
    239c:	12 97       	sbiw	r26, 0x02	; 2
    239e:	ed 01       	movw	r28, r26
    23a0:	49 91       	ld	r20, Y+
    23a2:	59 91       	ld	r21, Y+
    23a4:	9e 01       	movw	r18, r28
    23a6:	24 0f       	add	r18, r20
    23a8:	35 1f       	adc	r19, r21
    23aa:	e2 17       	cp	r30, r18
    23ac:	f3 07       	cpc	r31, r19
    23ae:	71 f4       	brne	.+28     	; 0x23cc <free+0xd8>
    23b0:	80 81       	ld	r24, Z
    23b2:	91 81       	ldd	r25, Z+1	; 0x01
    23b4:	84 0f       	add	r24, r20
    23b6:	95 1f       	adc	r25, r21
    23b8:	02 96       	adiw	r24, 0x02	; 2
    23ba:	11 96       	adiw	r26, 0x01	; 1
    23bc:	9c 93       	st	X, r25
    23be:	8e 93       	st	-X, r24
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	13 96       	adiw	r26, 0x03	; 3
    23c6:	9c 93       	st	X, r25
    23c8:	8e 93       	st	-X, r24
    23ca:	12 97       	sbiw	r26, 0x02	; 2
    23cc:	e0 e0       	ldi	r30, 0x00	; 0
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	d8 01       	movw	r26, r16
    23d2:	12 96       	adiw	r26, 0x02	; 2
    23d4:	8d 91       	ld	r24, X+
    23d6:	9c 91       	ld	r25, X
    23d8:	13 97       	sbiw	r26, 0x03	; 3
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	19 f0       	breq	.+6      	; 0x23e4 <free+0xf0>
    23de:	f8 01       	movw	r30, r16
    23e0:	8c 01       	movw	r16, r24
    23e2:	f6 cf       	rjmp	.-20     	; 0x23d0 <free+0xdc>
    23e4:	8d 91       	ld	r24, X+
    23e6:	9c 91       	ld	r25, X
    23e8:	98 01       	movw	r18, r16
    23ea:	2e 5f       	subi	r18, 0xFE	; 254
    23ec:	3f 4f       	sbci	r19, 0xFF	; 255
    23ee:	82 0f       	add	r24, r18
    23f0:	93 1f       	adc	r25, r19
    23f2:	20 91 3b 02 	lds	r18, 0x023B
    23f6:	30 91 3c 02 	lds	r19, 0x023C
    23fa:	28 17       	cp	r18, r24
    23fc:	39 07       	cpc	r19, r25
    23fe:	69 f4       	brne	.+26     	; 0x241a <free+0x126>
    2400:	30 97       	sbiw	r30, 0x00	; 0
    2402:	29 f4       	brne	.+10     	; 0x240e <free+0x11a>
    2404:	10 92 3e 02 	sts	0x023E, r1
    2408:	10 92 3d 02 	sts	0x023D, r1
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <free+0x11e>
    240e:	13 82       	std	Z+3, r1	; 0x03
    2410:	12 82       	std	Z+2, r1	; 0x02
    2412:	10 93 3c 02 	sts	0x023C, r17
    2416:	00 93 3b 02 	sts	0x023B, r16
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	1f 91       	pop	r17
    2420:	0f 91       	pop	r16
    2422:	08 95       	ret

00002424 <abort>:
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	f8 94       	cli
    242a:	0c 94 27 12 	jmp	0x244e	; 0x244e <_exit>

0000242e <memcpy>:
    242e:	fb 01       	movw	r30, r22
    2430:	dc 01       	movw	r26, r24
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <memcpy+0xa>
    2434:	01 90       	ld	r0, Z+
    2436:	0d 92       	st	X+, r0
    2438:	41 50       	subi	r20, 0x01	; 1
    243a:	50 40       	sbci	r21, 0x00	; 0
    243c:	d8 f7       	brcc	.-10     	; 0x2434 <memcpy+0x6>
    243e:	08 95       	ret

00002440 <memset>:
    2440:	dc 01       	movw	r26, r24
    2442:	01 c0       	rjmp	.+2      	; 0x2446 <memset+0x6>
    2444:	6d 93       	st	X+, r22
    2446:	41 50       	subi	r20, 0x01	; 1
    2448:	50 40       	sbci	r21, 0x00	; 0
    244a:	e0 f7       	brcc	.-8      	; 0x2444 <memset+0x4>
    244c:	08 95       	ret

0000244e <_exit>:
    244e:	f8 94       	cli

00002450 <__stop_program>:
    2450:	ff cf       	rjmp	.-2      	; 0x2450 <__stop_program>
