
scrolltext_16x32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  0000276a  000027fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000276a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fb  00800154  00800154  00002852  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002852  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002884  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000568  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cfca  00000000  00000000  00002e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ee7  00000000  00000000  0000fdf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002111  00000000  00000000  00011cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001788  00000000  00000000  00013df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002a38  00000000  00000000  00015578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b06e  00000000  00000000  00017fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000668  00000000  00000000  0002301e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__ctors_end>
       4:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
       8:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
       c:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
      10:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
      14:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
      18:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
      1c:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
      20:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
      24:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__vector_9>
      28:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
      2c:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
      30:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
      34:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <__vector_13>
      38:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
      3c:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
      40:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__vector_16>
      44:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
      48:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__vector_18>
      4c:	0c 94 f9 10 	jmp	0x21f2	; 0x21f2 <__vector_19>
      50:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
      54:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
      58:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
      5c:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
      60:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>
      64:	0c 94 00 03 	jmp	0x600	; 0x600 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	80 00       	.word	0x0080	; ????
      6a:	02 00       	.word	0x0002	; ????
      6c:	00 10       	cpse	r0, r0
	...

00000070 <_ZL4font>:
      70:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
      80:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
      90:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
      a0:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
      b0:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
      c0:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
      d0:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
      e0:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
      f0:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     100:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     110:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     120:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     130:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     140:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     150:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     160:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     170:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     180:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     190:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     1a0:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     1b0:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     1c0:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     1d0:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     1e0:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     1f0:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     200:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     210:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     220:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     230:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     240:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     250:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     260:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     270:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     280:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     290:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     2a0:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     2b0:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     2c0:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     2d0:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     2e0:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     2f0:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     300:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     310:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     320:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     330:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     340:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     350:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     360:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     370:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     380:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     390:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     3a0:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     3b0:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     3c0:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     3d0:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     3e0:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     3f0:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     400:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     410:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     420:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     430:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     440:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     450:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     460:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     470:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     480:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     490:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     4a0:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     4b0:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     4c0:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     4d0:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     4e0:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     4f0:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     500:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     510:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     520:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     530:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     540:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     550:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     560:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000570 <digital_pin_to_bit_mask_PGM>:
     570:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     580:	04 08 10 20                                         ... 

00000584 <digital_pin_to_port_PGM>:
     584:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     594:	03 03 03 03                                         ....

00000598 <port_to_output_PGM>:
     598:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000005a2 <port_to_mode_PGM>:
     5a2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000005ac <__ctors_start>:
     5ac:	1a 03       	fmul	r17, r18
     5ae:	29 11       	cpse	r18, r9

000005b0 <__ctors_end>:
     5b0:	11 24       	eor	r1, r1
     5b2:	1f be       	out	0x3f, r1	; 63
     5b4:	cf ef       	ldi	r28, 0xFF	; 255
     5b6:	d8 e0       	ldi	r29, 0x08	; 8
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	cd bf       	out	0x3d, r28	; 61

000005bc <__do_copy_data>:
     5bc:	11 e0       	ldi	r17, 0x01	; 1
     5be:	a0 e0       	ldi	r26, 0x00	; 0
     5c0:	b1 e0       	ldi	r27, 0x01	; 1
     5c2:	ea e6       	ldi	r30, 0x6A	; 106
     5c4:	f7 e2       	ldi	r31, 0x27	; 39
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <__do_copy_data+0x10>
     5c8:	05 90       	lpm	r0, Z+
     5ca:	0d 92       	st	X+, r0
     5cc:	a4 35       	cpi	r26, 0x54	; 84
     5ce:	b1 07       	cpc	r27, r17
     5d0:	d9 f7       	brne	.-10     	; 0x5c8 <__do_copy_data+0xc>

000005d2 <__do_clear_bss>:
     5d2:	22 e0       	ldi	r18, 0x02	; 2
     5d4:	a4 e5       	ldi	r26, 0x54	; 84
     5d6:	b1 e0       	ldi	r27, 0x01	; 1
     5d8:	01 c0       	rjmp	.+2      	; 0x5dc <.do_clear_bss_start>

000005da <.do_clear_bss_loop>:
     5da:	1d 92       	st	X+, r1

000005dc <.do_clear_bss_start>:
     5dc:	af 34       	cpi	r26, 0x4F	; 79
     5de:	b2 07       	cpc	r27, r18
     5e0:	e1 f7       	brne	.-8      	; 0x5da <.do_clear_bss_loop>

000005e2 <__do_global_ctors>:
     5e2:	12 e0       	ldi	r17, 0x02	; 2
     5e4:	c8 ed       	ldi	r28, 0xD8	; 216
     5e6:	d2 e0       	ldi	r29, 0x02	; 2
     5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <__do_global_ctors+0x10>
     5ea:	21 97       	sbiw	r28, 0x01	; 1
     5ec:	fe 01       	movw	r30, r28
     5ee:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__tablejump2__>
     5f2:	c6 3d       	cpi	r28, 0xD6	; 214
     5f4:	d1 07       	cpc	r29, r17
     5f6:	c9 f7       	brne	.-14     	; 0x5ea <__do_global_ctors+0x8>
     5f8:	0e 94 57 11 	call	0x22ae	; 0x22ae <main>
     5fc:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <_exit>

00000600 <__bad_interrupt>:
     600:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000604 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     604:	26 e0       	ldi	r18, 0x06	; 6
     606:	40 e8       	ldi	r20, 0x80	; 128
     608:	55 e2       	ldi	r21, 0x25	; 37
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	85 ea       	ldi	r24, 0xA5	; 165
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 62 10 	call	0x20c4	; 0x20c4 <_ZN14HardwareSerial5beginEmh>

void setup() {
	Serial.begin(9600);
	while(!Serial);
	
	MsTimer2::set(50, Tick);
     616:	47 e3       	ldi	r20, 0x37	; 55
     618:	53 e0       	ldi	r21, 0x03	; 3
     61a:	62 e3       	ldi	r22, 0x32	; 50
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN8MsTimer23setEmPFvvE>
	MsTimer2::start();
     626:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_ZN8MsTimer25startEv>
	
	matrix.begin();
     62a:	87 e5       	ldi	r24, 0x57	; 87
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <_ZN14RGBmatrixPanel5beginEv>

00000632 <loop>:
}

void loop() {
     632:	08 95       	ret

00000634 <_GLOBAL__sub_I_matrix>:

void serialEvent() {
	if (Serial.available()) {
		control = Serial.read();
	}
     634:	8f 92       	push	r8
     636:	af 92       	push	r10
     638:	cf 92       	push	r12
     63a:	ef 92       	push	r14
     63c:	0f 93       	push	r16
#define C   A2
#define D   A3
// Last parameter = 'true' enables double-buffering, for flicker-free,
// buttery smooth animation.  Note that NOTHING WILL SHOW ON THE DISPLAY
// until the first call to swapBuffers().  This is normal.
RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false);
     63e:	80 e2       	ldi	r24, 0x20	; 32
     640:	8f 93       	push	r24
     642:	81 2c       	mov	r8, r1
     644:	89 e0       	ldi	r24, 0x09	; 9
     646:	a8 2e       	mov	r10, r24
     648:	9a e0       	ldi	r25, 0x0A	; 10
     64a:	c9 2e       	mov	r12, r25
     64c:	28 e0       	ldi	r18, 0x08	; 8
     64e:	e2 2e       	mov	r14, r18
     650:	01 e1       	ldi	r16, 0x11	; 17
     652:	20 e1       	ldi	r18, 0x10	; 16
     654:	4f e0       	ldi	r20, 0x0F	; 15
     656:	6e e0       	ldi	r22, 0x0E	; 14
     658:	87 e5       	ldi	r24, 0x57	; 87
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN14RGBmatrixPanelC1Ehhhhhhhbh>
     660:	0f 90       	pop	r0

void serialEvent() {
	if (Serial.available()) {
		control = Serial.read();
	}
     662:	0f 91       	pop	r16
     664:	ef 90       	pop	r14
     666:	cf 90       	pop	r12
     668:	af 90       	pop	r10
     66a:	8f 90       	pop	r8
     66c:	08 95       	ret

0000066e <_Z4Tickv>:

void Event_Check() {
	
}

void Tick() {
     66e:	8f 92       	push	r8
     670:	9f 92       	push	r9
     672:	af 92       	push	r10
     674:	bf 92       	push	r11
     676:	cf 92       	push	r12
     678:	df 92       	push	r13
     67a:	ef 92       	push	r14
     67c:	ff 92       	push	r15
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
	byte i;

	// Clear background
	matrix.fillScreen(0);
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	87 e5       	ldi	r24, 0x57	; 87
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <_ZN14RGBmatrixPanel10fillScreenEj>
     692:	88 e6       	ldi	r24, 0x68	; 104
     694:	88 2e       	mov	r8, r24
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	98 2e       	mov	r9, r24
     69a:	c7 e0       	ldi	r28, 0x07	; 7
     69c:	d1 e0       	ldi	r29, 0x01	; 1
     69e:	96 e0       	ldi	r25, 0x06	; 6
     6a0:	e9 2e       	mov	r14, r25
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	f9 2e       	mov	r15, r25
     6a6:	28 e0       	ldi	r18, 0x08	; 8
     6a8:	a2 2e       	mov	r10, r18
     6aa:	21 e0       	ldi	r18, 0x01	; 1
     6ac:	b2 2e       	mov	r11, r18
     6ae:	39 e0       	ldi	r19, 0x09	; 9
     6b0:	c3 2e       	mov	r12, r19
     6b2:	31 e0       	ldi	r19, 0x01	; 1
     6b4:	d3 2e       	mov	r13, r19

	// Bounce three balls around
	for(i=0; i<3; i++) {
		// Draw 'ball'
		matrix.fillCircle(ball[i][0], ball[i][1], 2, pgm_read_word(&ballcolor[i]));
     6b6:	f4 01       	movw	r30, r8
     6b8:	05 91       	lpm	r16, Z+
     6ba:	14 91       	lpm	r17, Z
     6bc:	48 81       	ld	r20, Y
     6be:	04 2e       	mov	r0, r20
     6c0:	00 0c       	add	r0, r0
     6c2:	55 0b       	sbc	r21, r21
     6c4:	f7 01       	movw	r30, r14
     6c6:	60 81       	ld	r22, Z
     6c8:	06 2e       	mov	r0, r22
     6ca:	00 0c       	add	r0, r0
     6cc:	77 0b       	sbc	r23, r23
     6ce:	22 e0       	ldi	r18, 0x02	; 2
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	87 e5       	ldi	r24, 0x57	; 87
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN12Adafruit_GFX10fillCircleEiiij>
		// Update X, Y position
		ball[i][0] += ball[i][2];
     6da:	f7 01       	movw	r30, r14
     6dc:	90 81       	ld	r25, Z
     6de:	f5 01       	movw	r30, r10
     6e0:	80 81       	ld	r24, Z
     6e2:	89 0f       	add	r24, r25
     6e4:	f7 01       	movw	r30, r14
     6e6:	80 83       	st	Z, r24
		ball[i][1] += ball[i][3];
     6e8:	98 81       	ld	r25, Y
     6ea:	f6 01       	movw	r30, r12
     6ec:	80 81       	ld	r24, Z
     6ee:	89 0f       	add	r24, r25
     6f0:	88 83       	st	Y, r24
		// Bounce off edges
		if((ball[i][0] == 0) || (ball[i][0] == (matrix.width() - 1)))
     6f2:	f7 01       	movw	r30, r14
     6f4:	10 81       	ld	r17, Z
     6f6:	11 23       	and	r17, r17
     6f8:	09 f4       	brne	.+2      	; 0x6fc <_Z4Tickv+0x8e>
     6fa:	5a c0       	rjmp	.+180    	; 0x7b0 <_Z4Tickv+0x142>
     6fc:	87 e5       	ldi	r24, 0x57	; 87
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	0e 94 18 09 	call	0x1230	; 0x1230 <_ZNK12Adafruit_GFX5widthEv>
     704:	21 2f       	mov	r18, r17
     706:	11 0f       	add	r17, r17
     708:	33 0b       	sbc	r19, r19
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	28 17       	cp	r18, r24
     70e:	39 07       	cpc	r19, r25
     710:	09 f4       	brne	.+2      	; 0x714 <_Z4Tickv+0xa6>
     712:	4e c0       	rjmp	.+156    	; 0x7b0 <_Z4Tickv+0x142>
		ball[i][2] *= -1;
		if((ball[i][1] == 0) || (ball[i][1] == (matrix.height() - 1)))
     714:	18 81       	ld	r17, Y
     716:	11 23       	and	r17, r17
     718:	09 f4       	brne	.+2      	; 0x71c <_Z4Tickv+0xae>
     71a:	4f c0       	rjmp	.+158    	; 0x7ba <_Z4Tickv+0x14c>
     71c:	87 e5       	ldi	r24, 0x57	; 87
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	0e 94 1c 09 	call	0x1238	; 0x1238 <_ZNK12Adafruit_GFX6heightEv>
     724:	21 2f       	mov	r18, r17
     726:	11 0f       	add	r17, r17
     728:	33 0b       	sbc	r19, r19
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	28 17       	cp	r18, r24
     72e:	39 07       	cpc	r19, r25
     730:	09 f4       	brne	.+2      	; 0x734 <_Z4Tickv+0xc6>
     732:	43 c0       	rjmp	.+134    	; 0x7ba <_Z4Tickv+0x14c>
     734:	f2 e0       	ldi	r31, 0x02	; 2
     736:	8f 0e       	add	r8, r31
     738:	91 1c       	adc	r9, r1
     73a:	24 96       	adiw	r28, 0x04	; 4
     73c:	84 e0       	ldi	r24, 0x04	; 4
     73e:	e8 0e       	add	r14, r24
     740:	f1 1c       	adc	r15, r1
     742:	e4 e0       	ldi	r30, 0x04	; 4
     744:	ae 0e       	add	r10, r30
     746:	b1 1c       	adc	r11, r1
     748:	f4 e0       	ldi	r31, 0x04	; 4
     74a:	cf 0e       	add	r12, r31
     74c:	d1 1c       	adc	r13, r1

	// Clear background
	matrix.fillScreen(0);

	// Bounce three balls around
	for(i=0; i<3; i++) {
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	c3 31       	cpi	r28, 0x13	; 19
     752:	d8 07       	cpc	r29, r24
     754:	09 f0       	breq	.+2      	; 0x758 <_Z4Tickv+0xea>
     756:	af cf       	rjmp	.-162    	; 0x6b6 <_Z4Tickv+0x48>
		ball[i][2] *= -1;
		if((ball[i][1] == 0) || (ball[i][1] == (matrix.height() - 1)))
		ball[i][3] *= -1;
	}

	matrix.drawPixel(you[0], you[1], matrix.Color333(1, 1, 1));
     758:	21 e0       	ldi	r18, 0x01	; 1
     75a:	41 e0       	ldi	r20, 0x01	; 1
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	87 e5       	ldi	r24, 0x57	; 87
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <_ZN14RGBmatrixPanel8Color333Ehhh>
     766:	40 91 13 01 	lds	r20, 0x0113
     76a:	04 2e       	mov	r0, r20
     76c:	00 0c       	add	r0, r0
     76e:	55 0b       	sbc	r21, r21
     770:	60 91 12 01 	lds	r22, 0x0112
     774:	06 2e       	mov	r0, r22
     776:	00 0c       	add	r0, r0
     778:	77 0b       	sbc	r23, r23
     77a:	9c 01       	movw	r18, r24
     77c:	87 e5       	ldi	r24, 0x57	; 87
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN14RGBmatrixPanel9drawPixelEiij>
	
	Event_Check();
	
	++count;
     784:	80 91 55 01 	lds	r24, 0x0155
     788:	90 91 56 01 	lds	r25, 0x0156
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	90 93 56 01 	sts	0x0156, r25
     792:	80 93 55 01 	sts	0x0155, r24
}
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	ff 90       	pop	r15
     7a0:	ef 90       	pop	r14
     7a2:	df 90       	pop	r13
     7a4:	cf 90       	pop	r12
     7a6:	bf 90       	pop	r11
     7a8:	af 90       	pop	r10
     7aa:	9f 90       	pop	r9
     7ac:	8f 90       	pop	r8
     7ae:	08 95       	ret
		// Update X, Y position
		ball[i][0] += ball[i][2];
		ball[i][1] += ball[i][3];
		// Bounce off edges
		if((ball[i][0] == 0) || (ball[i][0] == (matrix.width() - 1)))
		ball[i][2] *= -1;
     7b0:	f5 01       	movw	r30, r10
     7b2:	80 81       	ld	r24, Z
     7b4:	81 95       	neg	r24
     7b6:	80 83       	st	Z, r24
     7b8:	ad cf       	rjmp	.-166    	; 0x714 <_Z4Tickv+0xa6>
		if((ball[i][1] == 0) || (ball[i][1] == (matrix.height() - 1)))
		ball[i][3] *= -1;
     7ba:	f6 01       	movw	r30, r12
     7bc:	80 81       	ld	r24, Z
     7be:	81 95       	neg	r24
     7c0:	80 83       	st	Z, r24
     7c2:	b8 cf       	rjmp	.-144    	; 0x734 <_Z4Tickv+0xc6>

000007c4 <_Z11serialEventv>:

void loop() {
}

void serialEvent() {
	if (Serial.available()) {
     7c4:	85 ea       	ldi	r24, 0xA5	; 165
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN14HardwareSerial9availableEv>
     7cc:	89 2b       	or	r24, r25
     7ce:	31 f0       	breq	.+12     	; 0x7dc <_Z11serialEventv+0x18>
		control = Serial.read();
     7d0:	85 ea       	ldi	r24, 0xA5	; 165
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <_ZN14HardwareSerial4readEv>
     7d8:	80 93 54 01 	sts	0x0154, r24
     7dc:	08 95       	ret

000007de <_ZN12Adafruit_GFX8drawLineEiiiij>:
  }
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
 uint16_t color) {
     7de:	2f 92       	push	r2
     7e0:	3f 92       	push	r3
     7e2:	4f 92       	push	r4
     7e4:	5f 92       	push	r5
     7e6:	6f 92       	push	r6
     7e8:	7f 92       	push	r7
     7ea:	8f 92       	push	r8
     7ec:	9f 92       	push	r9
     7ee:	af 92       	push	r10
     7f0:	bf 92       	push	r11
     7f2:	cf 92       	push	r12
     7f4:	df 92       	push	r13
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	00 d0       	rcall	.+0      	; 0x804 <_ZN12Adafruit_GFX8drawLineEiiiij+0x26>
     804:	1f 92       	push	r1
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	4c 01       	movw	r8, r24
     80c:	7b 83       	std	Y+3, r23	; 0x03
     80e:	6a 83       	std	Y+2, r22	; 0x02
     810:	6a 01       	movw	r12, r20
     812:	59 01       	movw	r10, r18
     814:	17 01       	movw	r2, r14
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
     816:	98 01       	movw	r18, r16
     818:	24 1b       	sub	r18, r20
     81a:	35 0b       	sbc	r19, r21
     81c:	37 ff       	sbrs	r19, 7
     81e:	03 c0       	rjmp	.+6      	; 0x826 <_ZN12Adafruit_GFX8drawLineEiiiij+0x48>
     820:	31 95       	neg	r19
     822:	21 95       	neg	r18
     824:	31 09       	sbc	r19, r1
     826:	c5 01       	movw	r24, r10
     828:	4a 81       	ldd	r20, Y+2	; 0x02
     82a:	5b 81       	ldd	r21, Y+3	; 0x03
     82c:	84 1b       	sub	r24, r20
     82e:	95 0b       	sbc	r25, r21
     830:	97 ff       	sbrs	r25, 7
     832:	03 c0       	rjmp	.+6      	; 0x83a <_ZN12Adafruit_GFX8drawLineEiiiij+0x5c>
     834:	91 95       	neg	r25
     836:	81 95       	neg	r24
     838:	91 09       	sbc	r25, r1
     83a:	51 e0       	ldi	r21, 0x01	; 1
     83c:	59 83       	std	Y+1, r21	; 0x01
     83e:	82 17       	cp	r24, r18
     840:	93 07       	cpc	r25, r19
     842:	14 f0       	brlt	.+4      	; 0x848 <_ZN12Adafruit_GFX8drawLineEiiiij+0x6a>
     844:	19 82       	std	Y+1, r1	; 0x01
     846:	0b c0       	rjmp	.+22     	; 0x85e <_ZN12Adafruit_GFX8drawLineEiiiij+0x80>
  if (steep) {
     848:	9a 2d       	mov	r25, r10
     84a:	8b 2d       	mov	r24, r11
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
     84c:	58 01       	movw	r10, r16
     84e:	09 2f       	mov	r16, r25
     850:	18 2f       	mov	r17, r24

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
 uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
     852:	9a 81       	ldd	r25, Y+2	; 0x02
     854:	8b 81       	ldd	r24, Y+3	; 0x03
    _swap_int16_t(x0, y0);
     856:	db 82       	std	Y+3, r13	; 0x03
     858:	ca 82       	std	Y+2, r12	; 0x02
     85a:	c9 2e       	mov	r12, r25
     85c:	d8 2e       	mov	r13, r24
    _swap_int16_t(x1, y1);
  }

  if (x0 > x1) {
     85e:	8a 81       	ldd	r24, Y+2	; 0x02
     860:	9b 81       	ldd	r25, Y+3	; 0x03
     862:	a8 16       	cp	r10, r24
     864:	b9 06       	cpc	r11, r25
     866:	5c f4       	brge	.+22     	; 0x87e <_ZN12Adafruit_GFX8drawLineEiiiij+0xa0>
     868:	9c 2d       	mov	r25, r12
     86a:	8d 2d       	mov	r24, r13
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
     86c:	68 01       	movw	r12, r16
     86e:	09 2f       	mov	r16, r25
     870:	18 2f       	mov	r17, r24
  if (steep) {
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
  }

  if (x0 > x1) {
     872:	9a 81       	ldd	r25, Y+2	; 0x02
     874:	8b 81       	ldd	r24, Y+3	; 0x03
     876:	bb 82       	std	Y+3, r11	; 0x03
     878:	aa 82       	std	Y+2, r10	; 0x02
     87a:	a9 2e       	mov	r10, r25
     87c:	b8 2e       	mov	r11, r24
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
     87e:	25 01       	movw	r4, r10
     880:	aa 81       	ldd	r26, Y+2	; 0x02
     882:	bb 81       	ldd	r27, Y+3	; 0x03
     884:	4a 1a       	sub	r4, r26
     886:	5b 0a       	sbc	r5, r27
  dy = abs(y1 - y0);
     888:	38 01       	movw	r6, r16
     88a:	6c 18       	sub	r6, r12
     88c:	7d 08       	sbc	r7, r13
     88e:	77 fe       	sbrs	r7, 7
     890:	03 c0       	rjmp	.+6      	; 0x898 <_ZN12Adafruit_GFX8drawLineEiiiij+0xba>
     892:	71 94       	neg	r7
     894:	61 94       	neg	r6
     896:	71 08       	sbc	r7, r1

  int16_t err = dx / 2;
     898:	72 01       	movw	r14, r4
     89a:	57 fe       	sbrs	r5, 7
     89c:	03 c0       	rjmp	.+6      	; 0x8a4 <_ZN12Adafruit_GFX8drawLineEiiiij+0xc6>
     89e:	bf ef       	ldi	r27, 0xFF	; 255
     8a0:	eb 1a       	sub	r14, r27
     8a2:	fb 0a       	sbc	r15, r27
     8a4:	f5 94       	asr	r15
     8a6:	e7 94       	ror	r14
  int16_t ystep;

  if (y0 < y1) {
     8a8:	c0 16       	cp	r12, r16
     8aa:	d1 06       	cpc	r13, r17
     8ac:	1c f0       	brlt	.+6      	; 0x8b4 <_ZN12Adafruit_GFX8drawLineEiiiij+0xd6>
    ystep = 1;
  } else {
    ystep = -1;
     8ae:	0f ef       	ldi	r16, 0xFF	; 255
     8b0:	1f ef       	ldi	r17, 0xFF	; 255
     8b2:	1f c0       	rjmp	.+62     	; 0x8f2 <_ZN12Adafruit_GFX8drawLineEiiiij+0x114>

  int16_t err = dx / 2;
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
     8b4:	01 e0       	ldi	r16, 0x01	; 1
     8b6:	10 e0       	ldi	r17, 0x00	; 0
     8b8:	1c c0       	rjmp	.+56     	; 0x8f2 <_ZN12Adafruit_GFX8drawLineEiiiij+0x114>
     8ba:	d4 01       	movw	r26, r8
     8bc:	ed 91       	ld	r30, X+
     8be:	fc 91       	ld	r31, X
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
     8c0:	b9 81       	ldd	r27, Y+1	; 0x01
      drawPixel(y0, x0, color);
     8c2:	04 80       	ldd	r0, Z+4	; 0x04
     8c4:	f5 81       	ldd	r31, Z+5	; 0x05
     8c6:	e0 2d       	mov	r30, r0
     8c8:	91 01       	movw	r18, r2
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
     8ca:	bb 23       	and	r27, r27
     8cc:	c1 f0       	breq	.+48     	; 0x8fe <_ZN12Adafruit_GFX8drawLineEiiiij+0x120>
      drawPixel(y0, x0, color);
     8ce:	4a 81       	ldd	r20, Y+2	; 0x02
     8d0:	5b 81       	ldd	r21, Y+3	; 0x03
     8d2:	b6 01       	movw	r22, r12
    } else {
      drawPixel(x0, y0, color);
     8d4:	c4 01       	movw	r24, r8
     8d6:	09 95       	icall
    }
    err -= dy;
     8d8:	e6 18       	sub	r14, r6
     8da:	f7 08       	sbc	r15, r7
    if (err < 0) {
     8dc:	f7 fe       	sbrs	r15, 7
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <_ZN12Adafruit_GFX8drawLineEiiiij+0x10a>
      y0 += ystep;
     8e0:	c0 0e       	add	r12, r16
     8e2:	d1 1e       	adc	r13, r17
      err += dx;
     8e4:	e4 0c       	add	r14, r4
     8e6:	f5 1c       	adc	r15, r5
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
     8e8:	ea 81       	ldd	r30, Y+2	; 0x02
     8ea:	fb 81       	ldd	r31, Y+3	; 0x03
     8ec:	31 96       	adiw	r30, 0x01	; 1
     8ee:	fb 83       	std	Y+3, r31	; 0x03
     8f0:	ea 83       	std	Y+2, r30	; 0x02
     8f2:	4a 81       	ldd	r20, Y+2	; 0x02
     8f4:	5b 81       	ldd	r21, Y+3	; 0x03
     8f6:	a4 16       	cp	r10, r20
     8f8:	b5 06       	cpc	r11, r21
     8fa:	fc f6       	brge	.-66     	; 0x8ba <_ZN12Adafruit_GFX8drawLineEiiiij+0xdc>
     8fc:	04 c0       	rjmp	.+8      	; 0x906 <__stack+0x7>
    if (steep) {
      drawPixel(y0, x0, color);
    } else {
      drawPixel(x0, y0, color);
     8fe:	a6 01       	movw	r20, r12
     900:	6a 81       	ldd	r22, Y+2	; 0x02
     902:	7b 81       	ldd	r23, Y+3	; 0x03
     904:	e7 cf       	rjmp	.-50     	; 0x8d4 <_ZN12Adafruit_GFX8drawLineEiiiij+0xf6>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	ff 90       	pop	r15
     916:	ef 90       	pop	r14
     918:	df 90       	pop	r13
     91a:	cf 90       	pop	r12
     91c:	bf 90       	pop	r11
     91e:	af 90       	pop	r10
     920:	9f 90       	pop	r9
     922:	8f 90       	pop	r8
     924:	7f 90       	pop	r7
     926:	6f 90       	pop	r6
     928:	5f 90       	pop	r5
     92a:	4f 90       	pop	r4
     92c:	3f 90       	pop	r3
     92e:	2f 90       	pop	r2
     930:	08 95       	ret

00000932 <_ZN12Adafruit_GFX8drawRectEiiiij>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
     932:	6f 92       	push	r6
     934:	7f 92       	push	r7
     936:	8f 92       	push	r8
     938:	9f 92       	push	r9
     93a:	af 92       	push	r10
     93c:	bf 92       	push	r11
     93e:	cf 92       	push	r12
     940:	df 92       	push	r13
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	ec 01       	movw	r28, r24
     950:	4b 01       	movw	r8, r22
     952:	5a 01       	movw	r10, r20
     954:	69 01       	movw	r12, r18
     956:	38 01       	movw	r6, r16
  drawFastHLine(x, y, w, color);
     958:	e8 81       	ld	r30, Y
     95a:	f9 81       	ldd	r31, Y+1	; 0x01
     95c:	02 84       	ldd	r0, Z+10	; 0x0a
     95e:	f3 85       	ldd	r31, Z+11	; 0x0b
     960:	e0 2d       	mov	r30, r0
     962:	87 01       	movw	r16, r14
     964:	09 95       	icall
  drawFastHLine(x, y+h-1, w, color);
     966:	e8 81       	ld	r30, Y
     968:	f9 81       	ldd	r31, Y+1	; 0x01
     96a:	a5 01       	movw	r20, r10
     96c:	46 0d       	add	r20, r6
     96e:	57 1d       	adc	r21, r7
     970:	41 50       	subi	r20, 0x01	; 1
     972:	51 09       	sbc	r21, r1
     974:	02 84       	ldd	r0, Z+10	; 0x0a
     976:	f3 85       	ldd	r31, Z+11	; 0x0b
     978:	e0 2d       	mov	r30, r0
     97a:	96 01       	movw	r18, r12
     97c:	b4 01       	movw	r22, r8
     97e:	ce 01       	movw	r24, r28
     980:	09 95       	icall
  drawFastVLine(x, y, h, color);
     982:	e8 81       	ld	r30, Y
     984:	f9 81       	ldd	r31, Y+1	; 0x01
     986:	00 84       	ldd	r0, Z+8	; 0x08
     988:	f1 85       	ldd	r31, Z+9	; 0x09
     98a:	e0 2d       	mov	r30, r0
     98c:	93 01       	movw	r18, r6
     98e:	a5 01       	movw	r20, r10
     990:	b4 01       	movw	r22, r8
     992:	ce 01       	movw	r24, r28
     994:	09 95       	icall
  drawFastVLine(x+w-1, y, h, color);
     996:	e8 81       	ld	r30, Y
     998:	f9 81       	ldd	r31, Y+1	; 0x01
     99a:	c8 0c       	add	r12, r8
     99c:	d9 1c       	adc	r13, r9
     99e:	b6 01       	movw	r22, r12
     9a0:	61 50       	subi	r22, 0x01	; 1
     9a2:	71 09       	sbc	r23, r1
     9a4:	00 84       	ldd	r0, Z+8	; 0x08
     9a6:	f1 85       	ldd	r31, Z+9	; 0x09
     9a8:	e0 2d       	mov	r30, r0
     9aa:	93 01       	movw	r18, r6
     9ac:	a5 01       	movw	r20, r10
     9ae:	ce 01       	movw	r24, r28
     9b0:	09 95       	icall
}
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	ef 90       	pop	r14
     9be:	df 90       	pop	r13
     9c0:	cf 90       	pop	r12
     9c2:	bf 90       	pop	r11
     9c4:	af 90       	pop	r10
     9c6:	9f 90       	pop	r9
     9c8:	8f 90       	pop	r8
     9ca:	7f 90       	pop	r7
     9cc:	6f 90       	pop	r6
     9ce:	08 95       	ret

000009d0 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
 int16_t h, uint16_t color) {
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	78 01       	movw	r14, r16
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
     9da:	dc 01       	movw	r26, r24
     9dc:	ed 91       	ld	r30, X+
     9de:	fc 91       	ld	r31, X
     9e0:	24 0f       	add	r18, r20
     9e2:	35 1f       	adc	r19, r21
     9e4:	89 01       	movw	r16, r18
     9e6:	01 50       	subi	r16, 0x01	; 1
     9e8:	11 09       	sbc	r17, r1
     9ea:	06 80       	ldd	r0, Z+6	; 0x06
     9ec:	f7 81       	ldd	r31, Z+7	; 0x07
     9ee:	e0 2d       	mov	r30, r0
     9f0:	9b 01       	movw	r18, r22
     9f2:	09 95       	icall
}
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	ff 90       	pop	r15
     9fa:	ef 90       	pop	r14
     9fc:	08 95       	ret

000009fe <_ZN12Adafruit_GFX13drawFastHLineEiiij>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
 int16_t w, uint16_t color) {
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
     a06:	dc 01       	movw	r26, r24
     a08:	ed 91       	ld	r30, X+
     a0a:	fc 91       	ld	r31, X
     a0c:	26 0f       	add	r18, r22
     a0e:	37 1f       	adc	r19, r23
     a10:	21 50       	subi	r18, 0x01	; 1
     a12:	31 09       	sbc	r19, r1
     a14:	06 80       	ldd	r0, Z+6	; 0x06
     a16:	f7 81       	ldd	r31, Z+7	; 0x07
     a18:	e0 2d       	mov	r30, r0
     a1a:	78 01       	movw	r14, r16
     a1c:	8a 01       	movw	r16, r20
     a1e:	09 95       	icall
}
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	08 95       	ret

00000a2a <_ZN12Adafruit_GFX8fillRectEiiiij>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
     a2a:	6f 92       	push	r6
     a2c:	7f 92       	push	r7
     a2e:	8f 92       	push	r8
     a30:	9f 92       	push	r9
     a32:	af 92       	push	r10
     a34:	bf 92       	push	r11
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	6c 01       	movw	r12, r24
     a48:	5a 01       	movw	r10, r20
     a4a:	48 01       	movw	r8, r16
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
     a4c:	eb 01       	movw	r28, r22
     a4e:	3b 01       	movw	r6, r22
     a50:	62 0e       	add	r6, r18
     a52:	73 1e       	adc	r7, r19
     a54:	c6 15       	cp	r28, r6
     a56:	d7 05       	cpc	r29, r7
     a58:	74 f4       	brge	.+28     	; 0xa76 <_ZN12Adafruit_GFX8fillRectEiiiij+0x4c>
    drawFastVLine(i, y, h, color);
     a5a:	d6 01       	movw	r26, r12
     a5c:	ed 91       	ld	r30, X+
     a5e:	fc 91       	ld	r31, X
     a60:	00 84       	ldd	r0, Z+8	; 0x08
     a62:	f1 85       	ldd	r31, Z+9	; 0x09
     a64:	e0 2d       	mov	r30, r0
     a66:	87 01       	movw	r16, r14
     a68:	94 01       	movw	r18, r8
     a6a:	a5 01       	movw	r20, r10
     a6c:	be 01       	movw	r22, r28
     a6e:	c6 01       	movw	r24, r12
     a70:	09 95       	icall
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
     a72:	21 96       	adiw	r28, 0x01	; 1
     a74:	ef cf       	rjmp	.-34     	; 0xa54 <_ZN12Adafruit_GFX8fillRectEiiiij+0x2a>
    drawFastVLine(i, y, h, color);
  }
}
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	9f 90       	pop	r9
     a8c:	8f 90       	pop	r8
     a8e:	7f 90       	pop	r7
     a90:	6f 90       	pop	r6
     a92:	08 95       	ret

00000a94 <_ZN12Adafruit_GFX10fillScreenEj>:

void Adafruit_GFX::fillScreen(uint16_t color) {
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
  fillRect(0, 0, _width, _height, color);
     a9c:	dc 01       	movw	r26, r24
     a9e:	ed 91       	ld	r30, X+
     aa0:	fc 91       	ld	r31, X
     aa2:	11 97       	sbiw	r26, 0x01	; 1
     aa4:	1a 96       	adiw	r26, 0x0a	; 10
     aa6:	0d 91       	ld	r16, X+
     aa8:	1c 91       	ld	r17, X
     aaa:	1b 97       	sbiw	r26, 0x0b	; 11
     aac:	18 96       	adiw	r26, 0x08	; 8
     aae:	2d 91       	ld	r18, X+
     ab0:	3c 91       	ld	r19, X
     ab2:	19 97       	sbiw	r26, 0x09	; 9
     ab4:	06 84       	ldd	r0, Z+14	; 0x0e
     ab6:	f7 85       	ldd	r31, Z+15	; 0x0f
     ab8:	e0 2d       	mov	r30, r0
     aba:	7b 01       	movw	r14, r22
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	50 e0       	ldi	r21, 0x00	; 0
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	09 95       	icall
}
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
     ace:	08 95       	ret

00000ad0 <_ZN12Adafruit_GFX13invertDisplayEb>:

int16_t Adafruit_GFX::height(void) const {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
     ad0:	08 95       	ret

00000ad2 <_ZN12Adafruit_GFXC1Eii>:

#ifndef _swap_int16_t
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
#endif

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
     ad2:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     ad4:	13 82       	std	Z+3, r1	; 0x03
     ad6:	12 82       	std	Z+2, r1	; 0x02
  WIDTH(w), HEIGHT(h)
     ad8:	88 e1       	ldi	r24, 0x18	; 24
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	91 83       	std	Z+1, r25	; 0x01
     ade:	80 83       	st	Z, r24
     ae0:	75 83       	std	Z+5, r23	; 0x05
     ae2:	64 83       	std	Z+4, r22	; 0x04
     ae4:	57 83       	std	Z+7, r21	; 0x07
     ae6:	46 83       	std	Z+6, r20	; 0x06
{
  _width    = WIDTH;
     ae8:	71 87       	std	Z+9, r23	; 0x09
     aea:	60 87       	std	Z+8, r22	; 0x08
  _height   = HEIGHT;
     aec:	53 87       	std	Z+11, r21	; 0x0b
     aee:	42 87       	std	Z+10, r20	; 0x0a
  rotation  = 0;
     af0:	15 8a       	std	Z+21, r1	; 0x15
  cursor_y  = cursor_x    = 0;
     af2:	15 86       	std	Z+13, r1	; 0x0d
     af4:	14 86       	std	Z+12, r1	; 0x0c
     af6:	17 86       	std	Z+15, r1	; 0x0f
     af8:	16 86       	std	Z+14, r1	; 0x0e
  textsize  = 1;
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	84 8b       	std	Z+20, r24	; 0x14
  textcolor = textbgcolor = 0xFFFF;
     afe:	2f ef       	ldi	r18, 0xFF	; 255
     b00:	3f ef       	ldi	r19, 0xFF	; 255
     b02:	33 8b       	std	Z+19, r19	; 0x13
     b04:	22 8b       	std	Z+18, r18	; 0x12
     b06:	31 8b       	std	Z+17, r19	; 0x11
     b08:	20 8b       	std	Z+16, r18	; 0x10
  wrap      = true;
     b0a:	86 8b       	std	Z+22, r24	; 0x16
  _cp437    = false;
     b0c:	17 8a       	std	Z+23, r1	; 0x17
  gfxFont   = NULL;
     b0e:	11 8e       	std	Z+25, r1	; 0x19
     b10:	10 8e       	std	Z+24, r1	; 0x18
     b12:	08 95       	ret

00000b14 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij>:
  fillCircleHelper(x0, y0, r, 3, 0, color);
}

// Used to do circles and roundrects
void Adafruit_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
 uint8_t cornername, int16_t delta, uint16_t color) {
     b14:	2f 92       	push	r2
     b16:	3f 92       	push	r3
     b18:	4f 92       	push	r4
     b1a:	5f 92       	push	r5
     b1c:	6f 92       	push	r6
     b1e:	7f 92       	push	r7
     b20:	8f 92       	push	r8
     b22:	9f 92       	push	r9
     b24:	af 92       	push	r10
     b26:	bf 92       	push	r11
     b28:	cf 92       	push	r12
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	28 97       	sbiw	r28, 0x08	; 8
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	de bf       	out	0x3e, r29	; 62
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	cd bf       	out	0x3d, r28	; 61
     b48:	5c 01       	movw	r10, r24
     b4a:	3b 01       	movw	r6, r22
     b4c:	4a 01       	movw	r8, r20
     b4e:	38 87       	std	Y+8, r19	; 0x08
     b50:	2f 83       	std	Y+7, r18	; 0x07
     b52:	fc 82       	std	Y+4, r15	; 0x04
     b54:	eb 82       	std	Y+3, r14	; 0x03

  int16_t f     = 1 - r;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	2c 01       	movw	r4, r24
     b5c:	42 1a       	sub	r4, r18
     b5e:	53 0a       	sbc	r5, r19
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
     b60:	c9 01       	movw	r24, r18
     b62:	91 95       	neg	r25
     b64:	81 95       	neg	r24
     b66:	91 09       	sbc	r25, r1
     b68:	9c 01       	movw	r18, r24
     b6a:	22 0f       	add	r18, r18
     b6c:	33 1f       	adc	r19, r19
     b6e:	3a 83       	std	Y+2, r19	; 0x02
     b70:	29 83       	std	Y+1, r18	; 0x01
     b72:	17 01       	movw	r2, r14
     b74:	33 e0       	ldi	r19, 0x03	; 3
     b76:	23 0e       	add	r2, r19
     b78:	31 1c       	adc	r3, r1
  int16_t x     = 0;
  int16_t y     = r;

  while (x<y) {
     b7a:	ee 24       	eor	r14, r14
     b7c:	e3 94       	inc	r14
     b7e:	f1 2c       	mov	r15, r1
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1) {
     b80:	80 2f       	mov	r24, r16
     b82:	81 70       	andi	r24, 0x01	; 1
     b84:	8d 83       	std	Y+5, r24	; 0x05
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
      drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
    }
    if (cornername & 0x2) {
     b86:	02 70       	andi	r16, 0x02	; 2
     b88:	0e 83       	std	Y+6, r16	; 0x06
     b8a:	c7 01       	movw	r24, r14
     b8c:	01 97       	sbiw	r24, 0x01	; 1
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
  int16_t x     = 0;
  int16_t y     = r;

  while (x<y) {
     b8e:	ef 81       	ldd	r30, Y+7	; 0x07
     b90:	f8 85       	ldd	r31, Y+8	; 0x08
     b92:	8e 17       	cp	r24, r30
     b94:	9f 07       	cpc	r25, r31
     b96:	0c f0       	brlt	.+2      	; 0xb9a <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x86>
     b98:	78 c0       	rjmp	.+240    	; 0xc8a <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x176>
    if (f >= 0) {
     b9a:	57 fc       	sbrc	r5, 7
     b9c:	0c c0       	rjmp	.+24     	; 0xbb6 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0xa2>
      y--;
     b9e:	af 81       	ldd	r26, Y+7	; 0x07
     ba0:	b8 85       	ldd	r27, Y+8	; 0x08
     ba2:	11 97       	sbiw	r26, 0x01	; 1
     ba4:	b8 87       	std	Y+8, r27	; 0x08
     ba6:	af 83       	std	Y+7, r26	; 0x07
      ddF_y += 2;
     ba8:	e9 81       	ldd	r30, Y+1	; 0x01
     baa:	fa 81       	ldd	r31, Y+2	; 0x02
     bac:	32 96       	adiw	r30, 0x02	; 2
     bae:	fa 83       	std	Y+2, r31	; 0x02
     bb0:	e9 83       	std	Y+1, r30	; 0x01
      f     += ddF_y;
     bb2:	4e 0e       	add	r4, r30
     bb4:	5f 1e       	adc	r5, r31
     bb6:	c7 01       	movw	r24, r14
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	01 96       	adiw	r24, 0x01	; 1
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;
     bbe:	48 0e       	add	r4, r24
     bc0:	59 1e       	adc	r5, r25

    if (cornername & 0x1) {
     bc2:	fd 81       	ldd	r31, Y+5	; 0x05
     bc4:	ff 23       	and	r31, r31
     bc6:	59 f1       	breq	.+86     	; 0xc1e <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x10a>
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
     bc8:	d5 01       	movw	r26, r10
     bca:	ed 91       	ld	r30, X+
     bcc:	fc 91       	ld	r31, X
     bce:	2f 81       	ldd	r18, Y+7	; 0x07
     bd0:	38 85       	ldd	r19, Y+8	; 0x08
     bd2:	22 0f       	add	r18, r18
     bd4:	33 1f       	adc	r19, r19
     bd6:	2f 5f       	subi	r18, 0xFF	; 255
     bd8:	3f 4f       	sbci	r19, 0xFF	; 255
     bda:	8b 81       	ldd	r24, Y+3	; 0x03
     bdc:	9c 81       	ldd	r25, Y+4	; 0x04
     bde:	28 0f       	add	r18, r24
     be0:	39 1f       	adc	r19, r25
     be2:	00 84       	ldd	r0, Z+8	; 0x08
     be4:	f1 85       	ldd	r31, Z+9	; 0x09
     be6:	e0 2d       	mov	r30, r0
     be8:	86 01       	movw	r16, r12
     bea:	a4 01       	movw	r20, r8
     bec:	af 81       	ldd	r26, Y+7	; 0x07
     bee:	b8 85       	ldd	r27, Y+8	; 0x08
     bf0:	4a 1b       	sub	r20, r26
     bf2:	5b 0b       	sbc	r21, r27
     bf4:	b7 01       	movw	r22, r14
     bf6:	66 0d       	add	r22, r6
     bf8:	77 1d       	adc	r23, r7
     bfa:	c5 01       	movw	r24, r10
     bfc:	09 95       	icall
      drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
     bfe:	d5 01       	movw	r26, r10
     c00:	ed 91       	ld	r30, X+
     c02:	fc 91       	ld	r31, X
     c04:	00 84       	ldd	r0, Z+8	; 0x08
     c06:	f1 85       	ldd	r31, Z+9	; 0x09
     c08:	e0 2d       	mov	r30, r0
     c0a:	91 01       	movw	r18, r2
     c0c:	a4 01       	movw	r20, r8
     c0e:	4e 19       	sub	r20, r14
     c10:	5f 09       	sbc	r21, r15
     c12:	6f 81       	ldd	r22, Y+7	; 0x07
     c14:	78 85       	ldd	r23, Y+8	; 0x08
     c16:	66 0d       	add	r22, r6
     c18:	77 1d       	adc	r23, r7
     c1a:	c5 01       	movw	r24, r10
     c1c:	09 95       	icall
    }
    if (cornername & 0x2) {
     c1e:	be 81       	ldd	r27, Y+6	; 0x06
     c20:	bb 23       	and	r27, r27
     c22:	61 f1       	breq	.+88     	; 0xc7c <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x168>
      drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
     c24:	d5 01       	movw	r26, r10
     c26:	ed 91       	ld	r30, X+
     c28:	fc 91       	ld	r31, X
     c2a:	2f 81       	ldd	r18, Y+7	; 0x07
     c2c:	38 85       	ldd	r19, Y+8	; 0x08
     c2e:	22 0f       	add	r18, r18
     c30:	33 1f       	adc	r19, r19
     c32:	2f 5f       	subi	r18, 0xFF	; 255
     c34:	3f 4f       	sbci	r19, 0xFF	; 255
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	9c 81       	ldd	r25, Y+4	; 0x04
     c3a:	28 0f       	add	r18, r24
     c3c:	39 1f       	adc	r19, r25
     c3e:	00 84       	ldd	r0, Z+8	; 0x08
     c40:	f1 85       	ldd	r31, Z+9	; 0x09
     c42:	e0 2d       	mov	r30, r0
     c44:	86 01       	movw	r16, r12
     c46:	a4 01       	movw	r20, r8
     c48:	af 81       	ldd	r26, Y+7	; 0x07
     c4a:	b8 85       	ldd	r27, Y+8	; 0x08
     c4c:	4a 1b       	sub	r20, r26
     c4e:	5b 0b       	sbc	r21, r27
     c50:	b3 01       	movw	r22, r6
     c52:	6e 19       	sub	r22, r14
     c54:	7f 09       	sbc	r23, r15
     c56:	c5 01       	movw	r24, r10
     c58:	09 95       	icall
      drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
     c5a:	d5 01       	movw	r26, r10
     c5c:	ed 91       	ld	r30, X+
     c5e:	fc 91       	ld	r31, X
     c60:	00 84       	ldd	r0, Z+8	; 0x08
     c62:	f1 85       	ldd	r31, Z+9	; 0x09
     c64:	e0 2d       	mov	r30, r0
     c66:	91 01       	movw	r18, r2
     c68:	a4 01       	movw	r20, r8
     c6a:	4e 19       	sub	r20, r14
     c6c:	5f 09       	sbc	r21, r15
     c6e:	b3 01       	movw	r22, r6
     c70:	8f 81       	ldd	r24, Y+7	; 0x07
     c72:	98 85       	ldd	r25, Y+8	; 0x08
     c74:	68 1b       	sub	r22, r24
     c76:	79 0b       	sbc	r23, r25
     c78:	c5 01       	movw	r24, r10
     c7a:	09 95       	icall
     c7c:	9f ef       	ldi	r25, 0xFF	; 255
     c7e:	e9 1a       	sub	r14, r25
     c80:	f9 0a       	sbc	r15, r25
     c82:	a2 e0       	ldi	r26, 0x02	; 2
     c84:	2a 0e       	add	r2, r26
     c86:	31 1c       	adc	r3, r1
     c88:	80 cf       	rjmp	.-256    	; 0xb8a <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x76>
    }
  }
}
     c8a:	28 96       	adiw	r28, 0x08	; 8
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	cf 90       	pop	r12
     ca6:	bf 90       	pop	r11
     ca8:	af 90       	pop	r10
     caa:	9f 90       	pop	r9
     cac:	8f 90       	pop	r8
     cae:	7f 90       	pop	r7
     cb0:	6f 90       	pop	r6
     cb2:	5f 90       	pop	r5
     cb4:	4f 90       	pop	r4
     cb6:	3f 90       	pop	r3
     cb8:	2f 90       	pop	r2
     cba:	08 95       	ret

00000cbc <_ZN12Adafruit_GFX10fillCircleEiiij>:
    }
  }
}

void Adafruit_GFX::fillCircle(int16_t x0, int16_t y0, int16_t r,
 uint16_t color) {
     cbc:	6f 92       	push	r6
     cbe:	7f 92       	push	r7
     cc0:	8f 92       	push	r8
     cc2:	9f 92       	push	r9
     cc4:	af 92       	push	r10
     cc6:	bf 92       	push	r11
     cc8:	cf 92       	push	r12
     cca:	df 92       	push	r13
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	ec 01       	movw	r28, r24
     cda:	4b 01       	movw	r8, r22
     cdc:	3a 01       	movw	r6, r20
     cde:	59 01       	movw	r10, r18
     ce0:	68 01       	movw	r12, r16
  drawFastVLine(x0, y0-r, 2*r+1, color);
     ce2:	e8 81       	ld	r30, Y
     ce4:	f9 81       	ldd	r31, Y+1	; 0x01
     ce6:	22 0f       	add	r18, r18
     ce8:	33 1f       	adc	r19, r19
     cea:	2f 5f       	subi	r18, 0xFF	; 255
     cec:	3f 4f       	sbci	r19, 0xFF	; 255
     cee:	4a 19       	sub	r20, r10
     cf0:	5b 09       	sbc	r21, r11
     cf2:	00 84       	ldd	r0, Z+8	; 0x08
     cf4:	f1 85       	ldd	r31, Z+9	; 0x09
     cf6:	e0 2d       	mov	r30, r0
     cf8:	ce 01       	movw	r24, r28
     cfa:	09 95       	icall
  fillCircleHelper(x0, y0, r, 3, 0, color);
     cfc:	e1 2c       	mov	r14, r1
     cfe:	f1 2c       	mov	r15, r1
     d00:	03 e0       	ldi	r16, 0x03	; 3
     d02:	95 01       	movw	r18, r10
     d04:	a3 01       	movw	r20, r6
     d06:	b4 01       	movw	r22, r8
     d08:	ce 01       	movw	r24, r28
     d0a:	0e 94 8a 05 	call	0xb14	; 0xb14 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij>
}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	df 90       	pop	r13
     d1c:	cf 90       	pop	r12
     d1e:	bf 90       	pop	r11
     d20:	af 90       	pop	r10
     d22:	9f 90       	pop	r9
     d24:	8f 90       	pop	r8
     d26:	7f 90       	pop	r7
     d28:	6f 90       	pop	r6
     d2a:	08 95       	ret

00000d2c <_ZN12Adafruit_GFX8drawCharEiihjjh>:
#endif
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
 uint16_t color, uint16_t bg, uint8_t size) {
     d2c:	2f 92       	push	r2
     d2e:	3f 92       	push	r3
     d30:	4f 92       	push	r4
     d32:	5f 92       	push	r5
     d34:	6f 92       	push	r6
     d36:	7f 92       	push	r7
     d38:	8f 92       	push	r8
     d3a:	9f 92       	push	r9
     d3c:	af 92       	push	r10
     d3e:	bf 92       	push	r11
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	69 97       	sbiw	r28, 0x19	; 25
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	3c 01       	movw	r6, r24
     d62:	4a 01       	movw	r8, r20
     d64:	1f 83       	std	Y+7, r17	; 0x07
     d66:	0e 83       	std	Y+6, r16	; 0x06
     d68:	fd 82       	std	Y+5, r15	; 0x05
     d6a:	ec 82       	std	Y+4, r14	; 0x04
     d6c:	ca 82       	std	Y+2, r12	; 0x02

  if(!gfxFont) { // 'Classic' built-in font
     d6e:	dc 01       	movw	r26, r24
     d70:	58 96       	adiw	r26, 0x18	; 24
     d72:	4d 91       	ld	r20, X+
     d74:	5c 91       	ld	r21, X
     d76:	59 97       	sbiw	r26, 0x19	; 25
     d78:	41 15       	cp	r20, r1
     d7a:	51 05       	cpc	r21, r1
     d7c:	09 f0       	breq	.+2      	; 0xd80 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x54>
     d7e:	a8 c0       	rjmp	.+336    	; 0xed0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1a4>

    if((x >= _width)            || // Clip right
     d80:	18 96       	adiw	r26, 0x08	; 8
     d82:	8d 91       	ld	r24, X+
     d84:	9c 91       	ld	r25, X
     d86:	19 97       	sbiw	r26, 0x09	; 9
     d88:	68 17       	cp	r22, r24
     d8a:	79 07       	cpc	r23, r25
     d8c:	0c f0       	brlt	.+2      	; 0xd90 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x64>
     d8e:	60 c1       	rjmp	.+704    	; 0x1050 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
     d90:	1a 96       	adiw	r26, 0x0a	; 10
     d92:	8d 91       	ld	r24, X+
     d94:	9c 91       	ld	r25, X
     d96:	1b 97       	sbiw	r26, 0x0b	; 11
     d98:	88 16       	cp	r8, r24
     d9a:	99 06       	cpc	r9, r25
     d9c:	0c f0       	brlt	.+2      	; 0xda0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x74>
     d9e:	58 c1       	rjmp	.+688    	; 0x1050 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
       (y >= _height)           || // Clip bottom
       ((x + 6 * size - 1) < 0) || // Clip left
     da0:	d1 2c       	mov	r13, r1
     da2:	cb 01       	movw	r24, r22
     da4:	ea 81       	ldd	r30, Y+2	; 0x02
     da6:	b6 e0       	ldi	r27, 0x06	; 6
     da8:	eb 9f       	mul	r30, r27
     daa:	80 0d       	add	r24, r0
     dac:	91 1d       	adc	r25, r1
     dae:	11 24       	eor	r1, r1
 uint16_t color, uint16_t bg, uint8_t size) {

  if(!gfxFont) { // 'Classic' built-in font

    if((x >= _width)            || // Clip right
       (y >= _height)           || // Clip bottom
     db0:	18 16       	cp	r1, r24
     db2:	19 06       	cpc	r1, r25
     db4:	0c f0       	brlt	.+2      	; 0xdb8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x8c>
     db6:	4c c1       	rjmp	.+664    	; 0x1050 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
       ((x + 6 * size - 1) < 0) || // Clip left
       ((y + 8 * size - 1) < 0))   // Clip top
     db8:	c6 01       	movw	r24, r12
     dba:	33 e0       	ldi	r19, 0x03	; 3
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	3a 95       	dec	r19
     dc2:	e1 f7       	brne	.-8      	; 0xdbc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x90>
     dc4:	88 0d       	add	r24, r8
     dc6:	99 1d       	adc	r25, r9

  if(!gfxFont) { // 'Classic' built-in font

    if((x >= _width)            || // Clip right
       (y >= _height)           || // Clip bottom
       ((x + 6 * size - 1) < 0) || // Clip left
     dc8:	18 16       	cp	r1, r24
     dca:	19 06       	cpc	r1, r25
     dcc:	0c f0       	brlt	.+2      	; 0xdd0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xa4>
     dce:	40 c1       	rjmp	.+640    	; 0x1050 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
     dd0:	d3 01       	movw	r26, r6
     dd2:	57 96       	adiw	r26, 0x17	; 23
     dd4:	8c 91       	ld	r24, X
     dd6:	81 11       	cpse	r24, r1
     dd8:	03 c0       	rjmp	.+6      	; 0xde0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xb4>
     dda:	20 3b       	cpi	r18, 0xB0	; 176
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xb4>
     dde:	2f 5f       	subi	r18, 0xFF	; 255

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
     de0:	b5 e0       	ldi	r27, 0x05	; 5
     de2:	2b 9f       	mul	r18, r27
     de4:	90 01       	movw	r18, r0
     de6:	11 24       	eor	r1, r1
     de8:	7e 87       	std	Y+14, r23	; 0x0e
     dea:	6d 87       	std	Y+13, r22	; 0x0d
     dec:	2b 01       	movw	r4, r22
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

    for(int8_t i=0; i<6; i++ ) {
     dee:	1b 82       	std	Y+3, r1	; 0x03
     df0:	f9 01       	movw	r30, r18
     df2:	e6 1b       	sub	r30, r22
     df4:	f7 0b       	sbc	r31, r23
     df6:	f9 87       	std	Y+9, r31	; 0x09
     df8:	e8 87       	std	Y+8, r30	; 0x08
     dfa:	94 01       	movw	r18, r8
     dfc:	28 5f       	subi	r18, 0xF8	; 248
     dfe:	3f 4f       	sbci	r19, 0xFF	; 255
     e00:	3b 87       	std	Y+11, r19	; 0x0b
     e02:	2a 87       	std	Y+10, r18	; 0x0a
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
     e04:	3b 81       	ldd	r19, Y+3	; 0x03
     e06:	35 30       	cpi	r19, 0x05	; 5
     e08:	59 f0       	breq	.+22     	; 0xe20 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xf4>
     e0a:	e8 85       	ldd	r30, Y+8	; 0x08
     e0c:	f9 85       	ldd	r31, Y+9	; 0x09
     e0e:	4d 85       	ldd	r20, Y+13	; 0x0d
     e10:	5e 85       	ldd	r21, Y+14	; 0x0e
     e12:	e4 0f       	add	r30, r20
     e14:	f5 1f       	adc	r31, r21
     e16:	e0 59       	subi	r30, 0x90	; 144
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	54 91       	lpm	r21, Z
     e1c:	59 83       	std	Y+1, r21	; 0x01
     e1e:	01 c0       	rjmp	.+2      	; 0xe22 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xf6>
      else      line = 0x0;
     e20:	19 82       	std	Y+1, r1	; 0x01
     e22:	14 01       	movw	r2, r8
     e24:	54 01       	movw	r10, r8
      for(int8_t j=0; j<8; j++, line >>= 1) {
        if(line & 0x1) {
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	80 ff       	sbrs	r24, 0
     e2a:	12 c0       	rjmp	.+36     	; 0xe50 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x124>
     e2c:	d3 01       	movw	r26, r6
     e2e:	ed 91       	ld	r30, X+
     e30:	fc 91       	ld	r31, X
          if(size == 1) drawPixel(x+i, y+j, color);
     e32:	ba 81       	ldd	r27, Y+2	; 0x02
     e34:	b1 30       	cpi	r27, 0x01	; 1
     e36:	31 f4       	brne	.+12     	; 0xe44 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x118>
     e38:	04 80       	ldd	r0, Z+4	; 0x04
     e3a:	f5 81       	ldd	r31, Z+5	; 0x05
     e3c:	e0 2d       	mov	r30, r0
     e3e:	2e 81       	ldd	r18, Y+6	; 0x06
     e40:	3f 81       	ldd	r19, Y+7	; 0x07
     e42:	18 c0       	rjmp	.+48     	; 0xe74 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x148>
          else          fillRect(x+(i*size), y+(j*size), size, size, color);
     e44:	06 84       	ldd	r0, Z+14	; 0x0e
     e46:	f7 85       	ldd	r31, Z+15	; 0x0f
     e48:	e0 2d       	mov	r30, r0
     e4a:	ee 80       	ldd	r14, Y+6	; 0x06
     e4c:	ff 80       	ldd	r15, Y+7	; 0x07
     e4e:	1d c0       	rjmp	.+58     	; 0xe8a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x15e>
        } else if(bg != color) {
     e50:	ec 81       	ldd	r30, Y+4	; 0x04
     e52:	fd 81       	ldd	r31, Y+5	; 0x05
     e54:	2e 81       	ldd	r18, Y+6	; 0x06
     e56:	3f 81       	ldd	r19, Y+7	; 0x07
     e58:	e2 17       	cp	r30, r18
     e5a:	f3 07       	cpc	r31, r19
     e5c:	e1 f0       	breq	.+56     	; 0xe96 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x16a>
     e5e:	d3 01       	movw	r26, r6
     e60:	ed 91       	ld	r30, X+
     e62:	fc 91       	ld	r31, X
          if(size == 1) drawPixel(x+i, y+j, bg);
     e64:	ba 81       	ldd	r27, Y+2	; 0x02
     e66:	b1 30       	cpi	r27, 0x01	; 1
     e68:	59 f4       	brne	.+22     	; 0xe80 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x154>
     e6a:	04 80       	ldd	r0, Z+4	; 0x04
     e6c:	f5 81       	ldd	r31, Z+5	; 0x05
     e6e:	e0 2d       	mov	r30, r0
     e70:	2c 81       	ldd	r18, Y+4	; 0x04
     e72:	3d 81       	ldd	r19, Y+5	; 0x05
     e74:	a5 01       	movw	r20, r10
     e76:	6d 85       	ldd	r22, Y+13	; 0x0d
     e78:	7e 85       	ldd	r23, Y+14	; 0x0e
     e7a:	c3 01       	movw	r24, r6
     e7c:	09 95       	icall
     e7e:	0b c0       	rjmp	.+22     	; 0xe96 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x16a>
          else          fillRect(x+i*size, y+j*size, size, size, bg);
     e80:	06 84       	ldd	r0, Z+14	; 0x0e
     e82:	f7 85       	ldd	r31, Z+15	; 0x0f
     e84:	e0 2d       	mov	r30, r0
     e86:	ec 80       	ldd	r14, Y+4	; 0x04
     e88:	fd 80       	ldd	r15, Y+5	; 0x05
     e8a:	86 01       	movw	r16, r12
     e8c:	96 01       	movw	r18, r12
     e8e:	a1 01       	movw	r20, r2
     e90:	b2 01       	movw	r22, r4
     e92:	c3 01       	movw	r24, r6
     e94:	09 95       	icall

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
      else      line = 0x0;
      for(int8_t j=0; j<8; j++, line >>= 1) {
     e96:	e9 81       	ldd	r30, Y+1	; 0x01
     e98:	e6 95       	lsr	r30
     e9a:	e9 83       	std	Y+1, r30	; 0x01
     e9c:	2c 0c       	add	r2, r12
     e9e:	3d 1c       	adc	r3, r13
     ea0:	ff ef       	ldi	r31, 0xFF	; 255
     ea2:	af 1a       	sub	r10, r31
     ea4:	bf 0a       	sbc	r11, r31
     ea6:	2a 85       	ldd	r18, Y+10	; 0x0a
     ea8:	3b 85       	ldd	r19, Y+11	; 0x0b
     eaa:	a2 16       	cp	r10, r18
     eac:	b3 06       	cpc	r11, r19
     eae:	09 f0       	breq	.+2      	; 0xeb2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x186>
     eb0:	ba cf       	rjmp	.-140    	; 0xe26 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xfa>
     eb2:	3b 81       	ldd	r19, Y+3	; 0x03
     eb4:	3f 5f       	subi	r19, 0xFF	; 255
     eb6:	3b 83       	std	Y+3, r19	; 0x03
     eb8:	4c 0c       	add	r4, r12
     eba:	5d 1c       	adc	r5, r13
     ebc:	4d 85       	ldd	r20, Y+13	; 0x0d
     ebe:	5e 85       	ldd	r21, Y+14	; 0x0e
     ec0:	4f 5f       	subi	r20, 0xFF	; 255
     ec2:	5f 4f       	sbci	r21, 0xFF	; 255
     ec4:	5e 87       	std	Y+14, r21	; 0x0e
     ec6:	4d 87       	std	Y+13, r20	; 0x0d
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

    for(int8_t i=0; i<6; i++ ) {
     ec8:	36 30       	cpi	r19, 0x06	; 6
     eca:	09 f0       	breq	.+2      	; 0xece <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1a2>
     ecc:	9b cf       	rjmp	.-202    	; 0xe04 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xd8>
     ece:	c0 c0       	rjmp	.+384    	; 0x1050 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling drawChar()
    // directly with 'bad' characters of font may cause mayhem!

    c -= pgm_read_byte(&gfxFont->first);
     ed0:	fa 01       	movw	r30, r20
     ed2:	34 96       	adiw	r30, 0x04	; 4
     ed4:	34 91       	lpm	r19, Z
    GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
     ed6:	32 97       	sbiw	r30, 0x02	; 2
     ed8:	85 91       	lpm	r24, Z+
     eda:	94 91       	lpm	r25, Z

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling drawChar()
    // directly with 'bad' characters of font may cause mayhem!

    c -= pgm_read_byte(&gfxFont->first);
     edc:	23 1b       	sub	r18, r19
    GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
     ede:	a7 e0       	ldi	r26, 0x07	; 7
     ee0:	2a 9f       	mul	r18, r26
     ee2:	80 0d       	add	r24, r0
     ee4:	91 1d       	adc	r25, r1
     ee6:	11 24       	eor	r1, r1
    uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
     ee8:	fa 01       	movw	r30, r20
     eea:	25 91       	lpm	r18, Z+
     eec:	34 91       	lpm	r19, Z
     eee:	38 8b       	std	Y+16, r19	; 0x10
     ef0:	2f 87       	std	Y+15, r18	; 0x0f

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
     ef2:	fc 01       	movw	r30, r24
     ef4:	25 90       	lpm	r2, Z+
     ef6:	34 90       	lpm	r3, Z
    uint8_t  w  = pgm_read_byte(&glyph->width),
     ef8:	fc 01       	movw	r30, r24
     efa:	32 96       	adiw	r30, 0x02	; 2
     efc:	34 91       	lpm	r19, Z
     efe:	3b 83       	std	Y+3, r19	; 0x03
             h  = pgm_read_byte(&glyph->height),
     f00:	31 96       	adiw	r30, 0x01	; 1
     f02:	44 91       	lpm	r20, Z
     f04:	4c 87       	std	Y+12, r20	; 0x0c
             xa = pgm_read_byte(&glyph->xAdvance);
     f06:	31 96       	adiw	r30, 0x01	; 1
     f08:	e4 91       	lpm	r30, Z
    int8_t   xo = pgm_read_byte(&glyph->xOffset),
     f0a:	fc 01       	movw	r30, r24
     f0c:	35 96       	adiw	r30, 0x05	; 5
     f0e:	a4 91       	lpm	r26, Z
             yo = pgm_read_byte(&glyph->yOffset);
     f10:	31 96       	adiw	r30, 0x01	; 1
     f12:	84 91       	lpm	r24, Z
    uint8_t  xx, yy, bits, bit = 0;
    int16_t  xo16, yo16;

    if(size > 1) {
     f14:	5a 81       	ldd	r21, Y+2	; 0x02
     f16:	52 30       	cpi	r21, 0x02	; 2
     f18:	50 f0       	brcs	.+20     	; 0xf2e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x202>
      xo16 = xo;
     f1a:	4a 2e       	mov	r4, r26
     f1c:	0a 2e       	mov	r0, r26
     f1e:	00 0c       	add	r0, r0
     f20:	55 08       	sbc	r5, r5
      yo16 = yo;
     f22:	e8 2f       	mov	r30, r24
     f24:	08 2e       	mov	r0, r24
     f26:	00 0c       	add	r0, r0
     f28:	ff 0b       	sbc	r31, r31
     f2a:	f9 87       	std	Y+9, r31	; 0x09
     f2c:	e8 87       	std	Y+8, r30	; 0x08
     f2e:	fa 81       	ldd	r31, Y+2	; 0x02
     f30:	cf 2e       	mov	r12, r31
     f32:	d1 2c       	mov	r13, r1
     f34:	4c 9c       	mul	r4, r12
     f36:	90 01       	movw	r18, r0
     f38:	4d 9c       	mul	r4, r13
     f3a:	30 0d       	add	r19, r0
     f3c:	5c 9c       	mul	r5, r12
     f3e:	30 0d       	add	r19, r0
     f40:	11 24       	eor	r1, r1
     f42:	a9 01       	movw	r20, r18
     f44:	46 0f       	add	r20, r22
     f46:	57 1f       	adc	r21, r23
     f48:	5b 87       	std	Y+11, r21	; 0x0b
     f4a:	4a 87       	std	Y+10, r20	; 0x0a
    uint8_t  w  = pgm_read_byte(&glyph->width),
             h  = pgm_read_byte(&glyph->height),
             xa = pgm_read_byte(&glyph->xAdvance);
    int8_t   xo = pgm_read_byte(&glyph->xOffset),
             yo = pgm_read_byte(&glyph->yOffset);
    uint8_t  xx, yy, bits, bit = 0;
     f4c:	19 82       	std	Y+1, r1	; 0x01
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
     f4e:	a1 2c       	mov	r10, r1
     f50:	ea 2f       	mov	r30, r26
     f52:	aa 0f       	add	r26, r26
     f54:	ff 0b       	sbc	r31, r31
     f56:	db 01       	movw	r26, r22
     f58:	ae 0f       	add	r26, r30
     f5a:	bf 1f       	adc	r27, r31
     f5c:	bd 83       	std	Y+5, r27	; 0x05
     f5e:	ac 83       	std	Y+4, r26	; 0x04
     f60:	bb 81       	ldd	r27, Y+3	; 0x03
     f62:	6b 0f       	add	r22, r27
     f64:	71 1d       	adc	r23, r1
     f66:	9b 01       	movw	r18, r22
     f68:	2e 0f       	add	r18, r30
     f6a:	3f 1f       	adc	r19, r31
     f6c:	3d 8b       	std	Y+21, r19	; 0x15
     f6e:	2c 8b       	std	Y+20, r18	; 0x14
        if(!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
     f70:	a4 01       	movw	r20, r8
     f72:	48 0f       	add	r20, r24
     f74:	51 1d       	adc	r21, r1
     f76:	87 fd       	sbrc	r24, 7
     f78:	5a 95       	dec	r21
     f7a:	5f 8b       	std	Y+23, r21	; 0x17
     f7c:	4e 8b       	std	Y+22, r20	; 0x16
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
     f7e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f80:	a9 16       	cp	r10, r25
     f82:	08 f0       	brcs	.+2      	; 0xf86 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x25a>
     f84:	65 c0       	rjmp	.+202    	; 0x1050 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
          } else {
            fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
     f86:	8a 2d       	mov	r24, r10
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	48 85       	ldd	r20, Y+8	; 0x08
     f8c:	59 85       	ldd	r21, Y+9	; 0x09
     f8e:	48 0f       	add	r20, r24
     f90:	59 1f       	adc	r21, r25
     f92:	4c 9d       	mul	r20, r12
     f94:	90 01       	movw	r18, r0
     f96:	4d 9d       	mul	r20, r13
     f98:	30 0d       	add	r19, r0
     f9a:	5c 9d       	mul	r21, r12
     f9c:	30 0d       	add	r19, r0
     f9e:	11 24       	eor	r1, r1
     fa0:	d9 01       	movw	r26, r18
     fa2:	a8 0d       	add	r26, r8
     fa4:	b9 1d       	adc	r27, r9
     fa6:	be 87       	std	Y+14, r27	; 0x0e
     fa8:	ad 87       	std	Y+13, r26	; 0x0d
     faa:	ec 81       	ldd	r30, Y+4	; 0x04
     fac:	fd 81       	ldd	r31, Y+5	; 0x05
     fae:	f9 8f       	std	Y+25, r31	; 0x19
     fb0:	e8 8f       	std	Y+24, r30	; 0x18
     fb2:	4a 84       	ldd	r4, Y+10	; 0x0a
     fb4:	5b 84       	ldd	r5, Y+11	; 0x0b
     fb6:	f9 81       	ldd	r31, Y+1	; 0x01
     fb8:	2c 81       	ldd	r18, Y+4	; 0x04
     fba:	f2 1b       	sub	r31, r18
     fbc:	f9 8b       	std	Y+17, r31	; 0x11
        if(!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
     fbe:	4e 89       	ldd	r20, Y+22	; 0x16
     fc0:	5f 89       	ldd	r21, Y+23	; 0x17
     fc2:	48 0f       	add	r20, r24
     fc4:	59 1f       	adc	r21, r25
     fc6:	5b 8b       	std	Y+19, r21	; 0x13
     fc8:	4a 8b       	std	Y+18, r20	; 0x12
     fca:	89 89       	ldd	r24, Y+17	; 0x11
     fcc:	f8 8d       	ldd	r31, Y+24	; 0x18
     fce:	8f 0f       	add	r24, r31
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
      for(xx=0; xx<w; xx++) {
     fd0:	28 8d       	ldd	r18, Y+24	; 0x18
     fd2:	39 8d       	ldd	r19, Y+25	; 0x19
     fd4:	4c 89       	ldd	r20, Y+20	; 0x14
     fd6:	5d 89       	ldd	r21, Y+21	; 0x15
     fd8:	24 17       	cp	r18, r20
     fda:	35 07       	cpc	r19, r21
     fdc:	99 f1       	breq	.+102    	; 0x1044 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x318>
        if(!(bit++ & 7)) {
     fde:	87 70       	andi	r24, 0x07	; 7
     fe0:	41 f4       	brne	.+16     	; 0xff2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2c6>
          bits = pgm_read_byte(&bitmap[bo++]);
     fe2:	c1 01       	movw	r24, r2
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	ef 85       	ldd	r30, Y+15	; 0x0f
     fe8:	f8 89       	ldd	r31, Y+16	; 0x10
     fea:	e2 0d       	add	r30, r2
     fec:	f3 1d       	adc	r31, r3
     fee:	b4 90       	lpm	r11, Z
     ff0:	1c 01       	movw	r2, r24
        }
        if(bits & 0x80) {
     ff2:	b7 fe       	sbrs	r11, 7
     ff4:	1e c0       	rjmp	.+60     	; 0x1032 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x306>
     ff6:	d3 01       	movw	r26, r6
     ff8:	ed 91       	ld	r30, X+
     ffa:	fc 91       	ld	r31, X
          if(size == 1) {
     ffc:	ba 81       	ldd	r27, Y+2	; 0x02
     ffe:	b1 30       	cpi	r27, 0x01	; 1
    1000:	61 f4       	brne	.+24     	; 0x101a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2ee>
            drawPixel(x+xo+xx, y+yo+yy, color);
    1002:	04 80       	ldd	r0, Z+4	; 0x04
    1004:	f5 81       	ldd	r31, Z+5	; 0x05
    1006:	e0 2d       	mov	r30, r0
    1008:	2e 81       	ldd	r18, Y+6	; 0x06
    100a:	3f 81       	ldd	r19, Y+7	; 0x07
    100c:	4a 89       	ldd	r20, Y+18	; 0x12
    100e:	5b 89       	ldd	r21, Y+19	; 0x13
    1010:	68 8d       	ldd	r22, Y+24	; 0x18
    1012:	79 8d       	ldd	r23, Y+25	; 0x19
    1014:	c3 01       	movw	r24, r6
    1016:	09 95       	icall
    1018:	0c c0       	rjmp	.+24     	; 0x1032 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x306>
          } else {
            fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
    101a:	06 84       	ldd	r0, Z+14	; 0x0e
    101c:	f7 85       	ldd	r31, Z+15	; 0x0f
    101e:	e0 2d       	mov	r30, r0
    1020:	ee 80       	ldd	r14, Y+6	; 0x06
    1022:	ff 80       	ldd	r15, Y+7	; 0x07
    1024:	86 01       	movw	r16, r12
    1026:	96 01       	movw	r18, r12
    1028:	4d 85       	ldd	r20, Y+13	; 0x0d
    102a:	5e 85       	ldd	r21, Y+14	; 0x0e
    102c:	b2 01       	movw	r22, r4
    102e:	c3 01       	movw	r24, r6
    1030:	09 95       	icall
          }
        }
        bits <<= 1;
    1032:	bb 0c       	add	r11, r11
    1034:	4c 0c       	add	r4, r12
    1036:	5d 1c       	adc	r5, r13
    1038:	e8 8d       	ldd	r30, Y+24	; 0x18
    103a:	f9 8d       	ldd	r31, Y+25	; 0x19
    103c:	31 96       	adiw	r30, 0x01	; 1
    103e:	f9 8f       	std	Y+25, r31	; 0x19
    1040:	e8 8f       	std	Y+24, r30	; 0x18
    1042:	c3 cf       	rjmp	.-122    	; 0xfca <_ZN12Adafruit_GFX8drawCharEiihjjh+0x29e>
    1044:	59 81       	ldd	r21, Y+1	; 0x01
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	58 0f       	add	r21, r24
    104a:	59 83       	std	Y+1, r21	; 0x01
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
    104c:	a3 94       	inc	r10
    104e:	97 cf       	rjmp	.-210    	; 0xf7e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x252>
        bits <<= 1;
      }
    }

  } // End classic vs custom font
}
    1050:	69 96       	adiw	r28, 0x19	; 25
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	df 90       	pop	r13
    106a:	cf 90       	pop	r12
    106c:	bf 90       	pop	r11
    106e:	af 90       	pop	r10
    1070:	9f 90       	pop	r9
    1072:	8f 90       	pop	r8
    1074:	7f 90       	pop	r7
    1076:	6f 90       	pop	r6
    1078:	5f 90       	pop	r5
    107a:	4f 90       	pop	r4
    107c:	3f 90       	pop	r3
    107e:	2f 90       	pop	r2
    1080:	08 95       	ret

00001082 <_ZN12Adafruit_GFX5writeEh>:
    }
  }
}

#if ARDUINO >= 100
size_t Adafruit_GFX::write(uint8_t c) {
    1082:	af 92       	push	r10
    1084:	bf 92       	push	r11
    1086:	cf 92       	push	r12
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	ec 01       	movw	r28, r24
    1096:	26 2f       	mov	r18, r22
#else
void Adafruit_GFX::write(uint8_t c) {
#endif

  if(!gfxFont) { // 'Classic' built-in font
    1098:	88 8d       	ldd	r24, Y+24	; 0x18
    109a:	99 8d       	ldd	r25, Y+25	; 0x19
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	09 f0       	breq	.+2      	; 0x10a2 <_ZN12Adafruit_GFX5writeEh+0x20>
    10a0:	42 c0       	rjmp	.+132    	; 0x1126 <_ZN12Adafruit_GFX5writeEh+0xa4>

    if(c == '\n') {
    10a2:	6a 30       	cpi	r22, 0x0A	; 10
    10a4:	69 f4       	brne	.+26     	; 0x10c0 <_ZN12Adafruit_GFX5writeEh+0x3e>
      cursor_y += textsize*8;
    10a6:	2c 89       	ldd	r18, Y+20	; 0x14
    10a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    10aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    10ac:	38 e0       	ldi	r19, 0x08	; 8
    10ae:	23 9f       	mul	r18, r19
    10b0:	80 0d       	add	r24, r0
    10b2:	91 1d       	adc	r25, r1
    10b4:	11 24       	eor	r1, r1
    10b6:	9f 87       	std	Y+15, r25	; 0x0f
    10b8:	8e 87       	std	Y+14, r24	; 0x0e
      cursor_x  = 0;
    10ba:	1d 86       	std	Y+13, r1	; 0x0d
    10bc:	1c 86       	std	Y+12, r1	; 0x0c
    10be:	ac c0       	rjmp	.+344    	; 0x1218 <_ZN12Adafruit_GFX5writeEh+0x196>
    } else if(c == '\r') {
    10c0:	6d 30       	cpi	r22, 0x0D	; 13
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <_ZN12Adafruit_GFX5writeEh+0x44>
    10c4:	a9 c0       	rjmp	.+338    	; 0x1218 <_ZN12Adafruit_GFX5writeEh+0x196>
      // skip em
    } else {
      if(wrap && ((cursor_x + textsize * 6) >= _width)) { // Heading off edge?
    10c6:	8e 89       	ldd	r24, Y+22	; 0x16
    10c8:	88 23       	and	r24, r24
    10ca:	c1 f0       	breq	.+48     	; 0x10fc <_ZN12Adafruit_GFX5writeEh+0x7a>
    10cc:	3c 89       	ldd	r19, Y+20	; 0x14
    10ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    10d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    10d2:	46 e0       	ldi	r20, 0x06	; 6
    10d4:	34 9f       	mul	r19, r20
    10d6:	80 0d       	add	r24, r0
    10d8:	91 1d       	adc	r25, r1
    10da:	11 24       	eor	r1, r1
    10dc:	48 85       	ldd	r20, Y+8	; 0x08
    10de:	59 85       	ldd	r21, Y+9	; 0x09
    10e0:	84 17       	cp	r24, r20
    10e2:	95 07       	cpc	r25, r21
    10e4:	5c f0       	brlt	.+22     	; 0x10fc <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x  = 0;            // Reset x to zero
    10e6:	1d 86       	std	Y+13, r1	; 0x0d
    10e8:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize * 8; // Advance y one line
    10ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    10ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    10ee:	e8 e0       	ldi	r30, 0x08	; 8
    10f0:	3e 9f       	mul	r19, r30
    10f2:	80 0d       	add	r24, r0
    10f4:	91 1d       	adc	r25, r1
    10f6:	11 24       	eor	r1, r1
    10f8:	9f 87       	std	Y+15, r25	; 0x0f
    10fa:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    10fc:	ea 88       	ldd	r14, Y+18	; 0x12
    10fe:	fb 88       	ldd	r15, Y+19	; 0x13
    1100:	08 89       	ldd	r16, Y+16	; 0x10
    1102:	19 89       	ldd	r17, Y+17	; 0x11
    1104:	4e 85       	ldd	r20, Y+14	; 0x0e
    1106:	5f 85       	ldd	r21, Y+15	; 0x0f
    1108:	6c 85       	ldd	r22, Y+12	; 0x0c
    110a:	7d 85       	ldd	r23, Y+13	; 0x0d
    110c:	cc 88       	ldd	r12, Y+20	; 0x14
    110e:	ce 01       	movw	r24, r28
    1110:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN12Adafruit_GFX8drawCharEiihjjh>
      cursor_x += textsize * 6;
    1114:	2c 89       	ldd	r18, Y+20	; 0x14
    1116:	8c 85       	ldd	r24, Y+12	; 0x0c
    1118:	9d 85       	ldd	r25, Y+13	; 0x0d
    111a:	f6 e0       	ldi	r31, 0x06	; 6
    111c:	2f 9f       	mul	r18, r31
    111e:	80 0d       	add	r24, r0
    1120:	91 1d       	adc	r25, r1
    1122:	11 24       	eor	r1, r1
    1124:	41 c0       	rjmp	.+130    	; 0x11a8 <_ZN12Adafruit_GFX5writeEh+0x126>
    }

  } else { // Custom font

    if(c == '\n') {
    1126:	6a 30       	cpi	r22, 0x0A	; 10
    1128:	79 f4       	brne	.+30     	; 0x1148 <_ZN12Adafruit_GFX5writeEh+0xc6>
      cursor_x  = 0;
    112a:	1d 86       	std	Y+13, r1	; 0x0d
    112c:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += (int16_t)textsize *
    112e:	2c 89       	ldd	r18, Y+20	; 0x14
                  (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    1130:	fc 01       	movw	r30, r24
    1132:	36 96       	adiw	r30, 0x06	; 6
    1134:	e4 91       	lpm	r30, Z
    1136:	8e 85       	ldd	r24, Y+14	; 0x0e
    1138:	9f 85       	ldd	r25, Y+15	; 0x0f
    113a:	2e 9f       	mul	r18, r30
    113c:	80 0d       	add	r24, r0
    113e:	91 1d       	adc	r25, r1
    1140:	11 24       	eor	r1, r1
    1142:	9f 87       	std	Y+15, r25	; 0x0f
    1144:	8e 87       	std	Y+14, r24	; 0x0e
    1146:	68 c0       	rjmp	.+208    	; 0x1218 <_ZN12Adafruit_GFX5writeEh+0x196>
    } else if(c != '\r') {
    1148:	6d 30       	cpi	r22, 0x0D	; 13
    114a:	09 f4       	brne	.+2      	; 0x114e <_ZN12Adafruit_GFX5writeEh+0xcc>
    114c:	65 c0       	rjmp	.+202    	; 0x1218 <_ZN12Adafruit_GFX5writeEh+0x196>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    114e:	ac 01       	movw	r20, r24
    1150:	4c 5f       	subi	r20, 0xFC	; 252
    1152:	5f 4f       	sbci	r21, 0xFF	; 255
    1154:	fa 01       	movw	r30, r20
    1156:	34 91       	lpm	r19, Z
      if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    1158:	63 17       	cp	r22, r19
    115a:	08 f4       	brcc	.+2      	; 0x115e <_ZN12Adafruit_GFX5writeEh+0xdc>
    115c:	5d c0       	rjmp	.+186    	; 0x1218 <_ZN12Adafruit_GFX5writeEh+0x196>
    115e:	31 96       	adiw	r30, 0x01	; 1
    1160:	e4 91       	lpm	r30, Z
    1162:	e6 17       	cp	r30, r22
    1164:	08 f4       	brcc	.+2      	; 0x1168 <_ZN12Adafruit_GFX5writeEh+0xe6>
    1166:	58 c0       	rjmp	.+176    	; 0x1218 <_ZN12Adafruit_GFX5writeEh+0x196>
        uint8_t   c2    = c - pgm_read_byte(&gfxFont->first);
    1168:	fa 01       	movw	r30, r20
    116a:	44 91       	lpm	r20, Z
    116c:	36 2f       	mov	r19, r22
    116e:	34 1b       	sub	r19, r20
        GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c2]);
    1170:	fc 01       	movw	r30, r24
    1172:	32 96       	adiw	r30, 0x02	; 2
    1174:	a5 90       	lpm	r10, Z+
    1176:	b4 90       	lpm	r11, Z
    1178:	f7 e0       	ldi	r31, 0x07	; 7
    117a:	3f 9f       	mul	r19, r31
    117c:	a0 0c       	add	r10, r0
    117e:	b1 1c       	adc	r11, r1
    1180:	11 24       	eor	r1, r1
        uint8_t   w     = pgm_read_byte(&glyph->width),
    1182:	f5 01       	movw	r30, r10
    1184:	32 96       	adiw	r30, 0x02	; 2
    1186:	34 91       	lpm	r19, Z
                  h     = pgm_read_byte(&glyph->height);
    1188:	31 96       	adiw	r30, 0x01	; 1
    118a:	e4 91       	lpm	r30, Z
        if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    118c:	33 23       	and	r19, r19
    118e:	11 f0       	breq	.+4      	; 0x1194 <_ZN12Adafruit_GFX5writeEh+0x112>
    1190:	e1 11       	cpse	r30, r1
    1192:	0d c0       	rjmp	.+26     	; 0x11ae <_ZN12Adafruit_GFX5writeEh+0x12c>
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
        }
        cursor_x += pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
    1194:	f5 01       	movw	r30, r10
    1196:	34 96       	adiw	r30, 0x04	; 4
    1198:	e4 91       	lpm	r30, Z
    119a:	2c 89       	ldd	r18, Y+20	; 0x14
    119c:	8c 85       	ldd	r24, Y+12	; 0x0c
    119e:	9d 85       	ldd	r25, Y+13	; 0x0d
    11a0:	e2 9f       	mul	r30, r18
    11a2:	80 0d       	add	r24, r0
    11a4:	91 1d       	adc	r25, r1
    11a6:	11 24       	eor	r1, r1
    11a8:	9d 87       	std	Y+13, r25	; 0x0d
    11aa:	8c 87       	std	Y+12, r24	; 0x0c
    11ac:	35 c0       	rjmp	.+106    	; 0x1218 <_ZN12Adafruit_GFX5writeEh+0x196>
        uint8_t   c2    = c - pgm_read_byte(&gfxFont->first);
        GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c2]);
        uint8_t   w     = pgm_read_byte(&glyph->width),
                  h     = pgm_read_byte(&glyph->height);
        if((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    11ae:	f5 01       	movw	r30, r10
    11b0:	35 96       	adiw	r30, 0x05	; 5
    11b2:	44 91       	lpm	r20, Z
          if(wrap && ((cursor_x + textsize * (xo + w)) >= _width)) {
    11b4:	5e 89       	ldd	r21, Y+22	; 0x16
    11b6:	55 23       	and	r21, r21
    11b8:	11 f1       	breq	.+68     	; 0x11fe <_ZN12Adafruit_GFX5writeEh+0x17c>
    11ba:	6c 89       	ldd	r22, Y+20	; 0x14
    11bc:	e3 2f       	mov	r30, r19
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	e4 0f       	add	r30, r20
    11c2:	f1 1d       	adc	r31, r1
    11c4:	47 fd       	sbrc	r20, 7
    11c6:	fa 95       	dec	r31
    11c8:	6e 9f       	mul	r22, r30
    11ca:	d0 01       	movw	r26, r0
    11cc:	6f 9f       	mul	r22, r31
    11ce:	b0 0d       	add	r27, r0
    11d0:	11 24       	eor	r1, r1
    11d2:	4c 85       	ldd	r20, Y+12	; 0x0c
    11d4:	5d 85       	ldd	r21, Y+13	; 0x0d
    11d6:	4a 0f       	add	r20, r26
    11d8:	5b 1f       	adc	r21, r27
    11da:	e8 85       	ldd	r30, Y+8	; 0x08
    11dc:	f9 85       	ldd	r31, Y+9	; 0x09
    11de:	4e 17       	cp	r20, r30
    11e0:	5f 07       	cpc	r21, r31
    11e2:	6c f0       	brlt	.+26     	; 0x11fe <_ZN12Adafruit_GFX5writeEh+0x17c>
            // Drawing character would go off right edge; wrap to new line
            cursor_x  = 0;
    11e4:	1d 86       	std	Y+13, r1	; 0x0d
    11e6:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    11e8:	fc 01       	movw	r30, r24
    11ea:	36 96       	adiw	r30, 0x06	; 6
    11ec:	e4 91       	lpm	r30, Z
    11ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    11f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    11f2:	6e 9f       	mul	r22, r30
    11f4:	80 0d       	add	r24, r0
    11f6:	91 1d       	adc	r25, r1
    11f8:	11 24       	eor	r1, r1
    11fa:	9f 87       	std	Y+15, r25	; 0x0f
    11fc:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    11fe:	ea 88       	ldd	r14, Y+18	; 0x12
    1200:	fb 88       	ldd	r15, Y+19	; 0x13
    1202:	08 89       	ldd	r16, Y+16	; 0x10
    1204:	19 89       	ldd	r17, Y+17	; 0x11
    1206:	4e 85       	ldd	r20, Y+14	; 0x0e
    1208:	5f 85       	ldd	r21, Y+15	; 0x0f
    120a:	6c 85       	ldd	r22, Y+12	; 0x0c
    120c:	7d 85       	ldd	r23, Y+13	; 0x0d
    120e:	cc 88       	ldd	r12, Y+20	; 0x14
    1210:	ce 01       	movw	r24, r28
    1212:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN12Adafruit_GFX8drawCharEiihjjh>
    1216:	be cf       	rjmp	.-132    	; 0x1194 <_ZN12Adafruit_GFX5writeEh+0x112>

  }
#if ARDUINO >= 100
  return 1;
#endif
}
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	cf 90       	pop	r12
    122a:	bf 90       	pop	r11
    122c:	af 90       	pop	r10
    122e:	08 95       	ret

00001230 <_ZNK12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) const {
  return _width;
}
    1230:	fc 01       	movw	r30, r24
    1232:	80 85       	ldd	r24, Z+8	; 0x08
    1234:	91 85       	ldd	r25, Z+9	; 0x09
    1236:	08 95       	ret

00001238 <_ZNK12Adafruit_GFX6heightEv>:

int16_t Adafruit_GFX::height(void) const {
  return _height;
}
    1238:	fc 01       	movw	r30, r24
    123a:	82 85       	ldd	r24, Z+10	; 0x0a
    123c:	93 85       	ldd	r25, Z+11	; 0x0b
    123e:	08 95       	ret

00001240 <_ZN8MsTimer23setEmPFvvE>:
#endif

void MsTimer2::set(unsigned long ms, void (*f)()) {
	float prescaler = 0.0;
	
	if (ms == 0)
    1240:	61 15       	cp	r22, r1
    1242:	71 05       	cpc	r23, r1
    1244:	81 05       	cpc	r24, r1
    1246:	91 05       	cpc	r25, r1
    1248:	69 f4       	brne	.+26     	; 0x1264 <_ZN8MsTimer23setEmPFvvE+0x24>
		msecs = 1;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a0 e0       	ldi	r26, 0x00	; 0
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	80 93 9f 01 	sts	0x019F, r24
    1256:	90 93 a0 01 	sts	0x01A0, r25
    125a:	a0 93 a1 01 	sts	0x01A1, r26
    125e:	b0 93 a2 01 	sts	0x01A2, r27
    1262:	08 c0       	rjmp	.+16     	; 0x1274 <_ZN8MsTimer23setEmPFvvE+0x34>
	else
		msecs = ms;
    1264:	60 93 9f 01 	sts	0x019F, r22
    1268:	70 93 a0 01 	sts	0x01A0, r23
    126c:	80 93 a1 01 	sts	0x01A1, r24
    1270:	90 93 a2 01 	sts	0x01A2, r25
		
	func = f;
    1274:	50 93 9e 01 	sts	0x019E, r21
    1278:	40 93 9d 01 	sts	0x019D, r20

#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TIMSK2 &= ~(1<<TOIE2);
    127c:	80 91 70 00 	lds	r24, 0x0070
    1280:	8e 7f       	andi	r24, 0xFE	; 254
    1282:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~((1<<WGM21) | (1<<WGM20));
    1286:	80 91 b0 00 	lds	r24, 0x00B0
    128a:	8c 7f       	andi	r24, 0xFC	; 252
    128c:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B &= ~(1<<WGM22);
    1290:	80 91 b1 00 	lds	r24, 0x00B1
    1294:	87 7f       	andi	r24, 0xF7	; 247
    1296:	80 93 b1 00 	sts	0x00B1, r24
	ASSR &= ~(1<<AS2);
    129a:	80 91 b6 00 	lds	r24, 0x00B6
    129e:	8f 7d       	andi	r24, 0xDF	; 223
    12a0:	80 93 b6 00 	sts	0x00B6, r24
	TIMSK2 &= ~(1<<OCIE2A);
    12a4:	80 91 70 00 	lds	r24, 0x0070
    12a8:	8d 7f       	andi	r24, 0xFD	; 253
    12aa:	80 93 70 00 	sts	0x0070, r24
	
	if ((F_CPU >= 1000000UL) && (F_CPU <= 16000000UL)) {	// prescaler set to 64
		TCCR2B |= (1<<CS22);
    12ae:	80 91 b1 00 	lds	r24, 0x00B1
    12b2:	84 60       	ori	r24, 0x04	; 4
    12b4:	80 93 b1 00 	sts	0x00B1, r24
		TCCR2B &= ~((1<<CS21) | (1<<CS20));
    12b8:	80 91 b1 00 	lds	r24, 0x00B1
    12bc:	8c 7f       	andi	r24, 0xFC	; 252
    12be:	80 93 b1 00 	sts	0x00B1, r24
	// nothing needed here
#else
#error Unsupported CPU type
#endif

	tcnt2 = 256 - (int)((float)F_CPU * 0.001 / prescaler);
    12c2:	86 e0       	ldi	r24, 0x06	; 6
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	90 93 97 01 	sts	0x0197, r25
    12ca:	80 93 96 01 	sts	0x0196, r24
    12ce:	08 95       	ret

000012d0 <_ZN8MsTimer25startEv>:
}

void MsTimer2::start() {
	count = 0;
    12d0:	10 92 99 01 	sts	0x0199, r1
    12d4:	10 92 9a 01 	sts	0x019A, r1
    12d8:	10 92 9b 01 	sts	0x019B, r1
    12dc:	10 92 9c 01 	sts	0x019C, r1
	overflowing = 0;
    12e0:	10 92 98 01 	sts	0x0198, r1
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined (__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TCNT2 = tcnt2;
    12e4:	80 91 96 01 	lds	r24, 0x0196
    12e8:	90 91 97 01 	lds	r25, 0x0197
    12ec:	80 93 b2 00 	sts	0x00B2, r24
	TIMSK2 |= (1<<TOIE2);
    12f0:	e0 e7       	ldi	r30, 0x70	; 112
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	81 60       	ori	r24, 0x01	; 1
    12f8:	80 83       	st	Z, r24
    12fa:	08 95       	ret

000012fc <_ZN8MsTimer29_overflowEv>:
	itimer.end();
#endif
}

void MsTimer2::_overflow() {
	count += 1;
    12fc:	80 91 99 01 	lds	r24, 0x0199
    1300:	90 91 9a 01 	lds	r25, 0x019A
    1304:	a0 91 9b 01 	lds	r26, 0x019B
    1308:	b0 91 9c 01 	lds	r27, 0x019C
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	a1 1d       	adc	r26, r1
    1310:	b1 1d       	adc	r27, r1
    1312:	80 93 99 01 	sts	0x0199, r24
    1316:	90 93 9a 01 	sts	0x019A, r25
    131a:	a0 93 9b 01 	sts	0x019B, r26
    131e:	b0 93 9c 01 	sts	0x019C, r27
	
	if (count >= msecs && !overflowing) {
    1322:	80 91 99 01 	lds	r24, 0x0199
    1326:	90 91 9a 01 	lds	r25, 0x019A
    132a:	a0 91 9b 01 	lds	r26, 0x019B
    132e:	b0 91 9c 01 	lds	r27, 0x019C
    1332:	40 91 9f 01 	lds	r20, 0x019F
    1336:	50 91 a0 01 	lds	r21, 0x01A0
    133a:	60 91 a1 01 	lds	r22, 0x01A1
    133e:	70 91 a2 01 	lds	r23, 0x01A2
    1342:	84 17       	cp	r24, r20
    1344:	95 07       	cpc	r25, r21
    1346:	a6 07       	cpc	r26, r22
    1348:	b7 07       	cpc	r27, r23
    134a:	10 f1       	brcs	.+68     	; 0x1390 <_ZN8MsTimer29_overflowEv+0x94>
    134c:	80 91 98 01 	lds	r24, 0x0198
    1350:	81 11       	cpse	r24, r1
    1352:	1e c0       	rjmp	.+60     	; 0x1390 <_ZN8MsTimer29_overflowEv+0x94>
		overflowing = 1;
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	80 93 98 01 	sts	0x0198, r24
		count = count - msecs; // subtract ms to catch missed overflows
    135a:	80 91 99 01 	lds	r24, 0x0199
    135e:	90 91 9a 01 	lds	r25, 0x019A
    1362:	a0 91 9b 01 	lds	r26, 0x019B
    1366:	b0 91 9c 01 	lds	r27, 0x019C
    136a:	84 1b       	sub	r24, r20
    136c:	95 0b       	sbc	r25, r21
    136e:	a6 0b       	sbc	r26, r22
    1370:	b7 0b       	sbc	r27, r23
    1372:	80 93 99 01 	sts	0x0199, r24
    1376:	90 93 9a 01 	sts	0x019A, r25
    137a:	a0 93 9b 01 	sts	0x019B, r26
    137e:	b0 93 9c 01 	sts	0x019C, r27
					// set to 0 if you don't want this.
		(*func)();
    1382:	e0 91 9d 01 	lds	r30, 0x019D
    1386:	f0 91 9e 01 	lds	r31, 0x019E
    138a:	09 95       	icall
		overflowing = 0;
    138c:	10 92 98 01 	sts	0x0198, r1
    1390:	08 95       	ret

00001392 <__vector_9>:

#if defined (__AVR__)
#if defined (__AVR_ATmega32U4__)
ISR(TIMER4_OVF_vect) {
#else
ISR(TIMER2_OVF_vect) {
    1392:	1f 92       	push	r1
    1394:	0f 92       	push	r0
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	0f 92       	push	r0
    139a:	11 24       	eor	r1, r1
    139c:	2f 93       	push	r18
    139e:	3f 93       	push	r19
    13a0:	4f 93       	push	r20
    13a2:	5f 93       	push	r21
    13a4:	6f 93       	push	r22
    13a6:	7f 93       	push	r23
    13a8:	8f 93       	push	r24
    13aa:	9f 93       	push	r25
    13ac:	af 93       	push	r26
    13ae:	bf 93       	push	r27
    13b0:	ef 93       	push	r30
    13b2:	ff 93       	push	r31
#endif
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined (__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TCNT2 = MsTimer2::tcnt2;
    13b4:	80 91 96 01 	lds	r24, 0x0196
    13b8:	90 91 97 01 	lds	r25, 0x0197
    13bc:	80 93 b2 00 	sts	0x00B2, r24
#elif defined (__AVR_ATmega8__)
	TCNT2 = MsTimer2::tcnt2;
#elif defined (__AVR_ATmega32U4__)
	// not necessary on 32u4's high speed timer4
#endif
	MsTimer2::_overflow();
    13c0:	0e 94 7e 09 	call	0x12fc	; 0x12fc <_ZN8MsTimer29_overflowEv>
}
    13c4:	ff 91       	pop	r31
    13c6:	ef 91       	pop	r30
    13c8:	bf 91       	pop	r27
    13ca:	af 91       	pop	r26
    13cc:	9f 91       	pop	r25
    13ce:	8f 91       	pop	r24
    13d0:	7f 91       	pop	r23
    13d2:	6f 91       	pop	r22
    13d4:	5f 91       	pop	r21
    13d6:	4f 91       	pop	r20
    13d8:	3f 91       	pop	r19
    13da:	2f 91       	pop	r18
    13dc:	0f 90       	pop	r0
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	0f 90       	pop	r0
    13e2:	1f 90       	pop	r1
    13e4:	18 95       	reti

000013e6 <_ZN14RGBmatrixPanel9drawPixelEiij>:
  return (r << 12) | ((r & 0x8) << 8) | // 4/4/4 -> 5/6/5
         (g <<  7) | ((g & 0xC) << 3) |
         (b <<  1) | ( b        >> 3);
}

void RGBmatrixPanel::drawPixel(int16_t x, int16_t y, uint16_t c) {
    13e6:	cf 92       	push	r12
    13e8:	df 92       	push	r13
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	dc 01       	movw	r26, r24
  uint8_t r, g, b, bit, limit, *ptr;

  if((x < 0) || (x >= _width) || (y < 0) || (y >= _height)) return;
    13f8:	77 fd       	sbrc	r23, 7
    13fa:	22 c1       	rjmp	.+580    	; 0x1640 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
    13fc:	18 96       	adiw	r26, 0x08	; 8
    13fe:	8d 91       	ld	r24, X+
    1400:	9c 91       	ld	r25, X
    1402:	19 97       	sbiw	r26, 0x09	; 9
    1404:	68 17       	cp	r22, r24
    1406:	79 07       	cpc	r23, r25
    1408:	0c f0       	brlt	.+2      	; 0x140c <_ZN14RGBmatrixPanel9drawPixelEiij+0x26>
    140a:	1a c1       	rjmp	.+564    	; 0x1640 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
    140c:	57 fd       	sbrc	r21, 7
    140e:	18 c1       	rjmp	.+560    	; 0x1640 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
    1410:	1a 96       	adiw	r26, 0x0a	; 10
    1412:	8d 91       	ld	r24, X+
    1414:	9c 91       	ld	r25, X
    1416:	1b 97       	sbiw	r26, 0x0b	; 11
    1418:	48 17       	cp	r20, r24
    141a:	59 07       	cpc	r21, r25
    141c:	0c f0       	brlt	.+2      	; 0x1420 <_ZN14RGBmatrixPanel9drawPixelEiij+0x3a>
    141e:	10 c1       	rjmp	.+544    	; 0x1640 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>

  switch(rotation) {
    1420:	55 96       	adiw	r26, 0x15	; 21
    1422:	ec 91       	ld	r30, X
    1424:	55 97       	sbiw	r26, 0x15	; 21
    1426:	14 96       	adiw	r26, 0x04	; 4
    1428:	8d 91       	ld	r24, X+
    142a:	9c 91       	ld	r25, X
    142c:	15 97       	sbiw	r26, 0x05	; 5
    142e:	e2 30       	cpi	r30, 0x02	; 2
    1430:	59 f0       	breq	.+22     	; 0x1448 <_ZN14RGBmatrixPanel9drawPixelEiij+0x62>
    1432:	e3 30       	cpi	r30, 0x03	; 3
    1434:	c9 f0       	breq	.+50     	; 0x1468 <_ZN14RGBmatrixPanel9drawPixelEiij+0x82>
    1436:	e1 30       	cpi	r30, 0x01	; 1
    1438:	01 f5       	brne	.+64     	; 0x147a <_ZN14RGBmatrixPanel9drawPixelEiij+0x94>
   case 1:
    _swap_int16_t(x, y);
    x = WIDTH  - 1 - x;
    143a:	fc 01       	movw	r30, r24
    143c:	31 97       	sbiw	r30, 0x01	; 1
    143e:	e4 1b       	sub	r30, r20
    1440:	f5 0b       	sbc	r31, r21
    1442:	ab 01       	movw	r20, r22
    1444:	bf 01       	movw	r22, r30
    1446:	19 c0       	rjmp	.+50     	; 0x147a <_ZN14RGBmatrixPanel9drawPixelEiij+0x94>
    break;
   case 2:
    x = WIDTH  - 1 - x;
    1448:	fc 01       	movw	r30, r24
    144a:	31 97       	sbiw	r30, 0x01	; 1
    144c:	ef 01       	movw	r28, r30
    144e:	c6 1b       	sub	r28, r22
    1450:	d7 0b       	sbc	r29, r23
    1452:	be 01       	movw	r22, r28
    y = HEIGHT - 1 - y;
    1454:	16 96       	adiw	r26, 0x06	; 6
    1456:	ed 91       	ld	r30, X+
    1458:	fc 91       	ld	r31, X
    145a:	17 97       	sbiw	r26, 0x07	; 7
    145c:	31 97       	sbiw	r30, 0x01	; 1
    145e:	ef 01       	movw	r28, r30
    1460:	c4 1b       	sub	r28, r20
    1462:	d5 0b       	sbc	r29, r21
    1464:	ae 01       	movw	r20, r28
    1466:	09 c0       	rjmp	.+18     	; 0x147a <_ZN14RGBmatrixPanel9drawPixelEiij+0x94>
    break;
   case 3:
    _swap_int16_t(x, y);
    y = HEIGHT - 1 - y;
    1468:	16 96       	adiw	r26, 0x06	; 6
    146a:	ed 91       	ld	r30, X+
    146c:	fc 91       	ld	r31, X
    146e:	17 97       	sbiw	r26, 0x07	; 7
    1470:	31 97       	sbiw	r30, 0x01	; 1
    1472:	e6 1b       	sub	r30, r22
    1474:	f7 0b       	sbc	r31, r23
    1476:	ba 01       	movw	r22, r20
    1478:	af 01       	movw	r20, r30
    break;
  }

  // Adafruit_GFX uses 16-bit color in 5/6/5 format, while matrix needs
  // 4/4/4.  Pluck out relevant bits while separating into R,G,B:
  r =  c >> 12;        // RRRRrggggggbbbbb
    147a:	89 01       	movw	r16, r18
    147c:	01 2f       	mov	r16, r17
    147e:	11 27       	eor	r17, r17
    1480:	02 95       	swap	r16
    1482:	0f 70       	andi	r16, 0x0F	; 15
    1484:	f0 2e       	mov	r15, r16
  g = (c >>  7) & 0xF; // rrrrrGGGGggbbbbb
    1486:	e9 01       	movw	r28, r18
    1488:	cc 0f       	add	r28, r28
    148a:	cd 2f       	mov	r28, r29
    148c:	cc 1f       	adc	r28, r28
    148e:	dd 0b       	sbc	r29, r29
    1490:	d1 95       	neg	r29
    1492:	ec 2f       	mov	r30, r28
    1494:	ef 70       	andi	r30, 0x0F	; 15
    1496:	ee 2e       	mov	r14, r30
  b = (c >>  1) & 0xF; // rrrrrggggggBBBBb
    1498:	36 95       	lsr	r19
    149a:	27 95       	ror	r18
    149c:	e2 2f       	mov	r30, r18
    149e:	ef 70       	andi	r30, 0x0F	; 15
    14a0:	de 2e       	mov	r13, r30

  // Loop counter stuff
  bit   = 2;
  limit = 1 << nPlanes;

  if(y < nRows) {
    14a2:	5e 96       	adiw	r26, 0x1e	; 30
    14a4:	ec 91       	ld	r30, X
    14a6:	5e 97       	sbiw	r26, 0x1e	; 30
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	01 70       	andi	r16, 0x01	; 1
    14ac:	11 27       	eor	r17, r17
    14ae:	3c 2f       	mov	r19, r28
    14b0:	31 70       	andi	r19, 0x01	; 1
    14b2:	21 70       	andi	r18, 0x01	; 1
    14b4:	4e 17       	cp	r20, r30
    14b6:	5f 07       	cpc	r21, r31
    14b8:	0c f0       	brlt	.+2      	; 0x14bc <_ZN14RGBmatrixPanel9drawPixelEiij+0xd6>
    14ba:	6c c0       	rjmp	.+216    	; 0x1594 <_ZN14RGBmatrixPanel9drawPixelEiij+0x1ae>
    // Data for the upper half of the display is stored in the lower
    // bits of each byte.
    ptr = &matrixbuff[backindex][y * WIDTH * (nPlanes - 1) + x]; // Base addr
    14bc:	5f 96       	adiw	r26, 0x1f	; 31
    14be:	ec 91       	ld	r30, X
    14c0:	5f 97       	sbiw	r26, 0x1f	; 31
    14c2:	ed 01       	movw	r28, r26
    14c4:	ce 0f       	add	r28, r30
    14c6:	d1 1d       	adc	r29, r1
    14c8:	ce 0f       	add	r28, r30
    14ca:	d1 1d       	adc	r29, r1
    14cc:	48 9f       	mul	r20, r24
    14ce:	f0 01       	movw	r30, r0
    14d0:	49 9f       	mul	r20, r25
    14d2:	f0 0d       	add	r31, r0
    14d4:	58 9f       	mul	r21, r24
    14d6:	f0 0d       	add	r31, r0
    14d8:	11 24       	eor	r1, r1
    14da:	af 01       	movw	r20, r30
    14dc:	44 0f       	add	r20, r20
    14de:	55 1f       	adc	r21, r21
    14e0:	e4 0f       	add	r30, r20
    14e2:	f5 1f       	adc	r31, r21
    14e4:	6e 0f       	add	r22, r30
    14e6:	7f 1f       	adc	r23, r31
    14e8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    14ea:	fb 8d       	ldd	r31, Y+27	; 0x1b
    14ec:	e6 0f       	add	r30, r22
    14ee:	f7 1f       	adc	r31, r23
    // Plane 0 is a tricky case -- its data is spread about,
    // stored in least two bits not used by the other planes.
    ptr[WIDTH*2] &= ~B00000011;           // Plane 0 R,G mask out in one op
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	ef 01       	movw	r28, r30
    14f6:	c8 0f       	add	r28, r24
    14f8:	d9 1f       	adc	r29, r25
    14fa:	88 81       	ld	r24, Y
    14fc:	8c 7f       	andi	r24, 0xFC	; 252
    14fe:	88 83       	st	Y, r24
    if(r & 1) ptr[WIDTH*2] |=  B00000001; // Plane 0 R: 64 bytes ahead, bit 0
    1500:	01 2b       	or	r16, r17
    1502:	59 f0       	breq	.+22     	; 0x151a <_ZN14RGBmatrixPanel9drawPixelEiij+0x134>
    1504:	14 96       	adiw	r26, 0x04	; 4
    1506:	cd 91       	ld	r28, X+
    1508:	dc 91       	ld	r29, X
    150a:	15 97       	sbiw	r26, 0x05	; 5
    150c:	cc 0f       	add	r28, r28
    150e:	dd 1f       	adc	r29, r29
    1510:	ce 0f       	add	r28, r30
    1512:	df 1f       	adc	r29, r31
    1514:	88 81       	ld	r24, Y
    1516:	81 60       	ori	r24, 0x01	; 1
    1518:	88 83       	st	Y, r24
    if(g & 1) ptr[WIDTH*2] |=  B00000010; // Plane 0 G: 64 bytes ahead, bit 1
    151a:	33 23       	and	r19, r19
    151c:	59 f0       	breq	.+22     	; 0x1534 <_ZN14RGBmatrixPanel9drawPixelEiij+0x14e>
    151e:	14 96       	adiw	r26, 0x04	; 4
    1520:	cd 91       	ld	r28, X+
    1522:	dc 91       	ld	r29, X
    1524:	15 97       	sbiw	r26, 0x05	; 5
    1526:	cc 0f       	add	r28, r28
    1528:	dd 1f       	adc	r29, r29
    152a:	ce 0f       	add	r28, r30
    152c:	df 1f       	adc	r29, r31
    152e:	88 81       	ld	r24, Y
    1530:	82 60       	ori	r24, 0x02	; 2
    1532:	88 83       	st	Y, r24
    1534:	14 96       	adiw	r26, 0x04	; 4
    1536:	cd 91       	ld	r28, X+
    1538:	dc 91       	ld	r29, X
    153a:	15 97       	sbiw	r26, 0x05	; 5
    if(b & 1) ptr[WIDTH]   |=  B00000001; // Plane 0 B: 32 bytes ahead, bit 0
    153c:	ce 0f       	add	r28, r30
    153e:	df 1f       	adc	r29, r31
    1540:	88 81       	ld	r24, Y
    1542:	22 23       	and	r18, r18
    1544:	31 f0       	breq	.+12     	; 0x1552 <_ZN14RGBmatrixPanel9drawPixelEiij+0x16c>
    1546:	81 60       	ori	r24, 0x01	; 1
    1548:	88 83       	st	Y, r24
    x = WIDTH  - 1 - x;
    y = HEIGHT - 1 - y;
    break;
   case 3:
    _swap_int16_t(x, y);
    y = HEIGHT - 1 - y;
    154a:	23 e0       	ldi	r18, 0x03	; 3
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	92 e0       	ldi	r25, 0x02	; 2
    1550:	1a c0       	rjmp	.+52     	; 0x1586 <_ZN14RGBmatrixPanel9drawPixelEiij+0x1a0>
    // stored in least two bits not used by the other planes.
    ptr[WIDTH*2] &= ~B00000011;           // Plane 0 R,G mask out in one op
    if(r & 1) ptr[WIDTH*2] |=  B00000001; // Plane 0 R: 64 bytes ahead, bit 0
    if(g & 1) ptr[WIDTH*2] |=  B00000010; // Plane 0 G: 64 bytes ahead, bit 1
    if(b & 1) ptr[WIDTH]   |=  B00000001; // Plane 0 B: 32 bytes ahead, bit 0
    else      ptr[WIDTH]   &= ~B00000001; // Plane 0 B unset; mask out
    1552:	8e 7f       	andi	r24, 0xFE	; 254
    1554:	f9 cf       	rjmp	.-14     	; 0x1548 <_ZN14RGBmatrixPanel9drawPixelEiij+0x162>
    // The remaining three image planes are more normal-ish.
    // Data is stored in the high 6 bits so it can be quickly
    // copied to the DATAPORT register w/6 output lines.
    for(; bit < limit; bit <<= 1) {
      *ptr &= ~B00011100;            // Mask out R,G,B in one op
      if(r & bit) *ptr |= B00000100; // Plane N R: bit 2
    1556:	80 83       	st	Z, r24
      if(g & bit) *ptr |= B00001000; // Plane N G: bit 3
    1558:	89 2f       	mov	r24, r25
    155a:	8e 21       	and	r24, r14
    155c:	19 f0       	breq	.+6      	; 0x1564 <_ZN14RGBmatrixPanel9drawPixelEiij+0x17e>
    155e:	80 81       	ld	r24, Z
    1560:	88 60       	ori	r24, 0x08	; 8
    1562:	80 83       	st	Z, r24
      if(b & bit) *ptr |= B00010000; // Plane N B: bit 4
    1564:	89 2f       	mov	r24, r25
    1566:	8d 21       	and	r24, r13
    1568:	19 f0       	breq	.+6      	; 0x1570 <_ZN14RGBmatrixPanel9drawPixelEiij+0x18a>
    156a:	80 81       	ld	r24, Z
    156c:	80 61       	ori	r24, 0x10	; 16
    156e:	80 83       	st	Z, r24
      ptr  += WIDTH;                 // Advance to next bit plane
    1570:	14 96       	adiw	r26, 0x04	; 4
    1572:	4d 91       	ld	r20, X+
    1574:	5c 91       	ld	r21, X
    1576:	15 97       	sbiw	r26, 0x05	; 5
    1578:	e4 0f       	add	r30, r20
    157a:	f5 1f       	adc	r31, r21
    if(b & 1) ptr[WIDTH]   |=  B00000001; // Plane 0 B: 32 bytes ahead, bit 0
    else      ptr[WIDTH]   &= ~B00000001; // Plane 0 B unset; mask out
    // The remaining three image planes are more normal-ish.
    // Data is stored in the high 6 bits so it can be quickly
    // copied to the DATAPORT register w/6 output lines.
    for(; bit < limit; bit <<= 1) {
    157c:	99 0f       	add	r25, r25
    157e:	21 50       	subi	r18, 0x01	; 1
    1580:	31 09       	sbc	r19, r1
    1582:	09 f4       	brne	.+2      	; 0x1586 <_ZN14RGBmatrixPanel9drawPixelEiij+0x1a0>
    1584:	5d c0       	rjmp	.+186    	; 0x1640 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
      *ptr &= ~B00011100;            // Mask out R,G,B in one op
    1586:	80 81       	ld	r24, Z
    1588:	83 7e       	andi	r24, 0xE3	; 227
      if(r & bit) *ptr |= B00000100; // Plane N R: bit 2
    158a:	49 2f       	mov	r20, r25
    158c:	4f 21       	and	r20, r15
    158e:	19 f3       	breq	.-58     	; 0x1556 <_ZN14RGBmatrixPanel9drawPixelEiij+0x170>
    1590:	84 60       	ori	r24, 0x04	; 4
    1592:	e1 cf       	rjmp	.-62     	; 0x1556 <_ZN14RGBmatrixPanel9drawPixelEiij+0x170>
      ptr  += WIDTH;                 // Advance to next bit plane
    }
  } else {
    // Data for the lower half of the display is stored in the upper
    // bits, except for the plane 0 stuff, using 2 least bits.
    ptr = &matrixbuff[backindex][(y - nRows) * WIDTH * (nPlanes - 1) + x];
    1594:	5f 96       	adiw	r26, 0x1f	; 31
    1596:	cc 90       	ld	r12, X
    1598:	5f 97       	sbiw	r26, 0x1f	; 31
    159a:	ed 01       	movw	r28, r26
    159c:	cc 0d       	add	r28, r12
    159e:	d1 1d       	adc	r29, r1
    15a0:	cc 0d       	add	r28, r12
    15a2:	d1 1d       	adc	r29, r1
    15a4:	4e 1b       	sub	r20, r30
    15a6:	5f 0b       	sbc	r21, r31
    15a8:	48 9f       	mul	r20, r24
    15aa:	f0 01       	movw	r30, r0
    15ac:	49 9f       	mul	r20, r25
    15ae:	f0 0d       	add	r31, r0
    15b0:	58 9f       	mul	r21, r24
    15b2:	f0 0d       	add	r31, r0
    15b4:	11 24       	eor	r1, r1
    15b6:	cf 01       	movw	r24, r30
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	e8 0f       	add	r30, r24
    15be:	f9 1f       	adc	r31, r25
    15c0:	6e 0f       	add	r22, r30
    15c2:	7f 1f       	adc	r23, r31
    15c4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    15c6:	fb 8d       	ldd	r31, Y+27	; 0x1b
    15c8:	e6 0f       	add	r30, r22
    15ca:	f7 1f       	adc	r31, r23
    *ptr &= ~B00000011;                  // Plane 0 G,B mask out in one op
    15cc:	80 81       	ld	r24, Z
    15ce:	8c 7f       	andi	r24, 0xFC	; 252
    15d0:	80 83       	st	Z, r24
    15d2:	14 96       	adiw	r26, 0x04	; 4
    15d4:	cd 91       	ld	r28, X+
    15d6:	dc 91       	ld	r29, X
    15d8:	15 97       	sbiw	r26, 0x05	; 5
    if(r & 1)  ptr[WIDTH] |=  B00000010; // Plane 0 R: 32 bytes ahead, bit 1
    15da:	ce 0f       	add	r28, r30
    15dc:	df 1f       	adc	r29, r31
    15de:	88 81       	ld	r24, Y
    15e0:	01 2b       	or	r16, r17
    15e2:	11 f0       	breq	.+4      	; 0x15e8 <_ZN14RGBmatrixPanel9drawPixelEiij+0x202>
    15e4:	82 60       	ori	r24, 0x02	; 2
    15e6:	01 c0       	rjmp	.+2      	; 0x15ea <_ZN14RGBmatrixPanel9drawPixelEiij+0x204>
    else       ptr[WIDTH] &= ~B00000010; // Plane 0 R unset; mask out
    15e8:	8d 7f       	andi	r24, 0xFD	; 253
    15ea:	88 83       	st	Y, r24
    if(g & 1) *ptr        |=  B00000001; // Plane 0 G: bit 0
    15ec:	33 23       	and	r19, r19
    15ee:	19 f0       	breq	.+6      	; 0x15f6 <_ZN14RGBmatrixPanel9drawPixelEiij+0x210>
    15f0:	80 81       	ld	r24, Z
    15f2:	81 60       	ori	r24, 0x01	; 1
    15f4:	80 83       	st	Z, r24
    if(b & 1) *ptr        |=  B00000010; // Plane 0 B: bit 0
    15f6:	22 23       	and	r18, r18
    15f8:	19 f0       	breq	.+6      	; 0x1600 <_ZN14RGBmatrixPanel9drawPixelEiij+0x21a>
    15fa:	80 81       	ld	r24, Z
    15fc:	82 60       	ori	r24, 0x02	; 2
    15fe:	80 83       	st	Z, r24
    x = WIDTH  - 1 - x;
    y = HEIGHT - 1 - y;
    break;
   case 3:
    _swap_int16_t(x, y);
    y = HEIGHT - 1 - y;
    1600:	23 e0       	ldi	r18, 0x03	; 3
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	92 e0       	ldi	r25, 0x02	; 2
    if(r & 1)  ptr[WIDTH] |=  B00000010; // Plane 0 R: 32 bytes ahead, bit 1
    else       ptr[WIDTH] &= ~B00000010; // Plane 0 R unset; mask out
    if(g & 1) *ptr        |=  B00000001; // Plane 0 G: bit 0
    if(b & 1) *ptr        |=  B00000010; // Plane 0 B: bit 0
    for(; bit < limit; bit <<= 1) {
      *ptr &= ~B11100000;            // Mask out R,G,B in one op
    1606:	80 81       	ld	r24, Z
    1608:	8f 71       	andi	r24, 0x1F	; 31
      if(r & bit) *ptr |= B00100000; // Plane N R: bit 5
    160a:	49 2f       	mov	r20, r25
    160c:	4f 21       	and	r20, r15
    160e:	09 f0       	breq	.+2      	; 0x1612 <_ZN14RGBmatrixPanel9drawPixelEiij+0x22c>
    1610:	80 62       	ori	r24, 0x20	; 32
    1612:	80 83       	st	Z, r24
      if(g & bit) *ptr |= B01000000; // Plane N G: bit 6
    1614:	89 2f       	mov	r24, r25
    1616:	8e 21       	and	r24, r14
    1618:	19 f0       	breq	.+6      	; 0x1620 <_ZN14RGBmatrixPanel9drawPixelEiij+0x23a>
    161a:	80 81       	ld	r24, Z
    161c:	80 64       	ori	r24, 0x40	; 64
    161e:	80 83       	st	Z, r24
      if(b & bit) *ptr |= B10000000; // Plane N B: bit 7
    1620:	89 2f       	mov	r24, r25
    1622:	8d 21       	and	r24, r13
    1624:	19 f0       	breq	.+6      	; 0x162c <_ZN14RGBmatrixPanel9drawPixelEiij+0x246>
    1626:	80 81       	ld	r24, Z
    1628:	80 68       	ori	r24, 0x80	; 128
    162a:	80 83       	st	Z, r24
      ptr  += WIDTH;                 // Advance to next bit plane
    162c:	14 96       	adiw	r26, 0x04	; 4
    162e:	4d 91       	ld	r20, X+
    1630:	5c 91       	ld	r21, X
    1632:	15 97       	sbiw	r26, 0x05	; 5
    1634:	e4 0f       	add	r30, r20
    1636:	f5 1f       	adc	r31, r21
    *ptr &= ~B00000011;                  // Plane 0 G,B mask out in one op
    if(r & 1)  ptr[WIDTH] |=  B00000010; // Plane 0 R: 32 bytes ahead, bit 1
    else       ptr[WIDTH] &= ~B00000010; // Plane 0 R unset; mask out
    if(g & 1) *ptr        |=  B00000001; // Plane 0 G: bit 0
    if(b & 1) *ptr        |=  B00000010; // Plane 0 B: bit 0
    for(; bit < limit; bit <<= 1) {
    1638:	99 0f       	add	r25, r25
    163a:	21 50       	subi	r18, 0x01	; 1
    163c:	31 09       	sbc	r19, r1
    163e:	19 f7       	brne	.-58     	; 0x1606 <_ZN14RGBmatrixPanel9drawPixelEiij+0x220>
      if(g & bit) *ptr |= B01000000; // Plane N G: bit 6
      if(b & bit) *ptr |= B10000000; // Plane N B: bit 7
      ptr  += WIDTH;                 // Advance to next bit plane
    }
  }
}
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	1f 91       	pop	r17
    1646:	0f 91       	pop	r16
    1648:	ff 90       	pop	r15
    164a:	ef 90       	pop	r14
    164c:	df 90       	pop	r13
    164e:	cf 90       	pop	r12
    1650:	08 95       	ret

00001652 <_ZN14RGBmatrixPanel4initEhhhhhhhbh>:
// are even an actual need.
static RGBmatrixPanel *activePanel = NULL;

// Code common to both the 16x32 and 32x32 constructors:
void RGBmatrixPanel::init(uint8_t rows, uint8_t a, uint8_t b, uint8_t c,
  uint8_t sclk, uint8_t latch, uint8_t oe, boolean dbuf, uint8_t width) {
    1652:	2f 92       	push	r2
    1654:	3f 92       	push	r3
    1656:	4f 92       	push	r4
    1658:	5f 92       	push	r5
    165a:	6f 92       	push	r6
    165c:	7f 92       	push	r7
    165e:	8f 92       	push	r8
    1660:	af 92       	push	r10
    1662:	cf 92       	push	r12
    1664:	df 92       	push	r13
    1666:	ef 92       	push	r14
    1668:	ff 92       	push	r15
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	00 d0       	rcall	.+0      	; 0x1674 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x22>
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	3c 01       	movw	r6, r24
    167a:	16 2f       	mov	r17, r22
    167c:	d4 2e       	mov	r13, r20
    167e:	f2 2e       	mov	r15, r18

  nRows = rows; // Number of multiplexed rows; actual height is 2X this
    1680:	dc 01       	movw	r26, r24
    1682:	5e 96       	adiw	r26, 0x1e	; 30
    1684:	6c 93       	st	X, r22

  // Allocate and initialize matrix buffer:
  int buffsize  = width * nRows * 3, // x3 = 3 bytes holds 4 planes "packed"
    1686:	4d 88       	ldd	r4, Y+21	; 0x15
    1688:	46 9e       	mul	r4, r22
    168a:	c0 01       	movw	r24, r0
    168c:	11 24       	eor	r1, r1
    168e:	2c 01       	movw	r4, r24
    1690:	44 0c       	add	r4, r4
    1692:	55 1c       	adc	r5, r5
    1694:	48 0e       	add	r4, r24
    1696:	59 1e       	adc	r5, r25
      allocsize = (dbuf == true) ? (buffsize * 2) : buffsize;
    1698:	a2 01       	movw	r20, r4
    169a:	88 20       	and	r8, r8
    169c:	11 f0       	breq	.+4      	; 0x16a2 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x50>
    169e:	44 0f       	add	r20, r20
    16a0:	55 1f       	adc	r21, r21
  if(NULL == (matrixbuff[0] = (uint8_t *)malloc(allocsize))) return;
    16a2:	ca 01       	movw	r24, r20
    16a4:	49 83       	std	Y+1, r20	; 0x01
    16a6:	5a 83       	std	Y+2, r21	; 0x02
    16a8:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <malloc>
    16ac:	1c 01       	movw	r2, r24
    16ae:	f3 01       	movw	r30, r6
    16b0:	93 8f       	std	Z+27, r25	; 0x1b
    16b2:	82 8f       	std	Z+26, r24	; 0x1a
    16b4:	49 81       	ldd	r20, Y+1	; 0x01
    16b6:	5a 81       	ldd	r21, Y+2	; 0x02
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	09 f4       	brne	.+2      	; 0x16be <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x6c>
    16bc:	a9 c0       	rjmp	.+338    	; 0x1810 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x1be>
  memset(matrixbuff[0], 0, allocsize);
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	0e 94 ac 13 	call	0x2758	; 0x2758 <memset>
  // If not double-buffered, both buffers then point to the same address:
  matrixbuff[1] = (dbuf == true) ? &matrixbuff[0][buffsize] : matrixbuff[0];
    16c6:	88 20       	and	r8, r8
    16c8:	19 f0       	breq	.+6      	; 0x16d0 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x7e>
    16ca:	42 0c       	add	r4, r2
    16cc:	53 1c       	adc	r5, r3
    16ce:	01 c0       	rjmp	.+2      	; 0x16d2 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x80>
    16d0:	21 01       	movw	r4, r2
    16d2:	d3 01       	movw	r26, r6
    16d4:	5d 96       	adiw	r26, 0x1d	; 29
    16d6:	5c 92       	st	X, r5
    16d8:	4e 92       	st	-X, r4
    16da:	5c 97       	sbiw	r26, 0x1c	; 28

  // Save pin numbers for use by begin() method later.
  _a     = a;
    16dc:	d7 96       	adiw	r26, 0x37	; 55
    16de:	dc 92       	st	X, r13
    16e0:	d7 97       	sbiw	r26, 0x37	; 55
  _b     = b;
    16e2:	d8 96       	adiw	r26, 0x38	; 56
    16e4:	fc 92       	st	X, r15
    16e6:	d8 97       	sbiw	r26, 0x38	; 56
  _c     = c;
    16e8:	d9 96       	adiw	r26, 0x39	; 57
    16ea:	0c 93       	st	X, r16
    16ec:	d9 97       	sbiw	r26, 0x39	; 57
  _sclk  = sclk;
    16ee:	d4 96       	adiw	r26, 0x34	; 52
    16f0:	ec 92       	st	X, r14
    16f2:	d4 97       	sbiw	r26, 0x34	; 52
  _latch = latch;
    16f4:	d5 96       	adiw	r26, 0x35	; 53
    16f6:	cc 92       	st	X, r12
    16f8:	d5 97       	sbiw	r26, 0x35	; 53
  _oe    = oe;
    16fa:	d6 96       	adiw	r26, 0x36	; 54
    16fc:	ac 92       	st	X, r10
    16fe:	d6 97       	sbiw	r26, 0x36	; 54

  // Look up port registers and pin masks ahead of time,
  // avoids many slow digitalWrite() calls later.
  sclkpin   = digitalPinToBitMask(sclk);
    1700:	ee 2d       	mov	r30, r14
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	e0 59       	subi	r30, 0x90	; 144
    1706:	fa 4f       	sbci	r31, 0xFA	; 250
    1708:	e4 91       	lpm	r30, Z
    170a:	9d 96       	adiw	r26, 0x2d	; 45
    170c:	ec 93       	st	X, r30
    170e:	9d 97       	sbiw	r26, 0x2d	; 45
  latport   = portOutputRegister(digitalPinToPort(latch));
    1710:	2c 2d       	mov	r18, r12
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	f9 01       	movw	r30, r18
    1716:	ec 57       	subi	r30, 0x7C	; 124
    1718:	fa 4f       	sbci	r31, 0xFA	; 250
    171a:	e4 91       	lpm	r30, Z
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	ee 0f       	add	r30, r30
    1720:	ff 1f       	adc	r31, r31
    1722:	e8 56       	subi	r30, 0x68	; 104
    1724:	fa 4f       	sbci	r31, 0xFA	; 250
    1726:	85 91       	lpm	r24, Z+
    1728:	94 91       	lpm	r25, Z
    172a:	f3 01       	movw	r30, r6
    172c:	92 a3       	std	Z+34, r25	; 0x22
    172e:	81 a3       	std	Z+33, r24	; 0x21
  latpin    = digitalPinToBitMask(latch);
    1730:	f9 01       	movw	r30, r18
    1732:	e0 59       	subi	r30, 0x90	; 144
    1734:	fa 4f       	sbci	r31, 0xFA	; 250
    1736:	24 91       	lpm	r18, Z
    1738:	9e 96       	adiw	r26, 0x2e	; 46
    173a:	2c 93       	st	X, r18
    173c:	9e 97       	sbiw	r26, 0x2e	; 46
  oeport    = portOutputRegister(digitalPinToPort(oe));
    173e:	8a 2d       	mov	r24, r10
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	fc 01       	movw	r30, r24
    1744:	ec 57       	subi	r30, 0x7C	; 124
    1746:	fa 4f       	sbci	r31, 0xFA	; 250
    1748:	e4 91       	lpm	r30, Z
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	ee 0f       	add	r30, r30
    174e:	ff 1f       	adc	r31, r31
    1750:	e8 56       	subi	r30, 0x68	; 104
    1752:	fa 4f       	sbci	r31, 0xFA	; 250
    1754:	25 91       	lpm	r18, Z+
    1756:	34 91       	lpm	r19, Z
    1758:	f3 01       	movw	r30, r6
    175a:	34 a3       	std	Z+36, r19	; 0x24
    175c:	23 a3       	std	Z+35, r18	; 0x23
  oepin     = digitalPinToBitMask(oe);
    175e:	fc 01       	movw	r30, r24
    1760:	e0 59       	subi	r30, 0x90	; 144
    1762:	fa 4f       	sbci	r31, 0xFA	; 250
    1764:	84 91       	lpm	r24, Z
    1766:	9f 96       	adiw	r26, 0x2f	; 47
    1768:	8c 93       	st	X, r24
    176a:	9f 97       	sbiw	r26, 0x2f	; 47
  addraport = portOutputRegister(digitalPinToPort(a));
    176c:	4d 2d       	mov	r20, r13
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	fa 01       	movw	r30, r20
    1772:	ec 57       	subi	r30, 0x7C	; 124
    1774:	fa 4f       	sbci	r31, 0xFA	; 250
    1776:	e4 91       	lpm	r30, Z
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	ee 0f       	add	r30, r30
    177c:	ff 1f       	adc	r31, r31
    177e:	e8 56       	subi	r30, 0x68	; 104
    1780:	fa 4f       	sbci	r31, 0xFA	; 250
    1782:	85 91       	lpm	r24, Z+
    1784:	94 91       	lpm	r25, Z
    1786:	f3 01       	movw	r30, r6
    1788:	96 a3       	std	Z+38, r25	; 0x26
    178a:	85 a3       	std	Z+37, r24	; 0x25
  addrapin  = digitalPinToBitMask(a);
    178c:	fa 01       	movw	r30, r20
    178e:	e0 59       	subi	r30, 0x90	; 144
    1790:	fa 4f       	sbci	r31, 0xFA	; 250
    1792:	e4 91       	lpm	r30, Z
    1794:	d0 96       	adiw	r26, 0x30	; 48
    1796:	ec 93       	st	X, r30
    1798:	d0 97       	sbiw	r26, 0x30	; 48
  addrbport = portOutputRegister(digitalPinToPort(b));
    179a:	2f 2d       	mov	r18, r15
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	f9 01       	movw	r30, r18
    17a0:	ec 57       	subi	r30, 0x7C	; 124
    17a2:	fa 4f       	sbci	r31, 0xFA	; 250
    17a4:	e4 91       	lpm	r30, Z
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	ee 0f       	add	r30, r30
    17aa:	ff 1f       	adc	r31, r31
    17ac:	e8 56       	subi	r30, 0x68	; 104
    17ae:	fa 4f       	sbci	r31, 0xFA	; 250
    17b0:	85 91       	lpm	r24, Z+
    17b2:	94 91       	lpm	r25, Z
    17b4:	f3 01       	movw	r30, r6
    17b6:	90 a7       	std	Z+40, r25	; 0x28
    17b8:	87 a3       	std	Z+39, r24	; 0x27
  addrbpin  = digitalPinToBitMask(b);
    17ba:	f9 01       	movw	r30, r18
    17bc:	e0 59       	subi	r30, 0x90	; 144
    17be:	fa 4f       	sbci	r31, 0xFA	; 250
    17c0:	24 91       	lpm	r18, Z
    17c2:	d1 96       	adiw	r26, 0x31	; 49
    17c4:	2c 93       	st	X, r18
    17c6:	d1 97       	sbiw	r26, 0x31	; 49
  addrcport = portOutputRegister(digitalPinToPort(c));
    17c8:	80 2f       	mov	r24, r16
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	fc 01       	movw	r30, r24
    17ce:	ec 57       	subi	r30, 0x7C	; 124
    17d0:	fa 4f       	sbci	r31, 0xFA	; 250
    17d2:	e4 91       	lpm	r30, Z
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	ee 0f       	add	r30, r30
    17d8:	ff 1f       	adc	r31, r31
    17da:	e8 56       	subi	r30, 0x68	; 104
    17dc:	fa 4f       	sbci	r31, 0xFA	; 250
    17de:	25 91       	lpm	r18, Z+
    17e0:	34 91       	lpm	r19, Z
    17e2:	f3 01       	movw	r30, r6
    17e4:	32 a7       	std	Z+42, r19	; 0x2a
    17e6:	21 a7       	std	Z+41, r18	; 0x29
  addrcpin  = digitalPinToBitMask(c); 
    17e8:	fc 01       	movw	r30, r24
    17ea:	e0 59       	subi	r30, 0x90	; 144
    17ec:	fa 4f       	sbci	r31, 0xFA	; 250
    17ee:	84 91       	lpm	r24, Z
    17f0:	d2 96       	adiw	r26, 0x32	; 50
    17f2:	8c 93       	st	X, r24
    17f4:	d2 97       	sbiw	r26, 0x32	; 50
  plane     = nPlanes - 1;
    17f6:	83 e0       	ldi	r24, 0x03	; 3
    17f8:	dc 96       	adiw	r26, 0x3c	; 60
    17fa:	8c 93       	st	X, r24
    17fc:	dc 97       	sbiw	r26, 0x3c	; 60
  row       = nRows   - 1;
    17fe:	11 50       	subi	r17, 0x01	; 1
    1800:	db 96       	adiw	r26, 0x3b	; 59
    1802:	1c 93       	st	X, r17
    1804:	db 97       	sbiw	r26, 0x3b	; 59
  swapflag  = false;
    1806:	90 96       	adiw	r26, 0x20	; 32
    1808:	1c 92       	st	X, r1
    180a:	90 97       	sbiw	r26, 0x20	; 32
  backindex = 0;     // Array index of back buffer
    180c:	5f 96       	adiw	r26, 0x1f	; 31
    180e:	1c 92       	st	X, r1
}
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	df 90       	pop	r13
    1822:	cf 90       	pop	r12
    1824:	af 90       	pop	r10
    1826:	8f 90       	pop	r8
    1828:	7f 90       	pop	r7
    182a:	6f 90       	pop	r6
    182c:	5f 90       	pop	r5
    182e:	4f 90       	pop	r4
    1830:	3f 90       	pop	r3
    1832:	2f 90       	pop	r2
    1834:	08 95       	ret

00001836 <_ZN14RGBmatrixPanelC1Ehhhhhhhbh>:

  init(8, a, b, c, sclk, latch, oe, dbuf, 32);
}

// Constructor for 32x32 or 32x64 panel:
RGBmatrixPanel::RGBmatrixPanel(
    1836:	6f 92       	push	r6
    1838:	7f 92       	push	r7
    183a:	8f 92       	push	r8
    183c:	af 92       	push	r10
    183e:	bf 92       	push	r11
    1840:	cf 92       	push	r12
    1842:	df 92       	push	r13
    1844:	ef 92       	push	r14
    1846:	ff 92       	push	r15
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	1f 92       	push	r1
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	3c 01       	movw	r6, r24
    1858:	d6 2e       	mov	r13, r22
    185a:	b4 2e       	mov	r11, r20
    185c:	10 2f       	mov	r17, r16
    185e:	f9 88       	ldd	r15, Y+17	; 0x11
  uint8_t a, uint8_t b, uint8_t c, uint8_t d,
  uint8_t sclk, uint8_t latch, uint8_t oe, boolean dbuf, uint8_t width) :
  Adafruit_GFX(width, 32) {
    1860:	6f 2d       	mov	r22, r15
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	40 e2       	ldi	r20, 0x20	; 32
    1866:	50 e0       	ldi	r21, 0x00	; 0
    1868:	29 83       	std	Y+1, r18	; 0x01
    186a:	0e 94 69 05 	call	0xad2	; 0xad2 <_ZN12Adafruit_GFXC1Eii>
    186e:	80 e3       	ldi	r24, 0x30	; 48
    1870:	91 e0       	ldi	r25, 0x01	; 1
    1872:	d3 01       	movw	r26, r6
    1874:	8d 93       	st	X+, r24
    1876:	9c 93       	st	X, r25

  init(16, a, b, c, sclk, latch, oe, dbuf, width);
    1878:	ff 92       	push	r15
    187a:	29 81       	ldd	r18, Y+1	; 0x01
    187c:	02 2f       	mov	r16, r18
    187e:	2b 2d       	mov	r18, r11
    1880:	4d 2d       	mov	r20, r13
    1882:	60 e1       	ldi	r22, 0x10	; 16
    1884:	c3 01       	movw	r24, r6
    1886:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN14RGBmatrixPanel4initEhhhhhhhbh>

  // Init a few extra 32x32-specific elements:
  _d        = d;
    188a:	f3 01       	movw	r30, r6
    188c:	12 af       	std	Z+58, r17	; 0x3a
  addrdport = portOutputRegister(digitalPinToPort(d));
    188e:	01 2f       	mov	r16, r17
    1890:	10 e0       	ldi	r17, 0x00	; 0
    1892:	f8 01       	movw	r30, r16
    1894:	ec 57       	subi	r30, 0x7C	; 124
    1896:	fa 4f       	sbci	r31, 0xFA	; 250
    1898:	e4 91       	lpm	r30, Z
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	ee 0f       	add	r30, r30
    189e:	ff 1f       	adc	r31, r31
    18a0:	e8 56       	subi	r30, 0x68	; 104
    18a2:	fa 4f       	sbci	r31, 0xFA	; 250
    18a4:	85 91       	lpm	r24, Z+
    18a6:	94 91       	lpm	r25, Z
    18a8:	d3 01       	movw	r26, r6
    18aa:	9c 96       	adiw	r26, 0x2c	; 44
    18ac:	9c 93       	st	X, r25
    18ae:	8e 93       	st	-X, r24
    18b0:	9b 97       	sbiw	r26, 0x2b	; 43
  addrdpin  = digitalPinToBitMask(d);
    18b2:	f8 01       	movw	r30, r16
    18b4:	e0 59       	subi	r30, 0x90	; 144
    18b6:	fa 4f       	sbci	r31, 0xFA	; 250
    18b8:	e4 91       	lpm	r30, Z
    18ba:	d3 96       	adiw	r26, 0x33	; 51
    18bc:	ec 93       	st	X, r30
}
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	1f 91       	pop	r17
    18c8:	0f 91       	pop	r16
    18ca:	ff 90       	pop	r15
    18cc:	ef 90       	pop	r14
    18ce:	df 90       	pop	r13
    18d0:	cf 90       	pop	r12
    18d2:	bf 90       	pop	r11
    18d4:	af 90       	pop	r10
    18d6:	8f 90       	pop	r8
    18d8:	7f 90       	pop	r7
    18da:	6f 90       	pop	r6
    18dc:	08 95       	ret

000018de <_ZN14RGBmatrixPanel5beginEv>:

void RGBmatrixPanel::begin(void) {
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	ec 01       	movw	r28, r24

  backindex   = 0;                         // Back buffer
    18e4:	1f 8e       	std	Y+31, r1	; 0x1f
  buffptr     = matrixbuff[1 - backindex]; // -> front buffer
    18e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18e8:	e1 e0       	ldi	r30, 0x01	; 1
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	e8 1b       	sub	r30, r24
    18ee:	f1 09       	sbc	r31, r1
    18f0:	3d 96       	adiw	r30, 0x0d	; 13
    18f2:	ee 0f       	add	r30, r30
    18f4:	ff 1f       	adc	r31, r31
    18f6:	ec 0f       	add	r30, r28
    18f8:	fd 1f       	adc	r31, r29
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	9e af       	std	Y+62, r25	; 0x3e
    1900:	8d af       	std	Y+61, r24	; 0x3d
  activePanel = this;                      // For interrupt hander
    1902:	d0 93 a4 01 	sts	0x01A4, r29
    1906:	c0 93 a3 01 	sts	0x01A3, r28

  // Enable all comm & address pins as outputs, set default states:
  pinMode(_sclk , OUTPUT); SCLKPORT   &= ~sclkpin;  // Low
    190a:	61 e0       	ldi	r22, 0x01	; 1
    190c:	8c a9       	ldd	r24, Y+52	; 0x34
    190e:	0e 94 16 12 	call	0x242c	; 0x242c <pinMode>
    1912:	95 b1       	in	r25, 0x05	; 5
    1914:	8d a5       	ldd	r24, Y+45	; 0x2d
    1916:	80 95       	com	r24
    1918:	89 23       	and	r24, r25
    191a:	85 b9       	out	0x05, r24	; 5
  pinMode(_latch, OUTPUT); *latport   &= ~latpin;   // Low
    191c:	61 e0       	ldi	r22, 0x01	; 1
    191e:	8d a9       	ldd	r24, Y+53	; 0x35
    1920:	0e 94 16 12 	call	0x242c	; 0x242c <pinMode>
    1924:	e9 a1       	ldd	r30, Y+33	; 0x21
    1926:	fa a1       	ldd	r31, Y+34	; 0x22
    1928:	90 81       	ld	r25, Z
    192a:	8e a5       	ldd	r24, Y+46	; 0x2e
    192c:	80 95       	com	r24
    192e:	89 23       	and	r24, r25
    1930:	80 83       	st	Z, r24
  pinMode(_oe   , OUTPUT); *oeport    |= oepin;     // High (disable output)
    1932:	61 e0       	ldi	r22, 0x01	; 1
    1934:	8e a9       	ldd	r24, Y+54	; 0x36
    1936:	0e 94 16 12 	call	0x242c	; 0x242c <pinMode>
    193a:	eb a1       	ldd	r30, Y+35	; 0x23
    193c:	fc a1       	ldd	r31, Y+36	; 0x24
    193e:	90 81       	ld	r25, Z
    1940:	8f a5       	ldd	r24, Y+47	; 0x2f
    1942:	89 2b       	or	r24, r25
    1944:	80 83       	st	Z, r24
  pinMode(_a    , OUTPUT); *addraport &= ~addrapin; // Low
    1946:	61 e0       	ldi	r22, 0x01	; 1
    1948:	8f a9       	ldd	r24, Y+55	; 0x37
    194a:	0e 94 16 12 	call	0x242c	; 0x242c <pinMode>
    194e:	ed a1       	ldd	r30, Y+37	; 0x25
    1950:	fe a1       	ldd	r31, Y+38	; 0x26
    1952:	90 81       	ld	r25, Z
    1954:	88 a9       	ldd	r24, Y+48	; 0x30
    1956:	80 95       	com	r24
    1958:	89 23       	and	r24, r25
    195a:	80 83       	st	Z, r24
  pinMode(_b    , OUTPUT); *addrbport &= ~addrbpin; // Low
    195c:	61 e0       	ldi	r22, 0x01	; 1
    195e:	88 ad       	ldd	r24, Y+56	; 0x38
    1960:	0e 94 16 12 	call	0x242c	; 0x242c <pinMode>
    1964:	ef a1       	ldd	r30, Y+39	; 0x27
    1966:	f8 a5       	ldd	r31, Y+40	; 0x28
    1968:	90 81       	ld	r25, Z
    196a:	89 a9       	ldd	r24, Y+49	; 0x31
    196c:	80 95       	com	r24
    196e:	89 23       	and	r24, r25
    1970:	80 83       	st	Z, r24
  pinMode(_c    , OUTPUT); *addrcport &= ~addrcpin; // Low
    1972:	61 e0       	ldi	r22, 0x01	; 1
    1974:	89 ad       	ldd	r24, Y+57	; 0x39
    1976:	0e 94 16 12 	call	0x242c	; 0x242c <pinMode>
    197a:	e9 a5       	ldd	r30, Y+41	; 0x29
    197c:	fa a5       	ldd	r31, Y+42	; 0x2a
    197e:	90 81       	ld	r25, Z
    1980:	8a a9       	ldd	r24, Y+50	; 0x32
    1982:	80 95       	com	r24
    1984:	89 23       	and	r24, r25
    1986:	80 83       	st	Z, r24
  if(nRows > 8) {
    1988:	8e 8d       	ldd	r24, Y+30	; 0x1e
    198a:	89 30       	cpi	r24, 0x09	; 9
    198c:	58 f0       	brcs	.+22     	; 0x19a4 <_ZN14RGBmatrixPanel5beginEv+0xc6>
    pinMode(_d  , OUTPUT); *addrdport &= ~addrdpin; // Low
    198e:	61 e0       	ldi	r22, 0x01	; 1
    1990:	8a ad       	ldd	r24, Y+58	; 0x3a
    1992:	0e 94 16 12 	call	0x242c	; 0x242c <pinMode>
    1996:	eb a5       	ldd	r30, Y+43	; 0x2b
    1998:	fc a5       	ldd	r31, Y+44	; 0x2c
    199a:	90 81       	ld	r25, Z
    199c:	8b a9       	ldd	r24, Y+51	; 0x33
    199e:	80 95       	com	r24
    19a0:	89 23       	and	r24, r25
    19a2:	80 83       	st	Z, r24
  }

  // The high six bits of the data port are set as outputs;
  // Might make this configurable in the future, but not yet.
  DATADIR  = B11111100;
    19a4:	8c ef       	ldi	r24, 0xFC	; 252
    19a6:	8a b9       	out	0x0a, r24	; 10
  DATAPORT = 0;
    19a8:	1b b8       	out	0x0b, r1	; 11

  // Set up Timer1 for interrupt:
  TCCR1A  = _BV(WGM11); // Mode 14 (fast PWM), OC1A off
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	80 93 80 00 	sts	0x0080, r24
  TCCR1B  = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // Mode 14, no prescale
    19b0:	89 e1       	ldi	r24, 0x19	; 25
    19b2:	80 93 81 00 	sts	0x0081, r24
  ICR1    = 100;
    19b6:	84 e6       	ldi	r24, 0x64	; 100
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	90 93 87 00 	sts	0x0087, r25
    19be:	80 93 86 00 	sts	0x0086, r24
  TIMSK1 |= _BV(TOIE1); // Enable Timer1 interrupt
    19c2:	80 91 6f 00 	lds	r24, 0x006F
    19c6:	81 60       	ori	r24, 0x01	; 1
    19c8:	80 93 6f 00 	sts	0x006F, r24
  sei();                // Enable global interrupts
    19cc:	78 94       	sei
}
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	08 95       	ret

000019d4 <_ZN14RGBmatrixPanel8Color333Ehhh>:
// Promote 3/3/3 RGB to Adafruit_GFX 5/6/5
uint16_t RGBmatrixPanel::Color333(uint8_t r, uint8_t g, uint8_t b) {
  // RRRrrGGGgggBBBbb
  return ((r & 0x7) << 13) | ((r & 0x6) << 10) |
         ((g & 0x7) <<  8) | ((g & 0x7) <<  5) |
         ((b & 0x7) <<  2) | ((b & 0x6) >>  1);
    19d4:	82 2f       	mov	r24, r18
    19d6:	86 70       	andi	r24, 0x06	; 6
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	95 95       	asr	r25
    19dc:	87 95       	ror	r24
    19de:	27 70       	andi	r18, 0x07	; 7
    19e0:	54 e0       	ldi	r21, 0x04	; 4
    19e2:	25 9f       	mul	r18, r21
    19e4:	90 01       	movw	r18, r0
    19e6:	11 24       	eor	r1, r1
    19e8:	28 2b       	or	r18, r24
    19ea:	39 2b       	or	r19, r25
// benefit of older code using one of the original color formats.

// Promote 3/3/3 RGB to Adafruit_GFX 5/6/5
uint16_t RGBmatrixPanel::Color333(uint8_t r, uint8_t g, uint8_t b) {
  // RRRrrGGGgggBBBbb
  return ((r & 0x7) << 13) | ((r & 0x6) << 10) |
    19ec:	86 2f       	mov	r24, r22
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	98 2f       	mov	r25, r24
    19f2:	88 27       	eor	r24, r24
    19f4:	92 95       	swap	r25
    19f6:	99 0f       	add	r25, r25
    19f8:	90 7e       	andi	r25, 0xE0	; 224
    19fa:	82 2b       	or	r24, r18
    19fc:	93 2b       	or	r25, r19
         ((g & 0x7) <<  8) | ((g & 0x7) <<  5) |
    19fe:	24 2f       	mov	r18, r20
    1a00:	27 70       	andi	r18, 0x07	; 7
    1a02:	92 2b       	or	r25, r18
    1a04:	20 e2       	ldi	r18, 0x20	; 32
    1a06:	42 9f       	mul	r20, r18
    1a08:	a0 01       	movw	r20, r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	55 27       	eor	r21, r21
    1a0e:	84 2b       	or	r24, r20
    1a10:	95 2b       	or	r25, r21
// benefit of older code using one of the original color formats.

// Promote 3/3/3 RGB to Adafruit_GFX 5/6/5
uint16_t RGBmatrixPanel::Color333(uint8_t r, uint8_t g, uint8_t b) {
  // RRRrrGGGgggBBBbb
  return ((r & 0x7) << 13) | ((r & 0x6) << 10) |
    1a12:	66 70       	andi	r22, 0x06	; 6
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	76 2f       	mov	r23, r22
    1a18:	66 27       	eor	r22, r22
    1a1a:	77 0f       	add	r23, r23
    1a1c:	77 0f       	add	r23, r23
         ((g & 0x7) <<  8) | ((g & 0x7) <<  5) |
         ((b & 0x7) <<  2) | ((b & 0x6) >>  1);
}
    1a1e:	86 2b       	or	r24, r22
    1a20:	97 2b       	or	r25, r23
    1a22:	08 95       	ret

00001a24 <_ZN14RGBmatrixPanel13updateDisplayEv>:
// being issued to the LED matrix for the *next* bitplane and/or row
// while the *current* plane/row is being shown.  As a result, the
// counter variables change between past/present/future tense in mid-
// function...hopefully tenses are sufficiently commented.

void RGBmatrixPanel::updateDisplay(void) {
    1a24:	cf 92       	push	r12
    1a26:	df 92       	push	r13
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	dc 01       	movw	r26, r24
  uint8_t  i, tick, tock, *ptr;
  uint16_t t, duration;

  *oeport  |= oepin;  // Disable LED output during row/plane switchover
    1a34:	93 96       	adiw	r26, 0x23	; 35
    1a36:	ed 91       	ld	r30, X+
    1a38:	fc 91       	ld	r31, X
    1a3a:	94 97       	sbiw	r26, 0x24	; 36
    1a3c:	90 81       	ld	r25, Z
    1a3e:	9f 96       	adiw	r26, 0x2f	; 47
    1a40:	8c 91       	ld	r24, X
    1a42:	9f 97       	sbiw	r26, 0x2f	; 47
    1a44:	89 2b       	or	r24, r25
    1a46:	80 83       	st	Z, r24
  *latport |= latpin; // Latch data loaded during *prior* interrupt
    1a48:	91 96       	adiw	r26, 0x21	; 33
    1a4a:	ed 91       	ld	r30, X+
    1a4c:	fc 91       	ld	r31, X
    1a4e:	92 97       	sbiw	r26, 0x22	; 34
    1a50:	90 81       	ld	r25, Z
    1a52:	9e 96       	adiw	r26, 0x2e	; 46
    1a54:	8c 91       	ld	r24, X
    1a56:	9e 97       	sbiw	r26, 0x2e	; 46
    1a58:	89 2b       	or	r24, r25
    1a5a:	80 83       	st	Z, r24
  // This is because duration is the display time for the data loaded
  // on the PRIOR interrupt.  CALLOVERHEAD is subtracted from the
  // result because that time is implicit between the timer overflow
  // (interrupt triggered) and the initial LEDs-off line at the start
  // of this method.
  t = (nRows > 8) ? LOOPTIME : (LOOPTIME * 2);
    1a5c:	5e 96       	adiw	r26, 0x1e	; 30
    1a5e:	3c 91       	ld	r19, X
    1a60:	5e 97       	sbiw	r26, 0x1e	; 30
    1a62:	39 30       	cpi	r19, 0x09	; 9
    1a64:	18 f4       	brcc	.+6      	; 0x1a6c <_ZN14RGBmatrixPanel13updateDisplayEv+0x48>
    1a66:	80 e9       	ldi	r24, 0x90	; 144
    1a68:	91 e0       	ldi	r25, 0x01	; 1
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <_ZN14RGBmatrixPanel13updateDisplayEv+0x4c>
    1a6c:	88 ec       	ldi	r24, 0xC8	; 200
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
  duration = ((t + CALLOVERHEAD * 2) << plane) - CALLOVERHEAD;
    1a70:	dc 96       	adiw	r26, 0x3c	; 60
    1a72:	2c 91       	ld	r18, X
    1a74:	dc 97       	sbiw	r26, 0x3c	; 60
    1a76:	88 58       	subi	r24, 0x88	; 136
    1a78:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <_ZN14RGBmatrixPanel13updateDisplayEv+0x5c>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	2a 95       	dec	r18
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <_ZN14RGBmatrixPanel13updateDisplayEv+0x58>
    1a84:	cc 97       	sbiw	r24, 0x3c	; 60
  // advancing to the next line.  While it might seem beneficial to
  // advance lines every time and interleave the planes to reduce
  // vertical scanning artifacts, in practice with this panel it causes
  // a green 'ghosting' effect on black pixels, a much worse artifact.

  if(++plane >= nPlanes) {      // Advance plane counter.  Maxed out?
    1a86:	dc 96       	adiw	r26, 0x3c	; 60
    1a88:	2c 91       	ld	r18, X
    1a8a:	dc 97       	sbiw	r26, 0x3c	; 60
    1a8c:	2f 5f       	subi	r18, 0xFF	; 255
    1a8e:	dc 96       	adiw	r26, 0x3c	; 60
    1a90:	2c 93       	st	X, r18
    1a92:	dc 97       	sbiw	r26, 0x3c	; 60
    1a94:	24 30       	cpi	r18, 0x04	; 4
    1a96:	98 f1       	brcs	.+102    	; 0x1afe <_ZN14RGBmatrixPanel13updateDisplayEv+0xda>
    plane = 0;                  // Yes, reset to plane 0, and
    1a98:	dc 96       	adiw	r26, 0x3c	; 60
    1a9a:	1c 92       	st	X, r1
    1a9c:	dc 97       	sbiw	r26, 0x3c	; 60
    if(++row >= nRows) {        // advance row counter.  Maxed out?
    1a9e:	db 96       	adiw	r26, 0x3b	; 59
    1aa0:	2c 91       	ld	r18, X
    1aa2:	db 97       	sbiw	r26, 0x3b	; 59
    1aa4:	2f 5f       	subi	r18, 0xFF	; 255
    1aa6:	db 96       	adiw	r26, 0x3b	; 59
    1aa8:	2c 93       	st	X, r18
    1aaa:	db 97       	sbiw	r26, 0x3b	; 59
    1aac:	23 17       	cp	r18, r19
    1aae:	08 f4       	brcc	.+2      	; 0x1ab2 <_ZN14RGBmatrixPanel13updateDisplayEv+0x8e>
    1ab0:	7d c0       	rjmp	.+250    	; 0x1bac <_ZN14RGBmatrixPanel13updateDisplayEv+0x188>
      row     = 0;              // Yes, reset row counter, then...
    1ab2:	db 96       	adiw	r26, 0x3b	; 59
    1ab4:	1c 92       	st	X, r1
    1ab6:	db 97       	sbiw	r26, 0x3b	; 59
      if(swapflag == true) {    // Swap front/back buffers if requested
    1ab8:	90 96       	adiw	r26, 0x20	; 32
    1aba:	2c 91       	ld	r18, X
    1abc:	90 97       	sbiw	r26, 0x20	; 32
    1abe:	22 23       	and	r18, r18
    1ac0:	59 f0       	breq	.+22     	; 0x1ad8 <_ZN14RGBmatrixPanel13updateDisplayEv+0xb4>
        backindex = 1 - backindex;
    1ac2:	5f 96       	adiw	r26, 0x1f	; 31
    1ac4:	3c 91       	ld	r19, X
    1ac6:	5f 97       	sbiw	r26, 0x1f	; 31
    1ac8:	21 e0       	ldi	r18, 0x01	; 1
    1aca:	23 1b       	sub	r18, r19
    1acc:	5f 96       	adiw	r26, 0x1f	; 31
    1ace:	2c 93       	st	X, r18
    1ad0:	5f 97       	sbiw	r26, 0x1f	; 31
        swapflag  = false;
    1ad2:	90 96       	adiw	r26, 0x20	; 32
    1ad4:	1c 92       	st	X, r1
    1ad6:	90 97       	sbiw	r26, 0x20	; 32
      }
      buffptr = matrixbuff[1-backindex]; // Reset into front buffer
    1ad8:	5f 96       	adiw	r26, 0x1f	; 31
    1ada:	2c 91       	ld	r18, X
    1adc:	5f 97       	sbiw	r26, 0x1f	; 31
    1ade:	e1 e0       	ldi	r30, 0x01	; 1
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	e2 1b       	sub	r30, r18
    1ae4:	f1 09       	sbc	r31, r1
    1ae6:	3d 96       	adiw	r30, 0x0d	; 13
    1ae8:	ee 0f       	add	r30, r30
    1aea:	ff 1f       	adc	r31, r31
    1aec:	ea 0f       	add	r30, r26
    1aee:	fb 1f       	adc	r31, r27
    1af0:	20 81       	ld	r18, Z
    1af2:	31 81       	ldd	r19, Z+1	; 0x01
    1af4:	de 96       	adiw	r26, 0x3e	; 62
    1af6:	3c 93       	st	X, r19
    1af8:	2e 93       	st	-X, r18
    1afa:	dd 97       	sbiw	r26, 0x3d	; 61
    1afc:	57 c0       	rjmp	.+174    	; 0x1bac <_ZN14RGBmatrixPanel13updateDisplayEv+0x188>
    }
  } else if(plane == 1) {
    1afe:	dc 96       	adiw	r26, 0x3c	; 60
    1b00:	2c 91       	ld	r18, X
    1b02:	dc 97       	sbiw	r26, 0x3c	; 60
    1b04:	21 30       	cpi	r18, 0x01	; 1
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <_ZN14RGBmatrixPanel13updateDisplayEv+0xe6>
    1b08:	51 c0       	rjmp	.+162    	; 0x1bac <_ZN14RGBmatrixPanel13updateDisplayEv+0x188>
    // Plane 0 was loaded on prior interrupt invocation and is about to
    // latch now, so update the row address lines before we do that:
    if(row & 0x1)   *addraport |=  addrapin;
    1b0a:	db 96       	adiw	r26, 0x3b	; 59
    1b0c:	3c 91       	ld	r19, X
    1b0e:	db 97       	sbiw	r26, 0x3b	; 59
    1b10:	95 96       	adiw	r26, 0x25	; 37
    1b12:	ed 91       	ld	r30, X+
    1b14:	fc 91       	ld	r31, X
    1b16:	96 97       	sbiw	r26, 0x26	; 38
    1b18:	d0 96       	adiw	r26, 0x30	; 48
    1b1a:	2c 91       	ld	r18, X
    1b1c:	d0 97       	sbiw	r26, 0x30	; 48
    1b1e:	30 ff       	sbrs	r19, 0
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <_ZN14RGBmatrixPanel13updateDisplayEv+0x104>
    1b22:	30 81       	ld	r19, Z
    1b24:	23 2b       	or	r18, r19
    1b26:	03 c0       	rjmp	.+6      	; 0x1b2e <_ZN14RGBmatrixPanel13updateDisplayEv+0x10a>
    else            *addraport &= ~addrapin;
    1b28:	30 81       	ld	r19, Z
    1b2a:	20 95       	com	r18
    1b2c:	23 23       	and	r18, r19
    1b2e:	20 83       	st	Z, r18
    if(row & 0x2)   *addrbport |=  addrbpin;
    1b30:	db 96       	adiw	r26, 0x3b	; 59
    1b32:	3c 91       	ld	r19, X
    1b34:	db 97       	sbiw	r26, 0x3b	; 59
    1b36:	97 96       	adiw	r26, 0x27	; 39
    1b38:	ed 91       	ld	r30, X+
    1b3a:	fc 91       	ld	r31, X
    1b3c:	98 97       	sbiw	r26, 0x28	; 40
    1b3e:	d1 96       	adiw	r26, 0x31	; 49
    1b40:	2c 91       	ld	r18, X
    1b42:	d1 97       	sbiw	r26, 0x31	; 49
    1b44:	31 ff       	sbrs	r19, 1
    1b46:	03 c0       	rjmp	.+6      	; 0x1b4e <_ZN14RGBmatrixPanel13updateDisplayEv+0x12a>
    1b48:	30 81       	ld	r19, Z
    1b4a:	23 2b       	or	r18, r19
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <_ZN14RGBmatrixPanel13updateDisplayEv+0x130>
    else            *addrbport &= ~addrbpin;
    1b4e:	30 81       	ld	r19, Z
    1b50:	20 95       	com	r18
    1b52:	23 23       	and	r18, r19
    1b54:	20 83       	st	Z, r18
    if(row & 0x4)   *addrcport |=  addrcpin;
    1b56:	db 96       	adiw	r26, 0x3b	; 59
    1b58:	3c 91       	ld	r19, X
    1b5a:	db 97       	sbiw	r26, 0x3b	; 59
    1b5c:	99 96       	adiw	r26, 0x29	; 41
    1b5e:	ed 91       	ld	r30, X+
    1b60:	fc 91       	ld	r31, X
    1b62:	9a 97       	sbiw	r26, 0x2a	; 42
    1b64:	d2 96       	adiw	r26, 0x32	; 50
    1b66:	2c 91       	ld	r18, X
    1b68:	d2 97       	sbiw	r26, 0x32	; 50
    1b6a:	32 ff       	sbrs	r19, 2
    1b6c:	03 c0       	rjmp	.+6      	; 0x1b74 <_ZN14RGBmatrixPanel13updateDisplayEv+0x150>
    1b6e:	30 81       	ld	r19, Z
    1b70:	23 2b       	or	r18, r19
    1b72:	03 c0       	rjmp	.+6      	; 0x1b7a <_ZN14RGBmatrixPanel13updateDisplayEv+0x156>
    else            *addrcport &= ~addrcpin;
    1b74:	30 81       	ld	r19, Z
    1b76:	20 95       	com	r18
    1b78:	23 23       	and	r18, r19
    1b7a:	20 83       	st	Z, r18
    if(nRows > 8) {
    1b7c:	5e 96       	adiw	r26, 0x1e	; 30
    1b7e:	2c 91       	ld	r18, X
    1b80:	5e 97       	sbiw	r26, 0x1e	; 30
    1b82:	29 30       	cpi	r18, 0x09	; 9
    1b84:	98 f0       	brcs	.+38     	; 0x1bac <_ZN14RGBmatrixPanel13updateDisplayEv+0x188>
      if(row & 0x8) *addrdport |=  addrdpin;
    1b86:	db 96       	adiw	r26, 0x3b	; 59
    1b88:	3c 91       	ld	r19, X
    1b8a:	db 97       	sbiw	r26, 0x3b	; 59
    1b8c:	9b 96       	adiw	r26, 0x2b	; 43
    1b8e:	ed 91       	ld	r30, X+
    1b90:	fc 91       	ld	r31, X
    1b92:	9c 97       	sbiw	r26, 0x2c	; 44
    1b94:	d3 96       	adiw	r26, 0x33	; 51
    1b96:	2c 91       	ld	r18, X
    1b98:	d3 97       	sbiw	r26, 0x33	; 51
    1b9a:	33 ff       	sbrs	r19, 3
    1b9c:	03 c0       	rjmp	.+6      	; 0x1ba4 <_ZN14RGBmatrixPanel13updateDisplayEv+0x180>
    1b9e:	30 81       	ld	r19, Z
    1ba0:	23 2b       	or	r18, r19
    1ba2:	03 c0       	rjmp	.+6      	; 0x1baa <_ZN14RGBmatrixPanel13updateDisplayEv+0x186>
      else          *addrdport &= ~addrdpin;
    1ba4:	30 81       	ld	r19, Z
    1ba6:	20 95       	com	r18
    1ba8:	23 23       	and	r18, r19
    1baa:	20 83       	st	Z, r18
    }
  }

  // buffptr, being 'volatile' type, doesn't take well to optimization.
  // A local register copy can speed some things up:
  ptr = (uint8_t *)buffptr;
    1bac:	dd 96       	adiw	r26, 0x3d	; 61
    1bae:	ed 91       	ld	r30, X+
    1bb0:	fc 91       	ld	r31, X
    1bb2:	de 97       	sbiw	r26, 0x3e	; 62

  ICR1      = duration; // Set interval for next interrupt
    1bb4:	90 93 87 00 	sts	0x0087, r25
    1bb8:	80 93 86 00 	sts	0x0086, r24
  TCNT1     = 0;        // Restart interrupt timer
    1bbc:	10 92 85 00 	sts	0x0085, r1
    1bc0:	10 92 84 00 	sts	0x0084, r1
  *oeport  &= ~oepin;   // Re-enable output
    1bc4:	93 96       	adiw	r26, 0x23	; 35
    1bc6:	cd 91       	ld	r28, X+
    1bc8:	dc 91       	ld	r29, X
    1bca:	94 97       	sbiw	r26, 0x24	; 36
    1bcc:	98 81       	ld	r25, Y
    1bce:	9f 96       	adiw	r26, 0x2f	; 47
    1bd0:	8c 91       	ld	r24, X
    1bd2:	9f 97       	sbiw	r26, 0x2f	; 47
    1bd4:	80 95       	com	r24
    1bd6:	89 23       	and	r24, r25
    1bd8:	88 83       	st	Y, r24
  *latport &= ~latpin;  // Latch down
    1bda:	91 96       	adiw	r26, 0x21	; 33
    1bdc:	cd 91       	ld	r28, X+
    1bde:	dc 91       	ld	r29, X
    1be0:	92 97       	sbiw	r26, 0x22	; 34
    1be2:	98 81       	ld	r25, Y
    1be4:	9e 96       	adiw	r26, 0x2e	; 46
    1be6:	8c 91       	ld	r24, X
    1be8:	9e 97       	sbiw	r26, 0x2e	; 46
    1bea:	80 95       	com	r24
    1bec:	89 23       	and	r24, r25
    1bee:	88 83       	st	Y, r24
  // not have to load/modify/store bits every single time.  It's a
  // somewhat rude trick that ONLY works because the interrupt
  // handler is set ISR_BLOCK, halting any other interrupts that
  // might otherwise also be twiddling the port at the same time
  // (else this would clobber them).
  tock = SCLKPORT;
    1bf0:	25 b1       	in	r18, 0x05	; 5
  tick = tock | sclkpin;
    1bf2:	9d 96       	adiw	r26, 0x2d	; 45
    1bf4:	9c 91       	ld	r25, X
    1bf6:	9d 97       	sbiw	r26, 0x2d	; 45
    1bf8:	92 2b       	or	r25, r18

  if(plane > 0) { // 188 ticks from TCNT1=0 (above) to end of function
    1bfa:	dc 96       	adiw	r26, 0x3c	; 60
    1bfc:	8c 91       	ld	r24, X
    1bfe:	dc 97       	sbiw	r26, 0x3c	; 60
    1c00:	88 23       	and	r24, r24
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <_ZN14RGBmatrixPanel13updateDisplayEv+0x1e2>
    1c04:	0d c1       	rjmp	.+538    	; 0x1e20 <_ZN14RGBmatrixPanel13updateDisplayEv+0x3fc>
         [clk]  "I" (_SFR_IO_ADDR(SCLKPORT)), \
         [tick] "r" (tick),                   \
         [tock] "r" (tock));

    // Loop is unrolled for speed:
    pew pew pew pew pew pew pew pew
    1c06:	01 90       	ld	r0, Z+
    1c08:	0b b8       	out	0x0b, r0	; 11
    1c0a:	95 b9       	out	0x05, r25	; 5
    1c0c:	25 b9       	out	0x05, r18	; 5
    1c0e:	01 90       	ld	r0, Z+
    1c10:	0b b8       	out	0x0b, r0	; 11
    1c12:	95 b9       	out	0x05, r25	; 5
    1c14:	25 b9       	out	0x05, r18	; 5
    1c16:	01 90       	ld	r0, Z+
    1c18:	0b b8       	out	0x0b, r0	; 11
    1c1a:	95 b9       	out	0x05, r25	; 5
    1c1c:	25 b9       	out	0x05, r18	; 5
    1c1e:	01 90       	ld	r0, Z+
    1c20:	0b b8       	out	0x0b, r0	; 11
    1c22:	95 b9       	out	0x05, r25	; 5
    1c24:	25 b9       	out	0x05, r18	; 5
    1c26:	01 90       	ld	r0, Z+
    1c28:	0b b8       	out	0x0b, r0	; 11
    1c2a:	95 b9       	out	0x05, r25	; 5
    1c2c:	25 b9       	out	0x05, r18	; 5
    1c2e:	01 90       	ld	r0, Z+
    1c30:	0b b8       	out	0x0b, r0	; 11
    1c32:	95 b9       	out	0x05, r25	; 5
    1c34:	25 b9       	out	0x05, r18	; 5
    1c36:	01 90       	ld	r0, Z+
    1c38:	0b b8       	out	0x0b, r0	; 11
    1c3a:	95 b9       	out	0x05, r25	; 5
    1c3c:	25 b9       	out	0x05, r18	; 5
    1c3e:	01 90       	ld	r0, Z+
    1c40:	0b b8       	out	0x0b, r0	; 11
    1c42:	95 b9       	out	0x05, r25	; 5
    1c44:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1c46:	01 90       	ld	r0, Z+
    1c48:	0b b8       	out	0x0b, r0	; 11
    1c4a:	95 b9       	out	0x05, r25	; 5
    1c4c:	25 b9       	out	0x05, r18	; 5
    1c4e:	01 90       	ld	r0, Z+
    1c50:	0b b8       	out	0x0b, r0	; 11
    1c52:	95 b9       	out	0x05, r25	; 5
    1c54:	25 b9       	out	0x05, r18	; 5
    1c56:	01 90       	ld	r0, Z+
    1c58:	0b b8       	out	0x0b, r0	; 11
    1c5a:	95 b9       	out	0x05, r25	; 5
    1c5c:	25 b9       	out	0x05, r18	; 5
    1c5e:	01 90       	ld	r0, Z+
    1c60:	0b b8       	out	0x0b, r0	; 11
    1c62:	95 b9       	out	0x05, r25	; 5
    1c64:	25 b9       	out	0x05, r18	; 5
    1c66:	01 90       	ld	r0, Z+
    1c68:	0b b8       	out	0x0b, r0	; 11
    1c6a:	95 b9       	out	0x05, r25	; 5
    1c6c:	25 b9       	out	0x05, r18	; 5
    1c6e:	01 90       	ld	r0, Z+
    1c70:	0b b8       	out	0x0b, r0	; 11
    1c72:	95 b9       	out	0x05, r25	; 5
    1c74:	25 b9       	out	0x05, r18	; 5
    1c76:	01 90       	ld	r0, Z+
    1c78:	0b b8       	out	0x0b, r0	; 11
    1c7a:	95 b9       	out	0x05, r25	; 5
    1c7c:	25 b9       	out	0x05, r18	; 5
    1c7e:	01 90       	ld	r0, Z+
    1c80:	0b b8       	out	0x0b, r0	; 11
    1c82:	95 b9       	out	0x05, r25	; 5
    1c84:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1c86:	01 90       	ld	r0, Z+
    1c88:	0b b8       	out	0x0b, r0	; 11
    1c8a:	95 b9       	out	0x05, r25	; 5
    1c8c:	25 b9       	out	0x05, r18	; 5
    1c8e:	01 90       	ld	r0, Z+
    1c90:	0b b8       	out	0x0b, r0	; 11
    1c92:	95 b9       	out	0x05, r25	; 5
    1c94:	25 b9       	out	0x05, r18	; 5
    1c96:	01 90       	ld	r0, Z+
    1c98:	0b b8       	out	0x0b, r0	; 11
    1c9a:	95 b9       	out	0x05, r25	; 5
    1c9c:	25 b9       	out	0x05, r18	; 5
    1c9e:	01 90       	ld	r0, Z+
    1ca0:	0b b8       	out	0x0b, r0	; 11
    1ca2:	95 b9       	out	0x05, r25	; 5
    1ca4:	25 b9       	out	0x05, r18	; 5
    1ca6:	01 90       	ld	r0, Z+
    1ca8:	0b b8       	out	0x0b, r0	; 11
    1caa:	95 b9       	out	0x05, r25	; 5
    1cac:	25 b9       	out	0x05, r18	; 5
    1cae:	01 90       	ld	r0, Z+
    1cb0:	0b b8       	out	0x0b, r0	; 11
    1cb2:	95 b9       	out	0x05, r25	; 5
    1cb4:	25 b9       	out	0x05, r18	; 5
    1cb6:	01 90       	ld	r0, Z+
    1cb8:	0b b8       	out	0x0b, r0	; 11
    1cba:	95 b9       	out	0x05, r25	; 5
    1cbc:	25 b9       	out	0x05, r18	; 5
    1cbe:	01 90       	ld	r0, Z+
    1cc0:	0b b8       	out	0x0b, r0	; 11
    1cc2:	95 b9       	out	0x05, r25	; 5
    1cc4:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1cc6:	01 90       	ld	r0, Z+
    1cc8:	0b b8       	out	0x0b, r0	; 11
    1cca:	95 b9       	out	0x05, r25	; 5
    1ccc:	25 b9       	out	0x05, r18	; 5
    1cce:	01 90       	ld	r0, Z+
    1cd0:	0b b8       	out	0x0b, r0	; 11
    1cd2:	95 b9       	out	0x05, r25	; 5
    1cd4:	25 b9       	out	0x05, r18	; 5
    1cd6:	01 90       	ld	r0, Z+
    1cd8:	0b b8       	out	0x0b, r0	; 11
    1cda:	95 b9       	out	0x05, r25	; 5
    1cdc:	25 b9       	out	0x05, r18	; 5
    1cde:	01 90       	ld	r0, Z+
    1ce0:	0b b8       	out	0x0b, r0	; 11
    1ce2:	95 b9       	out	0x05, r25	; 5
    1ce4:	25 b9       	out	0x05, r18	; 5
    1ce6:	01 90       	ld	r0, Z+
    1ce8:	0b b8       	out	0x0b, r0	; 11
    1cea:	95 b9       	out	0x05, r25	; 5
    1cec:	25 b9       	out	0x05, r18	; 5
    1cee:	01 90       	ld	r0, Z+
    1cf0:	0b b8       	out	0x0b, r0	; 11
    1cf2:	95 b9       	out	0x05, r25	; 5
    1cf4:	25 b9       	out	0x05, r18	; 5
    1cf6:	01 90       	ld	r0, Z+
    1cf8:	0b b8       	out	0x0b, r0	; 11
    1cfa:	95 b9       	out	0x05, r25	; 5
    1cfc:	25 b9       	out	0x05, r18	; 5
    1cfe:	01 90       	ld	r0, Z+
    1d00:	0b b8       	out	0x0b, r0	; 11
    1d02:	95 b9       	out	0x05, r25	; 5
    1d04:	25 b9       	out	0x05, r18	; 5

      if (WIDTH == 64) {
    1d06:	14 96       	adiw	r26, 0x04	; 4
    1d08:	4d 91       	ld	r20, X+
    1d0a:	5c 91       	ld	r21, X
    1d0c:	15 97       	sbiw	r26, 0x05	; 5
    1d0e:	40 34       	cpi	r20, 0x40	; 64
    1d10:	51 05       	cpc	r21, r1
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <_ZN14RGBmatrixPanel13updateDisplayEv+0x2f2>
    1d14:	80 c0       	rjmp	.+256    	; 0x1e16 <_ZN14RGBmatrixPanel13updateDisplayEv+0x3f2>
    pew pew pew pew pew pew pew pew
    1d16:	01 90       	ld	r0, Z+
    1d18:	0b b8       	out	0x0b, r0	; 11
    1d1a:	95 b9       	out	0x05, r25	; 5
    1d1c:	25 b9       	out	0x05, r18	; 5
    1d1e:	01 90       	ld	r0, Z+
    1d20:	0b b8       	out	0x0b, r0	; 11
    1d22:	95 b9       	out	0x05, r25	; 5
    1d24:	25 b9       	out	0x05, r18	; 5
    1d26:	01 90       	ld	r0, Z+
    1d28:	0b b8       	out	0x0b, r0	; 11
    1d2a:	95 b9       	out	0x05, r25	; 5
    1d2c:	25 b9       	out	0x05, r18	; 5
    1d2e:	01 90       	ld	r0, Z+
    1d30:	0b b8       	out	0x0b, r0	; 11
    1d32:	95 b9       	out	0x05, r25	; 5
    1d34:	25 b9       	out	0x05, r18	; 5
    1d36:	01 90       	ld	r0, Z+
    1d38:	0b b8       	out	0x0b, r0	; 11
    1d3a:	95 b9       	out	0x05, r25	; 5
    1d3c:	25 b9       	out	0x05, r18	; 5
    1d3e:	01 90       	ld	r0, Z+
    1d40:	0b b8       	out	0x0b, r0	; 11
    1d42:	95 b9       	out	0x05, r25	; 5
    1d44:	25 b9       	out	0x05, r18	; 5
    1d46:	01 90       	ld	r0, Z+
    1d48:	0b b8       	out	0x0b, r0	; 11
    1d4a:	95 b9       	out	0x05, r25	; 5
    1d4c:	25 b9       	out	0x05, r18	; 5
    1d4e:	01 90       	ld	r0, Z+
    1d50:	0b b8       	out	0x0b, r0	; 11
    1d52:	95 b9       	out	0x05, r25	; 5
    1d54:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1d56:	01 90       	ld	r0, Z+
    1d58:	0b b8       	out	0x0b, r0	; 11
    1d5a:	95 b9       	out	0x05, r25	; 5
    1d5c:	25 b9       	out	0x05, r18	; 5
    1d5e:	01 90       	ld	r0, Z+
    1d60:	0b b8       	out	0x0b, r0	; 11
    1d62:	95 b9       	out	0x05, r25	; 5
    1d64:	25 b9       	out	0x05, r18	; 5
    1d66:	01 90       	ld	r0, Z+
    1d68:	0b b8       	out	0x0b, r0	; 11
    1d6a:	95 b9       	out	0x05, r25	; 5
    1d6c:	25 b9       	out	0x05, r18	; 5
    1d6e:	01 90       	ld	r0, Z+
    1d70:	0b b8       	out	0x0b, r0	; 11
    1d72:	95 b9       	out	0x05, r25	; 5
    1d74:	25 b9       	out	0x05, r18	; 5
    1d76:	01 90       	ld	r0, Z+
    1d78:	0b b8       	out	0x0b, r0	; 11
    1d7a:	95 b9       	out	0x05, r25	; 5
    1d7c:	25 b9       	out	0x05, r18	; 5
    1d7e:	01 90       	ld	r0, Z+
    1d80:	0b b8       	out	0x0b, r0	; 11
    1d82:	95 b9       	out	0x05, r25	; 5
    1d84:	25 b9       	out	0x05, r18	; 5
    1d86:	01 90       	ld	r0, Z+
    1d88:	0b b8       	out	0x0b, r0	; 11
    1d8a:	95 b9       	out	0x05, r25	; 5
    1d8c:	25 b9       	out	0x05, r18	; 5
    1d8e:	01 90       	ld	r0, Z+
    1d90:	0b b8       	out	0x0b, r0	; 11
    1d92:	95 b9       	out	0x05, r25	; 5
    1d94:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1d96:	01 90       	ld	r0, Z+
    1d98:	0b b8       	out	0x0b, r0	; 11
    1d9a:	95 b9       	out	0x05, r25	; 5
    1d9c:	25 b9       	out	0x05, r18	; 5
    1d9e:	01 90       	ld	r0, Z+
    1da0:	0b b8       	out	0x0b, r0	; 11
    1da2:	95 b9       	out	0x05, r25	; 5
    1da4:	25 b9       	out	0x05, r18	; 5
    1da6:	01 90       	ld	r0, Z+
    1da8:	0b b8       	out	0x0b, r0	; 11
    1daa:	95 b9       	out	0x05, r25	; 5
    1dac:	25 b9       	out	0x05, r18	; 5
    1dae:	01 90       	ld	r0, Z+
    1db0:	0b b8       	out	0x0b, r0	; 11
    1db2:	95 b9       	out	0x05, r25	; 5
    1db4:	25 b9       	out	0x05, r18	; 5
    1db6:	01 90       	ld	r0, Z+
    1db8:	0b b8       	out	0x0b, r0	; 11
    1dba:	95 b9       	out	0x05, r25	; 5
    1dbc:	25 b9       	out	0x05, r18	; 5
    1dbe:	01 90       	ld	r0, Z+
    1dc0:	0b b8       	out	0x0b, r0	; 11
    1dc2:	95 b9       	out	0x05, r25	; 5
    1dc4:	25 b9       	out	0x05, r18	; 5
    1dc6:	01 90       	ld	r0, Z+
    1dc8:	0b b8       	out	0x0b, r0	; 11
    1dca:	95 b9       	out	0x05, r25	; 5
    1dcc:	25 b9       	out	0x05, r18	; 5
    1dce:	01 90       	ld	r0, Z+
    1dd0:	0b b8       	out	0x0b, r0	; 11
    1dd2:	95 b9       	out	0x05, r25	; 5
    1dd4:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1dd6:	01 90       	ld	r0, Z+
    1dd8:	0b b8       	out	0x0b, r0	; 11
    1dda:	95 b9       	out	0x05, r25	; 5
    1ddc:	25 b9       	out	0x05, r18	; 5
    1dde:	01 90       	ld	r0, Z+
    1de0:	0b b8       	out	0x0b, r0	; 11
    1de2:	95 b9       	out	0x05, r25	; 5
    1de4:	25 b9       	out	0x05, r18	; 5
    1de6:	01 90       	ld	r0, Z+
    1de8:	0b b8       	out	0x0b, r0	; 11
    1dea:	95 b9       	out	0x05, r25	; 5
    1dec:	25 b9       	out	0x05, r18	; 5
    1dee:	01 90       	ld	r0, Z+
    1df0:	0b b8       	out	0x0b, r0	; 11
    1df2:	95 b9       	out	0x05, r25	; 5
    1df4:	25 b9       	out	0x05, r18	; 5
    1df6:	01 90       	ld	r0, Z+
    1df8:	0b b8       	out	0x0b, r0	; 11
    1dfa:	95 b9       	out	0x05, r25	; 5
    1dfc:	25 b9       	out	0x05, r18	; 5
    1dfe:	01 90       	ld	r0, Z+
    1e00:	0b b8       	out	0x0b, r0	; 11
    1e02:	95 b9       	out	0x05, r25	; 5
    1e04:	25 b9       	out	0x05, r18	; 5
    1e06:	01 90       	ld	r0, Z+
    1e08:	0b b8       	out	0x0b, r0	; 11
    1e0a:	95 b9       	out	0x05, r25	; 5
    1e0c:	25 b9       	out	0x05, r18	; 5
    1e0e:	01 90       	ld	r0, Z+
    1e10:	0b b8       	out	0x0b, r0	; 11
    1e12:	95 b9       	out	0x05, r25	; 5
    1e14:	25 b9       	out	0x05, r18	; 5
      }

    buffptr = ptr; //+= 32;
    1e16:	de 96       	adiw	r26, 0x3e	; 62
    1e18:	fc 93       	st	X, r31
    1e1a:	ee 93       	st	-X, r30
    1e1c:	dd 97       	sbiw	r26, 0x3d	; 61
    1e1e:	32 c0       	rjmp	.+100    	; 0x1e84 <_ZN14RGBmatrixPanel13updateDisplayEv+0x460>
    1e20:	f1 2c       	mov	r15, r1
    // the slack, with all its data packed into the 2 least bits not
    // used by the other planes.  This works because the unpacking and
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<WIDTH; i++) {
    1e22:	cf 2c       	mov	r12, r15
    1e24:	d1 2c       	mov	r13, r1
    1e26:	14 96       	adiw	r26, 0x04	; 4
    1e28:	6d 91       	ld	r22, X+
    1e2a:	7c 91       	ld	r23, X
    1e2c:	15 97       	sbiw	r26, 0x05	; 5
    1e2e:	c6 16       	cp	r12, r22
    1e30:	d7 06       	cpc	r13, r23
    1e32:	44 f5       	brge	.+80     	; 0x1e84 <_ZN14RGBmatrixPanel13updateDisplayEv+0x460>
      DATAPORT =
        ( ptr[i]    << 6)         |
        ((ptr[i+WIDTH] << 4) & 0x30) |
    1e34:	86 01       	movw	r16, r12
    1e36:	06 0f       	add	r16, r22
    1e38:	17 1f       	adc	r17, r23
    1e3a:	af 01       	movw	r20, r30
    1e3c:	40 0f       	add	r20, r16
    1e3e:	51 1f       	adc	r21, r17
    1e40:	ea 01       	movw	r28, r20
    1e42:	48 81       	ld	r20, Y
    1e44:	d0 e1       	ldi	r29, 0x10	; 16
    1e46:	4d 9f       	mul	r20, r29
    1e48:	a0 01       	movw	r20, r0
    1e4a:	11 24       	eor	r1, r1
        ((ptr[i+WIDTH*2] << 2) & 0x0C);
    1e4c:	34 2f       	mov	r19, r20
    1e4e:	30 73       	andi	r19, 0x30	; 48
    1e50:	6e 0f       	add	r22, r30
    1e52:	7f 1f       	adc	r23, r31
    1e54:	60 0f       	add	r22, r16
    1e56:	71 1f       	adc	r23, r17
    1e58:	eb 01       	movw	r28, r22
    1e5a:	88 81       	ld	r24, Y
    1e5c:	d4 e0       	ldi	r29, 0x04	; 4
    1e5e:	8d 9f       	mul	r24, r29
    1e60:	a0 01       	movw	r20, r0
    1e62:	11 24       	eor	r1, r1
    1e64:	4c 70       	andi	r20, 0x0C	; 12
    1e66:	43 2b       	or	r20, r19
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<WIDTH; i++) {
      DATAPORT =
        ( ptr[i]    << 6)         |
    1e68:	e6 01       	movw	r28, r12
    1e6a:	ce 0f       	add	r28, r30
    1e6c:	df 1f       	adc	r29, r31
    1e6e:	68 81       	ld	r22, Y
    1e70:	80 e4       	ldi	r24, 0x40	; 64
    1e72:	68 9f       	mul	r22, r24
    1e74:	b0 01       	movw	r22, r0
    1e76:	11 24       	eor	r1, r1
        ((ptr[i+WIDTH] << 4) & 0x30) |
        ((ptr[i+WIDTH*2] << 2) & 0x0C);
    1e78:	46 2b       	or	r20, r22
    1e7a:	4b b9       	out	0x0b, r20	; 11
      SCLKPORT = tick; // Clock lo
    1e7c:	95 b9       	out	0x05, r25	; 5
      SCLKPORT = tock; // Clock hi
    1e7e:	25 b9       	out	0x05, r18	; 5
    // the slack, with all its data packed into the 2 least bits not
    // used by the other planes.  This works because the unpacking and
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<WIDTH; i++) {
    1e80:	f3 94       	inc	r15
    1e82:	cf cf       	rjmp	.-98     	; 0x1e22 <_ZN14RGBmatrixPanel13updateDisplayEv+0x3fe>
        ((ptr[i+WIDTH*2] << 2) & 0x0C);
      SCLKPORT = tick; // Clock lo
      SCLKPORT = tock; // Clock hi
    } 
  }
}
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	1f 91       	pop	r17
    1e8a:	0f 91       	pop	r16
    1e8c:	ff 90       	pop	r15
    1e8e:	df 90       	pop	r13
    1e90:	cf 90       	pop	r12
    1e92:	08 95       	ret

00001e94 <__vector_13>:
  Serial.println(F("\n};"));
}

// -------------------- Interrupt handler stuff --------------------

ISR(TIMER1_OVF_vect, ISR_BLOCK) { // ISR_BLOCK important -- see notes later
    1e94:	1f 92       	push	r1
    1e96:	0f 92       	push	r0
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	0f 92       	push	r0
    1e9c:	11 24       	eor	r1, r1
    1e9e:	2f 93       	push	r18
    1ea0:	3f 93       	push	r19
    1ea2:	4f 93       	push	r20
    1ea4:	5f 93       	push	r21
    1ea6:	6f 93       	push	r22
    1ea8:	7f 93       	push	r23
    1eaa:	8f 93       	push	r24
    1eac:	9f 93       	push	r25
    1eae:	af 93       	push	r26
    1eb0:	bf 93       	push	r27
    1eb2:	ef 93       	push	r30
    1eb4:	ff 93       	push	r31
  activePanel->updateDisplay();   // Call refresh func for active display
    1eb6:	80 91 a3 01 	lds	r24, 0x01A3
    1eba:	90 91 a4 01 	lds	r25, 0x01A4
    1ebe:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_ZN14RGBmatrixPanel13updateDisplayEv>
  TIFR1 |= TOV1;                  // Clear Timer1 interrupt flag
    1ec2:	86 b3       	in	r24, 0x16	; 22
    1ec4:	86 bb       	out	0x16, r24	; 22
}
    1ec6:	ff 91       	pop	r31
    1ec8:	ef 91       	pop	r30
    1eca:	bf 91       	pop	r27
    1ecc:	af 91       	pop	r26
    1ece:	9f 91       	pop	r25
    1ed0:	8f 91       	pop	r24
    1ed2:	7f 91       	pop	r23
    1ed4:	6f 91       	pop	r22
    1ed6:	5f 91       	pop	r21
    1ed8:	4f 91       	pop	r20
    1eda:	3f 91       	pop	r19
    1edc:	2f 91       	pop	r18
    1ede:	0f 90       	pop	r0
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	0f 90       	pop	r0
    1ee4:	1f 90       	pop	r1
    1ee6:	18 95       	reti

00001ee8 <_ZN14RGBmatrixPanel10fillScreenEj>:
    }
  }
}

void RGBmatrixPanel::fillScreen(uint16_t c) {
  if((c == 0x0000) || (c == 0xffff)) {
    1ee8:	9b 01       	movw	r18, r22
    1eea:	21 50       	subi	r18, 0x01	; 1
    1eec:	31 09       	sbc	r19, r1
    1eee:	2e 3f       	cpi	r18, 0xFE	; 254
    1ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef2:	f0 f0       	brcs	.+60     	; 0x1f30 <_ZN14RGBmatrixPanel10fillScreenEj+0x48>
    // For black or white, all bits in frame buffer will be identically
    // set or unset (regardless of weird bit packing), so it's OK to just
    // quickly memset the whole thing:
    memset(matrixbuff[backindex], c, WIDTH * nRows * 3);
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	5f 96       	adiw	r26, 0x1f	; 31
    1ef8:	2c 91       	ld	r18, X
    1efa:	5f 97       	sbiw	r26, 0x1f	; 31
    1efc:	5e 96       	adiw	r26, 0x1e	; 30
    1efe:	3c 91       	ld	r19, X
    1f00:	5e 97       	sbiw	r26, 0x1e	; 30
    1f02:	14 96       	adiw	r26, 0x04	; 4
    1f04:	ed 91       	ld	r30, X+
    1f06:	fc 91       	ld	r31, X
    1f08:	15 97       	sbiw	r26, 0x05	; 5
    1f0a:	3e 9f       	mul	r19, r30
    1f0c:	a0 01       	movw	r20, r0
    1f0e:	3f 9f       	mul	r19, r31
    1f10:	50 0d       	add	r21, r0
    1f12:	11 24       	eor	r1, r1
    1f14:	fa 01       	movw	r30, r20
    1f16:	ee 0f       	add	r30, r30
    1f18:	ff 1f       	adc	r31, r31
    1f1a:	4e 0f       	add	r20, r30
    1f1c:	5f 1f       	adc	r21, r31
    1f1e:	fc 01       	movw	r30, r24
    1f20:	e2 0f       	add	r30, r18
    1f22:	f1 1d       	adc	r31, r1
    1f24:	e2 0f       	add	r30, r18
    1f26:	f1 1d       	adc	r31, r1
    1f28:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f2a:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f2c:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <memset>
  } else {
    // Otherwise, need to handle it the long way:
    Adafruit_GFX::fillScreen(c);
    1f30:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <_ZN12Adafruit_GFX10fillScreenEj>

00001f34 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    1f34:	0e 94 a7 13 	call	0x274e	; 0x274e <abort>

00001f38 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1f38:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1f3a:	91 8d       	ldd	r25, Z+25	; 0x19
    1f3c:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f3e:	89 2f       	mov	r24, r25
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	80 5c       	subi	r24, 0xC0	; 192
    1f44:	9f 4f       	sbci	r25, 0xFF	; 255
    1f46:	82 1b       	sub	r24, r18
    1f48:	91 09       	sbc	r25, r1
}
    1f4a:	8f 73       	andi	r24, 0x3F	; 63
    1f4c:	99 27       	eor	r25, r25
    1f4e:	08 95       	ret

00001f50 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1f50:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1f52:	91 8d       	ldd	r25, Z+25	; 0x19
    1f54:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f56:	98 17       	cp	r25, r24
    1f58:	31 f0       	breq	.+12     	; 0x1f66 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1f5a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f5c:	e8 0f       	add	r30, r24
    1f5e:	f1 1d       	adc	r31, r1
    1f60:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1f66:	8f ef       	ldi	r24, 0xFF	; 255
    1f68:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1f6a:	08 95       	ret

00001f6c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1f6c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1f6e:	91 8d       	ldd	r25, Z+25	; 0x19
    1f70:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f72:	98 17       	cp	r25, r24
    1f74:	61 f0       	breq	.+24     	; 0x1f8e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1f76:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f78:	df 01       	movw	r26, r30
    1f7a:	a8 0f       	add	r26, r24
    1f7c:	b1 1d       	adc	r27, r1
    1f7e:	5d 96       	adiw	r26, 0x1d	; 29
    1f80:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1f82:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f84:	9f 5f       	subi	r25, 0xFF	; 255
    1f86:	9f 73       	andi	r25, 0x3F	; 63
    1f88:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1f8e:	8f ef       	ldi	r24, 0xFF	; 255
    1f90:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1f92:	08 95       	ret

00001f94 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1f94:	8f e1       	ldi	r24, 0x1F	; 31
    1f96:	91 e1       	ldi	r25, 0x11	; 17
    1f98:	89 2b       	or	r24, r25
    1f9a:	49 f0       	breq	.+18     	; 0x1fae <_Z14serialEventRunv+0x1a>
    1f9c:	82 ee       	ldi	r24, 0xE2	; 226
    1f9e:	93 e0       	ldi	r25, 0x03	; 3
    1fa0:	89 2b       	or	r24, r25
    1fa2:	29 f0       	breq	.+10     	; 0x1fae <_Z14serialEventRunv+0x1a>
    1fa4:	0e 94 1f 11 	call	0x223e	; 0x223e <_Z17Serial0_availablev>
    1fa8:	81 11       	cpse	r24, r1
    1faa:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <_Z11serialEventv>
    1fae:	08 95       	ret

00001fb0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1fb0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1fb2:	84 8d       	ldd	r24, Z+28	; 0x1c
    1fb4:	df 01       	movw	r26, r30
    1fb6:	a8 0f       	add	r26, r24
    1fb8:	b1 1d       	adc	r27, r1
    1fba:	a3 5a       	subi	r26, 0xA3	; 163
    1fbc:	bf 4f       	sbci	r27, 0xFF	; 255
    1fbe:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1fc0:	84 8d       	ldd	r24, Z+28	; 0x1c
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	01 96       	adiw	r24, 0x01	; 1
    1fc6:	8f 73       	andi	r24, 0x3F	; 63
    1fc8:	99 27       	eor	r25, r25
    1fca:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1fcc:	a6 89       	ldd	r26, Z+22	; 0x16
    1fce:	b7 89       	ldd	r27, Z+23	; 0x17
    1fd0:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1fd2:	a0 89       	ldd	r26, Z+16	; 0x10
    1fd4:	b1 89       	ldd	r27, Z+17	; 0x11
    1fd6:	8c 91       	ld	r24, X
    1fd8:	80 64       	ori	r24, 0x40	; 64
    1fda:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1fdc:	93 8d       	ldd	r25, Z+27	; 0x1b
    1fde:	84 8d       	ldd	r24, Z+28	; 0x1c
    1fe0:	98 13       	cpse	r25, r24
    1fe2:	06 c0       	rjmp	.+12     	; 0x1ff0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1fe4:	02 88       	ldd	r0, Z+18	; 0x12
    1fe6:	f3 89       	ldd	r31, Z+19	; 0x13
    1fe8:	e0 2d       	mov	r30, r0
    1fea:	80 81       	ld	r24, Z
    1fec:	8f 7d       	andi	r24, 0xDF	; 223
    1fee:	80 83       	st	Z, r24
    1ff0:	08 95       	ret

00001ff2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1ff8:	88 8d       	ldd	r24, Y+24	; 0x18
    1ffa:	88 23       	and	r24, r24
    1ffc:	c9 f0       	breq	.+50     	; 0x2030 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1ffe:	ea 89       	ldd	r30, Y+18	; 0x12
    2000:	fb 89       	ldd	r31, Y+19	; 0x13
    2002:	80 81       	ld	r24, Z
    2004:	85 fd       	sbrc	r24, 5
    2006:	05 c0       	rjmp	.+10     	; 0x2012 <_ZN14HardwareSerial5flushEv+0x20>
    2008:	a8 89       	ldd	r26, Y+16	; 0x10
    200a:	b9 89       	ldd	r27, Y+17	; 0x11
    200c:	8c 91       	ld	r24, X
    200e:	86 fd       	sbrc	r24, 6
    2010:	0f c0       	rjmp	.+30     	; 0x2030 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	07 fc       	sbrc	r0, 7
    2016:	f5 cf       	rjmp	.-22     	; 0x2002 <_ZN14HardwareSerial5flushEv+0x10>
    2018:	80 81       	ld	r24, Z
    201a:	85 ff       	sbrs	r24, 5
    201c:	f2 cf       	rjmp	.-28     	; 0x2002 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    201e:	a8 89       	ldd	r26, Y+16	; 0x10
    2020:	b9 89       	ldd	r27, Y+17	; 0x11
    2022:	8c 91       	ld	r24, X
    2024:	85 ff       	sbrs	r24, 5
    2026:	ed cf       	rjmp	.-38     	; 0x2002 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2028:	ce 01       	movw	r24, r28
    202a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    202e:	e7 cf       	rjmp	.-50     	; 0x1ffe <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	08 95       	ret

00002036 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    2036:	ef 92       	push	r14
    2038:	ff 92       	push	r15
    203a:	0f 93       	push	r16
    203c:	1f 93       	push	r17
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
    2042:	ec 01       	movw	r28, r24
  _written = true;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2048:	9b 8d       	ldd	r25, Y+27	; 0x1b
    204a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    204c:	98 13       	cpse	r25, r24
    204e:	05 c0       	rjmp	.+10     	; 0x205a <_ZN14HardwareSerial5writeEh+0x24>
    2050:	e8 89       	ldd	r30, Y+16	; 0x10
    2052:	f9 89       	ldd	r31, Y+17	; 0x11
    2054:	80 81       	ld	r24, Z
    2056:	85 fd       	sbrc	r24, 5
    2058:	24 c0       	rjmp	.+72     	; 0x20a2 <_ZN14HardwareSerial5writeEh+0x6c>
    205a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    205c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    205e:	10 e0       	ldi	r17, 0x00	; 0
    2060:	0f 5f       	subi	r16, 0xFF	; 255
    2062:	1f 4f       	sbci	r17, 0xFF	; 255
    2064:	0f 73       	andi	r16, 0x3F	; 63
    2066:	11 27       	eor	r17, r17
    2068:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    206a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    206c:	e8 12       	cpse	r14, r24
    206e:	0c c0       	rjmp	.+24     	; 0x2088 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	07 fc       	sbrc	r0, 7
    2074:	fa cf       	rjmp	.-12     	; 0x206a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2076:	e8 89       	ldd	r30, Y+16	; 0x10
    2078:	f9 89       	ldd	r31, Y+17	; 0x11
    207a:	80 81       	ld	r24, Z
    207c:	85 ff       	sbrs	r24, 5
    207e:	f5 cf       	rjmp	.-22     	; 0x206a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2080:	ce 01       	movw	r24, r28
    2082:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2086:	f1 cf       	rjmp	.-30     	; 0x206a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2088:	8b 8d       	ldd	r24, Y+27	; 0x1b
    208a:	fe 01       	movw	r30, r28
    208c:	e8 0f       	add	r30, r24
    208e:	f1 1d       	adc	r31, r1
    2090:	e3 5a       	subi	r30, 0xA3	; 163
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    2096:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2098:	ea 89       	ldd	r30, Y+18	; 0x12
    209a:	fb 89       	ldd	r31, Y+19	; 0x13
    209c:	80 81       	ld	r24, Z
    209e:	80 62       	ori	r24, 0x20	; 32
    20a0:	07 c0       	rjmp	.+14     	; 0x20b0 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    20a2:	ee 89       	ldd	r30, Y+22	; 0x16
    20a4:	ff 89       	ldd	r31, Y+23	; 0x17
    20a6:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    20a8:	e8 89       	ldd	r30, Y+16	; 0x10
    20aa:	f9 89       	ldd	r31, Y+17	; 0x11
    20ac:	80 81       	ld	r24, Z
    20ae:	80 64       	ori	r24, 0x40	; 64
    20b0:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	df 91       	pop	r29
    20b8:	cf 91       	pop	r28
    20ba:	1f 91       	pop	r17
    20bc:	0f 91       	pop	r16
    20be:	ff 90       	pop	r15
    20c0:	ef 90       	pop	r14
    20c2:	08 95       	ret

000020c4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    20c4:	cf 92       	push	r12
    20c6:	df 92       	push	r13
    20c8:	ef 92       	push	r14
    20ca:	ff 92       	push	r15
    20cc:	1f 93       	push	r17
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    20d2:	ec 01       	movw	r28, r24
    20d4:	6a 01       	movw	r12, r20
    20d6:	7b 01       	movw	r14, r22
    20d8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    20da:	e8 89       	ldd	r30, Y+16	; 0x10
    20dc:	f9 89       	ldd	r31, Y+17	; 0x11
    20de:	82 e0       	ldi	r24, 0x02	; 2
    20e0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    20e2:	41 15       	cp	r20, r1
    20e4:	51 4e       	sbci	r21, 0xE1	; 225
    20e6:	61 05       	cpc	r22, r1
    20e8:	71 05       	cpc	r23, r1
    20ea:	b1 f0       	breq	.+44     	; 0x2118 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	79 e0       	ldi	r23, 0x09	; 9
    20f0:	8d e3       	ldi	r24, 0x3D	; 61
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	a7 01       	movw	r20, r14
    20f6:	96 01       	movw	r18, r12
    20f8:	0e 94 52 12 	call	0x24a4	; 0x24a4 <__udivmodsi4>
    20fc:	da 01       	movw	r26, r20
    20fe:	c9 01       	movw	r24, r18
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	a1 09       	sbc	r26, r1
    2104:	b1 09       	sbc	r27, r1
    2106:	b6 95       	lsr	r27
    2108:	a7 95       	ror	r26
    210a:	97 95       	ror	r25
    210c:	87 95       	ror	r24
    210e:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2110:	41 15       	cp	r20, r1
    2112:	80 e1       	ldi	r24, 0x10	; 16
    2114:	58 07       	cpc	r21, r24
    2116:	a8 f0       	brcs	.+42     	; 0x2142 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2118:	e8 89       	ldd	r30, Y+16	; 0x10
    211a:	f9 89       	ldd	r31, Y+17	; 0x11
    211c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    211e:	60 e8       	ldi	r22, 0x80	; 128
    2120:	74 e8       	ldi	r23, 0x84	; 132
    2122:	8e e1       	ldi	r24, 0x1E	; 30
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a7 01       	movw	r20, r14
    2128:	96 01       	movw	r18, r12
    212a:	0e 94 52 12 	call	0x24a4	; 0x24a4 <__udivmodsi4>
    212e:	ba 01       	movw	r22, r20
    2130:	a9 01       	movw	r20, r18
    2132:	41 50       	subi	r20, 0x01	; 1
    2134:	51 09       	sbc	r21, r1
    2136:	61 09       	sbc	r22, r1
    2138:	71 09       	sbc	r23, r1
    213a:	76 95       	lsr	r23
    213c:	67 95       	ror	r22
    213e:	57 95       	ror	r21
    2140:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2142:	ec 85       	ldd	r30, Y+12	; 0x0c
    2144:	fd 85       	ldd	r31, Y+13	; 0x0d
    2146:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    2148:	ee 85       	ldd	r30, Y+14	; 0x0e
    214a:	ff 85       	ldd	r31, Y+15	; 0x0f
    214c:	40 83       	st	Z, r20

  _written = false;
    214e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2150:	ec 89       	ldd	r30, Y+20	; 0x14
    2152:	fd 89       	ldd	r31, Y+21	; 0x15
    2154:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2156:	ea 89       	ldd	r30, Y+18	; 0x12
    2158:	fb 89       	ldd	r31, Y+19	; 0x13
    215a:	80 81       	ld	r24, Z
    215c:	80 61       	ori	r24, 0x10	; 16
    215e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2160:	ea 89       	ldd	r30, Y+18	; 0x12
    2162:	fb 89       	ldd	r31, Y+19	; 0x13
    2164:	80 81       	ld	r24, Z
    2166:	88 60       	ori	r24, 0x08	; 8
    2168:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    216a:	ea 89       	ldd	r30, Y+18	; 0x12
    216c:	fb 89       	ldd	r31, Y+19	; 0x13
    216e:	80 81       	ld	r24, Z
    2170:	80 68       	ori	r24, 0x80	; 128
    2172:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2174:	ea 89       	ldd	r30, Y+18	; 0x12
    2176:	fb 89       	ldd	r31, Y+19	; 0x13
    2178:	80 81       	ld	r24, Z
    217a:	8f 7d       	andi	r24, 0xDF	; 223
    217c:	80 83       	st	Z, r24
}
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	1f 91       	pop	r17
    2184:	ff 90       	pop	r15
    2186:	ef 90       	pop	r14
    2188:	df 90       	pop	r13
    218a:	cf 90       	pop	r12
    218c:	08 95       	ret

0000218e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    218e:	1f 92       	push	r1
    2190:	0f 92       	push	r0
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	0f 92       	push	r0
    2196:	11 24       	eor	r1, r1
    2198:	2f 93       	push	r18
    219a:	8f 93       	push	r24
    219c:	9f 93       	push	r25
    219e:	ef 93       	push	r30
    21a0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    21a2:	e0 91 b5 01 	lds	r30, 0x01B5
    21a6:	f0 91 b6 01 	lds	r31, 0x01B6
    21aa:	80 81       	ld	r24, Z
    21ac:	e0 91 bb 01 	lds	r30, 0x01BB
    21b0:	f0 91 bc 01 	lds	r31, 0x01BC
    21b4:	82 fd       	sbrc	r24, 2
    21b6:	12 c0       	rjmp	.+36     	; 0x21dc <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    21b8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    21ba:	80 91 be 01 	lds	r24, 0x01BE
    21be:	8f 5f       	subi	r24, 0xFF	; 255
    21c0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    21c2:	20 91 bf 01 	lds	r18, 0x01BF
    21c6:	82 17       	cp	r24, r18
    21c8:	51 f0       	breq	.+20     	; 0x21de <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    21ca:	e0 91 be 01 	lds	r30, 0x01BE
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	eb 55       	subi	r30, 0x5B	; 91
    21d2:	fe 4f       	sbci	r31, 0xFE	; 254
    21d4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    21d6:	80 93 be 01 	sts	0x01BE, r24
    21da:	01 c0       	rjmp	.+2      	; 0x21de <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    21dc:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    21de:	ff 91       	pop	r31
    21e0:	ef 91       	pop	r30
    21e2:	9f 91       	pop	r25
    21e4:	8f 91       	pop	r24
    21e6:	2f 91       	pop	r18
    21e8:	0f 90       	pop	r0
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	0f 90       	pop	r0
    21ee:	1f 90       	pop	r1
    21f0:	18 95       	reti

000021f2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    21f2:	1f 92       	push	r1
    21f4:	0f 92       	push	r0
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	0f 92       	push	r0
    21fa:	11 24       	eor	r1, r1
    21fc:	2f 93       	push	r18
    21fe:	3f 93       	push	r19
    2200:	4f 93       	push	r20
    2202:	5f 93       	push	r21
    2204:	6f 93       	push	r22
    2206:	7f 93       	push	r23
    2208:	8f 93       	push	r24
    220a:	9f 93       	push	r25
    220c:	af 93       	push	r26
    220e:	bf 93       	push	r27
    2210:	ef 93       	push	r30
    2212:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2214:	85 ea       	ldi	r24, 0xA5	; 165
    2216:	91 e0       	ldi	r25, 0x01	; 1
    2218:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    221c:	ff 91       	pop	r31
    221e:	ef 91       	pop	r30
    2220:	bf 91       	pop	r27
    2222:	af 91       	pop	r26
    2224:	9f 91       	pop	r25
    2226:	8f 91       	pop	r24
    2228:	7f 91       	pop	r23
    222a:	6f 91       	pop	r22
    222c:	5f 91       	pop	r21
    222e:	4f 91       	pop	r20
    2230:	3f 91       	pop	r19
    2232:	2f 91       	pop	r18
    2234:	0f 90       	pop	r0
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	0f 90       	pop	r0
    223a:	1f 90       	pop	r1
    223c:	18 95       	reti

0000223e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    223e:	85 ea       	ldi	r24, 0xA5	; 165
    2240:	91 e0       	ldi	r25, 0x01	; 1
    2242:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN14HardwareSerial9availableEv>
    2246:	21 e0       	ldi	r18, 0x01	; 1
    2248:	89 2b       	or	r24, r25
    224a:	09 f4       	brne	.+2      	; 0x224e <_Z17Serial0_availablev+0x10>
    224c:	20 e0       	ldi	r18, 0x00	; 0
}
    224e:	82 2f       	mov	r24, r18
    2250:	08 95       	ret

00002252 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2252:	e5 ea       	ldi	r30, 0xA5	; 165
    2254:	f1 e0       	ldi	r31, 0x01	; 1
    2256:	13 82       	std	Z+3, r1	; 0x03
    2258:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    225a:	88 ee       	ldi	r24, 0xE8	; 232
    225c:	93 e0       	ldi	r25, 0x03	; 3
    225e:	a0 e0       	ldi	r26, 0x00	; 0
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	84 83       	std	Z+4, r24	; 0x04
    2264:	95 83       	std	Z+5, r25	; 0x05
    2266:	a6 83       	std	Z+6, r26	; 0x06
    2268:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    226a:	88 e4       	ldi	r24, 0x48	; 72
    226c:	91 e0       	ldi	r25, 0x01	; 1
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	80 83       	st	Z, r24
    2272:	85 ec       	ldi	r24, 0xC5	; 197
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	95 87       	std	Z+13, r25	; 0x0d
    2278:	84 87       	std	Z+12, r24	; 0x0c
    227a:	84 ec       	ldi	r24, 0xC4	; 196
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	97 87       	std	Z+15, r25	; 0x0f
    2280:	86 87       	std	Z+14, r24	; 0x0e
    2282:	80 ec       	ldi	r24, 0xC0	; 192
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	91 8b       	std	Z+17, r25	; 0x11
    2288:	80 8b       	std	Z+16, r24	; 0x10
    228a:	81 ec       	ldi	r24, 0xC1	; 193
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	93 8b       	std	Z+19, r25	; 0x13
    2290:	82 8b       	std	Z+18, r24	; 0x12
    2292:	82 ec       	ldi	r24, 0xC2	; 194
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	95 8b       	std	Z+21, r25	; 0x15
    2298:	84 8b       	std	Z+20, r24	; 0x14
    229a:	86 ec       	ldi	r24, 0xC6	; 198
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	97 8b       	std	Z+23, r25	; 0x17
    22a0:	86 8b       	std	Z+22, r24	; 0x16
    22a2:	11 8e       	std	Z+25, r1	; 0x19
    22a4:	12 8e       	std	Z+26, r1	; 0x1a
    22a6:	13 8e       	std	Z+27, r1	; 0x1b
    22a8:	14 8e       	std	Z+28, r1	; 0x1c
    22aa:	08 95       	ret

000022ac <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    22ac:	08 95       	ret

000022ae <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    22ae:	0e 94 db 11 	call	0x23b6	; 0x23b6 <init>

	initVariant();
    22b2:	0e 94 56 11 	call	0x22ac	; 0x22ac <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    22b6:	0e 94 02 03 	call	0x604	; 0x604 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    22ba:	ca ec       	ldi	r28, 0xCA	; 202
    22bc:	df e0       	ldi	r29, 0x0F	; 15
#endif
	
	setup();
    
	for (;;) {
		loop();
    22be:	0e 94 19 03 	call	0x632	; 0x632 <loop>
		if (serialEventRun) serialEventRun();
    22c2:	20 97       	sbiw	r28, 0x00	; 0
    22c4:	e1 f3       	breq	.-8      	; 0x22be <main+0x10>
    22c6:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <_Z14serialEventRunv>
    22ca:	f9 cf       	rjmp	.-14     	; 0x22be <main+0x10>

000022cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    22cc:	cf 92       	push	r12
    22ce:	df 92       	push	r13
    22d0:	ef 92       	push	r14
    22d2:	ff 92       	push	r15
    22d4:	0f 93       	push	r16
    22d6:	1f 93       	push	r17
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
    22dc:	6c 01       	movw	r12, r24
    22de:	7a 01       	movw	r14, r20
    22e0:	8b 01       	movw	r16, r22
  size_t n = 0;
    22e2:	c0 e0       	ldi	r28, 0x00	; 0
    22e4:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    22e6:	ce 15       	cp	r28, r14
    22e8:	df 05       	cpc	r29, r15
    22ea:	89 f0       	breq	.+34     	; 0x230e <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
    22ec:	d8 01       	movw	r26, r16
    22ee:	6d 91       	ld	r22, X+
    22f0:	8d 01       	movw	r16, r26
    22f2:	d6 01       	movw	r26, r12
    22f4:	ed 91       	ld	r30, X+
    22f6:	fc 91       	ld	r31, X
    22f8:	01 90       	ld	r0, Z+
    22fa:	f0 81       	ld	r31, Z
    22fc:	e0 2d       	mov	r30, r0
    22fe:	c6 01       	movw	r24, r12
    2300:	09 95       	icall
    2302:	89 2b       	or	r24, r25
    2304:	11 f4       	brne	.+4      	; 0x230a <_ZN5Print5writeEPKhj+0x3e>
    2306:	7e 01       	movw	r14, r28
    2308:	02 c0       	rjmp	.+4      	; 0x230e <_ZN5Print5writeEPKhj+0x42>
    230a:	21 96       	adiw	r28, 0x01	; 1
    230c:	ec cf       	rjmp	.-40     	; 0x22e6 <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
    230e:	c7 01       	movw	r24, r14
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	1f 91       	pop	r17
    2316:	0f 91       	pop	r16
    2318:	ff 90       	pop	r15
    231a:	ef 90       	pop	r14
    231c:	df 90       	pop	r13
    231e:	cf 90       	pop	r12
    2320:	08 95       	ret

00002322 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2322:	1f 92       	push	r1
    2324:	0f 92       	push	r0
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	0f 92       	push	r0
    232a:	11 24       	eor	r1, r1
    232c:	2f 93       	push	r18
    232e:	3f 93       	push	r19
    2330:	8f 93       	push	r24
    2332:	9f 93       	push	r25
    2334:	af 93       	push	r26
    2336:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2338:	80 91 43 02 	lds	r24, 0x0243
    233c:	90 91 44 02 	lds	r25, 0x0244
    2340:	a0 91 45 02 	lds	r26, 0x0245
    2344:	b0 91 46 02 	lds	r27, 0x0246
	unsigned char f = timer0_fract;
    2348:	30 91 42 02 	lds	r19, 0x0242

	m += MILLIS_INC;
	f += FRACT_INC;
    234c:	23 e0       	ldi	r18, 0x03	; 3
    234e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    2350:	2d 37       	cpi	r18, 0x7D	; 125
    2352:	20 f4       	brcc	.+8      	; 0x235c <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2354:	01 96       	adiw	r24, 0x01	; 1
    2356:	a1 1d       	adc	r26, r1
    2358:	b1 1d       	adc	r27, r1
    235a:	05 c0       	rjmp	.+10     	; 0x2366 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    235c:	26 e8       	ldi	r18, 0x86	; 134
    235e:	23 0f       	add	r18, r19
		m += 1;
    2360:	02 96       	adiw	r24, 0x02	; 2
    2362:	a1 1d       	adc	r26, r1
    2364:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2366:	20 93 42 02 	sts	0x0242, r18
	timer0_millis = m;
    236a:	80 93 43 02 	sts	0x0243, r24
    236e:	90 93 44 02 	sts	0x0244, r25
    2372:	a0 93 45 02 	sts	0x0245, r26
    2376:	b0 93 46 02 	sts	0x0246, r27
	timer0_overflow_count++;
    237a:	80 91 47 02 	lds	r24, 0x0247
    237e:	90 91 48 02 	lds	r25, 0x0248
    2382:	a0 91 49 02 	lds	r26, 0x0249
    2386:	b0 91 4a 02 	lds	r27, 0x024A
    238a:	01 96       	adiw	r24, 0x01	; 1
    238c:	a1 1d       	adc	r26, r1
    238e:	b1 1d       	adc	r27, r1
    2390:	80 93 47 02 	sts	0x0247, r24
    2394:	90 93 48 02 	sts	0x0248, r25
    2398:	a0 93 49 02 	sts	0x0249, r26
    239c:	b0 93 4a 02 	sts	0x024A, r27
}
    23a0:	bf 91       	pop	r27
    23a2:	af 91       	pop	r26
    23a4:	9f 91       	pop	r25
    23a6:	8f 91       	pop	r24
    23a8:	3f 91       	pop	r19
    23aa:	2f 91       	pop	r18
    23ac:	0f 90       	pop	r0
    23ae:	0f be       	out	0x3f, r0	; 63
    23b0:	0f 90       	pop	r0
    23b2:	1f 90       	pop	r1
    23b4:	18 95       	reti

000023b6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    23b6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    23b8:	84 b5       	in	r24, 0x24	; 36
    23ba:	82 60       	ori	r24, 0x02	; 2
    23bc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    23be:	84 b5       	in	r24, 0x24	; 36
    23c0:	81 60       	ori	r24, 0x01	; 1
    23c2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    23c4:	85 b5       	in	r24, 0x25	; 37
    23c6:	82 60       	ori	r24, 0x02	; 2
    23c8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    23ca:	85 b5       	in	r24, 0x25	; 37
    23cc:	81 60       	ori	r24, 0x01	; 1
    23ce:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    23d0:	ee e6       	ldi	r30, 0x6E	; 110
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	81 60       	ori	r24, 0x01	; 1
    23d8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    23da:	e1 e8       	ldi	r30, 0x81	; 129
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    23e0:	80 81       	ld	r24, Z
    23e2:	82 60       	ori	r24, 0x02	; 2
    23e4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    23e6:	80 81       	ld	r24, Z
    23e8:	81 60       	ori	r24, 0x01	; 1
    23ea:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    23ec:	e0 e8       	ldi	r30, 0x80	; 128
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	81 60       	ori	r24, 0x01	; 1
    23f4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    23f6:	e1 eb       	ldi	r30, 0xB1	; 177
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	84 60       	ori	r24, 0x04	; 4
    23fe:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2400:	e0 eb       	ldi	r30, 0xB0	; 176
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	81 60       	ori	r24, 0x01	; 1
    2408:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    240a:	ea e7       	ldi	r30, 0x7A	; 122
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	84 60       	ori	r24, 0x04	; 4
    2412:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2414:	80 81       	ld	r24, Z
    2416:	82 60       	ori	r24, 0x02	; 2
    2418:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    241a:	80 81       	ld	r24, Z
    241c:	81 60       	ori	r24, 0x01	; 1
    241e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2420:	80 81       	ld	r24, Z
    2422:	80 68       	ori	r24, 0x80	; 128
    2424:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2426:	10 92 c1 00 	sts	0x00C1, r1
    242a:	08 95       	ret

0000242c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	fc 01       	movw	r30, r24
    2434:	e0 59       	subi	r30, 0x90	; 144
    2436:	fa 4f       	sbci	r31, 0xFA	; 250
    2438:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    243a:	fc 01       	movw	r30, r24
    243c:	ec 57       	subi	r30, 0x7C	; 124
    243e:	fa 4f       	sbci	r31, 0xFA	; 250
    2440:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2442:	88 23       	and	r24, r24
    2444:	61 f1       	breq	.+88     	; 0x249e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	88 0f       	add	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	fc 01       	movw	r30, r24
    244e:	ee 55       	subi	r30, 0x5E	; 94
    2450:	fa 4f       	sbci	r31, 0xFA	; 250
    2452:	c5 91       	lpm	r28, Z+
    2454:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2456:	fc 01       	movw	r30, r24
    2458:	e8 56       	subi	r30, 0x68	; 104
    245a:	fa 4f       	sbci	r31, 0xFA	; 250
    245c:	a5 91       	lpm	r26, Z+
    245e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2460:	61 11       	cpse	r22, r1
    2462:	09 c0       	rjmp	.+18     	; 0x2476 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2464:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2466:	f8 94       	cli
		*reg &= ~bit;
    2468:	88 81       	ld	r24, Y
    246a:	20 95       	com	r18
    246c:	82 23       	and	r24, r18
    246e:	88 83       	st	Y, r24
		*out &= ~bit;
    2470:	ec 91       	ld	r30, X
    2472:	2e 23       	and	r18, r30
    2474:	0b c0       	rjmp	.+22     	; 0x248c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2476:	62 30       	cpi	r22, 0x02	; 2
    2478:	61 f4       	brne	.+24     	; 0x2492 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    247a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    247c:	f8 94       	cli
		*reg &= ~bit;
    247e:	38 81       	ld	r19, Y
    2480:	82 2f       	mov	r24, r18
    2482:	80 95       	com	r24
    2484:	83 23       	and	r24, r19
    2486:	88 83       	st	Y, r24
		*out |= bit;
    2488:	ec 91       	ld	r30, X
    248a:	2e 2b       	or	r18, r30
    248c:	2c 93       	st	X, r18
		SREG = oldSREG;
    248e:	9f bf       	out	0x3f, r25	; 63
    2490:	06 c0       	rjmp	.+12     	; 0x249e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2492:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2494:	f8 94       	cli
		*reg |= bit;
    2496:	e8 81       	ld	r30, Y
    2498:	2e 2b       	or	r18, r30
    249a:	28 83       	st	Y, r18
		SREG = oldSREG;
    249c:	8f bf       	out	0x3f, r24	; 63
	}
}
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	08 95       	ret

000024a4 <__udivmodsi4>:
    24a4:	a1 e2       	ldi	r26, 0x21	; 33
    24a6:	1a 2e       	mov	r1, r26
    24a8:	aa 1b       	sub	r26, r26
    24aa:	bb 1b       	sub	r27, r27
    24ac:	fd 01       	movw	r30, r26
    24ae:	0d c0       	rjmp	.+26     	; 0x24ca <__udivmodsi4_ep>

000024b0 <__udivmodsi4_loop>:
    24b0:	aa 1f       	adc	r26, r26
    24b2:	bb 1f       	adc	r27, r27
    24b4:	ee 1f       	adc	r30, r30
    24b6:	ff 1f       	adc	r31, r31
    24b8:	a2 17       	cp	r26, r18
    24ba:	b3 07       	cpc	r27, r19
    24bc:	e4 07       	cpc	r30, r20
    24be:	f5 07       	cpc	r31, r21
    24c0:	20 f0       	brcs	.+8      	; 0x24ca <__udivmodsi4_ep>
    24c2:	a2 1b       	sub	r26, r18
    24c4:	b3 0b       	sbc	r27, r19
    24c6:	e4 0b       	sbc	r30, r20
    24c8:	f5 0b       	sbc	r31, r21

000024ca <__udivmodsi4_ep>:
    24ca:	66 1f       	adc	r22, r22
    24cc:	77 1f       	adc	r23, r23
    24ce:	88 1f       	adc	r24, r24
    24d0:	99 1f       	adc	r25, r25
    24d2:	1a 94       	dec	r1
    24d4:	69 f7       	brne	.-38     	; 0x24b0 <__udivmodsi4_loop>
    24d6:	60 95       	com	r22
    24d8:	70 95       	com	r23
    24da:	80 95       	com	r24
    24dc:	90 95       	com	r25
    24de:	9b 01       	movw	r18, r22
    24e0:	ac 01       	movw	r20, r24
    24e2:	bd 01       	movw	r22, r26
    24e4:	cf 01       	movw	r24, r30
    24e6:	08 95       	ret

000024e8 <__tablejump2__>:
    24e8:	ee 0f       	add	r30, r30
    24ea:	ff 1f       	adc	r31, r31
    24ec:	05 90       	lpm	r0, Z+
    24ee:	f4 91       	lpm	r31, Z
    24f0:	e0 2d       	mov	r30, r0
    24f2:	09 94       	ijmp

000024f4 <malloc>:
    24f4:	cf 93       	push	r28
    24f6:	df 93       	push	r29
    24f8:	82 30       	cpi	r24, 0x02	; 2
    24fa:	91 05       	cpc	r25, r1
    24fc:	10 f4       	brcc	.+4      	; 0x2502 <malloc+0xe>
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	e0 91 4d 02 	lds	r30, 0x024D
    2506:	f0 91 4e 02 	lds	r31, 0x024E
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	c0 e0       	ldi	r28, 0x00	; 0
    2510:	d0 e0       	ldi	r29, 0x00	; 0
    2512:	30 97       	sbiw	r30, 0x00	; 0
    2514:	11 f1       	breq	.+68     	; 0x255a <malloc+0x66>
    2516:	40 81       	ld	r20, Z
    2518:	51 81       	ldd	r21, Z+1	; 0x01
    251a:	48 17       	cp	r20, r24
    251c:	59 07       	cpc	r21, r25
    251e:	c0 f0       	brcs	.+48     	; 0x2550 <malloc+0x5c>
    2520:	48 17       	cp	r20, r24
    2522:	59 07       	cpc	r21, r25
    2524:	61 f4       	brne	.+24     	; 0x253e <malloc+0x4a>
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	93 81       	ldd	r25, Z+3	; 0x03
    252a:	20 97       	sbiw	r28, 0x00	; 0
    252c:	19 f0       	breq	.+6      	; 0x2534 <malloc+0x40>
    252e:	9b 83       	std	Y+3, r25	; 0x03
    2530:	8a 83       	std	Y+2, r24	; 0x02
    2532:	2b c0       	rjmp	.+86     	; 0x258a <malloc+0x96>
    2534:	90 93 4e 02 	sts	0x024E, r25
    2538:	80 93 4d 02 	sts	0x024D, r24
    253c:	26 c0       	rjmp	.+76     	; 0x258a <malloc+0x96>
    253e:	21 15       	cp	r18, r1
    2540:	31 05       	cpc	r19, r1
    2542:	19 f0       	breq	.+6      	; 0x254a <malloc+0x56>
    2544:	42 17       	cp	r20, r18
    2546:	53 07       	cpc	r21, r19
    2548:	18 f4       	brcc	.+6      	; 0x2550 <malloc+0x5c>
    254a:	9a 01       	movw	r18, r20
    254c:	be 01       	movw	r22, r28
    254e:	df 01       	movw	r26, r30
    2550:	ef 01       	movw	r28, r30
    2552:	02 80       	ldd	r0, Z+2	; 0x02
    2554:	f3 81       	ldd	r31, Z+3	; 0x03
    2556:	e0 2d       	mov	r30, r0
    2558:	dc cf       	rjmp	.-72     	; 0x2512 <malloc+0x1e>
    255a:	21 15       	cp	r18, r1
    255c:	31 05       	cpc	r19, r1
    255e:	09 f1       	breq	.+66     	; 0x25a2 <malloc+0xae>
    2560:	28 1b       	sub	r18, r24
    2562:	39 0b       	sbc	r19, r25
    2564:	24 30       	cpi	r18, 0x04	; 4
    2566:	31 05       	cpc	r19, r1
    2568:	90 f4       	brcc	.+36     	; 0x258e <malloc+0x9a>
    256a:	12 96       	adiw	r26, 0x02	; 2
    256c:	8d 91       	ld	r24, X+
    256e:	9c 91       	ld	r25, X
    2570:	13 97       	sbiw	r26, 0x03	; 3
    2572:	61 15       	cp	r22, r1
    2574:	71 05       	cpc	r23, r1
    2576:	21 f0       	breq	.+8      	; 0x2580 <malloc+0x8c>
    2578:	fb 01       	movw	r30, r22
    257a:	93 83       	std	Z+3, r25	; 0x03
    257c:	82 83       	std	Z+2, r24	; 0x02
    257e:	04 c0       	rjmp	.+8      	; 0x2588 <malloc+0x94>
    2580:	90 93 4e 02 	sts	0x024E, r25
    2584:	80 93 4d 02 	sts	0x024D, r24
    2588:	fd 01       	movw	r30, r26
    258a:	32 96       	adiw	r30, 0x02	; 2
    258c:	44 c0       	rjmp	.+136    	; 0x2616 <malloc+0x122>
    258e:	fd 01       	movw	r30, r26
    2590:	e2 0f       	add	r30, r18
    2592:	f3 1f       	adc	r31, r19
    2594:	81 93       	st	Z+, r24
    2596:	91 93       	st	Z+, r25
    2598:	22 50       	subi	r18, 0x02	; 2
    259a:	31 09       	sbc	r19, r1
    259c:	2d 93       	st	X+, r18
    259e:	3c 93       	st	X, r19
    25a0:	3a c0       	rjmp	.+116    	; 0x2616 <malloc+0x122>
    25a2:	20 91 4b 02 	lds	r18, 0x024B
    25a6:	30 91 4c 02 	lds	r19, 0x024C
    25aa:	23 2b       	or	r18, r19
    25ac:	41 f4       	brne	.+16     	; 0x25be <malloc+0xca>
    25ae:	20 91 02 01 	lds	r18, 0x0102
    25b2:	30 91 03 01 	lds	r19, 0x0103
    25b6:	30 93 4c 02 	sts	0x024C, r19
    25ba:	20 93 4b 02 	sts	0x024B, r18
    25be:	20 91 00 01 	lds	r18, 0x0100
    25c2:	30 91 01 01 	lds	r19, 0x0101
    25c6:	21 15       	cp	r18, r1
    25c8:	31 05       	cpc	r19, r1
    25ca:	41 f4       	brne	.+16     	; 0x25dc <malloc+0xe8>
    25cc:	2d b7       	in	r18, 0x3d	; 61
    25ce:	3e b7       	in	r19, 0x3e	; 62
    25d0:	40 91 04 01 	lds	r20, 0x0104
    25d4:	50 91 05 01 	lds	r21, 0x0105
    25d8:	24 1b       	sub	r18, r20
    25da:	35 0b       	sbc	r19, r21
    25dc:	e0 91 4b 02 	lds	r30, 0x024B
    25e0:	f0 91 4c 02 	lds	r31, 0x024C
    25e4:	e2 17       	cp	r30, r18
    25e6:	f3 07       	cpc	r31, r19
    25e8:	a0 f4       	brcc	.+40     	; 0x2612 <malloc+0x11e>
    25ea:	2e 1b       	sub	r18, r30
    25ec:	3f 0b       	sbc	r19, r31
    25ee:	28 17       	cp	r18, r24
    25f0:	39 07       	cpc	r19, r25
    25f2:	78 f0       	brcs	.+30     	; 0x2612 <malloc+0x11e>
    25f4:	ac 01       	movw	r20, r24
    25f6:	4e 5f       	subi	r20, 0xFE	; 254
    25f8:	5f 4f       	sbci	r21, 0xFF	; 255
    25fa:	24 17       	cp	r18, r20
    25fc:	35 07       	cpc	r19, r21
    25fe:	48 f0       	brcs	.+18     	; 0x2612 <malloc+0x11e>
    2600:	4e 0f       	add	r20, r30
    2602:	5f 1f       	adc	r21, r31
    2604:	50 93 4c 02 	sts	0x024C, r21
    2608:	40 93 4b 02 	sts	0x024B, r20
    260c:	81 93       	st	Z+, r24
    260e:	91 93       	st	Z+, r25
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <malloc+0x122>
    2612:	e0 e0       	ldi	r30, 0x00	; 0
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	cf 01       	movw	r24, r30
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	08 95       	ret

0000261e <free>:
    261e:	0f 93       	push	r16
    2620:	1f 93       	push	r17
    2622:	cf 93       	push	r28
    2624:	df 93       	push	r29
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	09 f4       	brne	.+2      	; 0x262c <free+0xe>
    262a:	8c c0       	rjmp	.+280    	; 0x2744 <free+0x126>
    262c:	fc 01       	movw	r30, r24
    262e:	32 97       	sbiw	r30, 0x02	; 2
    2630:	13 82       	std	Z+3, r1	; 0x03
    2632:	12 82       	std	Z+2, r1	; 0x02
    2634:	00 91 4d 02 	lds	r16, 0x024D
    2638:	10 91 4e 02 	lds	r17, 0x024E
    263c:	01 15       	cp	r16, r1
    263e:	11 05       	cpc	r17, r1
    2640:	81 f4       	brne	.+32     	; 0x2662 <free+0x44>
    2642:	20 81       	ld	r18, Z
    2644:	31 81       	ldd	r19, Z+1	; 0x01
    2646:	82 0f       	add	r24, r18
    2648:	93 1f       	adc	r25, r19
    264a:	20 91 4b 02 	lds	r18, 0x024B
    264e:	30 91 4c 02 	lds	r19, 0x024C
    2652:	28 17       	cp	r18, r24
    2654:	39 07       	cpc	r19, r25
    2656:	79 f5       	brne	.+94     	; 0x26b6 <free+0x98>
    2658:	f0 93 4c 02 	sts	0x024C, r31
    265c:	e0 93 4b 02 	sts	0x024B, r30
    2660:	71 c0       	rjmp	.+226    	; 0x2744 <free+0x126>
    2662:	d8 01       	movw	r26, r16
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	50 e0       	ldi	r21, 0x00	; 0
    2668:	ae 17       	cp	r26, r30
    266a:	bf 07       	cpc	r27, r31
    266c:	50 f4       	brcc	.+20     	; 0x2682 <free+0x64>
    266e:	12 96       	adiw	r26, 0x02	; 2
    2670:	2d 91       	ld	r18, X+
    2672:	3c 91       	ld	r19, X
    2674:	13 97       	sbiw	r26, 0x03	; 3
    2676:	ad 01       	movw	r20, r26
    2678:	21 15       	cp	r18, r1
    267a:	31 05       	cpc	r19, r1
    267c:	09 f1       	breq	.+66     	; 0x26c0 <free+0xa2>
    267e:	d9 01       	movw	r26, r18
    2680:	f3 cf       	rjmp	.-26     	; 0x2668 <free+0x4a>
    2682:	9d 01       	movw	r18, r26
    2684:	da 01       	movw	r26, r20
    2686:	33 83       	std	Z+3, r19	; 0x03
    2688:	22 83       	std	Z+2, r18	; 0x02
    268a:	60 81       	ld	r22, Z
    268c:	71 81       	ldd	r23, Z+1	; 0x01
    268e:	86 0f       	add	r24, r22
    2690:	97 1f       	adc	r25, r23
    2692:	82 17       	cp	r24, r18
    2694:	93 07       	cpc	r25, r19
    2696:	69 f4       	brne	.+26     	; 0x26b2 <free+0x94>
    2698:	ec 01       	movw	r28, r24
    269a:	28 81       	ld	r18, Y
    269c:	39 81       	ldd	r19, Y+1	; 0x01
    269e:	26 0f       	add	r18, r22
    26a0:	37 1f       	adc	r19, r23
    26a2:	2e 5f       	subi	r18, 0xFE	; 254
    26a4:	3f 4f       	sbci	r19, 0xFF	; 255
    26a6:	31 83       	std	Z+1, r19	; 0x01
    26a8:	20 83       	st	Z, r18
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	9b 81       	ldd	r25, Y+3	; 0x03
    26ae:	93 83       	std	Z+3, r25	; 0x03
    26b0:	82 83       	std	Z+2, r24	; 0x02
    26b2:	45 2b       	or	r20, r21
    26b4:	29 f4       	brne	.+10     	; 0x26c0 <free+0xa2>
    26b6:	f0 93 4e 02 	sts	0x024E, r31
    26ba:	e0 93 4d 02 	sts	0x024D, r30
    26be:	42 c0       	rjmp	.+132    	; 0x2744 <free+0x126>
    26c0:	13 96       	adiw	r26, 0x03	; 3
    26c2:	fc 93       	st	X, r31
    26c4:	ee 93       	st	-X, r30
    26c6:	12 97       	sbiw	r26, 0x02	; 2
    26c8:	ed 01       	movw	r28, r26
    26ca:	49 91       	ld	r20, Y+
    26cc:	59 91       	ld	r21, Y+
    26ce:	9e 01       	movw	r18, r28
    26d0:	24 0f       	add	r18, r20
    26d2:	35 1f       	adc	r19, r21
    26d4:	e2 17       	cp	r30, r18
    26d6:	f3 07       	cpc	r31, r19
    26d8:	71 f4       	brne	.+28     	; 0x26f6 <free+0xd8>
    26da:	80 81       	ld	r24, Z
    26dc:	91 81       	ldd	r25, Z+1	; 0x01
    26de:	84 0f       	add	r24, r20
    26e0:	95 1f       	adc	r25, r21
    26e2:	02 96       	adiw	r24, 0x02	; 2
    26e4:	11 96       	adiw	r26, 0x01	; 1
    26e6:	9c 93       	st	X, r25
    26e8:	8e 93       	st	-X, r24
    26ea:	82 81       	ldd	r24, Z+2	; 0x02
    26ec:	93 81       	ldd	r25, Z+3	; 0x03
    26ee:	13 96       	adiw	r26, 0x03	; 3
    26f0:	9c 93       	st	X, r25
    26f2:	8e 93       	st	-X, r24
    26f4:	12 97       	sbiw	r26, 0x02	; 2
    26f6:	e0 e0       	ldi	r30, 0x00	; 0
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	d8 01       	movw	r26, r16
    26fc:	12 96       	adiw	r26, 0x02	; 2
    26fe:	8d 91       	ld	r24, X+
    2700:	9c 91       	ld	r25, X
    2702:	13 97       	sbiw	r26, 0x03	; 3
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	19 f0       	breq	.+6      	; 0x270e <free+0xf0>
    2708:	f8 01       	movw	r30, r16
    270a:	8c 01       	movw	r16, r24
    270c:	f6 cf       	rjmp	.-20     	; 0x26fa <free+0xdc>
    270e:	8d 91       	ld	r24, X+
    2710:	9c 91       	ld	r25, X
    2712:	98 01       	movw	r18, r16
    2714:	2e 5f       	subi	r18, 0xFE	; 254
    2716:	3f 4f       	sbci	r19, 0xFF	; 255
    2718:	82 0f       	add	r24, r18
    271a:	93 1f       	adc	r25, r19
    271c:	20 91 4b 02 	lds	r18, 0x024B
    2720:	30 91 4c 02 	lds	r19, 0x024C
    2724:	28 17       	cp	r18, r24
    2726:	39 07       	cpc	r19, r25
    2728:	69 f4       	brne	.+26     	; 0x2744 <free+0x126>
    272a:	30 97       	sbiw	r30, 0x00	; 0
    272c:	29 f4       	brne	.+10     	; 0x2738 <free+0x11a>
    272e:	10 92 4e 02 	sts	0x024E, r1
    2732:	10 92 4d 02 	sts	0x024D, r1
    2736:	02 c0       	rjmp	.+4      	; 0x273c <free+0x11e>
    2738:	13 82       	std	Z+3, r1	; 0x03
    273a:	12 82       	std	Z+2, r1	; 0x02
    273c:	10 93 4c 02 	sts	0x024C, r17
    2740:	00 93 4b 02 	sts	0x024B, r16
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	1f 91       	pop	r17
    274a:	0f 91       	pop	r16
    274c:	08 95       	ret

0000274e <abort>:
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	f8 94       	cli
    2754:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <_exit>

00002758 <memset>:
    2758:	dc 01       	movw	r26, r24
    275a:	01 c0       	rjmp	.+2      	; 0x275e <memset+0x6>
    275c:	6d 93       	st	X+, r22
    275e:	41 50       	subi	r20, 0x01	; 1
    2760:	50 40       	sbci	r21, 0x00	; 0
    2762:	e0 f7       	brcc	.-8      	; 0x275c <memset+0x4>
    2764:	08 95       	ret

00002766 <_exit>:
    2766:	f8 94       	cli

00002768 <__stop_program>:
    2768:	ff cf       	rjmp	.-2      	; 0x2768 <__stop_program>
