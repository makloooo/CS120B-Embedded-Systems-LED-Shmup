
dodger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00003dd6  00003e6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003dd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000110  00800158  00800158  00003ec2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003ec2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003ef4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007f8  00000000  00000000  00003f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000133b7  00000000  00000000  0000472c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000327f  00000000  00000000  00017ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000035ef  00000000  00000000  0001ad62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001fd8  00000000  00000000  0001e354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000348f  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d671  00000000  00000000  000237bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a10  00000000  00000000  00030e2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__ctors_end>
       4:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
       8:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
       c:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      10:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      14:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      18:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      1c:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      20:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      24:	0c 94 c8 12 	jmp	0x2590	; 0x2590 <__vector_9>
      28:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      2c:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      30:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      34:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__vector_13>
      38:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      3c:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      40:	0c 94 8b 1b 	jmp	0x3716	; 0x3716 <__vector_16>
      44:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      48:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__vector_18>
      4c:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__vector_19>
      50:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      54:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      58:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      5c:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      60:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      64:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      68:	b1 03       	fmuls	r19, r17
      6a:	b3 03       	fmuls	r19, r19
      6c:	b7 03       	fmuls	r19, r23
      6e:	ba 03       	fmulsu	r19, r18
      70:	bc 03       	fmulsu	r19, r20
      72:	bf 03       	fmulsu	r19, r23
      74:	c3 03       	fmuls	r20, r19

00000076 <__trampolines_end>:
      76:	01 00       	.word	0x0001	; ????
      78:	00 00       	nop
      7a:	01 00       	.word	0x0001	; ????
      7c:	01 01       	movw	r0, r2
      7e:	01 00       	.word	0x0001	; ????
      80:	00 01       	movw	r0, r0
      82:	00 01       	movw	r0, r0
      84:	00 00       	nop
      86:	01 01       	movw	r0, r2
      88:	01 00       	.word	0x0001	; ????
      8a:	01 00       	.word	0x0001	; ????
      8c:	00 00       	nop
      8e:	01 00       	.word	0x0001	; ????
      90:	01 00       	.word	0x0001	; ????
      92:	00 00       	nop
      94:	00 01       	movw	r0, r0
      96:	01 01       	movw	r0, r2
      98:	01 00       	.word	0x0001	; ????
      9a:	01 00       	.word	0x0001	; ????
      9c:	01 00       	.word	0x0001	; ????
      9e:	01 01       	movw	r0, r2
      a0:	01 01       	movw	r0, r2
      a2:	00 00       	nop
      a4:	00 00       	nop
      a6:	01 00       	.word	0x0001	; ????
      a8:	00 00       	nop
      aa:	01 00       	.word	0x0001	; ????
      ac:	00 00       	nop
      ae:	01 01       	movw	r0, r2
      b0:	01 00       	.word	0x0001	; ????
      b2:	01 01       	movw	r0, r2
      b4:	00 01       	movw	r0, r0
      b6:	01 00       	.word	0x0001	; ????
      b8:	01 01       	movw	r0, r2
      ba:	01 00       	.word	0x0001	; ????
      bc:	00 00       	nop
      be:	01 00       	.word	0x0001	; ????
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	01 00       	.word	0x0001	; ????
      c6:	01 01       	movw	r0, r2
      c8:	01 01       	movw	r0, r2
      ca:	00 00       	nop
      cc:	01 00       	.word	0x0001	; ????
      ce:	01 00       	.word	0x0001	; ????
      d0:	00 01       	movw	r0, r0
      d2:	01 01       	movw	r0, r2
      d4:	01 00       	.word	0x0001	; ????
      d6:	01 00       	.word	0x0001	; ????
	...

000000da <_ZL14bigger_explode>:
	...
      e6:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
      f6:	00 00 00 00 01 00 00 00 01 01 01 00 00 00 01 00     ................
	...
     10e:	01 00 00 00 00 01 00 00 01 01 01 01 01 00 00 01     ................
     11e:	00 00 00 00 01 00 00 00 00 01 00 00 00 00 01 00     ................
     12e:	00 01 01 00 01 01 00 00 01 00 00 00 00 01 00 00     ................
     13e:	00 00 01 00 00 00 00 00 00 00 01 00 01 00 01 00     ................
     14e:	00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 01     ................
     15e:	00 01 00 00 00 01 00 00 00 01 00 01 00 00 00 00     ................
     16e:	00 00 01 00 00 00 01 00 01 00 01 00 00 00 01 00     ................
     17e:	00 00 01 00 01 00 01 00 00 00 01 01 00 00 00 01     ................
     18e:	00 01 00 01 00 00 00 00 00 00 00 01 00 01 00 01     ................
     19e:	00 00 00 01 01 00 00 00 01 00 00 00 00 00 00 00     ................
	...
     1b6:	01 00 00 00 01                                      .....

000001bb <_ZL4font>:
     1bb:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     1cb:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     1db:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     1eb:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     1fb:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     20b:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     21b:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     22b:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     23b:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     24b:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     25b:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     26b:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     27b:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     28b:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     29b:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     2ab:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     2bb:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     2cb:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     2db:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     2eb:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     2fb:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     30b:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     31b:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     32b:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     33b:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     34b:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     35b:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     36b:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     37b:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     38b:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     39b:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     3ab:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     3bb:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     3cb:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     3db:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     3eb:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     3fb:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     40b:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     41b:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     42b:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     43b:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     44b:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     45b:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     46b:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     47b:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     48b:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     49b:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     4ab:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     4bb:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     4cb:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     4db:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     4eb:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     4fb:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     50b:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     51b:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     52b:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     53b:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     54b:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     55b:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     56b:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     57b:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     58b:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     59b:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     5ab:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     5bb:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     5cb:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     5db:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     5eb:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     5fb:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     60b:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     61b:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     62b:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     63b:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     64b:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     65b:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     66b:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     67b:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     68b:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     69b:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     6ab:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

000006bb <digital_pin_to_bit_mask_PGM>:
     6bb:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     6cb:	04 08 10 20                                         ... 

000006cf <digital_pin_to_port_PGM>:
     6cf:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     6df:	03 03 03 03                                         ....

000006e3 <port_to_output_PGM>:
     6e3:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000006ed <port_to_mode_PGM>:
     6ed:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000006f8 <__ctors_start>:
     6f8:	ad 0d       	add	r26, r13
     6fa:	21 1b       	sub	r18, r17

000006fc <__ctors_end>:
     6fc:	11 24       	eor	r1, r1
     6fe:	1f be       	out	0x3f, r1	; 63
     700:	cf ef       	ldi	r28, 0xFF	; 255
     702:	d8 e0       	ldi	r29, 0x08	; 8
     704:	de bf       	out	0x3e, r29	; 62
     706:	cd bf       	out	0x3d, r28	; 61

00000708 <__do_copy_data>:
     708:	11 e0       	ldi	r17, 0x01	; 1
     70a:	a0 e0       	ldi	r26, 0x00	; 0
     70c:	b1 e0       	ldi	r27, 0x01	; 1
     70e:	e6 ed       	ldi	r30, 0xD6	; 214
     710:	fd e3       	ldi	r31, 0x3D	; 61
     712:	02 c0       	rjmp	.+4      	; 0x718 <__do_copy_data+0x10>
     714:	05 90       	lpm	r0, Z+
     716:	0d 92       	st	X+, r0
     718:	a8 35       	cpi	r26, 0x58	; 88
     71a:	b1 07       	cpc	r27, r17
     71c:	d9 f7       	brne	.-10     	; 0x714 <__do_copy_data+0xc>

0000071e <__do_clear_bss>:
     71e:	22 e0       	ldi	r18, 0x02	; 2
     720:	a8 e5       	ldi	r26, 0x58	; 88
     722:	b1 e0       	ldi	r27, 0x01	; 1
     724:	01 c0       	rjmp	.+2      	; 0x728 <.do_clear_bss_start>

00000726 <.do_clear_bss_loop>:
     726:	1d 92       	st	X+, r1

00000728 <.do_clear_bss_start>:
     728:	a8 36       	cpi	r26, 0x68	; 104
     72a:	b2 07       	cpc	r27, r18
     72c:	e1 f7       	brne	.-8      	; 0x726 <.do_clear_bss_loop>

0000072e <__do_global_ctors>:
     72e:	13 e0       	ldi	r17, 0x03	; 3
     730:	ce e7       	ldi	r28, 0x7E	; 126
     732:	d3 e0       	ldi	r29, 0x03	; 3
     734:	04 c0       	rjmp	.+8      	; 0x73e <__do_global_ctors+0x10>
     736:	21 97       	sbiw	r28, 0x01	; 1
     738:	fe 01       	movw	r30, r28
     73a:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <__tablejump2__>
     73e:	cc 37       	cpi	r28, 0x7C	; 124
     740:	d1 07       	cpc	r29, r17
     742:	c9 f7       	brne	.-14     	; 0x736 <__do_global_ctors+0x8>
     744:	0e 94 4f 1b 	call	0x369e	; 0x369e <main>
     748:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <_exit>

0000074c <__bad_interrupt>:
     74c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000750 <_Z12return_color6Colors>:
inline void pixelDebug(byte x, byte y, uint16_t color) {
	matrix.drawPixel(x, y, color);
}

inline uint16_t return_color(Colors c) {
	switch (c) {
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	87 30       	cpi	r24, 0x07	; 7
     754:	91 05       	cpc	r25, r1
     756:	f0 f4       	brcc	.+60     	; 0x794 <_Z12return_color6Colors+0x44>
     758:	fc 01       	movw	r30, r24
     75a:	ec 5c       	subi	r30, 0xCC	; 204
     75c:	ff 4f       	sbci	r31, 0xFF	; 255
     75e:	0c 94 2c 1d 	jmp	0x3a58	; 0x3a58 <__tablejump2__>
		case RED:
		return matrix.Color333(1, 0, 0);
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	11 c0       	rjmp	.+34     	; 0x788 <_Z12return_color6Colors+0x38>
		case ORANGE:
		return matrix.Color333(2, 1, 0);
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	41 e0       	ldi	r20, 0x01	; 1
     76a:	62 e0       	ldi	r22, 0x02	; 2
     76c:	0f c0       	rjmp	.+30     	; 0x78c <_Z12return_color6Colors+0x3c>
		case YELLOW:
		return matrix.Color333(1, 1, 0);
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	41 e0       	ldi	r20, 0x01	; 1
     772:	0b c0       	rjmp	.+22     	; 0x78a <_Z12return_color6Colors+0x3a>
		case GREEN:
		return matrix.Color333(0, 1, 0);
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	01 c0       	rjmp	.+2      	; 0x77a <_Z12return_color6Colors+0x2a>
		case CYAN:
		return matrix.Color333(0, 1, 1);
     778:	21 e0       	ldi	r18, 0x01	; 1
     77a:	41 e0       	ldi	r20, 0x01	; 1
     77c:	02 c0       	rjmp	.+4      	; 0x782 <_Z12return_color6Colors+0x32>
		case BLUE:
		return matrix.Color333(0, 0, 1);
     77e:	21 e0       	ldi	r18, 0x01	; 1
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	03 c0       	rjmp	.+6      	; 0x78c <_Z12return_color6Colors+0x3c>
		case PURPLE:
		return matrix.Color333(1, 0, 1);
     786:	21 e0       	ldi	r18, 0x01	; 1
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	61 e0       	ldi	r22, 0x01	; 1
     78c:	8a e5       	ldi	r24, 0x5A	; 90
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <_ZN14RGBmatrixPanel8Color333Ehhh>
	}
}
     794:	08 95       	ret

00000796 <_Z10draw_panelRhS_S_h>:
			}
		}
	}
}

void draw_panel(byte& x, byte& y, byte& frame, byte frm_delay) {
     796:	5f 92       	push	r5
     798:	6f 92       	push	r6
     79a:	7f 92       	push	r7
     79c:	8f 92       	push	r8
     79e:	9f 92       	push	r9
     7a0:	af 92       	push	r10
     7a2:	bf 92       	push	r11
     7a4:	cf 92       	push	r12
     7a6:	df 92       	push	r13
     7a8:	ef 92       	push	r14
     7aa:	ff 92       	push	r15
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	5c 01       	movw	r10, r24
     7b6:	4b 01       	movw	r8, r22
     7b8:	7a 01       	movw	r14, r20
     7ba:	72 2e       	mov	r7, r18
	if (++frame >= 4*frm_delay) frame = 0;
     7bc:	fa 01       	movw	r30, r20
     7be:	80 81       	ld	r24, Z
     7c0:	8f 5f       	subi	r24, 0xFF	; 255
     7c2:	48 2f       	mov	r20, r24
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	f4 e0       	ldi	r31, 0x04	; 4
     7c8:	2f 9f       	mul	r18, r31
     7ca:	90 01       	movw	r18, r0
     7cc:	11 24       	eor	r1, r1
     7ce:	f7 01       	movw	r30, r14
     7d0:	42 17       	cp	r20, r18
     7d2:	53 07       	cpc	r21, r19
     7d4:	14 f4       	brge	.+4      	; 0x7da <_Z10draw_panelRhS_S_h+0x44>
     7d6:	80 83       	st	Z, r24
     7d8:	01 c0       	rjmp	.+2      	; 0x7dc <_Z10draw_panelRhS_S_h+0x46>
     7da:	10 82       	st	Z, r1
			}
		}
	}
}

void draw_panel(byte& x, byte& y, byte& frame, byte frm_delay) {
     7dc:	c0 e0       	ldi	r28, 0x00	; 0
     7de:	d0 e0       	ldi	r29, 0x00	; 0
	if (++frame >= 4*frm_delay) frame = 0;
	for (byte i = 0; i < 5; ++i) {
		for (byte j = 0; j < 5; ++j) {
			if(pgm_read_byte(&(enm_panel[frame/frm_delay][i][j]))) {
     7e0:	89 e1       	ldi	r24, 0x19	; 25
     7e2:	58 2e       	mov	r5, r24
     7e4:	95 e0       	ldi	r25, 0x05	; 5
     7e6:	69 2e       	mov	r6, r25
			}
		}
	}
}

void draw_panel(byte& x, byte& y, byte& frame, byte frm_delay) {
     7e8:	00 e0       	ldi	r16, 0x00	; 0
     7ea:	10 e0       	ldi	r17, 0x00	; 0
	if (++frame >= 4*frm_delay) frame = 0;
	for (byte i = 0; i < 5; ++i) {
		for (byte j = 0; j < 5; ++j) {
			if(pgm_read_byte(&(enm_panel[frame/frm_delay][i][j]))) {
     7ec:	6c 9e       	mul	r6, r28
     7ee:	60 01       	movw	r12, r0
     7f0:	6d 9e       	mul	r6, r29
     7f2:	d0 0c       	add	r13, r0
     7f4:	11 24       	eor	r1, r1
     7f6:	f7 01       	movw	r30, r14
     7f8:	80 81       	ld	r24, Z
     7fa:	67 2d       	mov	r22, r7
     7fc:	0e 94 b7 1c 	call	0x396e	; 0x396e <__udivmodqi4>
     800:	f6 01       	movw	r30, r12
     802:	58 9e       	mul	r5, r24
     804:	e0 0d       	add	r30, r0
     806:	f1 1d       	adc	r31, r1
     808:	11 24       	eor	r1, r1
     80a:	e0 0f       	add	r30, r16
     80c:	f1 1f       	adc	r31, r17
     80e:	ea 58       	subi	r30, 0x8A	; 138
     810:	ff 4f       	sbci	r31, 0xFF	; 255
     812:	e4 91       	lpm	r30, Z
     814:	ee 23       	and	r30, r30
     816:	d1 f0       	breq	.+52     	; 0x84c <_Z10draw_panelRhS_S_h+0xb6>
				matrix.drawPixel(x+j-2, y+i-2, matrix.Color333(7, 7, 7));
     818:	27 e0       	ldi	r18, 0x07	; 7
     81a:	47 e0       	ldi	r20, 0x07	; 7
     81c:	67 e0       	ldi	r22, 0x07	; 7
     81e:	8a e5       	ldi	r24, 0x5A	; 90
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN14RGBmatrixPanel8Color333Ehhh>
     826:	f4 01       	movw	r30, r8
     828:	20 81       	ld	r18, Z
     82a:	ae 01       	movw	r20, r28
     82c:	42 0f       	add	r20, r18
     82e:	51 1d       	adc	r21, r1
     830:	42 50       	subi	r20, 0x02	; 2
     832:	51 09       	sbc	r21, r1
     834:	f5 01       	movw	r30, r10
     836:	20 81       	ld	r18, Z
     838:	b8 01       	movw	r22, r16
     83a:	62 0f       	add	r22, r18
     83c:	71 1d       	adc	r23, r1
     83e:	62 50       	subi	r22, 0x02	; 2
     840:	71 09       	sbc	r23, r1
     842:	9c 01       	movw	r18, r24
     844:	8a e5       	ldi	r24, 0x5A	; 90
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <_ZN14RGBmatrixPanel9drawPixelEiij>
     84c:	0f 5f       	subi	r16, 0xFF	; 255
     84e:	1f 4f       	sbci	r17, 0xFF	; 255
}

void draw_panel(byte& x, byte& y, byte& frame, byte frm_delay) {
	if (++frame >= 4*frm_delay) frame = 0;
	for (byte i = 0; i < 5; ++i) {
		for (byte j = 0; j < 5; ++j) {
     850:	05 30       	cpi	r16, 0x05	; 5
     852:	11 05       	cpc	r17, r1
     854:	81 f6       	brne	.-96     	; 0x7f6 <_Z10draw_panelRhS_S_h+0x60>
     856:	21 96       	adiw	r28, 0x01	; 1
	}
}

void draw_panel(byte& x, byte& y, byte& frame, byte frm_delay) {
	if (++frame >= 4*frm_delay) frame = 0;
	for (byte i = 0; i < 5; ++i) {
     858:	c5 30       	cpi	r28, 0x05	; 5
     85a:	d1 05       	cpc	r29, r1
     85c:	29 f6       	brne	.-118    	; 0x7e8 <_Z10draw_panelRhS_S_h+0x52>
			if(pgm_read_byte(&(enm_panel[frame/frm_delay][i][j]))) {
				matrix.drawPixel(x+j-2, y+i-2, matrix.Color333(7, 7, 7));
			}
		}
	}
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	ff 90       	pop	r15
     868:	ef 90       	pop	r14
     86a:	df 90       	pop	r13
     86c:	cf 90       	pop	r12
     86e:	bf 90       	pop	r11
     870:	af 90       	pop	r10
     872:	9f 90       	pop	r9
     874:	8f 90       	pop	r8
     876:	7f 90       	pop	r7
     878:	6f 90       	pop	r6
     87a:	5f 90       	pop	r5
     87c:	08 95       	ret

0000087e <_Z16draw_explosion_lRhS_S_hR6Colors>:
			}
		}
	}
}

void draw_explosion_l(byte& x, byte& y, byte& frame, byte frm_delay, Colors& clr) {
     87e:	5f 92       	push	r5
     880:	6f 92       	push	r6
     882:	7f 92       	push	r7
     884:	8f 92       	push	r8
     886:	9f 92       	push	r9
     888:	af 92       	push	r10
     88a:	bf 92       	push	r11
     88c:	cf 92       	push	r12
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	6c 01       	movw	r12, r24
	if (frame >= 9*frm_delay-1) return;
     89e:	fa 01       	movw	r30, r20
     8a0:	90 81       	ld	r25, Z
     8a2:	a9 2f       	mov	r26, r25
     8a4:	b0 e0       	ldi	r27, 0x00	; 0
     8a6:	89 e0       	ldi	r24, 0x09	; 9
     8a8:	28 9f       	mul	r18, r24
     8aa:	f0 01       	movw	r30, r0
     8ac:	11 24       	eor	r1, r1
     8ae:	31 97       	sbiw	r30, 0x01	; 1
     8b0:	ae 17       	cp	r26, r30
     8b2:	bf 07       	cpc	r27, r31
     8b4:	0c f0       	brlt	.+2      	; 0x8b8 <_Z16draw_explosion_lRhS_S_hR6Colors+0x3a>
     8b6:	47 c0       	rjmp	.+142    	; 0x946 <__stack+0x47>
     8b8:	72 2e       	mov	r7, r18
     8ba:	7a 01       	movw	r14, r20
     8bc:	5b 01       	movw	r10, r22
	++frame;
     8be:	9f 5f       	subi	r25, 0xFF	; 255
     8c0:	fa 01       	movw	r30, r20
     8c2:	90 83       	st	Z, r25
     8c4:	c0 e0       	ldi	r28, 0x00	; 0
     8c6:	d0 e0       	ldi	r29, 0x00	; 0
	for (byte i = 0; i < 5; ++i) {
		for (byte j = 0; j < 5; ++j) {
			if(pgm_read_byte(&(bigger_explode[frame/frm_delay][i][j]))) {
     8c8:	89 e1       	ldi	r24, 0x19	; 25
     8ca:	58 2e       	mov	r5, r24
     8cc:	95 e0       	ldi	r25, 0x05	; 5
     8ce:	69 2e       	mov	r6, r25
			}
		}
	}
}

void draw_explosion_l(byte& x, byte& y, byte& frame, byte frm_delay, Colors& clr) {
     8d0:	00 e0       	ldi	r16, 0x00	; 0
     8d2:	10 e0       	ldi	r17, 0x00	; 0
	if (frame >= 9*frm_delay-1) return;
	++frame;
	for (byte i = 0; i < 5; ++i) {
		for (byte j = 0; j < 5; ++j) {
			if(pgm_read_byte(&(bigger_explode[frame/frm_delay][i][j]))) {
     8d4:	6c 9e       	mul	r6, r28
     8d6:	40 01       	movw	r8, r0
     8d8:	6d 9e       	mul	r6, r29
     8da:	90 0c       	add	r9, r0
     8dc:	11 24       	eor	r1, r1
     8de:	f7 01       	movw	r30, r14
     8e0:	80 81       	ld	r24, Z
     8e2:	67 2d       	mov	r22, r7
     8e4:	0e 94 b7 1c 	call	0x396e	; 0x396e <__udivmodqi4>
     8e8:	f4 01       	movw	r30, r8
     8ea:	58 9e       	mul	r5, r24
     8ec:	e0 0d       	add	r30, r0
     8ee:	f1 1d       	adc	r31, r1
     8f0:	11 24       	eor	r1, r1
     8f2:	e0 0f       	add	r30, r16
     8f4:	f1 1f       	adc	r31, r17
     8f6:	e6 52       	subi	r30, 0x26	; 38
     8f8:	ff 4f       	sbci	r31, 0xFF	; 255
     8fa:	e4 91       	lpm	r30, Z
     8fc:	ee 23       	and	r30, r30
     8fe:	d1 f0       	breq	.+52     	; 0x934 <__stack+0x35>
				matrix.drawPixel(x+j-2, y+i-2, matrix.Color333(5, 5, 5));
     900:	25 e0       	ldi	r18, 0x05	; 5
     902:	45 e0       	ldi	r20, 0x05	; 5
     904:	65 e0       	ldi	r22, 0x05	; 5
     906:	8a e5       	ldi	r24, 0x5A	; 90
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN14RGBmatrixPanel8Color333Ehhh>
     90e:	f5 01       	movw	r30, r10
     910:	20 81       	ld	r18, Z
     912:	ae 01       	movw	r20, r28
     914:	42 0f       	add	r20, r18
     916:	51 1d       	adc	r21, r1
     918:	42 50       	subi	r20, 0x02	; 2
     91a:	51 09       	sbc	r21, r1
     91c:	f6 01       	movw	r30, r12
     91e:	20 81       	ld	r18, Z
     920:	b8 01       	movw	r22, r16
     922:	62 0f       	add	r22, r18
     924:	71 1d       	adc	r23, r1
     926:	62 50       	subi	r22, 0x02	; 2
     928:	71 09       	sbc	r23, r1
     92a:	9c 01       	movw	r18, r24
     92c:	8a e5       	ldi	r24, 0x5A	; 90
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <_ZN14RGBmatrixPanel9drawPixelEiij>
     934:	0f 5f       	subi	r16, 0xFF	; 255
     936:	1f 4f       	sbci	r17, 0xFF	; 255

void draw_explosion_l(byte& x, byte& y, byte& frame, byte frm_delay, Colors& clr) {
	if (frame >= 9*frm_delay-1) return;
	++frame;
	for (byte i = 0; i < 5; ++i) {
		for (byte j = 0; j < 5; ++j) {
     938:	05 30       	cpi	r16, 0x05	; 5
     93a:	11 05       	cpc	r17, r1
     93c:	81 f6       	brne	.-96     	; 0x8de <_Z16draw_explosion_lRhS_S_hR6Colors+0x60>
     93e:	21 96       	adiw	r28, 0x01	; 1
}

void draw_explosion_l(byte& x, byte& y, byte& frame, byte frm_delay, Colors& clr) {
	if (frame >= 9*frm_delay-1) return;
	++frame;
	for (byte i = 0; i < 5; ++i) {
     940:	c5 30       	cpi	r28, 0x05	; 5
     942:	d1 05       	cpc	r29, r1
     944:	29 f6       	brne	.-118    	; 0x8d0 <_Z16draw_explosion_lRhS_S_hR6Colors+0x52>
			if(pgm_read_byte(&(bigger_explode[frame/frm_delay][i][j]))) {
				matrix.drawPixel(x+j-2, y+i-2, matrix.Color333(5, 5, 5));
			}
		}
	}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	df 90       	pop	r13
     954:	cf 90       	pop	r12
     956:	bf 90       	pop	r11
     958:	af 90       	pop	r10
     95a:	9f 90       	pop	r9
     95c:	8f 90       	pop	r8
     95e:	7f 90       	pop	r7
     960:	6f 90       	pop	r6
     962:	5f 90       	pop	r5
     964:	08 95       	ret

00000966 <_ZN8DirectorC1Ev>:
#include "Director.h"

Director::Director() {
     966:	cf 92       	push	r12
     968:	df 92       	push	r13
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	ec 01       	movw	r28, r24
     978:	8c 01       	movw	r16, r24
     97a:	0d 5f       	subi	r16, 0xFD	; 253
     97c:	1f 4f       	sbci	r17, 0xFF	; 255
     97e:	6c 01       	movw	r12, r24
     980:	8b e0       	ldi	r24, 0x0B	; 11
     982:	c8 0e       	add	r12, r24
     984:	d1 1c       	adc	r13, r1
	for (uint8_t i = 0; i < MAX_BULLETS; ++i){
		l[i] = new Laser;
     986:	8d e0       	ldi	r24, 0x0D	; 13
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <_Znwj>
     98e:	7c 01       	movw	r14, r24
     990:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN5LaserC1Ev>
     994:	f8 01       	movw	r30, r16
     996:	e1 92       	st	Z+, r14
     998:	f1 92       	st	Z+, r15
     99a:	8f 01       	movw	r16, r30
#include "Director.h"

Director::Director() {
	for (uint8_t i = 0; i < MAX_BULLETS; ++i){
     99c:	ec 15       	cp	r30, r12
     99e:	fd 05       	cpc	r31, r13
     9a0:	91 f7       	brne	.-28     	; 0x986 <_ZN8DirectorC1Ev+0x20>
		l[i] = new Laser;
	}
	state = Start;
     9a2:	1a 82       	std	Y+2, r1	; 0x02
}
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	df 90       	pop	r13
     9b2:	cf 90       	pop	r12
     9b4:	08 95       	ret

000009b6 <_ZN8Director9Chip_TimeEv>:
	
	if (++count % 8 == 0) count = 0;
}

void Director::Chip_Time() {
	if (count % 550 == 0) {
     9b6:	fc 01       	movw	r30, r24
     9b8:	80 81       	ld	r24, Z
     9ba:	91 81       	ldd	r25, Z+1	; 0x01
     9bc:	66 e2       	ldi	r22, 0x26	; 38
     9be:	72 e0       	ldi	r23, 0x02	; 2
     9c0:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodhi4>
     9c4:	89 2b       	or	r24, r25
     9c6:	29 f4       	brne	.+10     	; 0x9d2 <_ZN8Director9Chip_TimeEv+0x1c>
		usart.Signal_Event(ACTION);
     9c8:	65 e0       	ldi	r22, 0x05	; 5
     9ca:	89 e9       	ldi	r24, 0x99	; 153
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <_ZN7Signals12Signal_EventE6Events>
     9d2:	08 95       	ret

000009d4 <_ZN8Director13Level_ControlEv>:
uint16_t Director::Get_Count() {
	return count;
}

// x1, y1, x1, y1, thickness, exist time (note 75 is spent warning), color
void Director::Level_Control() {
     9d4:	4f 92       	push	r4
     9d6:	5f 92       	push	r5
     9d8:	6f 92       	push	r6
     9da:	7f 92       	push	r7
     9dc:	8f 92       	push	r8
     9de:	9f 92       	push	r9
     9e0:	af 92       	push	r10
     9e2:	cf 92       	push	r12
     9e4:	df 92       	push	r13
     9e6:	ef 92       	push	r14
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	ec 01       	movw	r28, r24
	// level goes here
	// values found on paint
	
	
	// initial laser
	if (count == 100) l[0]->Create(-1, 8, 32, 8, 5, 150, RED);
     9f2:	88 81       	ld	r24, Y
     9f4:	99 81       	ldd	r25, Y+1	; 0x01
     9f6:	84 36       	cpi	r24, 0x64	; 100
     9f8:	91 05       	cpc	r25, r1
     9fa:	99 f4       	brne	.+38     	; 0xa22 <_ZN8Director13Level_ControlEv+0x4e>
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	9c 81       	ldd	r25, Y+4	; 0x04
     a00:	dc 01       	movw	r26, r24
     a02:	ed 91       	ld	r30, X+
     a04:	fc 91       	ld	r31, X
     a06:	06 80       	ldd	r0, Z+6	; 0x06
     a08:	f7 81       	ldd	r31, Z+7	; 0x07
     a0a:	e0 2d       	mov	r30, r0
     a0c:	a1 2c       	mov	r10, r1
     a0e:	26 e9       	ldi	r18, 0x96	; 150
     a10:	c2 2e       	mov	r12, r18
     a12:	d1 2c       	mov	r13, r1
     a14:	35 e0       	ldi	r19, 0x05	; 5
     a16:	e3 2e       	mov	r14, r19
     a18:	08 e0       	ldi	r16, 0x08	; 8
     a1a:	20 e2       	ldi	r18, 0x20	; 32
     a1c:	48 e0       	ldi	r20, 0x08	; 8
     a1e:	6f ef       	ldi	r22, 0xFF	; 255
     a20:	09 95       	icall
	
	// consecutive lasers
	if (count >= 400 && count <= 800) {
     a22:	28 81       	ld	r18, Y
     a24:	39 81       	ldd	r19, Y+1	; 0x01
     a26:	c9 01       	movw	r24, r18
     a28:	80 59       	subi	r24, 0x90	; 144
     a2a:	91 40       	sbci	r25, 0x01	; 1
     a2c:	81 39       	cpi	r24, 0x91	; 145
     a2e:	91 40       	sbci	r25, 0x01	; 1
     a30:	08 f0       	brcs	.+2      	; 0xa34 <_ZN8Director13Level_ControlEv+0x60>
     a32:	81 c0       	rjmp	.+258    	; 0xb36 <_ZN8Director13Level_ControlEv+0x162>
		if (count % 110 == 0 && count % 220 != 0) {
     a34:	c9 01       	movw	r24, r18
     a36:	6e e6       	ldi	r22, 0x6E	; 110
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodhi4>
     a3e:	89 2b       	or	r24, r25
     a40:	d1 f5       	brne	.+116    	; 0xab6 <_ZN8Director13Level_ControlEv+0xe2>
     a42:	c9 01       	movw	r24, r18
     a44:	6c ed       	ldi	r22, 0xDC	; 220
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodhi4>
     a4c:	89 2b       	or	r24, r25
     a4e:	99 f1       	breq	.+102    	; 0xab6 <_ZN8Director13Level_ControlEv+0xe2>
			l[aux%4]->Create(0, random(0, 32), 32, random(0, 32), 3, 100, RED);
     a50:	8b 85       	ldd	r24, Y+11	; 0x0b
     a52:	83 70       	andi	r24, 0x03	; 3
     a54:	fe 01       	movw	r30, r28
     a56:	e8 0f       	add	r30, r24
     a58:	f1 1d       	adc	r31, r1
     a5a:	e8 0f       	add	r30, r24
     a5c:	f1 1d       	adc	r31, r1
     a5e:	03 80       	ldd	r0, Z+3	; 0x03
     a60:	f4 81       	ldd	r31, Z+4	; 0x04
     a62:	e0 2d       	mov	r30, r0
     a64:	01 90       	ld	r0, Z+
     a66:	f0 81       	ld	r31, Z
     a68:	e0 2d       	mov	r30, r0
     a6a:	46 80       	ldd	r4, Z+6	; 0x06
     a6c:	57 80       	ldd	r5, Z+7	; 0x07
     a6e:	20 e2       	ldi	r18, 0x20	; 32
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	cb 01       	movw	r24, r22
     a7c:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
     a80:	06 2f       	mov	r16, r22
     a82:	20 e2       	ldi	r18, 0x20	; 32
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	cb 01       	movw	r24, r22
     a90:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
     a94:	46 2f       	mov	r20, r22
     a96:	8b 85       	ldd	r24, Y+11	; 0x0b
     a98:	83 70       	andi	r24, 0x03	; 3
     a9a:	fe 01       	movw	r30, r28
     a9c:	e8 0f       	add	r30, r24
     a9e:	f1 1d       	adc	r31, r1
     aa0:	e8 0f       	add	r30, r24
     aa2:	f1 1d       	adc	r31, r1
     aa4:	a1 2c       	mov	r10, r1
     aa6:	84 e6       	ldi	r24, 0x64	; 100
     aa8:	c8 2e       	mov	r12, r24
     aaa:	d1 2c       	mov	r13, r1
     aac:	93 e0       	ldi	r25, 0x03	; 3
     aae:	e9 2e       	mov	r14, r25
     ab0:	20 e2       	ldi	r18, 0x20	; 32
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	39 c0       	rjmp	.+114    	; 0xb28 <_ZN8Director13Level_ControlEv+0x154>
			++aux;
		}
		else if (count % 220 == 0) {
     ab6:	c9 01       	movw	r24, r18
     ab8:	6c ed       	ldi	r22, 0xDC	; 220
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodhi4>
     ac0:	89 2b       	or	r24, r25
     ac2:	c9 f5       	brne	.+114    	; 0xb36 <_ZN8Director13Level_ControlEv+0x162>
			l[aux%4]->Create(random(0, 32), 0, random(0, 32), 32, 3, 100, RED);
     ac4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ac6:	83 70       	andi	r24, 0x03	; 3
     ac8:	fe 01       	movw	r30, r28
     aca:	e8 0f       	add	r30, r24
     acc:	f1 1d       	adc	r31, r1
     ace:	e8 0f       	add	r30, r24
     ad0:	f1 1d       	adc	r31, r1
     ad2:	03 80       	ldd	r0, Z+3	; 0x03
     ad4:	f4 81       	ldd	r31, Z+4	; 0x04
     ad6:	e0 2d       	mov	r30, r0
     ad8:	01 90       	ld	r0, Z+
     ada:	f0 81       	ld	r31, Z
     adc:	e0 2d       	mov	r30, r0
     ade:	46 80       	ldd	r4, Z+6	; 0x06
     ae0:	57 80       	ldd	r5, Z+7	; 0x07
     ae2:	20 e2       	ldi	r18, 0x20	; 32
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	40 e0       	ldi	r20, 0x00	; 0
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	cb 01       	movw	r24, r22
     af0:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
     af4:	16 2f       	mov	r17, r22
     af6:	20 e2       	ldi	r18, 0x20	; 32
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	cb 01       	movw	r24, r22
     b04:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
     b08:	8b 85       	ldd	r24, Y+11	; 0x0b
     b0a:	83 70       	andi	r24, 0x03	; 3
     b0c:	fe 01       	movw	r30, r28
     b0e:	e8 0f       	add	r30, r24
     b10:	f1 1d       	adc	r31, r1
     b12:	e8 0f       	add	r30, r24
     b14:	f1 1d       	adc	r31, r1
     b16:	a1 2c       	mov	r10, r1
     b18:	b4 e6       	ldi	r27, 0x64	; 100
     b1a:	cb 2e       	mov	r12, r27
     b1c:	d1 2c       	mov	r13, r1
     b1e:	03 e0       	ldi	r16, 0x03	; 3
     b20:	e0 2e       	mov	r14, r16
     b22:	00 e2       	ldi	r16, 0x20	; 32
     b24:	21 2f       	mov	r18, r17
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	83 81       	ldd	r24, Z+3	; 0x03
     b2a:	94 81       	ldd	r25, Z+4	; 0x04
     b2c:	f2 01       	movw	r30, r4
     b2e:	09 95       	icall
			++aux;
     b30:	8b 85       	ldd	r24, Y+11	; 0x0b
     b32:	8f 5f       	subi	r24, 0xFF	; 255
     b34:	8b 87       	std	Y+11, r24	; 0x0b
		}
	}
	// 3 cross lasers
	if (count == 1000) {
     b36:	88 81       	ld	r24, Y
     b38:	99 81       	ldd	r25, Y+1	; 0x01
     b3a:	88 3e       	cpi	r24, 0xE8	; 232
     b3c:	93 40       	sbci	r25, 0x03	; 3
     b3e:	01 f5       	brne	.+64     	; 0xb80 <_ZN8Director13Level_ControlEv+0x1ac>
		l[0]->Create(6, 0, 15, 32, 1, 100, RED);
     b40:	8b 81       	ldd	r24, Y+3	; 0x03
     b42:	9c 81       	ldd	r25, Y+4	; 0x04
     b44:	dc 01       	movw	r26, r24
     b46:	ed 91       	ld	r30, X+
     b48:	fc 91       	ld	r31, X
     b4a:	06 80       	ldd	r0, Z+6	; 0x06
     b4c:	f7 81       	ldd	r31, Z+7	; 0x07
     b4e:	e0 2d       	mov	r30, r0
     b50:	a1 2c       	mov	r10, r1
     b52:	a4 e6       	ldi	r26, 0x64	; 100
     b54:	ca 2e       	mov	r12, r26
     b56:	d1 2c       	mov	r13, r1
     b58:	ee 24       	eor	r14, r14
     b5a:	e3 94       	inc	r14
     b5c:	00 e2       	ldi	r16, 0x20	; 32
     b5e:	2f e0       	ldi	r18, 0x0F	; 15
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	66 e0       	ldi	r22, 0x06	; 6
     b64:	09 95       	icall
		l[1]->Create(0, 24, 31, 6, 1, 100, RED);
     b66:	8d 81       	ldd	r24, Y+5	; 0x05
     b68:	9e 81       	ldd	r25, Y+6	; 0x06
     b6a:	dc 01       	movw	r26, r24
     b6c:	ed 91       	ld	r30, X+
     b6e:	fc 91       	ld	r31, X
     b70:	06 80       	ldd	r0, Z+6	; 0x06
     b72:	f7 81       	ldd	r31, Z+7	; 0x07
     b74:	e0 2d       	mov	r30, r0
     b76:	06 e0       	ldi	r16, 0x06	; 6
     b78:	2f e1       	ldi	r18, 0x1F	; 31
     b7a:	48 e1       	ldi	r20, 0x18	; 24
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	09 95       	icall
	}
	if (count == 1200) {
     b80:	88 81       	ld	r24, Y
     b82:	99 81       	ldd	r25, Y+1	; 0x01
     b84:	80 3b       	cpi	r24, 0xB0	; 176
     b86:	94 40       	sbci	r25, 0x04	; 4
     b88:	29 f5       	brne	.+74     	; 0xbd4 <_ZN8Director13Level_ControlEv+0x200>
		l[1]->Deactivate();
     b8a:	8d 81       	ldd	r24, Y+5	; 0x05
     b8c:	9e 81       	ldd	r25, Y+6	; 0x06
     b8e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Laser10DeactivateEv>
		l[1]->Create(0, 15, 31, 21, 1, 100, YELLOW);
     b92:	8d 81       	ldd	r24, Y+5	; 0x05
     b94:	9e 81       	ldd	r25, Y+6	; 0x06
     b96:	dc 01       	movw	r26, r24
     b98:	ed 91       	ld	r30, X+
     b9a:	fc 91       	ld	r31, X
     b9c:	06 80       	ldd	r0, Z+6	; 0x06
     b9e:	f7 81       	ldd	r31, Z+7	; 0x07
     ba0:	e0 2d       	mov	r30, r0
     ba2:	62 e0       	ldi	r22, 0x02	; 2
     ba4:	a6 2e       	mov	r10, r22
     ba6:	74 e6       	ldi	r23, 0x64	; 100
     ba8:	c7 2e       	mov	r12, r23
     baa:	d1 2c       	mov	r13, r1
     bac:	ee 24       	eor	r14, r14
     bae:	e3 94       	inc	r14
     bb0:	05 e1       	ldi	r16, 0x15	; 21
     bb2:	2f e1       	ldi	r18, 0x1F	; 31
     bb4:	4f e0       	ldi	r20, 0x0F	; 15
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	09 95       	icall
		l[2]->Create(23, 0, 28, 31, 1, 100, YELLOW);
     bba:	8f 81       	ldd	r24, Y+7	; 0x07
     bbc:	98 85       	ldd	r25, Y+8	; 0x08
     bbe:	dc 01       	movw	r26, r24
     bc0:	ed 91       	ld	r30, X+
     bc2:	fc 91       	ld	r31, X
     bc4:	06 80       	ldd	r0, Z+6	; 0x06
     bc6:	f7 81       	ldd	r31, Z+7	; 0x07
     bc8:	e0 2d       	mov	r30, r0
     bca:	0f e1       	ldi	r16, 0x1F	; 31
     bcc:	2c e1       	ldi	r18, 0x1C	; 28
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	67 e1       	ldi	r22, 0x17	; 23
     bd2:	09 95       	icall
	}
	if (count == 1300) {
     bd4:	88 81       	ld	r24, Y
     bd6:	99 81       	ldd	r25, Y+1	; 0x01
     bd8:	84 31       	cpi	r24, 0x14	; 20
     bda:	95 40       	sbci	r25, 0x05	; 5
     bdc:	d1 f5       	brne	.+116    	; 0xc52 <_ZN8Director13Level_ControlEv+0x27e>
		l[0]->Deactivate();
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	9c 81       	ldd	r25, Y+4	; 0x04
     be2:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Laser10DeactivateEv>
		l[1]->Deactivate();
     be6:	8d 81       	ldd	r24, Y+5	; 0x05
     be8:	9e 81       	ldd	r25, Y+6	; 0x06
     bea:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Laser10DeactivateEv>
		l[2]->Deactivate();
     bee:	8f 81       	ldd	r24, Y+7	; 0x07
     bf0:	98 85       	ldd	r25, Y+8	; 0x08
     bf2:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Laser10DeactivateEv>
		
		l[0]->Create(0, 0, 31, 26, 1, 100, BLUE);
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	dc 01       	movw	r26, r24
     bfc:	ed 91       	ld	r30, X+
     bfe:	fc 91       	ld	r31, X
     c00:	06 80       	ldd	r0, Z+6	; 0x06
     c02:	f7 81       	ldd	r31, Z+7	; 0x07
     c04:	e0 2d       	mov	r30, r0
     c06:	45 e0       	ldi	r20, 0x05	; 5
     c08:	a4 2e       	mov	r10, r20
     c0a:	54 e6       	ldi	r21, 0x64	; 100
     c0c:	c5 2e       	mov	r12, r21
     c0e:	d1 2c       	mov	r13, r1
     c10:	ee 24       	eor	r14, r14
     c12:	e3 94       	inc	r14
     c14:	0a e1       	ldi	r16, 0x1A	; 26
     c16:	2f e1       	ldi	r18, 0x1F	; 31
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	09 95       	icall
		l[1]->Create(0, 29, 31, 11, 1, 100, BLUE);
     c1e:	8d 81       	ldd	r24, Y+5	; 0x05
     c20:	9e 81       	ldd	r25, Y+6	; 0x06
     c22:	dc 01       	movw	r26, r24
     c24:	ed 91       	ld	r30, X+
     c26:	fc 91       	ld	r31, X
     c28:	06 80       	ldd	r0, Z+6	; 0x06
     c2a:	f7 81       	ldd	r31, Z+7	; 0x07
     c2c:	e0 2d       	mov	r30, r0
     c2e:	0b e0       	ldi	r16, 0x0B	; 11
     c30:	2f e1       	ldi	r18, 0x1F	; 31
     c32:	4d e1       	ldi	r20, 0x1D	; 29
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	09 95       	icall
		l[2]->Create(18, 0, 22, 31, 1, 100, BLUE);
     c38:	8f 81       	ldd	r24, Y+7	; 0x07
     c3a:	98 85       	ldd	r25, Y+8	; 0x08
     c3c:	dc 01       	movw	r26, r24
     c3e:	ed 91       	ld	r30, X+
     c40:	fc 91       	ld	r31, X
     c42:	06 80       	ldd	r0, Z+6	; 0x06
     c44:	f7 81       	ldd	r31, Z+7	; 0x07
     c46:	e0 2d       	mov	r30, r0
     c48:	0f e1       	ldi	r16, 0x1F	; 31
     c4a:	26 e1       	ldi	r18, 0x16	; 22
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	62 e1       	ldi	r22, 0x12	; 18
     c50:	09 95       	icall
	}
	if (count == 1400) {
     c52:	88 81       	ld	r24, Y
     c54:	99 81       	ldd	r25, Y+1	; 0x01
     c56:	88 37       	cpi	r24, 0x78	; 120
     c58:	95 40       	sbci	r25, 0x05	; 5
     c5a:	d1 f5       	brne	.+116    	; 0xcd0 <_ZN8Director13Level_ControlEv+0x2fc>
		l[0]->Deactivate();
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	9c 81       	ldd	r25, Y+4	; 0x04
     c60:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Laser10DeactivateEv>
		l[1]->Deactivate();
     c64:	8d 81       	ldd	r24, Y+5	; 0x05
     c66:	9e 81       	ldd	r25, Y+6	; 0x06
     c68:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Laser10DeactivateEv>
		l[2]->Deactivate();
     c6c:	8f 81       	ldd	r24, Y+7	; 0x07
     c6e:	98 85       	ldd	r25, Y+8	; 0x08
     c70:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Laser10DeactivateEv>
		
		l[0]->Create(0, 25, 22, 0, 1, 100, GREEN);
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	9c 81       	ldd	r25, Y+4	; 0x04
     c78:	dc 01       	movw	r26, r24
     c7a:	ed 91       	ld	r30, X+
     c7c:	fc 91       	ld	r31, X
     c7e:	06 80       	ldd	r0, Z+6	; 0x06
     c80:	f7 81       	ldd	r31, Z+7	; 0x07
     c82:	e0 2d       	mov	r30, r0
     c84:	23 e0       	ldi	r18, 0x03	; 3
     c86:	a2 2e       	mov	r10, r18
     c88:	34 e6       	ldi	r19, 0x64	; 100
     c8a:	c3 2e       	mov	r12, r19
     c8c:	d1 2c       	mov	r13, r1
     c8e:	ee 24       	eor	r14, r14
     c90:	e3 94       	inc	r14
     c92:	00 e0       	ldi	r16, 0x00	; 0
     c94:	26 e1       	ldi	r18, 0x16	; 22
     c96:	49 e1       	ldi	r20, 0x19	; 25
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	09 95       	icall
		l[1]->Create(0, 12, 22, 32, 1, 100, GREEN);
     c9c:	8d 81       	ldd	r24, Y+5	; 0x05
     c9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ca0:	dc 01       	movw	r26, r24
     ca2:	ed 91       	ld	r30, X+
     ca4:	fc 91       	ld	r31, X
     ca6:	06 80       	ldd	r0, Z+6	; 0x06
     ca8:	f7 81       	ldd	r31, Z+7	; 0x07
     caa:	e0 2d       	mov	r30, r0
     cac:	00 e2       	ldi	r16, 0x20	; 32
     cae:	26 e1       	ldi	r18, 0x16	; 22
     cb0:	4c e0       	ldi	r20, 0x0C	; 12
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	09 95       	icall
		l[2]->Create(0, 3, 31, 11, 1, 100, GREEN);
     cb6:	8f 81       	ldd	r24, Y+7	; 0x07
     cb8:	98 85       	ldd	r25, Y+8	; 0x08
     cba:	dc 01       	movw	r26, r24
     cbc:	ed 91       	ld	r30, X+
     cbe:	fc 91       	ld	r31, X
     cc0:	06 80       	ldd	r0, Z+6	; 0x06
     cc2:	f7 81       	ldd	r31, Z+7	; 0x07
     cc4:	e0 2d       	mov	r30, r0
     cc6:	0b e0       	ldi	r16, 0x0B	; 11
     cc8:	2f e1       	ldi	r18, 0x1F	; 31
     cca:	43 e0       	ldi	r20, 0x03	; 3
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	09 95       	icall
	}
	
	// Repeater lasers
	if (count >= 1450 && count <= 2300) {
     cd0:	28 81       	ld	r18, Y
     cd2:	39 81       	ldd	r19, Y+1	; 0x01
     cd4:	c9 01       	movw	r24, r18
     cd6:	8a 5a       	subi	r24, 0xAA	; 170
     cd8:	95 40       	sbci	r25, 0x05	; 5
     cda:	83 35       	cpi	r24, 0x53	; 83
     cdc:	93 40       	sbci	r25, 0x03	; 3
     cde:	08 f0       	brcs	.+2      	; 0xce2 <_ZN8Director13Level_ControlEv+0x30e>
     ce0:	95 c0       	rjmp	.+298    	; 0xe0c <_ZN8Director13Level_ControlEv+0x438>
		if (count % 60 == 0 && count % 120 != 0) {
     ce2:	c9 01       	movw	r24, r18
     ce4:	6c e3       	ldi	r22, 0x3C	; 60
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodhi4>
     cec:	89 2b       	or	r24, r25
     cee:	09 f0       	breq	.+2      	; 0xcf2 <_ZN8Director13Level_ControlEv+0x31e>
     cf0:	43 c0       	rjmp	.+134    	; 0xd78 <_ZN8Director13Level_ControlEv+0x3a4>
     cf2:	c9 01       	movw	r24, r18
     cf4:	68 e7       	ldi	r22, 0x78	; 120
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodhi4>
     cfc:	89 2b       	or	r24, r25
     cfe:	e1 f1       	breq	.+120    	; 0xd78 <_ZN8Director13Level_ControlEv+0x3a4>
			l[aux%4]->Create(0, random(0, 32), 32, random(0, 32), 1, 100, static_cast<Colors>(random(0, 7)));
     d00:	8b 85       	ldd	r24, Y+11	; 0x0b
     d02:	83 70       	andi	r24, 0x03	; 3
     d04:	fe 01       	movw	r30, r28
     d06:	e8 0f       	add	r30, r24
     d08:	f1 1d       	adc	r31, r1
     d0a:	e8 0f       	add	r30, r24
     d0c:	f1 1d       	adc	r31, r1
     d0e:	03 80       	ldd	r0, Z+3	; 0x03
     d10:	f4 81       	ldd	r31, Z+4	; 0x04
     d12:	e0 2d       	mov	r30, r0
     d14:	01 90       	ld	r0, Z+
     d16:	f0 81       	ld	r31, Z
     d18:	e0 2d       	mov	r30, r0
     d1a:	46 80       	ldd	r4, Z+6	; 0x06
     d1c:	57 80       	ldd	r5, Z+7	; 0x07
     d1e:	27 e0       	ldi	r18, 0x07	; 7
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	cb 01       	movw	r24, r22
     d2c:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
     d30:	a6 2e       	mov	r10, r22
     d32:	20 e2       	ldi	r18, 0x20	; 32
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	cb 01       	movw	r24, r22
     d40:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
     d44:	06 2f       	mov	r16, r22
     d46:	20 e2       	ldi	r18, 0x20	; 32
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	cb 01       	movw	r24, r22
     d54:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
     d58:	46 2f       	mov	r20, r22
     d5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d5c:	83 70       	andi	r24, 0x03	; 3
     d5e:	fe 01       	movw	r30, r28
     d60:	e8 0f       	add	r30, r24
     d62:	f1 1d       	adc	r31, r1
     d64:	e8 0f       	add	r30, r24
     d66:	f1 1d       	adc	r31, r1
     d68:	84 e6       	ldi	r24, 0x64	; 100
     d6a:	c8 2e       	mov	r12, r24
     d6c:	d1 2c       	mov	r13, r1
     d6e:	ee 24       	eor	r14, r14
     d70:	e3 94       	inc	r14
     d72:	20 e2       	ldi	r18, 0x20	; 32
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	43 c0       	rjmp	.+134    	; 0xdfe <_ZN8Director13Level_ControlEv+0x42a>
			++aux;
		}
		else if (count % 120 == 0) {
     d78:	c9 01       	movw	r24, r18
     d7a:	68 e7       	ldi	r22, 0x78	; 120
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodhi4>
     d82:	89 2b       	or	r24, r25
     d84:	09 f0       	breq	.+2      	; 0xd88 <_ZN8Director13Level_ControlEv+0x3b4>
     d86:	42 c0       	rjmp	.+132    	; 0xe0c <_ZN8Director13Level_ControlEv+0x438>
			l[aux%4]->Create(random(0, 32), 0, random(0, 32), 32, 1, 100, static_cast<Colors>(random(0, 7)));
     d88:	8b 85       	ldd	r24, Y+11	; 0x0b
     d8a:	83 70       	andi	r24, 0x03	; 3
     d8c:	fe 01       	movw	r30, r28
     d8e:	e8 0f       	add	r30, r24
     d90:	f1 1d       	adc	r31, r1
     d92:	e8 0f       	add	r30, r24
     d94:	f1 1d       	adc	r31, r1
     d96:	03 80       	ldd	r0, Z+3	; 0x03
     d98:	f4 81       	ldd	r31, Z+4	; 0x04
     d9a:	e0 2d       	mov	r30, r0
     d9c:	01 90       	ld	r0, Z+
     d9e:	f0 81       	ld	r31, Z
     da0:	e0 2d       	mov	r30, r0
     da2:	46 80       	ldd	r4, Z+6	; 0x06
     da4:	57 80       	ldd	r5, Z+7	; 0x07
     da6:	27 e0       	ldi	r18, 0x07	; 7
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 e0       	ldi	r20, 0x00	; 0
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	cb 01       	movw	r24, r22
     db4:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
     db8:	a6 2e       	mov	r10, r22
     dba:	20 e2       	ldi	r18, 0x20	; 32
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e0       	ldi	r20, 0x00	; 0
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	cb 01       	movw	r24, r22
     dc8:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
     dcc:	16 2f       	mov	r17, r22
     dce:	20 e2       	ldi	r18, 0x20	; 32
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	cb 01       	movw	r24, r22
     ddc:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
     de0:	8b 85       	ldd	r24, Y+11	; 0x0b
     de2:	83 70       	andi	r24, 0x03	; 3
     de4:	fe 01       	movw	r30, r28
     de6:	e8 0f       	add	r30, r24
     de8:	f1 1d       	adc	r31, r1
     dea:	e8 0f       	add	r30, r24
     dec:	f1 1d       	adc	r31, r1
     dee:	04 e6       	ldi	r16, 0x64	; 100
     df0:	c0 2e       	mov	r12, r16
     df2:	d1 2c       	mov	r13, r1
     df4:	ee 24       	eor	r14, r14
     df6:	e3 94       	inc	r14
     df8:	00 e2       	ldi	r16, 0x20	; 32
     dfa:	21 2f       	mov	r18, r17
     dfc:	40 e0       	ldi	r20, 0x00	; 0
     dfe:	83 81       	ldd	r24, Z+3	; 0x03
     e00:	94 81       	ldd	r25, Z+4	; 0x04
     e02:	f2 01       	movw	r30, r4
     e04:	09 95       	icall
			++aux;
     e06:	8b 85       	ldd	r24, Y+11	; 0x0b
     e08:	8f 5f       	subi	r24, 0xFF	; 255
     e0a:	8b 87       	std	Y+11, r24	; 0x0b
		}
	}
	
	// left wall enclose laser + a couple others
	if (count == 2300) {
     e0c:	88 81       	ld	r24, Y
     e0e:	99 81       	ldd	r25, Y+1	; 0x01
     e10:	8c 3f       	cpi	r24, 0xFC	; 252
     e12:	98 40       	sbci	r25, 0x08	; 8
     e14:	c9 f4       	brne	.+50     	; 0xe48 <_ZN8Director13Level_ControlEv+0x474>
		l[3]->Deactivate();
     e16:	89 85       	ldd	r24, Y+9	; 0x09
     e18:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Laser10DeactivateEv>
		l[3]->Create(30, 0, 30, 32, 3, 700, RED);
     e1e:	89 85       	ldd	r24, Y+9	; 0x09
     e20:	9a 85       	ldd	r25, Y+10	; 0x0a
     e22:	dc 01       	movw	r26, r24
     e24:	ed 91       	ld	r30, X+
     e26:	fc 91       	ld	r31, X
     e28:	06 80       	ldd	r0, Z+6	; 0x06
     e2a:	f7 81       	ldd	r31, Z+7	; 0x07
     e2c:	e0 2d       	mov	r30, r0
     e2e:	a1 2c       	mov	r10, r1
     e30:	ac eb       	ldi	r26, 0xBC	; 188
     e32:	ca 2e       	mov	r12, r26
     e34:	a2 e0       	ldi	r26, 0x02	; 2
     e36:	da 2e       	mov	r13, r26
     e38:	b3 e0       	ldi	r27, 0x03	; 3
     e3a:	eb 2e       	mov	r14, r27
     e3c:	00 e2       	ldi	r16, 0x20	; 32
     e3e:	2e e1       	ldi	r18, 0x1E	; 30
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	6e e1       	ldi	r22, 0x1E	; 30
     e44:	09 95       	icall
		aux = 0;
     e46:	1b 86       	std	Y+11, r1	; 0x0b
	}
	if (count >= 2350 && count <= 3200) {
     e48:	88 81       	ld	r24, Y
     e4a:	99 81       	ldd	r25, Y+1	; 0x01
     e4c:	9c 01       	movw	r18, r24
     e4e:	2e 52       	subi	r18, 0x2E	; 46
     e50:	39 40       	sbci	r19, 0x09	; 9
     e52:	23 35       	cpi	r18, 0x53	; 83
     e54:	33 40       	sbci	r19, 0x03	; 3
     e56:	08 f0       	brcs	.+2      	; 0xe5a <_ZN8Director13Level_ControlEv+0x486>
     e58:	63 c0       	rjmp	.+198    	; 0xf20 <_ZN8Director13Level_ControlEv+0x54c>
		if (count % 60 == 0) {
     e5a:	6c e3       	ldi	r22, 0x3C	; 60
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodhi4>
     e62:	89 2b       	or	r24, r25
     e64:	09 f0       	breq	.+2      	; 0xe68 <_ZN8Director13Level_ControlEv+0x494>
     e66:	4a c0       	rjmp	.+148    	; 0xefc <_ZN8Director13Level_ControlEv+0x528>
			l[aux%2]->Create(0, random(0, 32), 32, random(0, 32), 1, 100, static_cast<Colors>(random(0, 7)));
     e68:	8b 85       	ldd	r24, Y+11	; 0x0b
     e6a:	80 fb       	bst	r24, 0
     e6c:	66 24       	eor	r6, r6
     e6e:	60 f8       	bld	r6, 0
     e70:	71 2c       	mov	r7, r1
     e72:	66 0c       	add	r6, r6
     e74:	77 1c       	adc	r7, r7
     e76:	fe 01       	movw	r30, r28
     e78:	e6 0d       	add	r30, r6
     e7a:	f7 1d       	adc	r31, r7
     e7c:	03 80       	ldd	r0, Z+3	; 0x03
     e7e:	f4 81       	ldd	r31, Z+4	; 0x04
     e80:	e0 2d       	mov	r30, r0
     e82:	01 90       	ld	r0, Z+
     e84:	f0 81       	ld	r31, Z
     e86:	e0 2d       	mov	r30, r0
     e88:	66 80       	ldd	r6, Z+6	; 0x06
     e8a:	77 80       	ldd	r7, Z+7	; 0x07
     e8c:	27 e0       	ldi	r18, 0x07	; 7
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	40 e0       	ldi	r20, 0x00	; 0
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	cb 01       	movw	r24, r22
     e9a:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
     e9e:	a6 2e       	mov	r10, r22
     ea0:	20 e2       	ldi	r18, 0x20	; 32
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	cb 01       	movw	r24, r22
     eae:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
     eb2:	06 2f       	mov	r16, r22
     eb4:	20 e2       	ldi	r18, 0x20	; 32
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	cb 01       	movw	r24, r22
     ec2:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
     ec6:	46 2f       	mov	r20, r22
     ec8:	8b 85       	ldd	r24, Y+11	; 0x0b
     eca:	80 fb       	bst	r24, 0
     ecc:	88 24       	eor	r8, r8
     ece:	80 f8       	bld	r8, 0
     ed0:	91 2c       	mov	r9, r1
     ed2:	88 0c       	add	r8, r8
     ed4:	99 1c       	adc	r9, r9
     ed6:	de 01       	movw	r26, r28
     ed8:	a8 0d       	add	r26, r8
     eda:	b9 1d       	adc	r27, r9
     edc:	74 e6       	ldi	r23, 0x64	; 100
     ede:	c7 2e       	mov	r12, r23
     ee0:	d1 2c       	mov	r13, r1
     ee2:	ee 24       	eor	r14, r14
     ee4:	e3 94       	inc	r14
     ee6:	20 e2       	ldi	r18, 0x20	; 32
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	13 96       	adiw	r26, 0x03	; 3
     eec:	8d 91       	ld	r24, X+
     eee:	9c 91       	ld	r25, X
     ef0:	14 97       	sbiw	r26, 0x04	; 4
     ef2:	f3 01       	movw	r30, r6
     ef4:	09 95       	icall
			++aux;
     ef6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ef8:	8f 5f       	subi	r24, 0xFF	; 255
     efa:	8b 87       	std	Y+11, r24	; 0x0b
		}
		if (count % 30 == 0) {
     efc:	88 81       	ld	r24, Y
     efe:	99 81       	ldd	r25, Y+1	; 0x01
     f00:	6e e1       	ldi	r22, 0x1E	; 30
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodhi4>
     f08:	89 2b       	or	r24, r25
     f0a:	51 f4       	brne	.+20     	; 0xf20 <_ZN8Director13Level_ControlEv+0x54c>
			l[3]->Shift_X0(-1);
     f0c:	6f ef       	ldi	r22, 0xFF	; 255
     f0e:	89 85       	ldd	r24, Y+9	; 0x09
     f10:	9a 85       	ldd	r25, Y+10	; 0x0a
     f12:	0e 94 6f 0b 	call	0x16de	; 0x16de <_ZN5Laser8Shift_X0Ea>
			l[3]->Shift_X1(-1);
     f16:	6f ef       	ldi	r22, 0xFF	; 255
     f18:	89 85       	ldd	r24, Y+9	; 0x09
     f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN5Laser8Shift_X1Ea>
		}
	}
	
	// Shifter lasers
	
	if (count == 3400) {
     f20:	88 81       	ld	r24, Y
     f22:	99 81       	ldd	r25, Y+1	; 0x01
     f24:	88 34       	cpi	r24, 0x48	; 72
     f26:	9d 40       	sbci	r25, 0x0D	; 13
     f28:	29 f5       	brne	.+74     	; 0xf74 <_ZN8Director13Level_ControlEv+0x5a0>
		for (aux = 0; aux < MAX_BULLETS; ++aux) {
     f2a:	1b 86       	std	Y+11, r1	; 0x0b
     f2c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f2e:	84 30       	cpi	r24, 0x04	; 4
     f30:	68 f4       	brcc	.+26     	; 0xf4c <_ZN8Director13Level_ControlEv+0x578>
			l[aux]->Deactivate();
     f32:	fe 01       	movw	r30, r28
     f34:	e8 0f       	add	r30, r24
     f36:	f1 1d       	adc	r31, r1
     f38:	e8 0f       	add	r30, r24
     f3a:	f1 1d       	adc	r31, r1
     f3c:	83 81       	ldd	r24, Z+3	; 0x03
     f3e:	94 81       	ldd	r25, Z+4	; 0x04
     f40:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Laser10DeactivateEv>
	}
	
	// Shifter lasers
	
	if (count == 3400) {
		for (aux = 0; aux < MAX_BULLETS; ++aux) {
     f44:	8b 85       	ldd	r24, Y+11	; 0x0b
     f46:	8f 5f       	subi	r24, 0xFF	; 255
     f48:	8b 87       	std	Y+11, r24	; 0x0b
     f4a:	f0 cf       	rjmp	.-32     	; 0xf2c <_ZN8Director13Level_ControlEv+0x558>
			l[aux]->Deactivate();
		}
		l[0]->Create(0, 15, 32, 0, 1, 700, RED);
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	9c 81       	ldd	r25, Y+4	; 0x04
     f50:	dc 01       	movw	r26, r24
     f52:	ed 91       	ld	r30, X+
     f54:	fc 91       	ld	r31, X
     f56:	06 80       	ldd	r0, Z+6	; 0x06
     f58:	f7 81       	ldd	r31, Z+7	; 0x07
     f5a:	e0 2d       	mov	r30, r0
     f5c:	a1 2c       	mov	r10, r1
     f5e:	4c eb       	ldi	r20, 0xBC	; 188
     f60:	c4 2e       	mov	r12, r20
     f62:	42 e0       	ldi	r20, 0x02	; 2
     f64:	d4 2e       	mov	r13, r20
     f66:	ee 24       	eor	r14, r14
     f68:	e3 94       	inc	r14
     f6a:	00 e0       	ldi	r16, 0x00	; 0
     f6c:	20 e2       	ldi	r18, 0x20	; 32
     f6e:	4f e0       	ldi	r20, 0x0F	; 15
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	09 95       	icall
	}
	if (count == 3475) l[0]->Start_Rotate();
     f74:	88 81       	ld	r24, Y
     f76:	99 81       	ldd	r25, Y+1	; 0x01
     f78:	83 39       	cpi	r24, 0x93	; 147
     f7a:	9d 40       	sbci	r25, 0x0D	; 13
     f7c:	21 f4       	brne	.+8      	; 0xf86 <_ZN8Director13Level_ControlEv+0x5b2>
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <_ZN5Laser12Start_RotateEv>
	if (count == 4200) {
     f86:	88 81       	ld	r24, Y
     f88:	99 81       	ldd	r25, Y+1	; 0x01
     f8a:	88 36       	cpi	r24, 0x68	; 104
     f8c:	90 41       	sbci	r25, 0x10	; 16
     f8e:	49 f5       	brne	.+82     	; 0xfe2 <_ZN8Director13Level_ControlEv+0x60e>
		l[0]->Deactivate();
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Laser10DeactivateEv>
		l[0]->Create(0, 8, 32, 8, 1, 700, RED);
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	9c 81       	ldd	r25, Y+4	; 0x04
     f9c:	dc 01       	movw	r26, r24
     f9e:	ed 91       	ld	r30, X+
     fa0:	fc 91       	ld	r31, X
     fa2:	06 80       	ldd	r0, Z+6	; 0x06
     fa4:	f7 81       	ldd	r31, Z+7	; 0x07
     fa6:	e0 2d       	mov	r30, r0
     fa8:	a1 2c       	mov	r10, r1
     faa:	3c eb       	ldi	r19, 0xBC	; 188
     fac:	c3 2e       	mov	r12, r19
     fae:	32 e0       	ldi	r19, 0x02	; 2
     fb0:	d3 2e       	mov	r13, r19
     fb2:	ee 24       	eor	r14, r14
     fb4:	e3 94       	inc	r14
     fb6:	08 e0       	ldi	r16, 0x08	; 8
     fb8:	20 e2       	ldi	r18, 0x20	; 32
     fba:	48 e0       	ldi	r20, 0x08	; 8
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	09 95       	icall
		l[1]->Deactivate();
     fc0:	8d 81       	ldd	r24, Y+5	; 0x05
     fc2:	9e 81       	ldd	r25, Y+6	; 0x06
     fc4:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Laser10DeactivateEv>
		l[1]->Create(0, 24, 32, 24, 1, 700, RED);
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9e 81       	ldd	r25, Y+6	; 0x06
     fcc:	dc 01       	movw	r26, r24
     fce:	ed 91       	ld	r30, X+
     fd0:	fc 91       	ld	r31, X
     fd2:	06 80       	ldd	r0, Z+6	; 0x06
     fd4:	f7 81       	ldd	r31, Z+7	; 0x07
     fd6:	e0 2d       	mov	r30, r0
     fd8:	08 e1       	ldi	r16, 0x18	; 24
     fda:	20 e2       	ldi	r18, 0x20	; 32
     fdc:	48 e1       	ldi	r20, 0x18	; 24
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	09 95       	icall
	}
	if (count == 4275) {
     fe2:	88 81       	ld	r24, Y
     fe4:	99 81       	ldd	r25, Y+1	; 0x01
     fe6:	83 3b       	cpi	r24, 0xB3	; 179
     fe8:	90 41       	sbci	r25, 0x10	; 16
     fea:	41 f4       	brne	.+16     	; 0xffc <_ZN8Director13Level_ControlEv+0x628>
		l[0]->Start_Rotate();
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	9c 81       	ldd	r25, Y+4	; 0x04
     ff0:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <_ZN5Laser12Start_RotateEv>
		l[1]->Start_Rotate();
     ff4:	8d 81       	ldd	r24, Y+5	; 0x05
     ff6:	9e 81       	ldd	r25, Y+6	; 0x06
     ff8:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <_ZN5Laser12Start_RotateEv>
	}
	if (count == 5000) {
     ffc:	88 81       	ld	r24, Y
     ffe:	99 81       	ldd	r25, Y+1	; 0x01
    1000:	88 38       	cpi	r24, 0x88	; 136
    1002:	93 41       	sbci	r25, 0x13	; 19
    1004:	09 f0       	breq	.+2      	; 0x1008 <_ZN8Director13Level_ControlEv+0x634>
    1006:	3f c0       	rjmp	.+126    	; 0x1086 <_ZN8Director13Level_ControlEv+0x6b2>
		for (aux = 0; aux < MAX_BULLETS; ++aux) {
    1008:	1b 86       	std	Y+11, r1	; 0x0b
    100a:	8b 85       	ldd	r24, Y+11	; 0x0b
    100c:	84 30       	cpi	r24, 0x04	; 4
    100e:	68 f4       	brcc	.+26     	; 0x102a <_ZN8Director13Level_ControlEv+0x656>
			l[aux]->Deactivate();
    1010:	fe 01       	movw	r30, r28
    1012:	e8 0f       	add	r30, r24
    1014:	f1 1d       	adc	r31, r1
    1016:	e8 0f       	add	r30, r24
    1018:	f1 1d       	adc	r31, r1
    101a:	83 81       	ldd	r24, Z+3	; 0x03
    101c:	94 81       	ldd	r25, Z+4	; 0x04
    101e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Laser10DeactivateEv>
	if (count == 4275) {
		l[0]->Start_Rotate();
		l[1]->Start_Rotate();
	}
	if (count == 5000) {
		for (aux = 0; aux < MAX_BULLETS; ++aux) {
    1022:	8b 85       	ldd	r24, Y+11	; 0x0b
    1024:	8f 5f       	subi	r24, 0xFF	; 255
    1026:	8b 87       	std	Y+11, r24	; 0x0b
    1028:	f0 cf       	rjmp	.-32     	; 0x100a <_ZN8Director13Level_ControlEv+0x636>
			l[aux]->Deactivate();
		}
		l[0]->Create(0, 15, 26, 0, 1, 1400, RED);
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	dc 01       	movw	r26, r24
    1030:	ed 91       	ld	r30, X+
    1032:	fc 91       	ld	r31, X
    1034:	06 80       	ldd	r0, Z+6	; 0x06
    1036:	f7 81       	ldd	r31, Z+7	; 0x07
    1038:	e0 2d       	mov	r30, r0
    103a:	a1 2c       	mov	r10, r1
    103c:	28 e7       	ldi	r18, 0x78	; 120
    103e:	c2 2e       	mov	r12, r18
    1040:	25 e0       	ldi	r18, 0x05	; 5
    1042:	d2 2e       	mov	r13, r18
    1044:	ee 24       	eor	r14, r14
    1046:	e3 94       	inc	r14
    1048:	00 e0       	ldi	r16, 0x00	; 0
    104a:	2a e1       	ldi	r18, 0x1A	; 26
    104c:	4f e0       	ldi	r20, 0x0F	; 15
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	09 95       	icall
		l[1]->Create(26, 0, 26, 32, 1, 1400, RED);
    1052:	8d 81       	ldd	r24, Y+5	; 0x05
    1054:	9e 81       	ldd	r25, Y+6	; 0x06
    1056:	dc 01       	movw	r26, r24
    1058:	ed 91       	ld	r30, X+
    105a:	fc 91       	ld	r31, X
    105c:	06 80       	ldd	r0, Z+6	; 0x06
    105e:	f7 81       	ldd	r31, Z+7	; 0x07
    1060:	e0 2d       	mov	r30, r0
    1062:	00 e2       	ldi	r16, 0x20	; 32
    1064:	2a e1       	ldi	r18, 0x1A	; 26
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	6a e1       	ldi	r22, 0x1A	; 26
    106a:	09 95       	icall
		l[2]->Create(26, 32, 0, 15, 1, 1400, RED);
    106c:	8f 81       	ldd	r24, Y+7	; 0x07
    106e:	98 85       	ldd	r25, Y+8	; 0x08
    1070:	dc 01       	movw	r26, r24
    1072:	ed 91       	ld	r30, X+
    1074:	fc 91       	ld	r31, X
    1076:	06 80       	ldd	r0, Z+6	; 0x06
    1078:	f7 81       	ldd	r31, Z+7	; 0x07
    107a:	e0 2d       	mov	r30, r0
    107c:	0f e0       	ldi	r16, 0x0F	; 15
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	40 e2       	ldi	r20, 0x20	; 32
    1082:	6a e1       	ldi	r22, 0x1A	; 26
    1084:	09 95       	icall
	}
	if (count == 5075) {
    1086:	88 81       	ld	r24, Y
    1088:	99 81       	ldd	r25, Y+1	; 0x01
    108a:	83 3d       	cpi	r24, 0xD3	; 211
    108c:	93 41       	sbci	r25, 0x13	; 19
    108e:	61 f4       	brne	.+24     	; 0x10a8 <_ZN8Director13Level_ControlEv+0x6d4>
		l[0]->Start_Rotate();
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	9c 81       	ldd	r25, Y+4	; 0x04
    1094:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <_ZN5Laser12Start_RotateEv>
		l[1]->Start_Rotate();
    1098:	8d 81       	ldd	r24, Y+5	; 0x05
    109a:	9e 81       	ldd	r25, Y+6	; 0x06
    109c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <_ZN5Laser12Start_RotateEv>
		l[2]->Start_Rotate();
    10a0:	8f 81       	ldd	r24, Y+7	; 0x07
    10a2:	98 85       	ldd	r25, Y+8	; 0x08
    10a4:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <_ZN5Laser12Start_RotateEv>
	}
	if (count >= 3600 && count <= 6400) {
    10a8:	28 81       	ld	r18, Y
    10aa:	39 81       	ldd	r19, Y+1	; 0x01
    10ac:	c9 01       	movw	r24, r18
    10ae:	80 51       	subi	r24, 0x10	; 16
    10b0:	9e 40       	sbci	r25, 0x0E	; 14
    10b2:	81 3f       	cpi	r24, 0xF1	; 241
    10b4:	9a 40       	sbci	r25, 0x0A	; 10
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <_ZN8Director13Level_ControlEv+0x6e6>
    10b8:	ac c0       	rjmp	.+344    	; 0x1212 <_ZN8Director13Level_ControlEv+0x83e>
		if (count % 80 == 0 && count % 160 != 0) {
    10ba:	c9 01       	movw	r24, r18
    10bc:	60 e5       	ldi	r22, 0x50	; 80
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodhi4>
    10c4:	89 2b       	or	r24, r25
    10c6:	09 f0       	breq	.+2      	; 0x10ca <_ZN8Director13Level_ControlEv+0x6f6>
    10c8:	52 c0       	rjmp	.+164    	; 0x116e <_ZN8Director13Level_ControlEv+0x79a>
    10ca:	c9 01       	movw	r24, r18
    10cc:	60 ea       	ldi	r22, 0xA0	; 160
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodhi4>
    10d4:	89 2b       	or	r24, r25
    10d6:	09 f4       	brne	.+2      	; 0x10da <_ZN8Director13Level_ControlEv+0x706>
    10d8:	4a c0       	rjmp	.+148    	; 0x116e <_ZN8Director13Level_ControlEv+0x79a>
			for(aux = 0; aux < 4; ++aux) {
    10da:	1b 86       	std	Y+11, r1	; 0x0b
    10dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    10de:	84 30       	cpi	r24, 0x04	; 4
    10e0:	08 f0       	brcs	.+2      	; 0x10e4 <_ZN8Director13Level_ControlEv+0x710>
    10e2:	97 c0       	rjmp	.+302    	; 0x1212 <_ZN8Director13Level_ControlEv+0x83e>
				if (l[aux%4]->Create(0, random(0, 32), 32, random(0, 32), 1, 75, static_cast<Colors>(random(0, 7)))) {
    10e4:	fe 01       	movw	r30, r28
    10e6:	e8 0f       	add	r30, r24
    10e8:	f1 1d       	adc	r31, r1
    10ea:	e8 0f       	add	r30, r24
    10ec:	f1 1d       	adc	r31, r1
    10ee:	03 80       	ldd	r0, Z+3	; 0x03
    10f0:	f4 81       	ldd	r31, Z+4	; 0x04
    10f2:	e0 2d       	mov	r30, r0
    10f4:	01 90       	ld	r0, Z+
    10f6:	f0 81       	ld	r31, Z
    10f8:	e0 2d       	mov	r30, r0
    10fa:	86 80       	ldd	r8, Z+6	; 0x06
    10fc:	97 80       	ldd	r9, Z+7	; 0x07
    10fe:	27 e0       	ldi	r18, 0x07	; 7
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	cb 01       	movw	r24, r22
    110c:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
    1110:	a6 2e       	mov	r10, r22
    1112:	20 e2       	ldi	r18, 0x20	; 32
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	cb 01       	movw	r24, r22
    1120:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
    1124:	06 2f       	mov	r16, r22
    1126:	20 e2       	ldi	r18, 0x20	; 32
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	cb 01       	movw	r24, r22
    1134:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
    1138:	46 2f       	mov	r20, r22
    113a:	9b 85       	ldd	r25, Y+11	; 0x0b
    113c:	93 70       	andi	r25, 0x03	; 3
    113e:	de 01       	movw	r26, r28
    1140:	a9 0f       	add	r26, r25
    1142:	b1 1d       	adc	r27, r1
    1144:	a9 0f       	add	r26, r25
    1146:	b1 1d       	adc	r27, r1
    1148:	9b e4       	ldi	r25, 0x4B	; 75
    114a:	c9 2e       	mov	r12, r25
    114c:	d1 2c       	mov	r13, r1
    114e:	ee 24       	eor	r14, r14
    1150:	e3 94       	inc	r14
    1152:	20 e2       	ldi	r18, 0x20	; 32
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	13 96       	adiw	r26, 0x03	; 3
    1158:	8d 91       	ld	r24, X+
    115a:	9c 91       	ld	r25, X
    115c:	14 97       	sbiw	r26, 0x04	; 4
    115e:	f4 01       	movw	r30, r8
    1160:	09 95       	icall
    1162:	81 11       	cpse	r24, r1
    1164:	56 c0       	rjmp	.+172    	; 0x1212 <_ZN8Director13Level_ControlEv+0x83e>
		l[1]->Start_Rotate();
		l[2]->Start_Rotate();
	}
	if (count >= 3600 && count <= 6400) {
		if (count % 80 == 0 && count % 160 != 0) {
			for(aux = 0; aux < 4; ++aux) {
    1166:	8b 85       	ldd	r24, Y+11	; 0x0b
    1168:	8f 5f       	subi	r24, 0xFF	; 255
    116a:	8b 87       	std	Y+11, r24	; 0x0b
    116c:	b7 cf       	rjmp	.-146    	; 0x10dc <_ZN8Director13Level_ControlEv+0x708>
				if (l[aux%4]->Create(0, random(0, 32), 32, random(0, 32), 1, 75, static_cast<Colors>(random(0, 7)))) {
					break;
				}
			}
		}
		else if (count % 160 == 0) {
    116e:	c9 01       	movw	r24, r18
    1170:	60 ea       	ldi	r22, 0xA0	; 160
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodhi4>
    1178:	89 2b       	or	r24, r25
    117a:	09 f0       	breq	.+2      	; 0x117e <_ZN8Director13Level_ControlEv+0x7aa>
    117c:	4a c0       	rjmp	.+148    	; 0x1212 <_ZN8Director13Level_ControlEv+0x83e>
			for(aux = 0; aux < 4; ++aux) {
    117e:	1b 86       	std	Y+11, r1	; 0x0b
    1180:	8b 85       	ldd	r24, Y+11	; 0x0b
    1182:	84 30       	cpi	r24, 0x04	; 4
    1184:	08 f0       	brcs	.+2      	; 0x1188 <_ZN8Director13Level_ControlEv+0x7b4>
    1186:	45 c0       	rjmp	.+138    	; 0x1212 <_ZN8Director13Level_ControlEv+0x83e>
				if (l[aux%4]->Create(random(0, 32), 0, random(0, 32), 32, 1, 75, static_cast<Colors>(random(0, 7)))) {
    1188:	fe 01       	movw	r30, r28
    118a:	e8 0f       	add	r30, r24
    118c:	f1 1d       	adc	r31, r1
    118e:	e8 0f       	add	r30, r24
    1190:	f1 1d       	adc	r31, r1
    1192:	03 80       	ldd	r0, Z+3	; 0x03
    1194:	f4 81       	ldd	r31, Z+4	; 0x04
    1196:	e0 2d       	mov	r30, r0
    1198:	01 90       	ld	r0, Z+
    119a:	f0 81       	ld	r31, Z
    119c:	e0 2d       	mov	r30, r0
    119e:	86 80       	ldd	r8, Z+6	; 0x06
    11a0:	97 80       	ldd	r9, Z+7	; 0x07
    11a2:	27 e0       	ldi	r18, 0x07	; 7
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	cb 01       	movw	r24, r22
    11b0:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
    11b4:	a6 2e       	mov	r10, r22
    11b6:	20 e2       	ldi	r18, 0x20	; 32
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 e0       	ldi	r20, 0x00	; 0
    11bc:	50 e0       	ldi	r21, 0x00	; 0
    11be:	60 e0       	ldi	r22, 0x00	; 0
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	cb 01       	movw	r24, r22
    11c4:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
    11c8:	76 2e       	mov	r7, r22
    11ca:	20 e2       	ldi	r18, 0x20	; 32
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e0       	ldi	r20, 0x00	; 0
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	cb 01       	movw	r24, r22
    11d8:	0e 94 95 1c 	call	0x392a	; 0x392a <_Z6randomll>
    11dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    11de:	93 70       	andi	r25, 0x03	; 3
    11e0:	de 01       	movw	r26, r28
    11e2:	a9 0f       	add	r26, r25
    11e4:	b1 1d       	adc	r27, r1
    11e6:	a9 0f       	add	r26, r25
    11e8:	b1 1d       	adc	r27, r1
    11ea:	8b e4       	ldi	r24, 0x4B	; 75
    11ec:	c8 2e       	mov	r12, r24
    11ee:	d1 2c       	mov	r13, r1
    11f0:	ee 24       	eor	r14, r14
    11f2:	e3 94       	inc	r14
    11f4:	00 e2       	ldi	r16, 0x20	; 32
    11f6:	27 2d       	mov	r18, r7
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	13 96       	adiw	r26, 0x03	; 3
    11fc:	8d 91       	ld	r24, X+
    11fe:	9c 91       	ld	r25, X
    1200:	14 97       	sbiw	r26, 0x04	; 4
    1202:	f4 01       	movw	r30, r8
    1204:	09 95       	icall
    1206:	81 11       	cpse	r24, r1
    1208:	04 c0       	rjmp	.+8      	; 0x1212 <_ZN8Director13Level_ControlEv+0x83e>
					break;
				}
			}
		}
		else if (count % 160 == 0) {
			for(aux = 0; aux < 4; ++aux) {
    120a:	8b 85       	ldd	r24, Y+11	; 0x0b
    120c:	8f 5f       	subi	r24, 0xFF	; 255
    120e:	8b 87       	std	Y+11, r24	; 0x0b
    1210:	b7 cf       	rjmp	.-146    	; 0x1180 <_ZN8Director13Level_ControlEv+0x7ac>
				}
			}
		}
	}
	
}
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	ef 90       	pop	r14
    121c:	df 90       	pop	r13
    121e:	cf 90       	pop	r12
    1220:	af 90       	pop	r10
    1222:	9f 90       	pop	r9
    1224:	8f 90       	pop	r8
    1226:	7f 90       	pop	r7
    1228:	6f 90       	pop	r6
    122a:	5f 90       	pop	r5
    122c:	4f 90       	pop	r4
    122e:	08 95       	ret

00001230 <_ZN8Director16Tick_ProjectilesEv>:

void Director::Tick_Projectiles() {
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	ec 01       	movw	r28, r24
    123a:	8c 01       	movw	r16, r24
    123c:	08 5f       	subi	r16, 0xF8	; 248
    123e:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = 0; i < MAX_BULLETS; ++i) {
		if (l[i]->Get_State() != Proj_Inactive) {
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_ZN10Projectile9Get_StateEv>
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	21 f0       	breq	.+8      	; 0x1254 <_ZN8Director16Tick_ProjectilesEv+0x24>
			l[i]->Tick();
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	0e 94 a9 0b 	call	0x1752	; 0x1752 <_ZN5Laser4TickEv>
    1254:	22 96       	adiw	r28, 0x02	; 2
	}
	
}

void Director::Tick_Projectiles() {
	for (uint8_t i = 0; i < MAX_BULLETS; ++i) {
    1256:	c0 17       	cp	r28, r16
    1258:	d1 07       	cpc	r29, r17
    125a:	91 f7       	brne	.-28     	; 0x1240 <_ZN8Director16Tick_ProjectilesEv+0x10>
		if (l[i]->Get_State() != Proj_Inactive) {
			l[i]->Tick();
		}
	}
	//if (count >= 120) pixelDebug(2, 1, matrix.Color333(0, 1, 0));
}
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	08 95       	ret

00001266 <_ZN8Director16Animate_SequenceEv>:
		l[i] = new Laser;
	}
	state = Start;
}

void Director::Animate_Sequence() {
    1266:	6f 92       	push	r6
    1268:	7f 92       	push	r7
    126a:	9f 92       	push	r9
    126c:	af 92       	push	r10
    126e:	bf 92       	push	r11
    1270:	cf 92       	push	r12
    1272:	df 92       	push	r13
    1274:	ef 92       	push	r14
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i <= matrix.width(); i += 8) {
    1282:	91 2c       	mov	r9, r1
    1284:	84 e0       	ldi	r24, 0x04	; 4
    1286:	e8 2e       	mov	r14, r24
    1288:	f1 2c       	mov	r15, r1
    128a:	93 e0       	ldi	r25, 0x03	; 3
    128c:	c9 2e       	mov	r12, r25
    128e:	d1 2c       	mov	r13, r1
    1290:	09 2d       	mov	r16, r9
    1292:	10 e0       	ldi	r17, 0x00	; 0
    1294:	8a e5       	ldi	r24, 0x5A	; 90
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	0e 94 17 12 	call	0x242e	; 0x242e <_ZNK12Adafruit_GFX5widthEv>
    129c:	80 17       	cp	r24, r16
    129e:	91 07       	cpc	r25, r17
    12a0:	0c f4       	brge	.+2      	; 0x12a4 <_ZN8Director16Animate_SequenceEv+0x3e>
    12a2:	c8 c0       	rjmp	.+400    	; 0x1434 <_ZN8Director16Animate_SequenceEv+0x1ce>
		matrix.drawPixel(i + count, 0, matrix.Color333(1, 0, 0));
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	61 e0       	ldi	r22, 0x01	; 1
    12aa:	8a e5       	ldi	r24, 0x5A	; 90
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN14RGBmatrixPanel8Color333Ehhh>
    12b2:	68 81       	ld	r22, Y
    12b4:	79 81       	ldd	r23, Y+1	; 0x01
    12b6:	60 0f       	add	r22, r16
    12b8:	71 1f       	adc	r23, r17
    12ba:	9c 01       	movw	r18, r24
    12bc:	40 e0       	ldi	r20, 0x00	; 0
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	8a e5       	ldi	r24, 0x5A	; 90
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <_ZN14RGBmatrixPanel9drawPixelEiij>
		matrix.drawPixel(i + count - 4, 1, matrix.Color333(0, 1, 0));
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	41 e0       	ldi	r20, 0x01	; 1
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	8a e5       	ldi	r24, 0x5A	; 90
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN14RGBmatrixPanel8Color333Ehhh>
    12d6:	68 81       	ld	r22, Y
    12d8:	79 81       	ldd	r23, Y+1	; 0x01
    12da:	64 50       	subi	r22, 0x04	; 4
    12dc:	71 09       	sbc	r23, r1
    12de:	60 0f       	add	r22, r16
    12e0:	71 1f       	adc	r23, r17
    12e2:	9c 01       	movw	r18, r24
    12e4:	41 e0       	ldi	r20, 0x01	; 1
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	8a e5       	ldi	r24, 0x5A	; 90
    12ea:	91 e0       	ldi	r25, 0x01	; 1
    12ec:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <_ZN14RGBmatrixPanel9drawPixelEiij>
		
		matrix.drawPixel(i-count, matrix.height()-1, matrix.Color333(1, 0, 0));
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	61 e0       	ldi	r22, 0x01	; 1
    12f6:	8a e5       	ldi	r24, 0x5A	; 90
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN14RGBmatrixPanel8Color333Ehhh>
    12fe:	5c 01       	movw	r10, r24
    1300:	8a e5       	ldi	r24, 0x5A	; 90
    1302:	91 e0       	ldi	r25, 0x01	; 1
    1304:	0e 94 1b 12 	call	0x2436	; 0x2436 <_ZNK12Adafruit_GFX6heightEv>
    1308:	ac 01       	movw	r20, r24
    130a:	41 50       	subi	r20, 0x01	; 1
    130c:	51 09       	sbc	r21, r1
    130e:	88 81       	ld	r24, Y
    1310:	99 81       	ldd	r25, Y+1	; 0x01
    1312:	b8 01       	movw	r22, r16
    1314:	68 1b       	sub	r22, r24
    1316:	79 0b       	sbc	r23, r25
    1318:	95 01       	movw	r18, r10
    131a:	8a e5       	ldi	r24, 0x5A	; 90
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <_ZN14RGBmatrixPanel9drawPixelEiij>
		matrix.drawPixel(i-count+4, matrix.height()-2, matrix.Color333(0, 1, 0));
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	41 e0       	ldi	r20, 0x01	; 1
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	8a e5       	ldi	r24, 0x5A	; 90
    132a:	91 e0       	ldi	r25, 0x01	; 1
    132c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN14RGBmatrixPanel8Color333Ehhh>
    1330:	5c 01       	movw	r10, r24
    1332:	8a e5       	ldi	r24, 0x5A	; 90
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	0e 94 1b 12 	call	0x2436	; 0x2436 <_ZNK12Adafruit_GFX6heightEv>
    133a:	ac 01       	movw	r20, r24
    133c:	42 50       	subi	r20, 0x02	; 2
    133e:	51 09       	sbc	r21, r1
    1340:	88 81       	ld	r24, Y
    1342:	99 81       	ldd	r25, Y+1	; 0x01
    1344:	b7 01       	movw	r22, r14
    1346:	68 1b       	sub	r22, r24
    1348:	79 0b       	sbc	r23, r25
    134a:	60 0f       	add	r22, r16
    134c:	71 1f       	adc	r23, r17
    134e:	95 01       	movw	r18, r10
    1350:	8a e5       	ldi	r24, 0x5A	; 90
    1352:	91 e0       	ldi	r25, 0x01	; 1
    1354:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <_ZN14RGBmatrixPanel9drawPixelEiij>
		
		matrix.drawPixel(0, matrix.height()-i-count-1, matrix.Color333(1, 0, 0));
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	61 e0       	ldi	r22, 0x01	; 1
    135e:	8a e5       	ldi	r24, 0x5A	; 90
    1360:	91 e0       	ldi	r25, 0x01	; 1
    1362:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN14RGBmatrixPanel8Color333Ehhh>
    1366:	5c 01       	movw	r10, r24
    1368:	8a e5       	ldi	r24, 0x5A	; 90
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	0e 94 1b 12 	call	0x2436	; 0x2436 <_ZNK12Adafruit_GFX6heightEv>
    1370:	48 81       	ld	r20, Y
    1372:	59 81       	ldd	r21, Y+1	; 0x01
    1374:	40 95       	com	r20
    1376:	50 95       	com	r21
    1378:	80 1b       	sub	r24, r16
    137a:	91 0b       	sbc	r25, r17
    137c:	48 0f       	add	r20, r24
    137e:	59 1f       	adc	r21, r25
    1380:	95 01       	movw	r18, r10
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	8a e5       	ldi	r24, 0x5A	; 90
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <_ZN14RGBmatrixPanel9drawPixelEiij>
		matrix.drawPixel(1, matrix.height()-i-count+3, matrix.Color333(0, 1, 0));
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	41 e0       	ldi	r20, 0x01	; 1
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	8a e5       	ldi	r24, 0x5A	; 90
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN14RGBmatrixPanel8Color333Ehhh>
    139c:	5c 01       	movw	r10, r24
    139e:	8a e5       	ldi	r24, 0x5A	; 90
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	0e 94 1b 12 	call	0x2436	; 0x2436 <_ZNK12Adafruit_GFX6heightEv>
    13a6:	28 81       	ld	r18, Y
    13a8:	39 81       	ldd	r19, Y+1	; 0x01
    13aa:	a6 01       	movw	r20, r12
    13ac:	42 1b       	sub	r20, r18
    13ae:	53 0b       	sbc	r21, r19
    13b0:	80 1b       	sub	r24, r16
    13b2:	91 0b       	sbc	r25, r17
    13b4:	48 0f       	add	r20, r24
    13b6:	59 1f       	adc	r21, r25
    13b8:	95 01       	movw	r18, r10
    13ba:	61 e0       	ldi	r22, 0x01	; 1
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	8a e5       	ldi	r24, 0x5A	; 90
    13c0:	91 e0       	ldi	r25, 0x01	; 1
    13c2:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <_ZN14RGBmatrixPanel9drawPixelEiij>
		
		matrix.drawPixel(matrix.width()-1, i+count, matrix.Color333(1, 0, 0));
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	61 e0       	ldi	r22, 0x01	; 1
    13cc:	8a e5       	ldi	r24, 0x5A	; 90
    13ce:	91 e0       	ldi	r25, 0x01	; 1
    13d0:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN14RGBmatrixPanel8Color333Ehhh>
    13d4:	3c 01       	movw	r6, r24
    13d6:	a8 80       	ld	r10, Y
    13d8:	b9 80       	ldd	r11, Y+1	; 0x01
    13da:	a0 0e       	add	r10, r16
    13dc:	b1 1e       	adc	r11, r17
    13de:	8a e5       	ldi	r24, 0x5A	; 90
    13e0:	91 e0       	ldi	r25, 0x01	; 1
    13e2:	0e 94 17 12 	call	0x242e	; 0x242e <_ZNK12Adafruit_GFX5widthEv>
    13e6:	bc 01       	movw	r22, r24
    13e8:	61 50       	subi	r22, 0x01	; 1
    13ea:	71 09       	sbc	r23, r1
    13ec:	93 01       	movw	r18, r6
    13ee:	a5 01       	movw	r20, r10
    13f0:	8a e5       	ldi	r24, 0x5A	; 90
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <_ZN14RGBmatrixPanel9drawPixelEiij>
		matrix.drawPixel(matrix.width()-2, i+count-4, matrix.Color333(0, 1, 0));
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	41 e0       	ldi	r20, 0x01	; 1
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	8a e5       	ldi	r24, 0x5A	; 90
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN14RGBmatrixPanel8Color333Ehhh>
    1406:	5c 01       	movw	r10, r24
    1408:	48 81       	ld	r20, Y
    140a:	59 81       	ldd	r21, Y+1	; 0x01
    140c:	44 50       	subi	r20, 0x04	; 4
    140e:	51 09       	sbc	r21, r1
    1410:	04 0f       	add	r16, r20
    1412:	15 1f       	adc	r17, r21
    1414:	8a e5       	ldi	r24, 0x5A	; 90
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	0e 94 17 12 	call	0x242e	; 0x242e <_ZNK12Adafruit_GFX5widthEv>
    141c:	bc 01       	movw	r22, r24
    141e:	62 50       	subi	r22, 0x02	; 2
    1420:	71 09       	sbc	r23, r1
    1422:	95 01       	movw	r18, r10
    1424:	a8 01       	movw	r20, r16
    1426:	8a e5       	ldi	r24, 0x5A	; 90
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <_ZN14RGBmatrixPanel9drawPixelEiij>
	}
	state = Start;
}

void Director::Animate_Sequence() {
	for (uint8_t i = 0; i <= matrix.width(); i += 8) {
    142e:	88 e0       	ldi	r24, 0x08	; 8
    1430:	98 0e       	add	r9, r24
    1432:	2e cf       	rjmp	.-420    	; 0x1290 <_ZN8Director16Animate_SequenceEv+0x2a>
		
		matrix.drawPixel(matrix.width()-1, i+count, matrix.Color333(1, 0, 0));
		matrix.drawPixel(matrix.width()-2, i+count-4, matrix.Color333(0, 1, 0));
	}
	
	if (++count % 8 == 0) count = 0;
    1434:	88 81       	ld	r24, Y
    1436:	99 81       	ldd	r25, Y+1	; 0x01
    1438:	01 96       	adiw	r24, 0x01	; 1
    143a:	9c 01       	movw	r18, r24
    143c:	27 70       	andi	r18, 0x07	; 7
    143e:	33 27       	eor	r19, r19
    1440:	23 2b       	or	r18, r19
    1442:	19 f0       	breq	.+6      	; 0x144a <_ZN8Director16Animate_SequenceEv+0x1e4>
    1444:	99 83       	std	Y+1, r25	; 0x01
    1446:	88 83       	st	Y, r24
    1448:	02 c0       	rjmp	.+4      	; 0x144e <_ZN8Director16Animate_SequenceEv+0x1e8>
    144a:	19 82       	std	Y+1, r1	; 0x01
    144c:	18 82       	st	Y, r1
}
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	ff 90       	pop	r15
    1458:	ef 90       	pop	r14
    145a:	df 90       	pop	r13
    145c:	cf 90       	pop	r12
    145e:	bf 90       	pop	r11
    1460:	af 90       	pop	r10
    1462:	9f 90       	pop	r9
    1464:	7f 90       	pop	r7
    1466:	6f 90       	pop	r6
    1468:	08 95       	ret

0000146a <_ZN8Director4TickEv>:
		}
	}
	//if (count >= 120) pixelDebug(2, 1, matrix.Color333(0, 1, 0));
}

void Director::Tick() {
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	ec 01       	movw	r28, r24
	switch (state) {
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	31 f0       	breq	.+12     	; 0x1482 <_ZN8Director4TickEv+0x18>
    1476:	18 f0       	brcs	.+6      	; 0x147e <_ZN8Director4TickEv+0x14>
    1478:	82 30       	cpi	r24, 0x02	; 2
    147a:	e9 f0       	breq	.+58     	; 0x14b6 <_ZN8Director4TickEv+0x4c>
    147c:	2f c0       	rjmp	.+94     	; 0x14dc <_ZN8Director4TickEv+0x72>
		case Start:
		state = Wait;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	2c c0       	rjmp	.+88     	; 0x14da <_ZN8Director4TickEv+0x70>
		break;
		
		case Wait:
		if (usart.Has_Input(SHOT)) {
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	89 e9       	ldi	r24, 0x99	; 153
    1486:	91 e0       	ldi	r25, 0x01	; 1
    1488:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <_ZN7Signals9Has_InputE8Controls>
    148c:	88 23       	and	r24, r24
    148e:	31 f1       	breq	.+76     	; 0x14dc <_ZN8Director4TickEv+0x72>
			usart.Signal_Event(START_GAME);
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	89 e9       	ldi	r24, 0x99	; 153
    1494:	91 e0       	ldi	r25, 0x01	; 1
    1496:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <_ZN7Signals12Signal_EventE6Events>
			randomSeed(analogRead(5));
    149a:	85 e0       	ldi	r24, 0x05	; 5
    149c:	0e 94 10 1c 	call	0x3820	; 0x3820 <analogRead>
    14a0:	bc 01       	movw	r22, r24
    14a2:	99 0f       	add	r25, r25
    14a4:	88 0b       	sbc	r24, r24
    14a6:	99 0b       	sbc	r25, r25
    14a8:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <_Z10randomSeedm>
			count = 0;
    14ac:	19 82       	std	Y+1, r1	; 0x01
    14ae:	18 82       	st	Y, r1
			aux = 0;
    14b0:	1b 86       	std	Y+11, r1	; 0x0b
			state = Play;
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	12 c0       	rjmp	.+36     	; 0x14da <_ZN8Director4TickEv+0x70>
		}
		break;
		
		case Play:
			if (count >= 6600) state = Win;
    14b6:	88 81       	ld	r24, Y
    14b8:	99 81       	ldd	r25, Y+1	; 0x01
    14ba:	88 3c       	cpi	r24, 0xC8	; 200
    14bc:	99 41       	sbci	r25, 0x19	; 25
    14be:	10 f0       	brcs	.+4      	; 0x14c4 <_ZN8Director4TickEv+0x5a>
    14c0:	83 e0       	ldi	r24, 0x03	; 3
    14c2:	0b c0       	rjmp	.+22     	; 0x14da <_ZN8Director4TickEv+0x70>
			else if (player.Get_Life() <= 0) {
    14c4:	88 ea       	ldi	r24, 0xA8	; 168
    14c6:	91 e0       	ldi	r25, 0x01	; 1
    14c8:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <_ZN3You8Get_LifeEv>
    14cc:	81 11       	cpse	r24, r1
    14ce:	06 c0       	rjmp	.+12     	; 0x14dc <_ZN8Director4TickEv+0x72>
				count = 1;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	99 83       	std	Y+1, r25	; 0x01
    14d6:	88 83       	st	Y, r24
				state = Lose;
    14d8:	84 e0       	ldi	r24, 0x04	; 4
    14da:	8a 83       	std	Y+2, r24	; 0x02
		break;
		
		default:
		break;
	}
	switch (state) {
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	82 30       	cpi	r24, 0x02	; 2
    14e0:	b1 f0       	breq	.+44     	; 0x150e <_ZN8Director4TickEv+0xa4>
    14e2:	38 f4       	brcc	.+14     	; 0x14f2 <_ZN8Director4TickEv+0x88>
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	49 f5       	brne	.+82     	; 0x153a <_ZN8Director4TickEv+0xd0>
		case Start:
		break;
		
		case Wait:
		Animate_Sequence();
    14e8:	ce 01       	movw	r24, r28
		case Lose:
		usart.Signal_Event(LOSE);
		Tick_Projectiles();
		break;
	}
}
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
	switch (state) {
		case Start:
		break;
		
		case Wait:
		Animate_Sequence();
    14ee:	0c 94 33 09 	jmp	0x1266	; 0x1266 <_ZN8Director16Animate_SequenceEv>
		break;
		
		default:
		break;
	}
	switch (state) {
    14f2:	83 30       	cpi	r24, 0x03	; 3
    14f4:	d9 f0       	breq	.+54     	; 0x152c <_ZN8Director4TickEv+0xc2>
    14f6:	84 30       	cpi	r24, 0x04	; 4
    14f8:	01 f5       	brne	.+64     	; 0x153a <_ZN8Director4TickEv+0xd0>
		case Win:
		usart.Signal_Event(WIN);
		break;
		
		case Lose:
		usart.Signal_Event(LOSE);
    14fa:	63 e0       	ldi	r22, 0x03	; 3
    14fc:	89 e9       	ldi	r24, 0x99	; 153
    14fe:	91 e0       	ldi	r25, 0x01	; 1
    1500:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <_ZN7Signals12Signal_EventE6Events>
		Tick_Projectiles();
    1504:	ce 01       	movw	r24, r28
		break;
	}
}
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
		usart.Signal_Event(WIN);
		break;
		
		case Lose:
		usart.Signal_Event(LOSE);
		Tick_Projectiles();
    150a:	0c 94 18 09 	jmp	0x1230	; 0x1230 <_ZN8Director16Tick_ProjectilesEv>
		case Wait:
		Animate_Sequence();
		break;
		
		case Play:
		Level_Control();
    150e:	ce 01       	movw	r24, r28
    1510:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN8Director13Level_ControlEv>
		Chip_Time();
    1514:	ce 01       	movw	r24, r28
    1516:	0e 94 db 04 	call	0x9b6	; 0x9b6 <_ZN8Director9Chip_TimeEv>
		Tick_Projectiles();
    151a:	ce 01       	movw	r24, r28
    151c:	0e 94 18 09 	call	0x1230	; 0x1230 <_ZN8Director16Tick_ProjectilesEv>
		++count;
    1520:	88 81       	ld	r24, Y
    1522:	99 81       	ldd	r25, Y+1	; 0x01
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	99 83       	std	Y+1, r25	; 0x01
    1528:	88 83       	st	Y, r24
		break;
    152a:	07 c0       	rjmp	.+14     	; 0x153a <_ZN8Director4TickEv+0xd0>
		
		case Win:
		usart.Signal_Event(WIN);
    152c:	64 e0       	ldi	r22, 0x04	; 4
    152e:	89 e9       	ldi	r24, 0x99	; 153
    1530:	91 e0       	ldi	r25, 0x01	; 1
		case Lose:
		usart.Signal_Event(LOSE);
		Tick_Projectiles();
		break;
	}
}
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
		Tick_Projectiles();
		++count;
		break;
		
		case Win:
		usart.Signal_Event(WIN);
    1536:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <_ZN7Signals12Signal_EventE6Events>
		case Lose:
		usart.Signal_Event(LOSE);
		Tick_Projectiles();
		break;
	}
}
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <_ZN5Laser4MoveEv>:
	int16_t frame;
	
	Colors clr;
	
	void Draw();
	inline void Move() {};
    1540:	08 95       	ret

00001542 <_ZN5Laser6CreateEaaaahj6Colors>:

Laser::Laser() {
	state = Proj_Start;
}

bool Laser::Create(int8_t _x, int8_t _y, int8_t _x0, int8_t _y0, byte _thick, uint16_t _time, Colors c) {
    1542:	af 92       	push	r10
    1544:	cf 92       	push	r12
    1546:	df 92       	push	r13
    1548:	ef 92       	push	r14
    154a:	0f 93       	push	r16
    154c:	fc 01       	movw	r30, r24
	if (state != Proj_Inactive) return false;
    154e:	86 81       	ldd	r24, Z+6	; 0x06
    1550:	81 30       	cpi	r24, 0x01	; 1
    1552:	71 f4       	brne	.+28     	; 0x1570 <_ZN5Laser6CreateEaaaahj6Colors+0x2e>
	
	x = _x;
    1554:	62 83       	std	Z+2, r22	; 0x02
	y = _y;
    1556:	43 83       	std	Z+3, r20	; 0x03
	vx = _x0;
    1558:	24 83       	std	Z+4, r18	; 0x04
	vy = _y0;
    155a:	05 83       	std	Z+5, r16	; 0x05
	
	clr = c;
    155c:	a4 86       	std	Z+12, r10	; 0x0c
	
	time = _time;
    155e:	d0 86       	std	Z+8, r13	; 0x08
    1560:	c7 82       	std	Z+7, r12	; 0x07
	frame = 0;
    1562:	13 86       	std	Z+11, r1	; 0x0b
    1564:	12 86       	std	Z+10, r1	; 0x0a
	
	thick = _thick;
    1566:	e1 86       	std	Z+9, r14	; 0x09
	
	state = Proj_Warn;
    1568:	84 e0       	ldi	r24, 0x04	; 4
    156a:	86 83       	std	Z+6, r24	; 0x06
	
	return true;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	01 c0       	rjmp	.+2      	; 0x1572 <_ZN5Laser6CreateEaaaahj6Colors+0x30>
Laser::Laser() {
	state = Proj_Start;
}

bool Laser::Create(int8_t _x, int8_t _y, int8_t _x0, int8_t _y0, byte _thick, uint16_t _time, Colors c) {
	if (state != Proj_Inactive) return false;
    1570:	80 e0       	ldi	r24, 0x00	; 0
	thick = _thick;
	
	state = Proj_Warn;
	
	return true;
}
    1572:	0f 91       	pop	r16
    1574:	ef 90       	pop	r14
    1576:	df 90       	pop	r13
    1578:	cf 90       	pop	r12
    157a:	af 90       	pop	r10
    157c:	08 95       	ret

0000157e <_ZN5Laser15Collision_CheckEh>:

uint16_t Laser::Get_Time() {
	return time;
}

bool Laser::Collision_Check(byte num) {
    157e:	4f 92       	push	r4
    1580:	5f 92       	push	r5
    1582:	6f 92       	push	r6
    1584:	7f 92       	push	r7
    1586:	8f 92       	push	r8
    1588:	9f 92       	push	r9
    158a:	af 92       	push	r10
    158c:	bf 92       	push	r11
    158e:	cf 92       	push	r12
    1590:	df 92       	push	r13
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	fc 01       	movw	r30, r24
    15a0:	46 2e       	mov	r4, r22
	int16_t x0 = x;
    15a2:	c2 81       	ldd	r28, Z+2	; 0x02
    15a4:	0c 2e       	mov	r0, r28
    15a6:	00 0c       	add	r0, r0
    15a8:	dd 0b       	sbc	r29, r29
	int16_t y0 = y;
    15aa:	03 81       	ldd	r16, Z+3	; 0x03
    15ac:	00 2e       	mov	r0, r16
    15ae:	00 0c       	add	r0, r0
    15b0:	11 0b       	sbc	r17, r17
	int16_t x1 = vx;
    15b2:	e4 80       	ldd	r14, Z+4	; 0x04
    15b4:	0e 2c       	mov	r0, r14
    15b6:	00 0c       	add	r0, r0
    15b8:	ff 08       	sbc	r15, r15
	int16_t y1 = vy;
    15ba:	85 81       	ldd	r24, Z+5	; 0x05
    15bc:	08 2e       	mov	r0, r24
    15be:	00 0c       	add	r0, r0
    15c0:	99 0b       	sbc	r25, r25
	
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    15c2:	ac 01       	movw	r20, r24
    15c4:	40 1b       	sub	r20, r16
    15c6:	51 0b       	sbc	r21, r17
    15c8:	57 ff       	sbrs	r21, 7
    15ca:	03 c0       	rjmp	.+6      	; 0x15d2 <_ZN5Laser15Collision_CheckEh+0x54>
    15cc:	51 95       	neg	r21
    15ce:	41 95       	neg	r20
    15d0:	51 09       	sbc	r21, r1
    15d2:	97 01       	movw	r18, r14
    15d4:	2c 1b       	sub	r18, r28
    15d6:	3d 0b       	sbc	r19, r29
    15d8:	37 ff       	sbrs	r19, 7
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <_ZN5Laser15Collision_CheckEh+0x64>
    15dc:	31 95       	neg	r19
    15de:	21 95       	neg	r18
    15e0:	31 09       	sbc	r19, r1
    15e2:	55 24       	eor	r5, r5
    15e4:	53 94       	inc	r5
    15e6:	24 17       	cp	r18, r20
    15e8:	35 07       	cpc	r19, r21
    15ea:	14 f0       	brlt	.+4      	; 0x15f0 <_ZN5Laser15Collision_CheckEh+0x72>
    15ec:	51 2c       	mov	r5, r1
    15ee:	0a c0       	rjmp	.+20     	; 0x1604 <_ZN5Laser15Collision_CheckEh+0x86>
	if (steep) {
    15f0:	3e 2d       	mov	r19, r14
    15f2:	2f 2d       	mov	r18, r15
		_swap_int16_t(x0, y0);
		_swap_int16_t(x1, y1);
    15f4:	7c 01       	movw	r14, r24
    15f6:	83 2f       	mov	r24, r19
    15f8:	92 2f       	mov	r25, r18
	int16_t y0 = y;
	int16_t x1 = vx;
	int16_t y1 = vy;
	
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) {
    15fa:	3c 2f       	mov	r19, r28
    15fc:	2d 2f       	mov	r18, r29
		_swap_int16_t(x0, y0);
    15fe:	e8 01       	movw	r28, r16
    1600:	03 2f       	mov	r16, r19
    1602:	12 2f       	mov	r17, r18
		_swap_int16_t(x1, y1);
	}

	if (x0 > x1) {
    1604:	ec 16       	cp	r14, r28
    1606:	fd 06       	cpc	r15, r29
    1608:	54 f4       	brge	.+20     	; 0x161e <_ZN5Laser15Collision_CheckEh+0xa0>
    160a:	30 2f       	mov	r19, r16
    160c:	21 2f       	mov	r18, r17
		_swap_int16_t(x0, x1);
		_swap_int16_t(y0, y1);
    160e:	8c 01       	movw	r16, r24
    1610:	83 2f       	mov	r24, r19
    1612:	92 2f       	mov	r25, r18
	if (steep) {
		_swap_int16_t(x0, y0);
		_swap_int16_t(x1, y1);
	}

	if (x0 > x1) {
    1614:	3c 2f       	mov	r19, r28
    1616:	2d 2f       	mov	r18, r29
    1618:	e7 01       	movw	r28, r14
    161a:	e3 2e       	mov	r14, r19
    161c:	f2 2e       	mov	r15, r18
		_swap_int16_t(x0, x1);
		_swap_int16_t(y0, y1);
	}

	int16_t dx, dy;
	dx = x1 - x0;
    161e:	57 01       	movw	r10, r14
    1620:	ac 1a       	sub	r10, r28
    1622:	bd 0a       	sbc	r11, r29
	dy = abs(y1 - y0);
    1624:	3c 01       	movw	r6, r24
    1626:	60 1a       	sub	r6, r16
    1628:	71 0a       	sbc	r7, r17
    162a:	77 fe       	sbrs	r7, 7
    162c:	03 c0       	rjmp	.+6      	; 0x1634 <_ZN5Laser15Collision_CheckEh+0xb6>
    162e:	71 94       	neg	r7
    1630:	61 94       	neg	r6
    1632:	71 08       	sbc	r7, r1

	int16_t err = dx / 2;
    1634:	65 01       	movw	r12, r10
    1636:	b7 fe       	sbrs	r11, 7
    1638:	03 c0       	rjmp	.+6      	; 0x1640 <_ZN5Laser15Collision_CheckEh+0xc2>
    163a:	2f ef       	ldi	r18, 0xFF	; 255
    163c:	c2 1a       	sub	r12, r18
    163e:	d2 0a       	sbc	r13, r18
    1640:	d5 94       	asr	r13
    1642:	c7 94       	ror	r12
	int16_t ystep;

	if (y0 < y1) {
    1644:	08 17       	cp	r16, r24
    1646:	19 07       	cpc	r17, r25
    1648:	24 f0       	brlt	.+8      	; 0x1652 <_ZN5Laser15Collision_CheckEh+0xd4>
		ystep = 1;
		} else {
		ystep = -1;
    164a:	88 24       	eor	r8, r8
    164c:	8a 94       	dec	r8
    164e:	98 2c       	mov	r9, r8
    1650:	12 c0       	rjmp	.+36     	; 0x1676 <_ZN5Laser15Collision_CheckEh+0xf8>

	int16_t err = dx / 2;
	int16_t ystep;

	if (y0 < y1) {
		ystep = 1;
    1652:	88 24       	eor	r8, r8
    1654:	83 94       	inc	r8
    1656:	91 2c       	mov	r9, r1
    1658:	0e c0       	rjmp	.+28     	; 0x1676 <_ZN5Laser15Collision_CheckEh+0xf8>
		} else {
		ystep = -1;
	}

	for (; x0<=x1; x0++) {
		if (steep) {
    165a:	55 20       	and	r5, r5
    165c:	d1 f0       	breq	.+52     	; 0x1692 <_ZN5Laser15Collision_CheckEh+0x114>
			if (num == 1) {
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	48 16       	cp	r4, r24
    1662:	69 f0       	breq	.+26     	; 0x167e <_ZN5Laser15Collision_CheckEh+0x100>
			}
			else if (num == 2) {
				//if (player2.Compare_Coordinates(x0, y0)) return true;
			}
		}
		err -= dy;
    1664:	c6 18       	sub	r12, r6
    1666:	d7 08       	sbc	r13, r7
		if (err < 0) {
    1668:	d7 fe       	sbrs	r13, 7
    166a:	04 c0       	rjmp	.+8      	; 0x1674 <_ZN5Laser15Collision_CheckEh+0xf6>
			y0 += ystep;
    166c:	08 0d       	add	r16, r8
    166e:	19 1d       	adc	r17, r9
			err += dx;
    1670:	ca 0c       	add	r12, r10
    1672:	db 1c       	adc	r13, r11
		ystep = 1;
		} else {
		ystep = -1;
	}

	for (; x0<=x1; x0++) {
    1674:	21 96       	adiw	r28, 0x01	; 1
    1676:	ec 16       	cp	r14, r28
    1678:	fd 06       	cpc	r15, r29
    167a:	7c f7       	brge	.-34     	; 0x165a <_ZN5Laser15Collision_CheckEh+0xdc>
    167c:	10 c0       	rjmp	.+32     	; 0x169e <_ZN5Laser15Collision_CheckEh+0x120>
		if (steep) {
			if (num == 1) {
				if (player.Compare_Coordinates(y0, x0)) return true;
    167e:	4c 2f       	mov	r20, r28
    1680:	60 2f       	mov	r22, r16
    1682:	88 ea       	ldi	r24, 0xA8	; 168
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	0e 94 e6 18 	call	0x31cc	; 0x31cc <_ZN3You19Compare_CoordinatesEhh>
    168a:	88 23       	and	r24, r24
    168c:	59 f3       	breq	.-42     	; 0x1664 <_ZN5Laser15Collision_CheckEh+0xe6>
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	07 c0       	rjmp	.+14     	; 0x16a0 <_ZN5Laser15Collision_CheckEh+0x122>
			else if (num == 2) {
				//if (player2.Compare_Coordinates(y0, x0)) return true;
			}
		}
		else {
			if (num == 1) {
    1692:	21 e0       	ldi	r18, 0x01	; 1
    1694:	42 12       	cpse	r4, r18
    1696:	e6 cf       	rjmp	.-52     	; 0x1664 <_ZN5Laser15Collision_CheckEh+0xe6>
				if (player.Compare_Coordinates(x0, y0)) return true;
    1698:	40 2f       	mov	r20, r16
    169a:	6c 2f       	mov	r22, r28
    169c:	f2 cf       	rjmp	.-28     	; 0x1682 <_ZN5Laser15Collision_CheckEh+0x104>
		if (err < 0) {
			y0 += ystep;
			err += dx;
		}
	}
	return false;
    169e:	80 e0       	ldi	r24, 0x00	; 0
}
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
    16ac:	df 90       	pop	r13
    16ae:	cf 90       	pop	r12
    16b0:	bf 90       	pop	r11
    16b2:	af 90       	pop	r10
    16b4:	9f 90       	pop	r9
    16b6:	8f 90       	pop	r8
    16b8:	7f 90       	pop	r7
    16ba:	6f 90       	pop	r6
    16bc:	5f 90       	pop	r5
    16be:	4f 90       	pop	r4
    16c0:	08 95       	ret

000016c2 <_ZN10Projectile9Get_StateEv>:
	}
}

Proj_States Projectile::Get_State()	{
	return state;
}
    16c2:	fc 01       	movw	r30, r24
    16c4:	86 81       	ldd	r24, Z+6	; 0x06
    16c6:	08 95       	ret

000016c8 <_ZN5LaserC1Ev>:
bool Dot::Collision_Check() {
	return player.Compare_Coordinates(x, y);
}
*/

Laser::Laser() {
    16c8:	2f e0       	ldi	r18, 0x0F	; 15
    16ca:	31 e0       	ldi	r19, 0x01	; 1
    16cc:	fc 01       	movw	r30, r24
    16ce:	31 83       	std	Z+1, r19	; 0x01
    16d0:	20 83       	st	Z, r18
	state = Proj_Start;
    16d2:	16 82       	std	Z+6, r1	; 0x06
    16d4:	08 95       	ret

000016d6 <_ZN5Laser12Start_RotateEv>:
	
	return true;
}

void Laser::Start_Rotate() {
	state = Proj_Rotate;
    16d6:	25 e0       	ldi	r18, 0x05	; 5
    16d8:	fc 01       	movw	r30, r24
    16da:	26 83       	std	Z+6, r18	; 0x06
    16dc:	08 95       	ret

000016de <_ZN5Laser8Shift_X0Ea>:
}

void Laser::Shift_X0(int8_t offs) {
	x += offs;
    16de:	fc 01       	movw	r30, r24
    16e0:	22 81       	ldd	r18, Z+2	; 0x02
    16e2:	62 0f       	add	r22, r18
    16e4:	62 83       	std	Z+2, r22	; 0x02
    16e6:	08 95       	ret

000016e8 <_ZN5Laser8Shift_X1Ea>:
}
void Laser::Shift_X1(int8_t offs) {
	vx += offs;
    16e8:	fc 01       	movw	r30, r24
    16ea:	24 81       	ldd	r18, Z+4	; 0x04
    16ec:	62 0f       	add	r22, r18
    16ee:	64 83       	std	Z+4, r22	; 0x04
    16f0:	08 95       	ret

000016f2 <_ZN5Laser10DeactivateEv>:

Proj_States Projectile::Get_State()	{
	return state;
}

void Laser::Deactivate() {
    16f2:	ef 92       	push	r14
    16f4:	ff 92       	push	r15
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	ec 01       	movw	r28, r24
	matrix.drawLine(x, y, vx, vy, return_color(clr));
    1700:	8c 85       	ldd	r24, Y+12	; 0x0c
    1702:	0e 94 a8 03 	call	0x750	; 0x750 <_Z12return_color6Colors>
    1706:	0d 81       	ldd	r16, Y+5	; 0x05
    1708:	00 2e       	mov	r0, r16
    170a:	00 0c       	add	r0, r0
    170c:	11 0b       	sbc	r17, r17
    170e:	2c 81       	ldd	r18, Y+4	; 0x04
    1710:	02 2e       	mov	r0, r18
    1712:	00 0c       	add	r0, r0
    1714:	33 0b       	sbc	r19, r19
    1716:	4b 81       	ldd	r20, Y+3	; 0x03
    1718:	04 2e       	mov	r0, r20
    171a:	00 0c       	add	r0, r0
    171c:	55 0b       	sbc	r21, r21
    171e:	6a 81       	ldd	r22, Y+2	; 0x02
    1720:	06 2e       	mov	r0, r22
    1722:	00 0c       	add	r0, r0
    1724:	77 0b       	sbc	r23, r23
    1726:	7c 01       	movw	r14, r24
    1728:	8a e5       	ldi	r24, 0x5A	; 90
    172a:	91 e0       	ldi	r25, 0x01	; 1
    172c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <_ZN12Adafruit_GFX8drawLineEiiiij>
	if (frame <= time + 4) state = Proj_Inactive;
    1730:	8f 81       	ldd	r24, Y+7	; 0x07
    1732:	98 85       	ldd	r25, Y+8	; 0x08
    1734:	04 96       	adiw	r24, 0x04	; 4
    1736:	2a 85       	ldd	r18, Y+10	; 0x0a
    1738:	3b 85       	ldd	r19, Y+11	; 0x0b
    173a:	82 17       	cp	r24, r18
    173c:	93 07       	cpc	r25, r19
    173e:	10 f0       	brcs	.+4      	; 0x1744 <_ZN5Laser10DeactivateEv+0x52>
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	8e 83       	std	Y+6, r24	; 0x06
}
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
    174c:	ff 90       	pop	r15
    174e:	ef 90       	pop	r14
    1750:	08 95       	ret

00001752 <_ZN5Laser4TickEv>:
		if (frame % 2 == 0 && !(frame % 4 == 0)) ++thick;
		else if (frame % 4 == 0) --thick;
	}
}

void Laser::Tick() {
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	ec 01       	movw	r28, r24
	switch (state) {
    1758:	8e 81       	ldd	r24, Y+6	; 0x06
    175a:	83 30       	cpi	r24, 0x03	; 3
    175c:	31 f1       	breq	.+76     	; 0x17aa <_ZN5Laser4TickEv+0x58>
    175e:	28 f4       	brcc	.+10     	; 0x176a <_ZN5Laser4TickEv+0x18>
    1760:	88 23       	and	r24, r24
    1762:	41 f0       	breq	.+16     	; 0x1774 <_ZN5Laser4TickEv+0x22>
    1764:	82 30       	cpi	r24, 0x02	; 2
    1766:	c9 f0       	breq	.+50     	; 0x179a <_ZN5Laser4TickEv+0x48>
    1768:	2a c0       	rjmp	.+84     	; 0x17be <_ZN5Laser4TickEv+0x6c>
    176a:	84 30       	cpi	r24, 0x04	; 4
    176c:	29 f0       	breq	.+10     	; 0x1778 <_ZN5Laser4TickEv+0x26>
    176e:	85 30       	cpi	r24, 0x05	; 5
    1770:	e1 f0       	breq	.+56     	; 0x17aa <_ZN5Laser4TickEv+0x58>
    1772:	25 c0       	rjmp	.+74     	; 0x17be <_ZN5Laser4TickEv+0x6c>
		case Proj_Start:
			state = Proj_Inactive;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	0f c0       	rjmp	.+30     	; 0x1796 <_ZN5Laser4TickEv+0x44>
		break;
		case Proj_Warn:
			if (frame % 4 == 0) state = Proj_Active;
    1778:	8a 85       	ldd	r24, Y+10	; 0x0a
    177a:	9b 85       	ldd	r25, Y+11	; 0x0b
    177c:	9c 01       	movw	r18, r24
    177e:	23 70       	andi	r18, 0x03	; 3
    1780:	33 27       	eor	r19, r19
    1782:	23 2b       	or	r18, r19
    1784:	41 f5       	brne	.+80     	; 0x17d6 <_ZN5Laser4TickEv+0x84>
    1786:	22 e0       	ldi	r18, 0x02	; 2
    1788:	2e 83       	std	Y+6, r18	; 0x06
			
			if (frame > 75) {
    178a:	8c 34       	cpi	r24, 0x4C	; 76
    178c:	91 05       	cpc	r25, r1
    178e:	a4 f1       	brlt	.+104    	; 0x17f8 <_ZN5Laser4TickEv+0xa6>
				frame = 0;
    1790:	1b 86       	std	Y+11, r1	; 0x0b
    1792:	1a 86       	std	Y+10, r1	; 0x0a
				state = Proj_Lethal;
    1794:	83 e0       	ldi	r24, 0x03	; 3
    1796:	8e 83       	std	Y+6, r24	; 0x06
    1798:	12 c0       	rjmp	.+36     	; 0x17be <_ZN5Laser4TickEv+0x6c>
			}
		break;
		case Proj_Active: // Actually no drawing of warn
			if (frame % 4 == 0) state = Proj_Warn;
    179a:	8a 85       	ldd	r24, Y+10	; 0x0a
    179c:	9b 85       	ldd	r25, Y+11	; 0x0b
    179e:	83 70       	andi	r24, 0x03	; 3
    17a0:	99 27       	eor	r25, r25
    17a2:	89 2b       	or	r24, r25
    17a4:	61 f4       	brne	.+24     	; 0x17be <_ZN5Laser4TickEv+0x6c>
    17a6:	84 e0       	ldi	r24, 0x04	; 4
    17a8:	f6 cf       	rjmp	.-20     	; 0x1796 <_ZN5Laser4TickEv+0x44>
		break;
		case Proj_Lethal:
			if (frame >= time) Deactivate();
    17aa:	2a 85       	ldd	r18, Y+10	; 0x0a
    17ac:	3b 85       	ldd	r19, Y+11	; 0x0b
    17ae:	8f 81       	ldd	r24, Y+7	; 0x07
    17b0:	98 85       	ldd	r25, Y+8	; 0x08
    17b2:	28 17       	cp	r18, r24
    17b4:	39 07       	cpc	r19, r25
    17b6:	18 f0       	brcs	.+6      	; 0x17be <_ZN5Laser4TickEv+0x6c>
    17b8:	ce 01       	movw	r24, r28
    17ba:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Laser10DeactivateEv>
			// Also handled in external function
		break;
		default:
		break;
	}
	switch (state) {
    17be:	8e 81       	ldd	r24, Y+6	; 0x06
    17c0:	83 30       	cpi	r24, 0x03	; 3
    17c2:	01 f1       	breq	.+64     	; 0x1804 <_ZN5Laser4TickEv+0xb2>
    17c4:	18 f4       	brcc	.+6      	; 0x17cc <_ZN5Laser4TickEv+0x7a>
    17c6:	82 30       	cpi	r24, 0x02	; 2
    17c8:	b9 f0       	breq	.+46     	; 0x17f8 <_ZN5Laser4TickEv+0xa6>
    17ca:	92 c0       	rjmp	.+292    	; 0x18f0 <_ZN5Laser4TickEv+0x19e>
    17cc:	84 30       	cpi	r24, 0x04	; 4
    17ce:	31 f0       	breq	.+12     	; 0x17dc <_ZN5Laser4TickEv+0x8a>
    17d0:	85 30       	cpi	r24, 0x05	; 5
    17d2:	e1 f1       	breq	.+120    	; 0x184c <_ZN5Laser4TickEv+0xfa>
    17d4:	8d c0       	rjmp	.+282    	; 0x18f0 <_ZN5Laser4TickEv+0x19e>
			state = Proj_Inactive;
		break;
		case Proj_Warn:
			if (frame % 4 == 0) state = Proj_Active;
			
			if (frame > 75) {
    17d6:	8c 34       	cpi	r24, 0x4C	; 76
    17d8:	91 05       	cpc	r25, r1
    17da:	d4 f6       	brge	.-76     	; 0x1790 <_ZN5Laser4TickEv+0x3e>
		break;
		case Proj_Inactive:
		break;
		
		case Proj_Warn:
		++frame;
    17dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    17de:	9b 85       	ldd	r25, Y+11	; 0x0b
    17e0:	01 96       	adiw	r24, 0x01	; 1
    17e2:	9b 87       	std	Y+11, r25	; 0x0b
    17e4:	8a 87       	std	Y+10, r24	; 0x0a
		Draw(); 
    17e6:	e8 81       	ld	r30, Y
    17e8:	f9 81       	ldd	r31, Y+1	; 0x01
    17ea:	04 80       	ldd	r0, Z+4	; 0x04
    17ec:	f5 81       	ldd	r31, Z+5	; 0x05
    17ee:	e0 2d       	mov	r30, r0
    17f0:	ce 01       	movw	r24, r28
		
		default:
		break;
	}
	//pixelDebug(4, 1, matrix.Color333(0, 0, 1));
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
		case Proj_Inactive:
		break;
		
		case Proj_Warn:
		++frame;
		Draw(); 
    17f6:	09 94       	ijmp
		break;
		
		case Proj_Active:
		++frame; 
    17f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	9b 87       	std	Y+11, r25	; 0x0b
    1800:	8a 87       	std	Y+10, r24	; 0x0a
		break;
    1802:	76 c0       	rjmp	.+236    	; 0x18f0 <_ZN5Laser4TickEv+0x19e>
		
		case Proj_Lethal:
		++frame;
    1804:	8a 85       	ldd	r24, Y+10	; 0x0a
    1806:	9b 85       	ldd	r25, Y+11	; 0x0b
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	9b 87       	std	Y+11, r25	; 0x0b
    180c:	8a 87       	std	Y+10, r24	; 0x0a
		Draw(); 
    180e:	e8 81       	ld	r30, Y
    1810:	f9 81       	ldd	r31, Y+1	; 0x01
    1812:	04 80       	ldd	r0, Z+4	; 0x04
    1814:	f5 81       	ldd	r31, Z+5	; 0x05
    1816:	e0 2d       	mov	r30, r0
    1818:	ce 01       	movw	r24, r28
    181a:	09 95       	icall
		if (player.Get_State() == Pl_Normal) {
    181c:	88 ea       	ldi	r24, 0xA8	; 168
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <_ZN3You9Get_StateEv>
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	09 f0       	breq	.+2      	; 0x182a <_ZN5Laser4TickEv+0xd8>
    1828:	63 c0       	rjmp	.+198    	; 0x18f0 <_ZN5Laser4TickEv+0x19e>
			if (Collision_Check(1)) player.Receieve_Damage();
    182a:	e8 81       	ld	r30, Y
    182c:	f9 81       	ldd	r31, Y+1	; 0x01
    182e:	01 90       	ld	r0, Z+
    1830:	f0 81       	ld	r31, Z
    1832:	e0 2d       	mov	r30, r0
    1834:	61 e0       	ldi	r22, 0x01	; 1
    1836:	ce 01       	movw	r24, r28
    1838:	09 95       	icall
    183a:	88 23       	and	r24, r24
    183c:	09 f4       	brne	.+2      	; 0x1840 <_ZN5Laser4TickEv+0xee>
    183e:	58 c0       	rjmp	.+176    	; 0x18f0 <_ZN5Laser4TickEv+0x19e>
    1840:	88 ea       	ldi	r24, 0xA8	; 168
    1842:	91 e0       	ldi	r25, 0x01	; 1
		
		default:
		break;
	}
	//pixelDebug(4, 1, matrix.Color333(0, 0, 1));
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
		
		case Proj_Lethal:
		++frame;
		Draw(); 
		if (player.Get_State() == Pl_Normal) {
			if (Collision_Check(1)) player.Receieve_Damage();
    1848:	0c 94 ef 18 	jmp	0x31de	; 0x31de <_ZN3You15Receieve_DamageEv>
// 		}
		break;
		
		case Proj_Rotate:
		// Also handled in external function
		++frame;
    184c:	8a 85       	ldd	r24, Y+10	; 0x0a
    184e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	9b 87       	std	Y+11, r25	; 0x0b
    1854:	8a 87       	std	Y+10, r24	; 0x0a
		Draw();
    1856:	e8 81       	ld	r30, Y
    1858:	f9 81       	ldd	r31, Y+1	; 0x01
    185a:	04 80       	ldd	r0, Z+4	; 0x04
    185c:	f5 81       	ldd	r31, Z+5	; 0x05
    185e:	e0 2d       	mov	r30, r0
    1860:	ce 01       	movw	r24, r28
    1862:	09 95       	icall
		if (player.Get_State() == Pl_Normal) {
    1864:	88 ea       	ldi	r24, 0xA8	; 168
    1866:	91 e0       	ldi	r25, 0x01	; 1
    1868:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <_ZN3You9Get_StateEv>
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	71 f4       	brne	.+28     	; 0x188c <_ZN5Laser4TickEv+0x13a>
			if (Collision_Check(1)) player.Receieve_Damage();
    1870:	e8 81       	ld	r30, Y
    1872:	f9 81       	ldd	r31, Y+1	; 0x01
    1874:	01 90       	ld	r0, Z+
    1876:	f0 81       	ld	r31, Z
    1878:	e0 2d       	mov	r30, r0
    187a:	61 e0       	ldi	r22, 0x01	; 1
    187c:	ce 01       	movw	r24, r28
    187e:	09 95       	icall
    1880:	88 23       	and	r24, r24
    1882:	21 f0       	breq	.+8      	; 0x188c <_ZN5Laser4TickEv+0x13a>
    1884:	88 ea       	ldi	r24, 0xA8	; 168
    1886:	91 e0       	ldi	r25, 0x01	; 1
    1888:	0e 94 ef 18 	call	0x31de	; 0x31de <_ZN3You15Receieve_DamageEv>
		}
		
		if (frame % 5 == 0) {
    188c:	8a 85       	ldd	r24, Y+10	; 0x0a
    188e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1890:	65 e0       	ldi	r22, 0x05	; 5
    1892:	70 e0       	ldi	r23, 0x00	; 0
    1894:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <__divmodhi4>
    1898:	89 2b       	or	r24, r25
    189a:	51 f5       	brne	.+84     	; 0x18f0 <_ZN5Laser4TickEv+0x19e>
			if (x < 32 && y <= 0) Shift_X0(1); // Top Edge Shifting Right
    189c:	9a 81       	ldd	r25, Y+2	; 0x02
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	90 32       	cpi	r25, 0x20	; 32
    18a2:	24 f4       	brge	.+8      	; 0x18ac <_ZN5Laser4TickEv+0x15a>
    18a4:	18 16       	cp	r1, r24
    18a6:	34 f0       	brlt	.+12     	; 0x18b4 <_ZN5Laser4TickEv+0x162>
void Laser::Start_Rotate() {
	state = Proj_Rotate;
}

void Laser::Shift_X0(int8_t offs) {
	x += offs;
    18a8:	9f 5f       	subi	r25, 0xFF	; 255
    18aa:	09 c0       	rjmp	.+18     	; 0x18be <_ZN5Laser4TickEv+0x16c>
			if (Collision_Check(1)) player.Receieve_Damage();
		}
		
		if (frame % 5 == 0) {
			if (x < 32 && y <= 0) Shift_X0(1); // Top Edge Shifting Right
			else if (x >= 32 && y < 32) Shift_Y0(1); // Right Edge Shifting Down
    18ac:	80 32       	cpi	r24, 0x20	; 32
    18ae:	24 f4       	brge	.+8      	; 0x18b8 <_ZN5Laser4TickEv+0x166>
}
void Laser::Shift_X1(int8_t offs) {
	vx += offs;
}
void Laser::Shift_Y0(int8_t offs) {
	y += offs;
    18b0:	8f 5f       	subi	r24, 0xFF	; 255
    18b2:	08 c0       	rjmp	.+16     	; 0x18c4 <_ZN5Laser4TickEv+0x172>
		}
		
		if (frame % 5 == 0) {
			if (x < 32 && y <= 0) Shift_X0(1); // Top Edge Shifting Right
			else if (x >= 32 && y < 32) Shift_Y0(1); // Right Edge Shifting Down
			else if (x > 0 && y >= 32) Shift_X0(-1); // Bottom Edge Shifting Left
    18b4:	19 16       	cp	r1, r25
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <_ZN5Laser4TickEv+0x170>
    18b8:	80 32       	cpi	r24, 0x20	; 32
    18ba:	2c f0       	brlt	.+10     	; 0x18c6 <_ZN5Laser4TickEv+0x174>
void Laser::Start_Rotate() {
	state = Proj_Rotate;
}

void Laser::Shift_X0(int8_t offs) {
	x += offs;
    18bc:	91 50       	subi	r25, 0x01	; 1
    18be:	9a 83       	std	Y+2, r25	; 0x02
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <_ZN5Laser4TickEv+0x174>
}
void Laser::Shift_X1(int8_t offs) {
	vx += offs;
}
void Laser::Shift_Y0(int8_t offs) {
	y += offs;
    18c2:	81 50       	subi	r24, 0x01	; 1
    18c4:	8b 83       	std	Y+3, r24	; 0x03
			if (x < 32 && y <= 0) Shift_X0(1); // Top Edge Shifting Right
			else if (x >= 32 && y < 32) Shift_Y0(1); // Right Edge Shifting Down
			else if (x > 0 && y >= 32) Shift_X0(-1); // Bottom Edge Shifting Left
			else if (x <= 0 && y > 0) Shift_Y0(-1); // Left Edge Shifting Up
		
			if (vx < 32 && vy <= 0) Shift_X1(1); // Top Edge Shifting Right
    18c6:	9c 81       	ldd	r25, Y+4	; 0x04
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	90 32       	cpi	r25, 0x20	; 32
    18cc:	24 f4       	brge	.+8      	; 0x18d6 <_ZN5Laser4TickEv+0x184>
    18ce:	18 16       	cp	r1, r24
    18d0:	34 f0       	brlt	.+12     	; 0x18de <_ZN5Laser4TickEv+0x18c>

void Laser::Shift_X0(int8_t offs) {
	x += offs;
}
void Laser::Shift_X1(int8_t offs) {
	vx += offs;
    18d2:	9f 5f       	subi	r25, 0xFF	; 255
    18d4:	09 c0       	rjmp	.+18     	; 0x18e8 <_ZN5Laser4TickEv+0x196>
			else if (x >= 32 && y < 32) Shift_Y0(1); // Right Edge Shifting Down
			else if (x > 0 && y >= 32) Shift_X0(-1); // Bottom Edge Shifting Left
			else if (x <= 0 && y > 0) Shift_Y0(-1); // Left Edge Shifting Up
		
			if (vx < 32 && vy <= 0) Shift_X1(1); // Top Edge Shifting Right
			else if (vx >= 32 && vy < 32) Shift_Y1(1); // Right Edge Shifting Down
    18d6:	80 32       	cpi	r24, 0x20	; 32
    18d8:	24 f4       	brge	.+8      	; 0x18e2 <_ZN5Laser4TickEv+0x190>
}
void Laser::Shift_Y0(int8_t offs) {
	y += offs;
}
void Laser::Shift_Y1(int8_t offs) {
	vy += offs;
    18da:	8f 5f       	subi	r24, 0xFF	; 255
    18dc:	08 c0       	rjmp	.+16     	; 0x18ee <_ZN5Laser4TickEv+0x19c>
			else if (x > 0 && y >= 32) Shift_X0(-1); // Bottom Edge Shifting Left
			else if (x <= 0 && y > 0) Shift_Y0(-1); // Left Edge Shifting Up
		
			if (vx < 32 && vy <= 0) Shift_X1(1); // Top Edge Shifting Right
			else if (vx >= 32 && vy < 32) Shift_Y1(1); // Right Edge Shifting Down
			else if (vx > 0 && vy >= 32) Shift_X1(-1); // Bottom Edge Shifting Left
    18de:	19 16       	cp	r1, r25
    18e0:	2c f4       	brge	.+10     	; 0x18ec <_ZN5Laser4TickEv+0x19a>
    18e2:	80 32       	cpi	r24, 0x20	; 32
    18e4:	2c f0       	brlt	.+10     	; 0x18f0 <_ZN5Laser4TickEv+0x19e>

void Laser::Shift_X0(int8_t offs) {
	x += offs;
}
void Laser::Shift_X1(int8_t offs) {
	vx += offs;
    18e6:	91 50       	subi	r25, 0x01	; 1
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <_ZN5Laser4TickEv+0x19e>
}
void Laser::Shift_Y0(int8_t offs) {
	y += offs;
}
void Laser::Shift_Y1(int8_t offs) {
	vy += offs;
    18ec:	81 50       	subi	r24, 0x01	; 1
    18ee:	8d 83       	std	Y+5, r24	; 0x05
		
		default:
		break;
	}
	//pixelDebug(4, 1, matrix.Color333(0, 0, 1));
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	08 95       	ret

000018f6 <_ZN5Laser4DrawEv>:
		}
	}
	return false;
}

void Laser::Draw() {
    18f6:	7f 92       	push	r7
    18f8:	8f 92       	push	r8
    18fa:	9f 92       	push	r9
    18fc:	af 92       	push	r10
    18fe:	bf 92       	push	r11
    1900:	cf 92       	push	r12
    1902:	df 92       	push	r13
    1904:	ef 92       	push	r14
    1906:	ff 92       	push	r15
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	ec 01       	movw	r28, r24
	if (state == Proj_Warn) {
    1912:	8e 81       	ldd	r24, Y+6	; 0x06
    1914:	84 30       	cpi	r24, 0x04	; 4
    1916:	31 f5       	brne	.+76     	; 0x1964 <_ZN5Laser4DrawEv+0x6e>
		if (frame <= 71) matrix.drawLine(x, y, vx, vy, matrix.Color333(1, 1, 1));
    1918:	8a 85       	ldd	r24, Y+10	; 0x0a
    191a:	9b 85       	ldd	r25, Y+11	; 0x0b
    191c:	88 34       	cpi	r24, 0x48	; 72
    191e:	91 05       	cpc	r25, r1
    1920:	44 f4       	brge	.+16     	; 0x1932 <_ZN5Laser4DrawEv+0x3c>
    1922:	21 e0       	ldi	r18, 0x01	; 1
    1924:	41 e0       	ldi	r20, 0x01	; 1
    1926:	61 e0       	ldi	r22, 0x01	; 1
    1928:	8a e5       	ldi	r24, 0x5A	; 90
    192a:	91 e0       	ldi	r25, 0x01	; 1
    192c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN14RGBmatrixPanel8Color333Ehhh>
    1930:	03 c0       	rjmp	.+6      	; 0x1938 <_ZN5Laser4DrawEv+0x42>
		else  matrix.drawLine(x, y, vx, vy, return_color(clr));
    1932:	8c 85       	ldd	r24, Y+12	; 0x0c
    1934:	0e 94 a8 03 	call	0x750	; 0x750 <_Z12return_color6Colors>
    1938:	0d 81       	ldd	r16, Y+5	; 0x05
    193a:	00 2e       	mov	r0, r16
    193c:	00 0c       	add	r0, r0
    193e:	11 0b       	sbc	r17, r17
    1940:	2c 81       	ldd	r18, Y+4	; 0x04
    1942:	02 2e       	mov	r0, r18
    1944:	00 0c       	add	r0, r0
    1946:	33 0b       	sbc	r19, r19
    1948:	4b 81       	ldd	r20, Y+3	; 0x03
    194a:	04 2e       	mov	r0, r20
    194c:	00 0c       	add	r0, r0
    194e:	55 0b       	sbc	r21, r21
    1950:	6a 81       	ldd	r22, Y+2	; 0x02
    1952:	06 2e       	mov	r0, r22
    1954:	00 0c       	add	r0, r0
    1956:	77 0b       	sbc	r23, r23
    1958:	7c 01       	movw	r14, r24
    195a:	8a e5       	ldi	r24, 0x5A	; 90
    195c:	91 e0       	ldi	r25, 0x01	; 1
    195e:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <_ZN12Adafruit_GFX8drawLineEiiiij>
    1962:	76 c0       	rjmp	.+236    	; 0x1a50 <_ZN5Laser4DrawEv+0x15a>
	}
	else if (state == Proj_Lethal || state == Proj_Rotate) {
    1964:	83 30       	cpi	r24, 0x03	; 3
    1966:	19 f0       	breq	.+6      	; 0x196e <_ZN5Laser4DrawEv+0x78>
    1968:	85 30       	cpi	r24, 0x05	; 5
    196a:	09 f0       	breq	.+2      	; 0x196e <_ZN5Laser4DrawEv+0x78>
    196c:	71 c0       	rjmp	.+226    	; 0x1a50 <_ZN5Laser4DrawEv+0x15a>
		int16_t steep = abs(vy - y) > abs(vx - x);
    196e:	cd 80       	ldd	r12, Y+5	; 0x05
    1970:	0c 2c       	mov	r0, r12
    1972:	00 0c       	add	r0, r0
    1974:	dd 08       	sbc	r13, r13
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	c8 1a       	sub	r12, r24
    197a:	d1 08       	sbc	r13, r1
    197c:	87 fd       	sbrc	r24, 7
    197e:	d3 94       	inc	r13
    1980:	d7 fe       	sbrs	r13, 7
    1982:	03 c0       	rjmp	.+6      	; 0x198a <_ZN5Laser4DrawEv+0x94>
    1984:	d1 94       	neg	r13
    1986:	c1 94       	neg	r12
    1988:	d1 08       	sbc	r13, r1
    198a:	ac 80       	ldd	r10, Y+4	; 0x04
    198c:	0a 2c       	mov	r0, r10
    198e:	00 0c       	add	r0, r0
    1990:	bb 08       	sbc	r11, r11
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	a8 1a       	sub	r10, r24
    1996:	b1 08       	sbc	r11, r1
    1998:	87 fd       	sbrc	r24, 7
    199a:	b3 94       	inc	r11
    199c:	b7 fe       	sbrs	r11, 7
    199e:	03 c0       	rjmp	.+6      	; 0x19a6 <_ZN5Laser4DrawEv+0xb0>
    19a0:	b1 94       	neg	r11
    19a2:	a1 94       	neg	r10
    19a4:	b1 08       	sbc	r11, r1
		for (int8_t i = -thick; i <= thick; ++i) {
    19a6:	79 84       	ldd	r7, Y+9	; 0x09
    19a8:	71 94       	neg	r7
    19aa:	89 85       	ldd	r24, Y+9	; 0x09
    19ac:	87 15       	cp	r24, r7
    19ae:	0c f4       	brge	.+2      	; 0x19b2 <_ZN5Laser4DrawEv+0xbc>
    19b0:	3f c0       	rjmp	.+126    	; 0x1a30 <_ZN5Laser4DrawEv+0x13a>
    19b2:	87 2c       	mov	r8, r7
    19b4:	07 2c       	mov	r0, r7
    19b6:	00 0c       	add	r0, r0
    19b8:	99 08       	sbc	r9, r9
			if (!steep) matrix.drawLine(x, y+i, vx, vy+i, return_color(clr));
    19ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    19bc:	ac 14       	cp	r10, r12
    19be:	bd 04       	cpc	r11, r13
    19c0:	c4 f0       	brlt	.+48     	; 0x19f2 <_ZN5Laser4DrawEv+0xfc>
    19c2:	0e 94 a8 03 	call	0x750	; 0x750 <_Z12return_color6Colors>
    19c6:	2d 81       	ldd	r18, Y+5	; 0x05
    19c8:	84 01       	movw	r16, r8
    19ca:	02 0f       	add	r16, r18
    19cc:	11 1d       	adc	r17, r1
    19ce:	27 fd       	sbrc	r18, 7
    19d0:	1a 95       	dec	r17
    19d2:	2c 81       	ldd	r18, Y+4	; 0x04
    19d4:	02 2e       	mov	r0, r18
    19d6:	00 0c       	add	r0, r0
    19d8:	33 0b       	sbc	r19, r19
    19da:	4b 81       	ldd	r20, Y+3	; 0x03
    19dc:	b4 01       	movw	r22, r8
    19de:	64 0f       	add	r22, r20
    19e0:	71 1d       	adc	r23, r1
    19e2:	47 fd       	sbrc	r20, 7
    19e4:	7a 95       	dec	r23
    19e6:	ab 01       	movw	r20, r22
    19e8:	6a 81       	ldd	r22, Y+2	; 0x02
    19ea:	06 2e       	mov	r0, r22
    19ec:	00 0c       	add	r0, r0
    19ee:	77 0b       	sbc	r23, r23
    19f0:	18 c0       	rjmp	.+48     	; 0x1a22 <_ZN5Laser4DrawEv+0x12c>
			else matrix.drawLine(x+i, y, vx+i, vy, return_color(clr));
    19f2:	0e 94 a8 03 	call	0x750	; 0x750 <_Z12return_color6Colors>
    19f6:	0d 81       	ldd	r16, Y+5	; 0x05
    19f8:	00 2e       	mov	r0, r16
    19fa:	00 0c       	add	r0, r0
    19fc:	11 0b       	sbc	r17, r17
    19fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1a00:	f4 01       	movw	r30, r8
    1a02:	e2 0f       	add	r30, r18
    1a04:	f1 1d       	adc	r31, r1
    1a06:	27 fd       	sbrc	r18, 7
    1a08:	fa 95       	dec	r31
    1a0a:	9f 01       	movw	r18, r30
    1a0c:	4b 81       	ldd	r20, Y+3	; 0x03
    1a0e:	04 2e       	mov	r0, r20
    1a10:	00 0c       	add	r0, r0
    1a12:	55 0b       	sbc	r21, r21
    1a14:	6a 81       	ldd	r22, Y+2	; 0x02
    1a16:	f4 01       	movw	r30, r8
    1a18:	e6 0f       	add	r30, r22
    1a1a:	f1 1d       	adc	r31, r1
    1a1c:	67 fd       	sbrc	r22, 7
    1a1e:	fa 95       	dec	r31
    1a20:	bf 01       	movw	r22, r30
    1a22:	7c 01       	movw	r14, r24
    1a24:	8a e5       	ldi	r24, 0x5A	; 90
    1a26:	91 e0       	ldi	r25, 0x01	; 1
    1a28:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <_ZN12Adafruit_GFX8drawLineEiiiij>
    1a2c:	73 94       	inc	r7
    1a2e:	bd cf       	rjmp	.-134    	; 0x19aa <_ZN5Laser4DrawEv+0xb4>
		}
		if (frame % 2 == 0 && !(frame % 4 == 0)) ++thick;
    1a30:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a32:	5b 85       	ldd	r21, Y+11	; 0x0b
    1a34:	9a 01       	movw	r18, r20
    1a36:	23 70       	andi	r18, 0x03	; 3
    1a38:	33 27       	eor	r19, r19
    1a3a:	40 fd       	sbrc	r20, 0
    1a3c:	05 c0       	rjmp	.+10     	; 0x1a48 <_ZN5Laser4DrawEv+0x152>
    1a3e:	21 15       	cp	r18, r1
    1a40:	31 05       	cpc	r19, r1
    1a42:	11 f0       	breq	.+4      	; 0x1a48 <_ZN5Laser4DrawEv+0x152>
    1a44:	8f 5f       	subi	r24, 0xFF	; 255
    1a46:	03 c0       	rjmp	.+6      	; 0x1a4e <_ZN5Laser4DrawEv+0x158>
		else if (frame % 4 == 0) --thick;
    1a48:	23 2b       	or	r18, r19
    1a4a:	11 f4       	brne	.+4      	; 0x1a50 <_ZN5Laser4DrawEv+0x15a>
    1a4c:	81 50       	subi	r24, 0x01	; 1
    1a4e:	89 87       	std	Y+9, r24	; 0x09
	}
}
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	ff 90       	pop	r15
    1a5a:	ef 90       	pop	r14
    1a5c:	df 90       	pop	r13
    1a5e:	cf 90       	pop	r12
    1a60:	bf 90       	pop	r11
    1a62:	af 90       	pop	r10
    1a64:	9f 90       	pop	r9
    1a66:	8f 90       	pop	r8
    1a68:	7f 90       	pop	r7
    1a6a:	08 95       	ret

00001a6c <_ZN7SignalsC1Ev>:
#include "SignalControl.h"
Signals::Signals() {
    1a6c:	fc 01       	movw	r30, r24
	Clear_Signals();
	state = Signal_Start;
}

void Signals::Clear_Signals() {
	control = EMPTY_SIGNAL;
    1a6e:	10 82       	st	Z, r1
	stage = EMPTY_SIGNAL;
    1a70:	11 82       	std	Z+1, r1	; 0x01
#include "SignalControl.h"
Signals::Signals() {
	Clear_Signals();
	state = Signal_Start;
    1a72:	12 82       	std	Z+2, r1	; 0x02
    1a74:	08 95       	ret

00001a76 <_ZN7Signals13Clear_SignalsEv>:
}

void Signals::Clear_Signals() {
	control = EMPTY_SIGNAL;
    1a76:	fc 01       	movw	r30, r24
    1a78:	10 82       	st	Z, r1
	stage = EMPTY_SIGNAL;
    1a7a:	11 82       	std	Z+1, r1	; 0x01
    1a7c:	08 95       	ret

00001a7e <_ZN7Signals10Has_SignalE6Events>:
		control = Serial.read();
	}
}

bool Signals::Has_Signal(Events e) {
	return bitRead(stage, e);
    1a7e:	fc 01       	movw	r30, r24
    1a80:	81 81       	ldd	r24, Z+1	; 0x01
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <_ZN7Signals10Has_SignalE6Events+0xc>
    1a86:	95 95       	asr	r25
    1a88:	87 95       	ror	r24
    1a8a:	6a 95       	dec	r22
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <_ZN7Signals10Has_SignalE6Events+0x8>
}
    1a8e:	81 70       	andi	r24, 0x01	; 1
    1a90:	08 95       	ret

00001a92 <_ZN7Signals9Has_InputE8Controls>:

bool Signals::Has_Input(Controls c) {
	return bitRead(control, c);
    1a92:	fc 01       	movw	r30, r24
    1a94:	80 81       	ld	r24, Z
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <_ZN7Signals9Has_InputE8Controls+0xc>
    1a9a:	95 95       	asr	r25
    1a9c:	87 95       	ror	r24
    1a9e:	6a 95       	dec	r22
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <_ZN7Signals9Has_InputE8Controls+0x8>
}
    1aa2:	81 70       	andi	r24, 0x01	; 1
    1aa4:	08 95       	ret

00001aa6 <_ZN7Signals12Signal_EventE6Events>:

void Signals::Signal_Event(Events e) {
    1aa6:	26 2f       	mov	r18, r22
	bitWrite(stage, e, HIGH);
    1aa8:	41 e0       	ldi	r20, 0x01	; 1
    1aaa:	50 e0       	ldi	r21, 0x00	; 0
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	04 c0       	rjmp	.+8      	; 0x1aba <_ZN7Signals12Signal_EventE6Events+0x14>
    1ab2:	44 0f       	add	r20, r20
    1ab4:	55 1f       	adc	r21, r21
    1ab6:	66 1f       	adc	r22, r22
    1ab8:	77 1f       	adc	r23, r23
    1aba:	2a 95       	dec	r18
    1abc:	d2 f7       	brpl	.-12     	; 0x1ab2 <_ZN7Signals12Signal_EventE6Events+0xc>
    1abe:	fc 01       	movw	r30, r24
    1ac0:	21 81       	ldd	r18, Z+1	; 0x01
    1ac2:	42 2b       	or	r20, r18
    1ac4:	41 83       	std	Z+1, r20	; 0x01
    1ac6:	08 95       	ret

00001ac8 <_ZN7Signals12Send_SignalsEv>:
void Signals::Clear_Signals() {
	control = EMPTY_SIGNAL;
	stage = EMPTY_SIGNAL;
}

void Signals::Send_Signals() {
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	ec 01       	movw	r28, r24
	if (Serial.availableForWrite()) {
    1ace:	8e eb       	ldi	r24, 0xBE	; 190
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	0e 94 b0 1a 	call	0x3560	; 0x3560 <_ZN14HardwareSerial17availableForWriteEv>
    1ad6:	89 2b       	or	r24, r25
    1ad8:	39 f0       	breq	.+14     	; 0x1ae8 <_ZN7Signals12Send_SignalsEv+0x20>
		Serial.write(stage);
    1ada:	69 81       	ldd	r22, Y+1	; 0x01
    1adc:	8e eb       	ldi	r24, 0xBE	; 190
    1ade:	91 e0       	ldi	r25, 0x01	; 1
	}
}
    1ae0:	df 91       	pop	r29
    1ae2:	cf 91       	pop	r28
	stage = EMPTY_SIGNAL;
}

void Signals::Send_Signals() {
	if (Serial.availableForWrite()) {
		Serial.write(stage);
    1ae4:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <_ZN14HardwareSerial5writeEh>
	}
}
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	08 95       	ret

00001aee <_ZN7Signals15Receive_SignalsEv>:

void Signals::Receive_Signals() {
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	ec 01       	movw	r28, r24
	if (Serial.available() > 0) {
    1af4:	8e eb       	ldi	r24, 0xBE	; 190
    1af6:	91 e0       	ldi	r25, 0x01	; 1
    1af8:	0e 94 85 19 	call	0x330a	; 0x330a <_ZN14HardwareSerial9availableEv>
    1afc:	18 16       	cp	r1, r24
    1afe:	19 06       	cpc	r1, r25
    1b00:	2c f4       	brge	.+10     	; 0x1b0c <_ZN7Signals15Receive_SignalsEv+0x1e>
		control = Serial.read();
    1b02:	8e eb       	ldi	r24, 0xBE	; 190
    1b04:	91 e0       	ldi	r25, 0x01	; 1
    1b06:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZN14HardwareSerial4readEv>
    1b0a:	88 83       	st	Y, r24
	}
}
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	08 95       	ret

00001b12 <_Z4Tickv>:

byte debug = 0;

bool UpdateFlag = false;
void Tick() {
	++debug;
    1b12:	80 91 59 01 	lds	r24, 0x0159
    1b16:	8f 5f       	subi	r24, 0xFF	; 255
    1b18:	80 93 59 01 	sts	0x0159, r24
	UpdateFlag = true;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	80 93 58 01 	sts	0x0158, r24
    1b22:	08 95       	ret

00001b24 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1b24:	26 e0       	ldi	r18, 0x06	; 6
    1b26:	40 e8       	ldi	r20, 0x80	; 128
    1b28:	55 e2       	ldi	r21, 0x25	; 37
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	8e eb       	ldi	r24, 0xBE	; 190
    1b30:	91 e0       	ldi	r25, 0x01	; 1
    1b32:	0e 94 4b 1a 	call	0x3496	; 0x3496 <_ZN14HardwareSerial5beginEmh>

void setup() {
	Serial.begin(9600);
	while(!Serial);
	
	pinMode(LED_BUILTIN, OUTPUT);
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	8d e0       	ldi	r24, 0x0D	; 13
    1b3a:	0e 94 2d 1c 	call	0x385a	; 0x385a <pinMode>
	
	MsTimer2::set(MS_PER_TICK, Tick);
    1b3e:	49 e8       	ldi	r20, 0x89	; 137
    1b40:	5d e0       	ldi	r21, 0x0D	; 13
    1b42:	69 e1       	ldi	r22, 0x19	; 25
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	0e 94 1f 12 	call	0x243e	; 0x243e <_ZN8MsTimer23setEmPFvvE>
	MsTimer2::start();
    1b4e:	0e 94 67 12 	call	0x24ce	; 0x24ce <_ZN8MsTimer25startEv>
	
	matrix.begin();
    1b52:	8a e5       	ldi	r24, 0x5A	; 90
    1b54:	91 e0       	ldi	r25, 0x01	; 1
    1b56:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <_ZN14RGBmatrixPanel5beginEv>

00001b5a <_GLOBAL__sub_I_player>:
		//player2.Tick();
		usart.Send_Signals();
		
		UpdateFlag = false;
	}
    1b5a:	8f 92       	push	r8
    1b5c:	af 92       	push	r10
    1b5e:	cf 92       	push	r12
    1b60:	ef 92       	push	r14
    1b62:	0f 93       	push	r16
#include "You.h"
#include "Director.h"
#include "Projectiles.h"
//#include "Renderer.h"

You player(1, 14, 16);
    1b64:	20 e1       	ldi	r18, 0x10	; 16
    1b66:	4e e0       	ldi	r20, 0x0E	; 14
    1b68:	61 e0       	ldi	r22, 0x01	; 1
    1b6a:	88 ea       	ldi	r24, 0xA8	; 168
    1b6c:	91 e0       	ldi	r25, 0x01	; 1
    1b6e:	0e 94 99 18 	call	0x3132	; 0x3132 <_ZN3YouC1Ehhh>
//You player2(2, 18, 16);
Director director;
    1b72:	8c e9       	ldi	r24, 0x9C	; 156
    1b74:	91 e0       	ldi	r25, 0x01	; 1
    1b76:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN8DirectorC1Ev>
Signals usart;
    1b7a:	89 e9       	ldi	r24, 0x99	; 153
    1b7c:	91 e0       	ldi	r25, 0x01	; 1
    1b7e:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZN7SignalsC1Ev>

RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false);
    1b82:	80 e2       	ldi	r24, 0x20	; 32
    1b84:	8f 93       	push	r24
    1b86:	81 2c       	mov	r8, r1
    1b88:	89 e0       	ldi	r24, 0x09	; 9
    1b8a:	a8 2e       	mov	r10, r24
    1b8c:	9a e0       	ldi	r25, 0x0A	; 10
    1b8e:	c9 2e       	mov	r12, r25
    1b90:	28 e0       	ldi	r18, 0x08	; 8
    1b92:	e2 2e       	mov	r14, r18
    1b94:	01 e1       	ldi	r16, 0x11	; 17
    1b96:	20 e1       	ldi	r18, 0x10	; 16
    1b98:	4f e0       	ldi	r20, 0x0F	; 15
    1b9a:	6e e0       	ldi	r22, 0x0E	; 14
    1b9c:	8a e5       	ldi	r24, 0x5A	; 90
    1b9e:	91 e0       	ldi	r25, 0x01	; 1
    1ba0:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <_ZN14RGBmatrixPanelC1Ehhhhhhhbh>
    1ba4:	0f 90       	pop	r0
		//player2.Tick();
		usart.Send_Signals();
		
		UpdateFlag = false;
	}
    1ba6:	0f 91       	pop	r16
    1ba8:	ef 90       	pop	r14
    1baa:	cf 90       	pop	r12
    1bac:	af 90       	pop	r10
    1bae:	8f 90       	pop	r8
    1bb0:	08 95       	ret

00001bb2 <loop>:
		output = !output;
		debug = 0;
	}
	*/
	
	if (UpdateFlag) {
    1bb2:	80 91 58 01 	lds	r24, 0x0158
    1bb6:	88 23       	and	r24, r24
    1bb8:	e1 f0       	breq	.+56     	; 0x1bf2 <loop+0x40>
		matrix.fillScreen(0);
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	8a e5       	ldi	r24, 0x5A	; 90
    1bc0:	91 e0       	ldi	r25, 0x01	; 1
    1bc2:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_ZN14RGBmatrixPanel10fillScreenEj>
		
		usart.Clear_Signals();
    1bc6:	89 e9       	ldi	r24, 0x99	; 153
    1bc8:	91 e0       	ldi	r25, 0x01	; 1
    1bca:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <_ZN7Signals13Clear_SignalsEv>
		
		usart.Receive_Signals();
    1bce:	89 e9       	ldi	r24, 0x99	; 153
    1bd0:	91 e0       	ldi	r25, 0x01	; 1
    1bd2:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7Signals15Receive_SignalsEv>
		director.Tick();
    1bd6:	8c e9       	ldi	r24, 0x9C	; 156
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	0e 94 35 0a 	call	0x146a	; 0x146a <_ZN8Director4TickEv>
		player.Tick();
    1bde:	88 ea       	ldi	r24, 0xA8	; 168
    1be0:	91 e0       	ldi	r25, 0x01	; 1
    1be2:	0e 94 4e 19 	call	0x329c	; 0x329c <_ZN3You4TickEv>
		//player2.Tick();
		usart.Send_Signals();
    1be6:	89 e9       	ldi	r24, 0x99	; 153
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN7Signals12Send_SignalsEv>
		
		UpdateFlag = false;
    1bee:	10 92 58 01 	sts	0x0158, r1
    1bf2:	08 95       	ret

00001bf4 <_ZN12Adafruit_GFX8drawLineEiiiij>:
  }
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
 uint16_t color) {
    1bf4:	2f 92       	push	r2
    1bf6:	3f 92       	push	r3
    1bf8:	4f 92       	push	r4
    1bfa:	5f 92       	push	r5
    1bfc:	6f 92       	push	r6
    1bfe:	7f 92       	push	r7
    1c00:	8f 92       	push	r8
    1c02:	9f 92       	push	r9
    1c04:	af 92       	push	r10
    1c06:	bf 92       	push	r11
    1c08:	cf 92       	push	r12
    1c0a:	df 92       	push	r13
    1c0c:	ef 92       	push	r14
    1c0e:	ff 92       	push	r15
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <_ZN12Adafruit_GFX8drawLineEiiiij+0x26>
    1c1a:	1f 92       	push	r1
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	4c 01       	movw	r8, r24
    1c22:	7b 83       	std	Y+3, r23	; 0x03
    1c24:	6a 83       	std	Y+2, r22	; 0x02
    1c26:	6a 01       	movw	r12, r20
    1c28:	59 01       	movw	r10, r18
    1c2a:	17 01       	movw	r2, r14
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    1c2c:	98 01       	movw	r18, r16
    1c2e:	24 1b       	sub	r18, r20
    1c30:	35 0b       	sbc	r19, r21
    1c32:	37 ff       	sbrs	r19, 7
    1c34:	03 c0       	rjmp	.+6      	; 0x1c3c <_ZN12Adafruit_GFX8drawLineEiiiij+0x48>
    1c36:	31 95       	neg	r19
    1c38:	21 95       	neg	r18
    1c3a:	31 09       	sbc	r19, r1
    1c3c:	c5 01       	movw	r24, r10
    1c3e:	4a 81       	ldd	r20, Y+2	; 0x02
    1c40:	5b 81       	ldd	r21, Y+3	; 0x03
    1c42:	84 1b       	sub	r24, r20
    1c44:	95 0b       	sbc	r25, r21
    1c46:	97 ff       	sbrs	r25, 7
    1c48:	03 c0       	rjmp	.+6      	; 0x1c50 <_ZN12Adafruit_GFX8drawLineEiiiij+0x5c>
    1c4a:	91 95       	neg	r25
    1c4c:	81 95       	neg	r24
    1c4e:	91 09       	sbc	r25, r1
    1c50:	51 e0       	ldi	r21, 0x01	; 1
    1c52:	59 83       	std	Y+1, r21	; 0x01
    1c54:	82 17       	cp	r24, r18
    1c56:	93 07       	cpc	r25, r19
    1c58:	14 f0       	brlt	.+4      	; 0x1c5e <_ZN12Adafruit_GFX8drawLineEiiiij+0x6a>
    1c5a:	19 82       	std	Y+1, r1	; 0x01
    1c5c:	0b c0       	rjmp	.+22     	; 0x1c74 <_ZN12Adafruit_GFX8drawLineEiiiij+0x80>
  if (steep) {
    1c5e:	9a 2d       	mov	r25, r10
    1c60:	8b 2d       	mov	r24, r11
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
    1c62:	58 01       	movw	r10, r16
    1c64:	09 2f       	mov	r16, r25
    1c66:	18 2f       	mov	r17, r24

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
 uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
    1c68:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    _swap_int16_t(x0, y0);
    1c6c:	db 82       	std	Y+3, r13	; 0x03
    1c6e:	ca 82       	std	Y+2, r12	; 0x02
    1c70:	c9 2e       	mov	r12, r25
    1c72:	d8 2e       	mov	r13, r24
    _swap_int16_t(x1, y1);
  }

  if (x0 > x1) {
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	9b 81       	ldd	r25, Y+3	; 0x03
    1c78:	a8 16       	cp	r10, r24
    1c7a:	b9 06       	cpc	r11, r25
    1c7c:	5c f4       	brge	.+22     	; 0x1c94 <_ZN12Adafruit_GFX8drawLineEiiiij+0xa0>
    1c7e:	9c 2d       	mov	r25, r12
    1c80:	8d 2d       	mov	r24, r13
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
    1c82:	68 01       	movw	r12, r16
    1c84:	09 2f       	mov	r16, r25
    1c86:	18 2f       	mov	r17, r24
  if (steep) {
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
  }

  if (x0 > x1) {
    1c88:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	bb 82       	std	Y+3, r11	; 0x03
    1c8e:	aa 82       	std	Y+2, r10	; 0x02
    1c90:	a9 2e       	mov	r10, r25
    1c92:	b8 2e       	mov	r11, r24
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
    1c94:	25 01       	movw	r4, r10
    1c96:	aa 81       	ldd	r26, Y+2	; 0x02
    1c98:	bb 81       	ldd	r27, Y+3	; 0x03
    1c9a:	4a 1a       	sub	r4, r26
    1c9c:	5b 0a       	sbc	r5, r27
  dy = abs(y1 - y0);
    1c9e:	38 01       	movw	r6, r16
    1ca0:	6c 18       	sub	r6, r12
    1ca2:	7d 08       	sbc	r7, r13
    1ca4:	77 fe       	sbrs	r7, 7
    1ca6:	03 c0       	rjmp	.+6      	; 0x1cae <_ZN12Adafruit_GFX8drawLineEiiiij+0xba>
    1ca8:	71 94       	neg	r7
    1caa:	61 94       	neg	r6
    1cac:	71 08       	sbc	r7, r1

  int16_t err = dx / 2;
    1cae:	72 01       	movw	r14, r4
    1cb0:	57 fe       	sbrs	r5, 7
    1cb2:	03 c0       	rjmp	.+6      	; 0x1cba <_ZN12Adafruit_GFX8drawLineEiiiij+0xc6>
    1cb4:	bf ef       	ldi	r27, 0xFF	; 255
    1cb6:	eb 1a       	sub	r14, r27
    1cb8:	fb 0a       	sbc	r15, r27
    1cba:	f5 94       	asr	r15
    1cbc:	e7 94       	ror	r14
  int16_t ystep;

  if (y0 < y1) {
    1cbe:	c0 16       	cp	r12, r16
    1cc0:	d1 06       	cpc	r13, r17
    1cc2:	1c f0       	brlt	.+6      	; 0x1cca <_ZN12Adafruit_GFX8drawLineEiiiij+0xd6>
    ystep = 1;
  } else {
    ystep = -1;
    1cc4:	0f ef       	ldi	r16, 0xFF	; 255
    1cc6:	1f ef       	ldi	r17, 0xFF	; 255
    1cc8:	1f c0       	rjmp	.+62     	; 0x1d08 <_ZN12Adafruit_GFX8drawLineEiiiij+0x114>

  int16_t err = dx / 2;
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
    1cca:	01 e0       	ldi	r16, 0x01	; 1
    1ccc:	10 e0       	ldi	r17, 0x00	; 0
    1cce:	1c c0       	rjmp	.+56     	; 0x1d08 <_ZN12Adafruit_GFX8drawLineEiiiij+0x114>
    1cd0:	d4 01       	movw	r26, r8
    1cd2:	ed 91       	ld	r30, X+
    1cd4:	fc 91       	ld	r31, X
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
    1cd6:	b9 81       	ldd	r27, Y+1	; 0x01
      drawPixel(y0, x0, color);
    1cd8:	04 80       	ldd	r0, Z+4	; 0x04
    1cda:	f5 81       	ldd	r31, Z+5	; 0x05
    1cdc:	e0 2d       	mov	r30, r0
    1cde:	91 01       	movw	r18, r2
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
    1ce0:	bb 23       	and	r27, r27
    1ce2:	c1 f0       	breq	.+48     	; 0x1d14 <_ZN12Adafruit_GFX8drawLineEiiiij+0x120>
      drawPixel(y0, x0, color);
    1ce4:	4a 81       	ldd	r20, Y+2	; 0x02
    1ce6:	5b 81       	ldd	r21, Y+3	; 0x03
    1ce8:	b6 01       	movw	r22, r12
    } else {
      drawPixel(x0, y0, color);
    1cea:	c4 01       	movw	r24, r8
    1cec:	09 95       	icall
    }
    err -= dy;
    1cee:	e6 18       	sub	r14, r6
    1cf0:	f7 08       	sbc	r15, r7
    if (err < 0) {
    1cf2:	f7 fe       	sbrs	r15, 7
    1cf4:	04 c0       	rjmp	.+8      	; 0x1cfe <_ZN12Adafruit_GFX8drawLineEiiiij+0x10a>
      y0 += ystep;
    1cf6:	c0 0e       	add	r12, r16
    1cf8:	d1 1e       	adc	r13, r17
      err += dx;
    1cfa:	e4 0c       	add	r14, r4
    1cfc:	f5 1c       	adc	r15, r5
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    1cfe:	ea 81       	ldd	r30, Y+2	; 0x02
    1d00:	fb 81       	ldd	r31, Y+3	; 0x03
    1d02:	31 96       	adiw	r30, 0x01	; 1
    1d04:	fb 83       	std	Y+3, r31	; 0x03
    1d06:	ea 83       	std	Y+2, r30	; 0x02
    1d08:	4a 81       	ldd	r20, Y+2	; 0x02
    1d0a:	5b 81       	ldd	r21, Y+3	; 0x03
    1d0c:	a4 16       	cp	r10, r20
    1d0e:	b5 06       	cpc	r11, r21
    1d10:	fc f6       	brge	.-66     	; 0x1cd0 <_ZN12Adafruit_GFX8drawLineEiiiij+0xdc>
    1d12:	04 c0       	rjmp	.+8      	; 0x1d1c <_ZN12Adafruit_GFX8drawLineEiiiij+0x128>
    if (steep) {
      drawPixel(y0, x0, color);
    } else {
      drawPixel(x0, y0, color);
    1d14:	a6 01       	movw	r20, r12
    1d16:	6a 81       	ldd	r22, Y+2	; 0x02
    1d18:	7b 81       	ldd	r23, Y+3	; 0x03
    1d1a:	e7 cf       	rjmp	.-50     	; 0x1cea <_ZN12Adafruit_GFX8drawLineEiiiij+0xf6>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	1f 91       	pop	r17
    1d28:	0f 91       	pop	r16
    1d2a:	ff 90       	pop	r15
    1d2c:	ef 90       	pop	r14
    1d2e:	df 90       	pop	r13
    1d30:	cf 90       	pop	r12
    1d32:	bf 90       	pop	r11
    1d34:	af 90       	pop	r10
    1d36:	9f 90       	pop	r9
    1d38:	8f 90       	pop	r8
    1d3a:	7f 90       	pop	r7
    1d3c:	6f 90       	pop	r6
    1d3e:	5f 90       	pop	r5
    1d40:	4f 90       	pop	r4
    1d42:	3f 90       	pop	r3
    1d44:	2f 90       	pop	r2
    1d46:	08 95       	ret

00001d48 <_ZN12Adafruit_GFX8drawRectEiiiij>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
    1d48:	6f 92       	push	r6
    1d4a:	7f 92       	push	r7
    1d4c:	8f 92       	push	r8
    1d4e:	9f 92       	push	r9
    1d50:	af 92       	push	r10
    1d52:	bf 92       	push	r11
    1d54:	cf 92       	push	r12
    1d56:	df 92       	push	r13
    1d58:	ef 92       	push	r14
    1d5a:	ff 92       	push	r15
    1d5c:	0f 93       	push	r16
    1d5e:	1f 93       	push	r17
    1d60:	cf 93       	push	r28
    1d62:	df 93       	push	r29
    1d64:	ec 01       	movw	r28, r24
    1d66:	4b 01       	movw	r8, r22
    1d68:	5a 01       	movw	r10, r20
    1d6a:	69 01       	movw	r12, r18
    1d6c:	38 01       	movw	r6, r16
  drawFastHLine(x, y, w, color);
    1d6e:	e8 81       	ld	r30, Y
    1d70:	f9 81       	ldd	r31, Y+1	; 0x01
    1d72:	02 84       	ldd	r0, Z+10	; 0x0a
    1d74:	f3 85       	ldd	r31, Z+11	; 0x0b
    1d76:	e0 2d       	mov	r30, r0
    1d78:	87 01       	movw	r16, r14
    1d7a:	09 95       	icall
  drawFastHLine(x, y+h-1, w, color);
    1d7c:	e8 81       	ld	r30, Y
    1d7e:	f9 81       	ldd	r31, Y+1	; 0x01
    1d80:	a5 01       	movw	r20, r10
    1d82:	46 0d       	add	r20, r6
    1d84:	57 1d       	adc	r21, r7
    1d86:	41 50       	subi	r20, 0x01	; 1
    1d88:	51 09       	sbc	r21, r1
    1d8a:	02 84       	ldd	r0, Z+10	; 0x0a
    1d8c:	f3 85       	ldd	r31, Z+11	; 0x0b
    1d8e:	e0 2d       	mov	r30, r0
    1d90:	96 01       	movw	r18, r12
    1d92:	b4 01       	movw	r22, r8
    1d94:	ce 01       	movw	r24, r28
    1d96:	09 95       	icall
  drawFastVLine(x, y, h, color);
    1d98:	e8 81       	ld	r30, Y
    1d9a:	f9 81       	ldd	r31, Y+1	; 0x01
    1d9c:	00 84       	ldd	r0, Z+8	; 0x08
    1d9e:	f1 85       	ldd	r31, Z+9	; 0x09
    1da0:	e0 2d       	mov	r30, r0
    1da2:	93 01       	movw	r18, r6
    1da4:	a5 01       	movw	r20, r10
    1da6:	b4 01       	movw	r22, r8
    1da8:	ce 01       	movw	r24, r28
    1daa:	09 95       	icall
  drawFastVLine(x+w-1, y, h, color);
    1dac:	e8 81       	ld	r30, Y
    1dae:	f9 81       	ldd	r31, Y+1	; 0x01
    1db0:	c8 0c       	add	r12, r8
    1db2:	d9 1c       	adc	r13, r9
    1db4:	b6 01       	movw	r22, r12
    1db6:	61 50       	subi	r22, 0x01	; 1
    1db8:	71 09       	sbc	r23, r1
    1dba:	00 84       	ldd	r0, Z+8	; 0x08
    1dbc:	f1 85       	ldd	r31, Z+9	; 0x09
    1dbe:	e0 2d       	mov	r30, r0
    1dc0:	93 01       	movw	r18, r6
    1dc2:	a5 01       	movw	r20, r10
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	09 95       	icall
}
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	1f 91       	pop	r17
    1dce:	0f 91       	pop	r16
    1dd0:	ff 90       	pop	r15
    1dd2:	ef 90       	pop	r14
    1dd4:	df 90       	pop	r13
    1dd6:	cf 90       	pop	r12
    1dd8:	bf 90       	pop	r11
    1dda:	af 90       	pop	r10
    1ddc:	9f 90       	pop	r9
    1dde:	8f 90       	pop	r8
    1de0:	7f 90       	pop	r7
    1de2:	6f 90       	pop	r6
    1de4:	08 95       	ret

00001de6 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
 int16_t h, uint16_t color) {
    1de6:	ef 92       	push	r14
    1de8:	ff 92       	push	r15
    1dea:	0f 93       	push	r16
    1dec:	1f 93       	push	r17
    1dee:	78 01       	movw	r14, r16
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
    1df0:	dc 01       	movw	r26, r24
    1df2:	ed 91       	ld	r30, X+
    1df4:	fc 91       	ld	r31, X
    1df6:	24 0f       	add	r18, r20
    1df8:	35 1f       	adc	r19, r21
    1dfa:	89 01       	movw	r16, r18
    1dfc:	01 50       	subi	r16, 0x01	; 1
    1dfe:	11 09       	sbc	r17, r1
    1e00:	06 80       	ldd	r0, Z+6	; 0x06
    1e02:	f7 81       	ldd	r31, Z+7	; 0x07
    1e04:	e0 2d       	mov	r30, r0
    1e06:	9b 01       	movw	r18, r22
    1e08:	09 95       	icall
}
    1e0a:	1f 91       	pop	r17
    1e0c:	0f 91       	pop	r16
    1e0e:	ff 90       	pop	r15
    1e10:	ef 90       	pop	r14
    1e12:	08 95       	ret

00001e14 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
 int16_t w, uint16_t color) {
    1e14:	ef 92       	push	r14
    1e16:	ff 92       	push	r15
    1e18:	0f 93       	push	r16
    1e1a:	1f 93       	push	r17
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	ed 91       	ld	r30, X+
    1e20:	fc 91       	ld	r31, X
    1e22:	26 0f       	add	r18, r22
    1e24:	37 1f       	adc	r19, r23
    1e26:	21 50       	subi	r18, 0x01	; 1
    1e28:	31 09       	sbc	r19, r1
    1e2a:	06 80       	ldd	r0, Z+6	; 0x06
    1e2c:	f7 81       	ldd	r31, Z+7	; 0x07
    1e2e:	e0 2d       	mov	r30, r0
    1e30:	78 01       	movw	r14, r16
    1e32:	8a 01       	movw	r16, r20
    1e34:	09 95       	icall
}
    1e36:	1f 91       	pop	r17
    1e38:	0f 91       	pop	r16
    1e3a:	ff 90       	pop	r15
    1e3c:	ef 90       	pop	r14
    1e3e:	08 95       	ret

00001e40 <_ZN12Adafruit_GFX8fillRectEiiiij>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
    1e40:	6f 92       	push	r6
    1e42:	7f 92       	push	r7
    1e44:	8f 92       	push	r8
    1e46:	9f 92       	push	r9
    1e48:	af 92       	push	r10
    1e4a:	bf 92       	push	r11
    1e4c:	cf 92       	push	r12
    1e4e:	df 92       	push	r13
    1e50:	ef 92       	push	r14
    1e52:	ff 92       	push	r15
    1e54:	0f 93       	push	r16
    1e56:	1f 93       	push	r17
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	6c 01       	movw	r12, r24
    1e5e:	5a 01       	movw	r10, r20
    1e60:	48 01       	movw	r8, r16
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
    1e62:	eb 01       	movw	r28, r22
    1e64:	3b 01       	movw	r6, r22
    1e66:	62 0e       	add	r6, r18
    1e68:	73 1e       	adc	r7, r19
    1e6a:	c6 15       	cp	r28, r6
    1e6c:	d7 05       	cpc	r29, r7
    1e6e:	74 f4       	brge	.+28     	; 0x1e8c <_ZN12Adafruit_GFX8fillRectEiiiij+0x4c>
    drawFastVLine(i, y, h, color);
    1e70:	d6 01       	movw	r26, r12
    1e72:	ed 91       	ld	r30, X+
    1e74:	fc 91       	ld	r31, X
    1e76:	00 84       	ldd	r0, Z+8	; 0x08
    1e78:	f1 85       	ldd	r31, Z+9	; 0x09
    1e7a:	e0 2d       	mov	r30, r0
    1e7c:	87 01       	movw	r16, r14
    1e7e:	94 01       	movw	r18, r8
    1e80:	a5 01       	movw	r20, r10
    1e82:	be 01       	movw	r22, r28
    1e84:	c6 01       	movw	r24, r12
    1e86:	09 95       	icall
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
    1e88:	21 96       	adiw	r28, 0x01	; 1
    1e8a:	ef cf       	rjmp	.-34     	; 0x1e6a <_ZN12Adafruit_GFX8fillRectEiiiij+0x2a>
    drawFastVLine(i, y, h, color);
  }
}
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	ff 90       	pop	r15
    1e96:	ef 90       	pop	r14
    1e98:	df 90       	pop	r13
    1e9a:	cf 90       	pop	r12
    1e9c:	bf 90       	pop	r11
    1e9e:	af 90       	pop	r10
    1ea0:	9f 90       	pop	r9
    1ea2:	8f 90       	pop	r8
    1ea4:	7f 90       	pop	r7
    1ea6:	6f 90       	pop	r6
    1ea8:	08 95       	ret

00001eaa <_ZN12Adafruit_GFX10fillScreenEj>:

void Adafruit_GFX::fillScreen(uint16_t color) {
    1eaa:	ef 92       	push	r14
    1eac:	ff 92       	push	r15
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
  fillRect(0, 0, _width, _height, color);
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	ed 91       	ld	r30, X+
    1eb6:	fc 91       	ld	r31, X
    1eb8:	11 97       	sbiw	r26, 0x01	; 1
    1eba:	1a 96       	adiw	r26, 0x0a	; 10
    1ebc:	0d 91       	ld	r16, X+
    1ebe:	1c 91       	ld	r17, X
    1ec0:	1b 97       	sbiw	r26, 0x0b	; 11
    1ec2:	18 96       	adiw	r26, 0x08	; 8
    1ec4:	2d 91       	ld	r18, X+
    1ec6:	3c 91       	ld	r19, X
    1ec8:	19 97       	sbiw	r26, 0x09	; 9
    1eca:	06 84       	ldd	r0, Z+14	; 0x0e
    1ecc:	f7 85       	ldd	r31, Z+15	; 0x0f
    1ece:	e0 2d       	mov	r30, r0
    1ed0:	7b 01       	movw	r14, r22
    1ed2:	40 e0       	ldi	r20, 0x00	; 0
    1ed4:	50 e0       	ldi	r21, 0x00	; 0
    1ed6:	60 e0       	ldi	r22, 0x00	; 0
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	09 95       	icall
}
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	ff 90       	pop	r15
    1ee2:	ef 90       	pop	r14
    1ee4:	08 95       	ret

00001ee6 <_ZN12Adafruit_GFX13invertDisplayEb>:

int16_t Adafruit_GFX::height(void) const {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
    1ee6:	08 95       	ret

00001ee8 <_ZN12Adafruit_GFXC1Eii>:

#ifndef _swap_int16_t
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
#endif

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
    1ee8:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1eea:	13 82       	std	Z+3, r1	; 0x03
    1eec:	12 82       	std	Z+2, r1	; 0x02
  WIDTH(w), HEIGHT(h)
    1eee:	8b e1       	ldi	r24, 0x1B	; 27
    1ef0:	91 e0       	ldi	r25, 0x01	; 1
    1ef2:	91 83       	std	Z+1, r25	; 0x01
    1ef4:	80 83       	st	Z, r24
    1ef6:	75 83       	std	Z+5, r23	; 0x05
    1ef8:	64 83       	std	Z+4, r22	; 0x04
    1efa:	57 83       	std	Z+7, r21	; 0x07
    1efc:	46 83       	std	Z+6, r20	; 0x06
{
  _width    = WIDTH;
    1efe:	71 87       	std	Z+9, r23	; 0x09
    1f00:	60 87       	std	Z+8, r22	; 0x08
  _height   = HEIGHT;
    1f02:	53 87       	std	Z+11, r21	; 0x0b
    1f04:	42 87       	std	Z+10, r20	; 0x0a
  rotation  = 0;
    1f06:	15 8a       	std	Z+21, r1	; 0x15
  cursor_y  = cursor_x    = 0;
    1f08:	15 86       	std	Z+13, r1	; 0x0d
    1f0a:	14 86       	std	Z+12, r1	; 0x0c
    1f0c:	17 86       	std	Z+15, r1	; 0x0f
    1f0e:	16 86       	std	Z+14, r1	; 0x0e
  textsize  = 1;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	84 8b       	std	Z+20, r24	; 0x14
  textcolor = textbgcolor = 0xFFFF;
    1f14:	2f ef       	ldi	r18, 0xFF	; 255
    1f16:	3f ef       	ldi	r19, 0xFF	; 255
    1f18:	33 8b       	std	Z+19, r19	; 0x13
    1f1a:	22 8b       	std	Z+18, r18	; 0x12
    1f1c:	31 8b       	std	Z+17, r19	; 0x11
    1f1e:	20 8b       	std	Z+16, r18	; 0x10
  wrap      = true;
    1f20:	86 8b       	std	Z+22, r24	; 0x16
  _cp437    = false;
    1f22:	17 8a       	std	Z+23, r1	; 0x17
  gfxFont   = NULL;
    1f24:	11 8e       	std	Z+25, r1	; 0x19
    1f26:	10 8e       	std	Z+24, r1	; 0x18
    1f28:	08 95       	ret

00001f2a <_ZN12Adafruit_GFX8drawCharEiihjjh>:
#endif
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
 uint16_t color, uint16_t bg, uint8_t size) {
    1f2a:	2f 92       	push	r2
    1f2c:	3f 92       	push	r3
    1f2e:	4f 92       	push	r4
    1f30:	5f 92       	push	r5
    1f32:	6f 92       	push	r6
    1f34:	7f 92       	push	r7
    1f36:	8f 92       	push	r8
    1f38:	9f 92       	push	r9
    1f3a:	af 92       	push	r10
    1f3c:	bf 92       	push	r11
    1f3e:	cf 92       	push	r12
    1f40:	df 92       	push	r13
    1f42:	ef 92       	push	r14
    1f44:	ff 92       	push	r15
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	69 97       	sbiw	r28, 0x19	; 25
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	3c 01       	movw	r6, r24
    1f60:	4a 01       	movw	r8, r20
    1f62:	1f 83       	std	Y+7, r17	; 0x07
    1f64:	0e 83       	std	Y+6, r16	; 0x06
    1f66:	fd 82       	std	Y+5, r15	; 0x05
    1f68:	ec 82       	std	Y+4, r14	; 0x04
    1f6a:	ca 82       	std	Y+2, r12	; 0x02

  if(!gfxFont) { // 'Classic' built-in font
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	58 96       	adiw	r26, 0x18	; 24
    1f70:	4d 91       	ld	r20, X+
    1f72:	5c 91       	ld	r21, X
    1f74:	59 97       	sbiw	r26, 0x19	; 25
    1f76:	41 15       	cp	r20, r1
    1f78:	51 05       	cpc	r21, r1
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x54>
    1f7c:	a8 c0       	rjmp	.+336    	; 0x20ce <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1a4>

    if((x >= _width)            || // Clip right
    1f7e:	18 96       	adiw	r26, 0x08	; 8
    1f80:	8d 91       	ld	r24, X+
    1f82:	9c 91       	ld	r25, X
    1f84:	19 97       	sbiw	r26, 0x09	; 9
    1f86:	68 17       	cp	r22, r24
    1f88:	79 07       	cpc	r23, r25
    1f8a:	0c f0       	brlt	.+2      	; 0x1f8e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x64>
    1f8c:	60 c1       	rjmp	.+704    	; 0x224e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
    1f8e:	1a 96       	adiw	r26, 0x0a	; 10
    1f90:	8d 91       	ld	r24, X+
    1f92:	9c 91       	ld	r25, X
    1f94:	1b 97       	sbiw	r26, 0x0b	; 11
    1f96:	88 16       	cp	r8, r24
    1f98:	99 06       	cpc	r9, r25
    1f9a:	0c f0       	brlt	.+2      	; 0x1f9e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x74>
    1f9c:	58 c1       	rjmp	.+688    	; 0x224e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
       (y >= _height)           || // Clip bottom
       ((x + 6 * size - 1) < 0) || // Clip left
    1f9e:	d1 2c       	mov	r13, r1
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	ea 81       	ldd	r30, Y+2	; 0x02
    1fa4:	b6 e0       	ldi	r27, 0x06	; 6
    1fa6:	eb 9f       	mul	r30, r27
    1fa8:	80 0d       	add	r24, r0
    1faa:	91 1d       	adc	r25, r1
    1fac:	11 24       	eor	r1, r1
 uint16_t color, uint16_t bg, uint8_t size) {

  if(!gfxFont) { // 'Classic' built-in font

    if((x >= _width)            || // Clip right
       (y >= _height)           || // Clip bottom
    1fae:	18 16       	cp	r1, r24
    1fb0:	19 06       	cpc	r1, r25
    1fb2:	0c f0       	brlt	.+2      	; 0x1fb6 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x8c>
    1fb4:	4c c1       	rjmp	.+664    	; 0x224e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
       ((x + 6 * size - 1) < 0) || // Clip left
       ((y + 8 * size - 1) < 0))   // Clip top
    1fb6:	c6 01       	movw	r24, r12
    1fb8:	33 e0       	ldi	r19, 0x03	; 3
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	3a 95       	dec	r19
    1fc0:	e1 f7       	brne	.-8      	; 0x1fba <_ZN12Adafruit_GFX8drawCharEiihjjh+0x90>
    1fc2:	88 0d       	add	r24, r8
    1fc4:	99 1d       	adc	r25, r9

  if(!gfxFont) { // 'Classic' built-in font

    if((x >= _width)            || // Clip right
       (y >= _height)           || // Clip bottom
       ((x + 6 * size - 1) < 0) || // Clip left
    1fc6:	18 16       	cp	r1, r24
    1fc8:	19 06       	cpc	r1, r25
    1fca:	0c f0       	brlt	.+2      	; 0x1fce <_ZN12Adafruit_GFX8drawCharEiihjjh+0xa4>
    1fcc:	40 c1       	rjmp	.+640    	; 0x224e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
    1fce:	d3 01       	movw	r26, r6
    1fd0:	57 96       	adiw	r26, 0x17	; 23
    1fd2:	8c 91       	ld	r24, X
    1fd4:	81 11       	cpse	r24, r1
    1fd6:	03 c0       	rjmp	.+6      	; 0x1fde <_ZN12Adafruit_GFX8drawCharEiihjjh+0xb4>
    1fd8:	20 3b       	cpi	r18, 0xB0	; 176
    1fda:	08 f0       	brcs	.+2      	; 0x1fde <_ZN12Adafruit_GFX8drawCharEiihjjh+0xb4>
    1fdc:	2f 5f       	subi	r18, 0xFF	; 255

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
    1fde:	b5 e0       	ldi	r27, 0x05	; 5
    1fe0:	2b 9f       	mul	r18, r27
    1fe2:	90 01       	movw	r18, r0
    1fe4:	11 24       	eor	r1, r1
    1fe6:	7e 87       	std	Y+14, r23	; 0x0e
    1fe8:	6d 87       	std	Y+13, r22	; 0x0d
    1fea:	2b 01       	movw	r4, r22
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

    for(int8_t i=0; i<6; i++ ) {
    1fec:	1b 82       	std	Y+3, r1	; 0x03
    1fee:	f9 01       	movw	r30, r18
    1ff0:	e6 1b       	sub	r30, r22
    1ff2:	f7 0b       	sbc	r31, r23
    1ff4:	f9 87       	std	Y+9, r31	; 0x09
    1ff6:	e8 87       	std	Y+8, r30	; 0x08
    1ff8:	94 01       	movw	r18, r8
    1ffa:	28 5f       	subi	r18, 0xF8	; 248
    1ffc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ffe:	3b 87       	std	Y+11, r19	; 0x0b
    2000:	2a 87       	std	Y+10, r18	; 0x0a
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
    2002:	3b 81       	ldd	r19, Y+3	; 0x03
    2004:	35 30       	cpi	r19, 0x05	; 5
    2006:	59 f0       	breq	.+22     	; 0x201e <_ZN12Adafruit_GFX8drawCharEiihjjh+0xf4>
    2008:	e8 85       	ldd	r30, Y+8	; 0x08
    200a:	f9 85       	ldd	r31, Y+9	; 0x09
    200c:	4d 85       	ldd	r20, Y+13	; 0x0d
    200e:	5e 85       	ldd	r21, Y+14	; 0x0e
    2010:	e4 0f       	add	r30, r20
    2012:	f5 1f       	adc	r31, r21
    2014:	e5 54       	subi	r30, 0x45	; 69
    2016:	fe 4f       	sbci	r31, 0xFE	; 254
    2018:	54 91       	lpm	r21, Z
    201a:	59 83       	std	Y+1, r21	; 0x01
    201c:	01 c0       	rjmp	.+2      	; 0x2020 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xf6>
      else      line = 0x0;
    201e:	19 82       	std	Y+1, r1	; 0x01
    2020:	14 01       	movw	r2, r8
    2022:	54 01       	movw	r10, r8
      for(int8_t j=0; j<8; j++, line >>= 1) {
        if(line & 0x1) {
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	80 ff       	sbrs	r24, 0
    2028:	12 c0       	rjmp	.+36     	; 0x204e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x124>
    202a:	d3 01       	movw	r26, r6
    202c:	ed 91       	ld	r30, X+
    202e:	fc 91       	ld	r31, X
          if(size == 1) drawPixel(x+i, y+j, color);
    2030:	ba 81       	ldd	r27, Y+2	; 0x02
    2032:	b1 30       	cpi	r27, 0x01	; 1
    2034:	31 f4       	brne	.+12     	; 0x2042 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x118>
    2036:	04 80       	ldd	r0, Z+4	; 0x04
    2038:	f5 81       	ldd	r31, Z+5	; 0x05
    203a:	e0 2d       	mov	r30, r0
    203c:	2e 81       	ldd	r18, Y+6	; 0x06
    203e:	3f 81       	ldd	r19, Y+7	; 0x07
    2040:	18 c0       	rjmp	.+48     	; 0x2072 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x148>
          else          fillRect(x+(i*size), y+(j*size), size, size, color);
    2042:	06 84       	ldd	r0, Z+14	; 0x0e
    2044:	f7 85       	ldd	r31, Z+15	; 0x0f
    2046:	e0 2d       	mov	r30, r0
    2048:	ee 80       	ldd	r14, Y+6	; 0x06
    204a:	ff 80       	ldd	r15, Y+7	; 0x07
    204c:	1d c0       	rjmp	.+58     	; 0x2088 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x15e>
        } else if(bg != color) {
    204e:	ec 81       	ldd	r30, Y+4	; 0x04
    2050:	fd 81       	ldd	r31, Y+5	; 0x05
    2052:	2e 81       	ldd	r18, Y+6	; 0x06
    2054:	3f 81       	ldd	r19, Y+7	; 0x07
    2056:	e2 17       	cp	r30, r18
    2058:	f3 07       	cpc	r31, r19
    205a:	e1 f0       	breq	.+56     	; 0x2094 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x16a>
    205c:	d3 01       	movw	r26, r6
    205e:	ed 91       	ld	r30, X+
    2060:	fc 91       	ld	r31, X
          if(size == 1) drawPixel(x+i, y+j, bg);
    2062:	ba 81       	ldd	r27, Y+2	; 0x02
    2064:	b1 30       	cpi	r27, 0x01	; 1
    2066:	59 f4       	brne	.+22     	; 0x207e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x154>
    2068:	04 80       	ldd	r0, Z+4	; 0x04
    206a:	f5 81       	ldd	r31, Z+5	; 0x05
    206c:	e0 2d       	mov	r30, r0
    206e:	2c 81       	ldd	r18, Y+4	; 0x04
    2070:	3d 81       	ldd	r19, Y+5	; 0x05
    2072:	a5 01       	movw	r20, r10
    2074:	6d 85       	ldd	r22, Y+13	; 0x0d
    2076:	7e 85       	ldd	r23, Y+14	; 0x0e
    2078:	c3 01       	movw	r24, r6
    207a:	09 95       	icall
    207c:	0b c0       	rjmp	.+22     	; 0x2094 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x16a>
          else          fillRect(x+i*size, y+j*size, size, size, bg);
    207e:	06 84       	ldd	r0, Z+14	; 0x0e
    2080:	f7 85       	ldd	r31, Z+15	; 0x0f
    2082:	e0 2d       	mov	r30, r0
    2084:	ec 80       	ldd	r14, Y+4	; 0x04
    2086:	fd 80       	ldd	r15, Y+5	; 0x05
    2088:	86 01       	movw	r16, r12
    208a:	96 01       	movw	r18, r12
    208c:	a1 01       	movw	r20, r2
    208e:	b2 01       	movw	r22, r4
    2090:	c3 01       	movw	r24, r6
    2092:	09 95       	icall

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
      else      line = 0x0;
      for(int8_t j=0; j<8; j++, line >>= 1) {
    2094:	e9 81       	ldd	r30, Y+1	; 0x01
    2096:	e6 95       	lsr	r30
    2098:	e9 83       	std	Y+1, r30	; 0x01
    209a:	2c 0c       	add	r2, r12
    209c:	3d 1c       	adc	r3, r13
    209e:	ff ef       	ldi	r31, 0xFF	; 255
    20a0:	af 1a       	sub	r10, r31
    20a2:	bf 0a       	sbc	r11, r31
    20a4:	2a 85       	ldd	r18, Y+10	; 0x0a
    20a6:	3b 85       	ldd	r19, Y+11	; 0x0b
    20a8:	a2 16       	cp	r10, r18
    20aa:	b3 06       	cpc	r11, r19
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x186>
    20ae:	ba cf       	rjmp	.-140    	; 0x2024 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xfa>
    20b0:	3b 81       	ldd	r19, Y+3	; 0x03
    20b2:	3f 5f       	subi	r19, 0xFF	; 255
    20b4:	3b 83       	std	Y+3, r19	; 0x03
    20b6:	4c 0c       	add	r4, r12
    20b8:	5d 1c       	adc	r5, r13
    20ba:	4d 85       	ldd	r20, Y+13	; 0x0d
    20bc:	5e 85       	ldd	r21, Y+14	; 0x0e
    20be:	4f 5f       	subi	r20, 0xFF	; 255
    20c0:	5f 4f       	sbci	r21, 0xFF	; 255
    20c2:	5e 87       	std	Y+14, r21	; 0x0e
    20c4:	4d 87       	std	Y+13, r20	; 0x0d
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

    for(int8_t i=0; i<6; i++ ) {
    20c6:	36 30       	cpi	r19, 0x06	; 6
    20c8:	09 f0       	breq	.+2      	; 0x20cc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1a2>
    20ca:	9b cf       	rjmp	.-202    	; 0x2002 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xd8>
    20cc:	c0 c0       	rjmp	.+384    	; 0x224e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling drawChar()
    // directly with 'bad' characters of font may cause mayhem!

    c -= pgm_read_byte(&gfxFont->first);
    20ce:	fa 01       	movw	r30, r20
    20d0:	34 96       	adiw	r30, 0x04	; 4
    20d2:	34 91       	lpm	r19, Z
    GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    20d4:	32 97       	sbiw	r30, 0x02	; 2
    20d6:	85 91       	lpm	r24, Z+
    20d8:	94 91       	lpm	r25, Z

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling drawChar()
    // directly with 'bad' characters of font may cause mayhem!

    c -= pgm_read_byte(&gfxFont->first);
    20da:	23 1b       	sub	r18, r19
    GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    20dc:	a7 e0       	ldi	r26, 0x07	; 7
    20de:	2a 9f       	mul	r18, r26
    20e0:	80 0d       	add	r24, r0
    20e2:	91 1d       	adc	r25, r1
    20e4:	11 24       	eor	r1, r1
    uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
    20e6:	fa 01       	movw	r30, r20
    20e8:	25 91       	lpm	r18, Z+
    20ea:	34 91       	lpm	r19, Z
    20ec:	38 8b       	std	Y+16, r19	; 0x10
    20ee:	2f 87       	std	Y+15, r18	; 0x0f

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    20f0:	fc 01       	movw	r30, r24
    20f2:	25 90       	lpm	r2, Z+
    20f4:	34 90       	lpm	r3, Z
    uint8_t  w  = pgm_read_byte(&glyph->width),
    20f6:	fc 01       	movw	r30, r24
    20f8:	32 96       	adiw	r30, 0x02	; 2
    20fa:	34 91       	lpm	r19, Z
    20fc:	3b 83       	std	Y+3, r19	; 0x03
             h  = pgm_read_byte(&glyph->height),
    20fe:	31 96       	adiw	r30, 0x01	; 1
    2100:	44 91       	lpm	r20, Z
    2102:	4c 87       	std	Y+12, r20	; 0x0c
             xa = pgm_read_byte(&glyph->xAdvance);
    2104:	31 96       	adiw	r30, 0x01	; 1
    2106:	e4 91       	lpm	r30, Z
    int8_t   xo = pgm_read_byte(&glyph->xOffset),
    2108:	fc 01       	movw	r30, r24
    210a:	35 96       	adiw	r30, 0x05	; 5
    210c:	a4 91       	lpm	r26, Z
             yo = pgm_read_byte(&glyph->yOffset);
    210e:	31 96       	adiw	r30, 0x01	; 1
    2110:	84 91       	lpm	r24, Z
    uint8_t  xx, yy, bits, bit = 0;
    int16_t  xo16, yo16;

    if(size > 1) {
    2112:	5a 81       	ldd	r21, Y+2	; 0x02
    2114:	52 30       	cpi	r21, 0x02	; 2
    2116:	50 f0       	brcs	.+20     	; 0x212c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x202>
      xo16 = xo;
    2118:	4a 2e       	mov	r4, r26
    211a:	0a 2e       	mov	r0, r26
    211c:	00 0c       	add	r0, r0
    211e:	55 08       	sbc	r5, r5
      yo16 = yo;
    2120:	e8 2f       	mov	r30, r24
    2122:	08 2e       	mov	r0, r24
    2124:	00 0c       	add	r0, r0
    2126:	ff 0b       	sbc	r31, r31
    2128:	f9 87       	std	Y+9, r31	; 0x09
    212a:	e8 87       	std	Y+8, r30	; 0x08
    212c:	fa 81       	ldd	r31, Y+2	; 0x02
    212e:	cf 2e       	mov	r12, r31
    2130:	d1 2c       	mov	r13, r1
    2132:	4c 9c       	mul	r4, r12
    2134:	90 01       	movw	r18, r0
    2136:	4d 9c       	mul	r4, r13
    2138:	30 0d       	add	r19, r0
    213a:	5c 9c       	mul	r5, r12
    213c:	30 0d       	add	r19, r0
    213e:	11 24       	eor	r1, r1
    2140:	a9 01       	movw	r20, r18
    2142:	46 0f       	add	r20, r22
    2144:	57 1f       	adc	r21, r23
    2146:	5b 87       	std	Y+11, r21	; 0x0b
    2148:	4a 87       	std	Y+10, r20	; 0x0a
    uint8_t  w  = pgm_read_byte(&glyph->width),
             h  = pgm_read_byte(&glyph->height),
             xa = pgm_read_byte(&glyph->xAdvance);
    int8_t   xo = pgm_read_byte(&glyph->xOffset),
             yo = pgm_read_byte(&glyph->yOffset);
    uint8_t  xx, yy, bits, bit = 0;
    214a:	19 82       	std	Y+1, r1	; 0x01
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
    214c:	a1 2c       	mov	r10, r1
    214e:	ea 2f       	mov	r30, r26
    2150:	aa 0f       	add	r26, r26
    2152:	ff 0b       	sbc	r31, r31
    2154:	db 01       	movw	r26, r22
    2156:	ae 0f       	add	r26, r30
    2158:	bf 1f       	adc	r27, r31
    215a:	bd 83       	std	Y+5, r27	; 0x05
    215c:	ac 83       	std	Y+4, r26	; 0x04
    215e:	bb 81       	ldd	r27, Y+3	; 0x03
    2160:	6b 0f       	add	r22, r27
    2162:	71 1d       	adc	r23, r1
    2164:	9b 01       	movw	r18, r22
    2166:	2e 0f       	add	r18, r30
    2168:	3f 1f       	adc	r19, r31
    216a:	3d 8b       	std	Y+21, r19	; 0x15
    216c:	2c 8b       	std	Y+20, r18	; 0x14
        if(!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
    216e:	a4 01       	movw	r20, r8
    2170:	48 0f       	add	r20, r24
    2172:	51 1d       	adc	r21, r1
    2174:	87 fd       	sbrc	r24, 7
    2176:	5a 95       	dec	r21
    2178:	5f 8b       	std	Y+23, r21	; 0x17
    217a:	4e 8b       	std	Y+22, r20	; 0x16
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
    217c:	9c 85       	ldd	r25, Y+12	; 0x0c
    217e:	a9 16       	cp	r10, r25
    2180:	08 f0       	brcs	.+2      	; 0x2184 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x25a>
    2182:	65 c0       	rjmp	.+202    	; 0x224e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
          } else {
            fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
    2184:	8a 2d       	mov	r24, r10
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	48 85       	ldd	r20, Y+8	; 0x08
    218a:	59 85       	ldd	r21, Y+9	; 0x09
    218c:	48 0f       	add	r20, r24
    218e:	59 1f       	adc	r21, r25
    2190:	4c 9d       	mul	r20, r12
    2192:	90 01       	movw	r18, r0
    2194:	4d 9d       	mul	r20, r13
    2196:	30 0d       	add	r19, r0
    2198:	5c 9d       	mul	r21, r12
    219a:	30 0d       	add	r19, r0
    219c:	11 24       	eor	r1, r1
    219e:	d9 01       	movw	r26, r18
    21a0:	a8 0d       	add	r26, r8
    21a2:	b9 1d       	adc	r27, r9
    21a4:	be 87       	std	Y+14, r27	; 0x0e
    21a6:	ad 87       	std	Y+13, r26	; 0x0d
    21a8:	ec 81       	ldd	r30, Y+4	; 0x04
    21aa:	fd 81       	ldd	r31, Y+5	; 0x05
    21ac:	f9 8f       	std	Y+25, r31	; 0x19
    21ae:	e8 8f       	std	Y+24, r30	; 0x18
    21b0:	4a 84       	ldd	r4, Y+10	; 0x0a
    21b2:	5b 84       	ldd	r5, Y+11	; 0x0b
    21b4:	f9 81       	ldd	r31, Y+1	; 0x01
    21b6:	2c 81       	ldd	r18, Y+4	; 0x04
    21b8:	f2 1b       	sub	r31, r18
    21ba:	f9 8b       	std	Y+17, r31	; 0x11
        if(!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
    21bc:	4e 89       	ldd	r20, Y+22	; 0x16
    21be:	5f 89       	ldd	r21, Y+23	; 0x17
    21c0:	48 0f       	add	r20, r24
    21c2:	59 1f       	adc	r21, r25
    21c4:	5b 8b       	std	Y+19, r21	; 0x13
    21c6:	4a 8b       	std	Y+18, r20	; 0x12
    21c8:	89 89       	ldd	r24, Y+17	; 0x11
    21ca:	f8 8d       	ldd	r31, Y+24	; 0x18
    21cc:	8f 0f       	add	r24, r31
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
      for(xx=0; xx<w; xx++) {
    21ce:	28 8d       	ldd	r18, Y+24	; 0x18
    21d0:	39 8d       	ldd	r19, Y+25	; 0x19
    21d2:	4c 89       	ldd	r20, Y+20	; 0x14
    21d4:	5d 89       	ldd	r21, Y+21	; 0x15
    21d6:	24 17       	cp	r18, r20
    21d8:	35 07       	cpc	r19, r21
    21da:	99 f1       	breq	.+102    	; 0x2242 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x318>
        if(!(bit++ & 7)) {
    21dc:	87 70       	andi	r24, 0x07	; 7
    21de:	41 f4       	brne	.+16     	; 0x21f0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2c6>
          bits = pgm_read_byte(&bitmap[bo++]);
    21e0:	c1 01       	movw	r24, r2
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	ef 85       	ldd	r30, Y+15	; 0x0f
    21e6:	f8 89       	ldd	r31, Y+16	; 0x10
    21e8:	e2 0d       	add	r30, r2
    21ea:	f3 1d       	adc	r31, r3
    21ec:	b4 90       	lpm	r11, Z
    21ee:	1c 01       	movw	r2, r24
        }
        if(bits & 0x80) {
    21f0:	b7 fe       	sbrs	r11, 7
    21f2:	1e c0       	rjmp	.+60     	; 0x2230 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x306>
    21f4:	d3 01       	movw	r26, r6
    21f6:	ed 91       	ld	r30, X+
    21f8:	fc 91       	ld	r31, X
          if(size == 1) {
    21fa:	ba 81       	ldd	r27, Y+2	; 0x02
    21fc:	b1 30       	cpi	r27, 0x01	; 1
    21fe:	61 f4       	brne	.+24     	; 0x2218 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2ee>
            drawPixel(x+xo+xx, y+yo+yy, color);
    2200:	04 80       	ldd	r0, Z+4	; 0x04
    2202:	f5 81       	ldd	r31, Z+5	; 0x05
    2204:	e0 2d       	mov	r30, r0
    2206:	2e 81       	ldd	r18, Y+6	; 0x06
    2208:	3f 81       	ldd	r19, Y+7	; 0x07
    220a:	4a 89       	ldd	r20, Y+18	; 0x12
    220c:	5b 89       	ldd	r21, Y+19	; 0x13
    220e:	68 8d       	ldd	r22, Y+24	; 0x18
    2210:	79 8d       	ldd	r23, Y+25	; 0x19
    2212:	c3 01       	movw	r24, r6
    2214:	09 95       	icall
    2216:	0c c0       	rjmp	.+24     	; 0x2230 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x306>
          } else {
            fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
    2218:	06 84       	ldd	r0, Z+14	; 0x0e
    221a:	f7 85       	ldd	r31, Z+15	; 0x0f
    221c:	e0 2d       	mov	r30, r0
    221e:	ee 80       	ldd	r14, Y+6	; 0x06
    2220:	ff 80       	ldd	r15, Y+7	; 0x07
    2222:	86 01       	movw	r16, r12
    2224:	96 01       	movw	r18, r12
    2226:	4d 85       	ldd	r20, Y+13	; 0x0d
    2228:	5e 85       	ldd	r21, Y+14	; 0x0e
    222a:	b2 01       	movw	r22, r4
    222c:	c3 01       	movw	r24, r6
    222e:	09 95       	icall
          }
        }
        bits <<= 1;
    2230:	bb 0c       	add	r11, r11
    2232:	4c 0c       	add	r4, r12
    2234:	5d 1c       	adc	r5, r13
    2236:	e8 8d       	ldd	r30, Y+24	; 0x18
    2238:	f9 8d       	ldd	r31, Y+25	; 0x19
    223a:	31 96       	adiw	r30, 0x01	; 1
    223c:	f9 8f       	std	Y+25, r31	; 0x19
    223e:	e8 8f       	std	Y+24, r30	; 0x18
    2240:	c3 cf       	rjmp	.-122    	; 0x21c8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x29e>
    2242:	59 81       	ldd	r21, Y+1	; 0x01
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	58 0f       	add	r21, r24
    2248:	59 83       	std	Y+1, r21	; 0x01
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
    224a:	a3 94       	inc	r10
    224c:	97 cf       	rjmp	.-210    	; 0x217c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x252>
        bits <<= 1;
      }
    }

  } // End classic vs custom font
}
    224e:	69 96       	adiw	r28, 0x19	; 25
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	ff 90       	pop	r15
    2264:	ef 90       	pop	r14
    2266:	df 90       	pop	r13
    2268:	cf 90       	pop	r12
    226a:	bf 90       	pop	r11
    226c:	af 90       	pop	r10
    226e:	9f 90       	pop	r9
    2270:	8f 90       	pop	r8
    2272:	7f 90       	pop	r7
    2274:	6f 90       	pop	r6
    2276:	5f 90       	pop	r5
    2278:	4f 90       	pop	r4
    227a:	3f 90       	pop	r3
    227c:	2f 90       	pop	r2
    227e:	08 95       	ret

00002280 <_ZN12Adafruit_GFX5writeEh>:
    }
  }
}

#if ARDUINO >= 100
size_t Adafruit_GFX::write(uint8_t c) {
    2280:	af 92       	push	r10
    2282:	bf 92       	push	r11
    2284:	cf 92       	push	r12
    2286:	ef 92       	push	r14
    2288:	ff 92       	push	r15
    228a:	0f 93       	push	r16
    228c:	1f 93       	push	r17
    228e:	cf 93       	push	r28
    2290:	df 93       	push	r29
    2292:	ec 01       	movw	r28, r24
    2294:	26 2f       	mov	r18, r22
#else
void Adafruit_GFX::write(uint8_t c) {
#endif

  if(!gfxFont) { // 'Classic' built-in font
    2296:	88 8d       	ldd	r24, Y+24	; 0x18
    2298:	99 8d       	ldd	r25, Y+25	; 0x19
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	09 f0       	breq	.+2      	; 0x22a0 <_ZN12Adafruit_GFX5writeEh+0x20>
    229e:	42 c0       	rjmp	.+132    	; 0x2324 <_ZN12Adafruit_GFX5writeEh+0xa4>

    if(c == '\n') {
    22a0:	6a 30       	cpi	r22, 0x0A	; 10
    22a2:	69 f4       	brne	.+26     	; 0x22be <_ZN12Adafruit_GFX5writeEh+0x3e>
      cursor_y += textsize*8;
    22a4:	2c 89       	ldd	r18, Y+20	; 0x14
    22a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    22a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    22aa:	38 e0       	ldi	r19, 0x08	; 8
    22ac:	23 9f       	mul	r18, r19
    22ae:	80 0d       	add	r24, r0
    22b0:	91 1d       	adc	r25, r1
    22b2:	11 24       	eor	r1, r1
    22b4:	9f 87       	std	Y+15, r25	; 0x0f
    22b6:	8e 87       	std	Y+14, r24	; 0x0e
      cursor_x  = 0;
    22b8:	1d 86       	std	Y+13, r1	; 0x0d
    22ba:	1c 86       	std	Y+12, r1	; 0x0c
    22bc:	ac c0       	rjmp	.+344    	; 0x2416 <_ZN12Adafruit_GFX5writeEh+0x196>
    } else if(c == '\r') {
    22be:	6d 30       	cpi	r22, 0x0D	; 13
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <_ZN12Adafruit_GFX5writeEh+0x44>
    22c2:	a9 c0       	rjmp	.+338    	; 0x2416 <_ZN12Adafruit_GFX5writeEh+0x196>
      // skip em
    } else {
      if(wrap && ((cursor_x + textsize * 6) >= _width)) { // Heading off edge?
    22c4:	8e 89       	ldd	r24, Y+22	; 0x16
    22c6:	88 23       	and	r24, r24
    22c8:	c1 f0       	breq	.+48     	; 0x22fa <_ZN12Adafruit_GFX5writeEh+0x7a>
    22ca:	3c 89       	ldd	r19, Y+20	; 0x14
    22cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    22ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    22d0:	46 e0       	ldi	r20, 0x06	; 6
    22d2:	34 9f       	mul	r19, r20
    22d4:	80 0d       	add	r24, r0
    22d6:	91 1d       	adc	r25, r1
    22d8:	11 24       	eor	r1, r1
    22da:	48 85       	ldd	r20, Y+8	; 0x08
    22dc:	59 85       	ldd	r21, Y+9	; 0x09
    22de:	84 17       	cp	r24, r20
    22e0:	95 07       	cpc	r25, r21
    22e2:	5c f0       	brlt	.+22     	; 0x22fa <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x  = 0;            // Reset x to zero
    22e4:	1d 86       	std	Y+13, r1	; 0x0d
    22e6:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize * 8; // Advance y one line
    22e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    22ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    22ec:	e8 e0       	ldi	r30, 0x08	; 8
    22ee:	3e 9f       	mul	r19, r30
    22f0:	80 0d       	add	r24, r0
    22f2:	91 1d       	adc	r25, r1
    22f4:	11 24       	eor	r1, r1
    22f6:	9f 87       	std	Y+15, r25	; 0x0f
    22f8:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    22fa:	ea 88       	ldd	r14, Y+18	; 0x12
    22fc:	fb 88       	ldd	r15, Y+19	; 0x13
    22fe:	08 89       	ldd	r16, Y+16	; 0x10
    2300:	19 89       	ldd	r17, Y+17	; 0x11
    2302:	4e 85       	ldd	r20, Y+14	; 0x0e
    2304:	5f 85       	ldd	r21, Y+15	; 0x0f
    2306:	6c 85       	ldd	r22, Y+12	; 0x0c
    2308:	7d 85       	ldd	r23, Y+13	; 0x0d
    230a:	cc 88       	ldd	r12, Y+20	; 0x14
    230c:	ce 01       	movw	r24, r28
    230e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <_ZN12Adafruit_GFX8drawCharEiihjjh>
      cursor_x += textsize * 6;
    2312:	2c 89       	ldd	r18, Y+20	; 0x14
    2314:	8c 85       	ldd	r24, Y+12	; 0x0c
    2316:	9d 85       	ldd	r25, Y+13	; 0x0d
    2318:	f6 e0       	ldi	r31, 0x06	; 6
    231a:	2f 9f       	mul	r18, r31
    231c:	80 0d       	add	r24, r0
    231e:	91 1d       	adc	r25, r1
    2320:	11 24       	eor	r1, r1
    2322:	41 c0       	rjmp	.+130    	; 0x23a6 <_ZN12Adafruit_GFX5writeEh+0x126>
    }

  } else { // Custom font

    if(c == '\n') {
    2324:	6a 30       	cpi	r22, 0x0A	; 10
    2326:	79 f4       	brne	.+30     	; 0x2346 <_ZN12Adafruit_GFX5writeEh+0xc6>
      cursor_x  = 0;
    2328:	1d 86       	std	Y+13, r1	; 0x0d
    232a:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += (int16_t)textsize *
    232c:	2c 89       	ldd	r18, Y+20	; 0x14
                  (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    232e:	fc 01       	movw	r30, r24
    2330:	36 96       	adiw	r30, 0x06	; 6
    2332:	e4 91       	lpm	r30, Z
    2334:	8e 85       	ldd	r24, Y+14	; 0x0e
    2336:	9f 85       	ldd	r25, Y+15	; 0x0f
    2338:	2e 9f       	mul	r18, r30
    233a:	80 0d       	add	r24, r0
    233c:	91 1d       	adc	r25, r1
    233e:	11 24       	eor	r1, r1
    2340:	9f 87       	std	Y+15, r25	; 0x0f
    2342:	8e 87       	std	Y+14, r24	; 0x0e
    2344:	68 c0       	rjmp	.+208    	; 0x2416 <_ZN12Adafruit_GFX5writeEh+0x196>
    } else if(c != '\r') {
    2346:	6d 30       	cpi	r22, 0x0D	; 13
    2348:	09 f4       	brne	.+2      	; 0x234c <_ZN12Adafruit_GFX5writeEh+0xcc>
    234a:	65 c0       	rjmp	.+202    	; 0x2416 <_ZN12Adafruit_GFX5writeEh+0x196>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    234c:	ac 01       	movw	r20, r24
    234e:	4c 5f       	subi	r20, 0xFC	; 252
    2350:	5f 4f       	sbci	r21, 0xFF	; 255
    2352:	fa 01       	movw	r30, r20
    2354:	34 91       	lpm	r19, Z
      if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    2356:	63 17       	cp	r22, r19
    2358:	08 f4       	brcc	.+2      	; 0x235c <_ZN12Adafruit_GFX5writeEh+0xdc>
    235a:	5d c0       	rjmp	.+186    	; 0x2416 <_ZN12Adafruit_GFX5writeEh+0x196>
    235c:	31 96       	adiw	r30, 0x01	; 1
    235e:	e4 91       	lpm	r30, Z
    2360:	e6 17       	cp	r30, r22
    2362:	08 f4       	brcc	.+2      	; 0x2366 <_ZN12Adafruit_GFX5writeEh+0xe6>
    2364:	58 c0       	rjmp	.+176    	; 0x2416 <_ZN12Adafruit_GFX5writeEh+0x196>
        uint8_t   c2    = c - pgm_read_byte(&gfxFont->first);
    2366:	fa 01       	movw	r30, r20
    2368:	44 91       	lpm	r20, Z
    236a:	36 2f       	mov	r19, r22
    236c:	34 1b       	sub	r19, r20
        GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c2]);
    236e:	fc 01       	movw	r30, r24
    2370:	32 96       	adiw	r30, 0x02	; 2
    2372:	a5 90       	lpm	r10, Z+
    2374:	b4 90       	lpm	r11, Z
    2376:	f7 e0       	ldi	r31, 0x07	; 7
    2378:	3f 9f       	mul	r19, r31
    237a:	a0 0c       	add	r10, r0
    237c:	b1 1c       	adc	r11, r1
    237e:	11 24       	eor	r1, r1
        uint8_t   w     = pgm_read_byte(&glyph->width),
    2380:	f5 01       	movw	r30, r10
    2382:	32 96       	adiw	r30, 0x02	; 2
    2384:	34 91       	lpm	r19, Z
                  h     = pgm_read_byte(&glyph->height);
    2386:	31 96       	adiw	r30, 0x01	; 1
    2388:	e4 91       	lpm	r30, Z
        if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    238a:	33 23       	and	r19, r19
    238c:	11 f0       	breq	.+4      	; 0x2392 <_ZN12Adafruit_GFX5writeEh+0x112>
    238e:	e1 11       	cpse	r30, r1
    2390:	0d c0       	rjmp	.+26     	; 0x23ac <_ZN12Adafruit_GFX5writeEh+0x12c>
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
        }
        cursor_x += pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
    2392:	f5 01       	movw	r30, r10
    2394:	34 96       	adiw	r30, 0x04	; 4
    2396:	e4 91       	lpm	r30, Z
    2398:	2c 89       	ldd	r18, Y+20	; 0x14
    239a:	8c 85       	ldd	r24, Y+12	; 0x0c
    239c:	9d 85       	ldd	r25, Y+13	; 0x0d
    239e:	e2 9f       	mul	r30, r18
    23a0:	80 0d       	add	r24, r0
    23a2:	91 1d       	adc	r25, r1
    23a4:	11 24       	eor	r1, r1
    23a6:	9d 87       	std	Y+13, r25	; 0x0d
    23a8:	8c 87       	std	Y+12, r24	; 0x0c
    23aa:	35 c0       	rjmp	.+106    	; 0x2416 <_ZN12Adafruit_GFX5writeEh+0x196>
        uint8_t   c2    = c - pgm_read_byte(&gfxFont->first);
        GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c2]);
        uint8_t   w     = pgm_read_byte(&glyph->width),
                  h     = pgm_read_byte(&glyph->height);
        if((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    23ac:	f5 01       	movw	r30, r10
    23ae:	35 96       	adiw	r30, 0x05	; 5
    23b0:	44 91       	lpm	r20, Z
          if(wrap && ((cursor_x + textsize * (xo + w)) >= _width)) {
    23b2:	5e 89       	ldd	r21, Y+22	; 0x16
    23b4:	55 23       	and	r21, r21
    23b6:	11 f1       	breq	.+68     	; 0x23fc <_ZN12Adafruit_GFX5writeEh+0x17c>
    23b8:	6c 89       	ldd	r22, Y+20	; 0x14
    23ba:	e3 2f       	mov	r30, r19
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	e4 0f       	add	r30, r20
    23c0:	f1 1d       	adc	r31, r1
    23c2:	47 fd       	sbrc	r20, 7
    23c4:	fa 95       	dec	r31
    23c6:	6e 9f       	mul	r22, r30
    23c8:	d0 01       	movw	r26, r0
    23ca:	6f 9f       	mul	r22, r31
    23cc:	b0 0d       	add	r27, r0
    23ce:	11 24       	eor	r1, r1
    23d0:	4c 85       	ldd	r20, Y+12	; 0x0c
    23d2:	5d 85       	ldd	r21, Y+13	; 0x0d
    23d4:	4a 0f       	add	r20, r26
    23d6:	5b 1f       	adc	r21, r27
    23d8:	e8 85       	ldd	r30, Y+8	; 0x08
    23da:	f9 85       	ldd	r31, Y+9	; 0x09
    23dc:	4e 17       	cp	r20, r30
    23de:	5f 07       	cpc	r21, r31
    23e0:	6c f0       	brlt	.+26     	; 0x23fc <_ZN12Adafruit_GFX5writeEh+0x17c>
            // Drawing character would go off right edge; wrap to new line
            cursor_x  = 0;
    23e2:	1d 86       	std	Y+13, r1	; 0x0d
    23e4:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    23e6:	fc 01       	movw	r30, r24
    23e8:	36 96       	adiw	r30, 0x06	; 6
    23ea:	e4 91       	lpm	r30, Z
    23ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    23ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    23f0:	6e 9f       	mul	r22, r30
    23f2:	80 0d       	add	r24, r0
    23f4:	91 1d       	adc	r25, r1
    23f6:	11 24       	eor	r1, r1
    23f8:	9f 87       	std	Y+15, r25	; 0x0f
    23fa:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    23fc:	ea 88       	ldd	r14, Y+18	; 0x12
    23fe:	fb 88       	ldd	r15, Y+19	; 0x13
    2400:	08 89       	ldd	r16, Y+16	; 0x10
    2402:	19 89       	ldd	r17, Y+17	; 0x11
    2404:	4e 85       	ldd	r20, Y+14	; 0x0e
    2406:	5f 85       	ldd	r21, Y+15	; 0x0f
    2408:	6c 85       	ldd	r22, Y+12	; 0x0c
    240a:	7d 85       	ldd	r23, Y+13	; 0x0d
    240c:	cc 88       	ldd	r12, Y+20	; 0x14
    240e:	ce 01       	movw	r24, r28
    2410:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <_ZN12Adafruit_GFX8drawCharEiihjjh>
    2414:	be cf       	rjmp	.-132    	; 0x2392 <_ZN12Adafruit_GFX5writeEh+0x112>

  }
#if ARDUINO >= 100
  return 1;
#endif
}
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	1f 91       	pop	r17
    2420:	0f 91       	pop	r16
    2422:	ff 90       	pop	r15
    2424:	ef 90       	pop	r14
    2426:	cf 90       	pop	r12
    2428:	bf 90       	pop	r11
    242a:	af 90       	pop	r10
    242c:	08 95       	ret

0000242e <_ZNK12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) const {
  return _width;
}
    242e:	fc 01       	movw	r30, r24
    2430:	80 85       	ldd	r24, Z+8	; 0x08
    2432:	91 85       	ldd	r25, Z+9	; 0x09
    2434:	08 95       	ret

00002436 <_ZNK12Adafruit_GFX6heightEv>:

int16_t Adafruit_GFX::height(void) const {
  return _height;
}
    2436:	fc 01       	movw	r30, r24
    2438:	82 85       	ldd	r24, Z+10	; 0x0a
    243a:	93 85       	ldd	r25, Z+11	; 0x0b
    243c:	08 95       	ret

0000243e <_ZN8MsTimer23setEmPFvvE>:
#endif

void MsTimer2::set(unsigned long ms, void (*f)()) {
	float prescaler = 0.0;
	
	if (ms == 0)
    243e:	61 15       	cp	r22, r1
    2440:	71 05       	cpc	r23, r1
    2442:	81 05       	cpc	r24, r1
    2444:	91 05       	cpc	r25, r1
    2446:	69 f4       	brne	.+26     	; 0x2462 <_ZN8MsTimer23setEmPFvvE+0x24>
		msecs = 1;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	a0 e0       	ldi	r26, 0x00	; 0
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	80 93 b7 01 	sts	0x01B7, r24
    2454:	90 93 b8 01 	sts	0x01B8, r25
    2458:	a0 93 b9 01 	sts	0x01B9, r26
    245c:	b0 93 ba 01 	sts	0x01BA, r27
    2460:	08 c0       	rjmp	.+16     	; 0x2472 <_ZN8MsTimer23setEmPFvvE+0x34>
	else
		msecs = ms;
    2462:	60 93 b7 01 	sts	0x01B7, r22
    2466:	70 93 b8 01 	sts	0x01B8, r23
    246a:	80 93 b9 01 	sts	0x01B9, r24
    246e:	90 93 ba 01 	sts	0x01BA, r25
		
	func = f;
    2472:	50 93 b6 01 	sts	0x01B6, r21
    2476:	40 93 b5 01 	sts	0x01B5, r20

#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TIMSK2 &= ~(1<<TOIE2);
    247a:	80 91 70 00 	lds	r24, 0x0070
    247e:	8e 7f       	andi	r24, 0xFE	; 254
    2480:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~((1<<WGM21) | (1<<WGM20));
    2484:	80 91 b0 00 	lds	r24, 0x00B0
    2488:	8c 7f       	andi	r24, 0xFC	; 252
    248a:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B &= ~(1<<WGM22);
    248e:	80 91 b1 00 	lds	r24, 0x00B1
    2492:	87 7f       	andi	r24, 0xF7	; 247
    2494:	80 93 b1 00 	sts	0x00B1, r24
	ASSR &= ~(1<<AS2);
    2498:	80 91 b6 00 	lds	r24, 0x00B6
    249c:	8f 7d       	andi	r24, 0xDF	; 223
    249e:	80 93 b6 00 	sts	0x00B6, r24
	TIMSK2 &= ~(1<<OCIE2A);
    24a2:	80 91 70 00 	lds	r24, 0x0070
    24a6:	8d 7f       	andi	r24, 0xFD	; 253
    24a8:	80 93 70 00 	sts	0x0070, r24
	
	if ((F_CPU >= 1000000UL) && (F_CPU <= 16000000UL)) {	// prescaler set to 64
		TCCR2B |= (1<<CS22);
    24ac:	80 91 b1 00 	lds	r24, 0x00B1
    24b0:	84 60       	ori	r24, 0x04	; 4
    24b2:	80 93 b1 00 	sts	0x00B1, r24
		TCCR2B &= ~((1<<CS21) | (1<<CS20));
    24b6:	80 91 b1 00 	lds	r24, 0x00B1
    24ba:	8c 7f       	andi	r24, 0xFC	; 252
    24bc:	80 93 b1 00 	sts	0x00B1, r24
	// nothing needed here
#else
#error Unsupported CPU type
#endif

	tcnt2 = 256 - (int)((float)F_CPU * 0.001 / prescaler);
    24c0:	86 e0       	ldi	r24, 0x06	; 6
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	90 93 af 01 	sts	0x01AF, r25
    24c8:	80 93 ae 01 	sts	0x01AE, r24
    24cc:	08 95       	ret

000024ce <_ZN8MsTimer25startEv>:
}

void MsTimer2::start() {
	count = 0;
    24ce:	10 92 b1 01 	sts	0x01B1, r1
    24d2:	10 92 b2 01 	sts	0x01B2, r1
    24d6:	10 92 b3 01 	sts	0x01B3, r1
    24da:	10 92 b4 01 	sts	0x01B4, r1
	overflowing = 0;
    24de:	10 92 b0 01 	sts	0x01B0, r1
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined (__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TCNT2 = tcnt2;
    24e2:	80 91 ae 01 	lds	r24, 0x01AE
    24e6:	90 91 af 01 	lds	r25, 0x01AF
    24ea:	80 93 b2 00 	sts	0x00B2, r24
	TIMSK2 |= (1<<TOIE2);
    24ee:	e0 e7       	ldi	r30, 0x70	; 112
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	81 60       	ori	r24, 0x01	; 1
    24f6:	80 83       	st	Z, r24
    24f8:	08 95       	ret

000024fa <_ZN8MsTimer29_overflowEv>:
	itimer.end();
#endif
}

void MsTimer2::_overflow() {
	count += 1;
    24fa:	80 91 b1 01 	lds	r24, 0x01B1
    24fe:	90 91 b2 01 	lds	r25, 0x01B2
    2502:	a0 91 b3 01 	lds	r26, 0x01B3
    2506:	b0 91 b4 01 	lds	r27, 0x01B4
    250a:	01 96       	adiw	r24, 0x01	; 1
    250c:	a1 1d       	adc	r26, r1
    250e:	b1 1d       	adc	r27, r1
    2510:	80 93 b1 01 	sts	0x01B1, r24
    2514:	90 93 b2 01 	sts	0x01B2, r25
    2518:	a0 93 b3 01 	sts	0x01B3, r26
    251c:	b0 93 b4 01 	sts	0x01B4, r27
	
	if (count >= msecs && !overflowing) {
    2520:	80 91 b1 01 	lds	r24, 0x01B1
    2524:	90 91 b2 01 	lds	r25, 0x01B2
    2528:	a0 91 b3 01 	lds	r26, 0x01B3
    252c:	b0 91 b4 01 	lds	r27, 0x01B4
    2530:	40 91 b7 01 	lds	r20, 0x01B7
    2534:	50 91 b8 01 	lds	r21, 0x01B8
    2538:	60 91 b9 01 	lds	r22, 0x01B9
    253c:	70 91 ba 01 	lds	r23, 0x01BA
    2540:	84 17       	cp	r24, r20
    2542:	95 07       	cpc	r25, r21
    2544:	a6 07       	cpc	r26, r22
    2546:	b7 07       	cpc	r27, r23
    2548:	10 f1       	brcs	.+68     	; 0x258e <_ZN8MsTimer29_overflowEv+0x94>
    254a:	80 91 b0 01 	lds	r24, 0x01B0
    254e:	81 11       	cpse	r24, r1
    2550:	1e c0       	rjmp	.+60     	; 0x258e <_ZN8MsTimer29_overflowEv+0x94>
		overflowing = 1;
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	80 93 b0 01 	sts	0x01B0, r24
		count = count - msecs; // subtract ms to catch missed overflows
    2558:	80 91 b1 01 	lds	r24, 0x01B1
    255c:	90 91 b2 01 	lds	r25, 0x01B2
    2560:	a0 91 b3 01 	lds	r26, 0x01B3
    2564:	b0 91 b4 01 	lds	r27, 0x01B4
    2568:	84 1b       	sub	r24, r20
    256a:	95 0b       	sbc	r25, r21
    256c:	a6 0b       	sbc	r26, r22
    256e:	b7 0b       	sbc	r27, r23
    2570:	80 93 b1 01 	sts	0x01B1, r24
    2574:	90 93 b2 01 	sts	0x01B2, r25
    2578:	a0 93 b3 01 	sts	0x01B3, r26
    257c:	b0 93 b4 01 	sts	0x01B4, r27
					// set to 0 if you don't want this.
		(*func)();
    2580:	e0 91 b5 01 	lds	r30, 0x01B5
    2584:	f0 91 b6 01 	lds	r31, 0x01B6
    2588:	09 95       	icall
		overflowing = 0;
    258a:	10 92 b0 01 	sts	0x01B0, r1
    258e:	08 95       	ret

00002590 <__vector_9>:

#if defined (__AVR__)
#if defined (__AVR_ATmega32U4__)
ISR(TIMER4_OVF_vect) {
#else
ISR(TIMER2_OVF_vect) {
    2590:	1f 92       	push	r1
    2592:	0f 92       	push	r0
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	0f 92       	push	r0
    2598:	11 24       	eor	r1, r1
    259a:	2f 93       	push	r18
    259c:	3f 93       	push	r19
    259e:	4f 93       	push	r20
    25a0:	5f 93       	push	r21
    25a2:	6f 93       	push	r22
    25a4:	7f 93       	push	r23
    25a6:	8f 93       	push	r24
    25a8:	9f 93       	push	r25
    25aa:	af 93       	push	r26
    25ac:	bf 93       	push	r27
    25ae:	ef 93       	push	r30
    25b0:	ff 93       	push	r31
#endif
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined (__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TCNT2 = MsTimer2::tcnt2;
    25b2:	80 91 ae 01 	lds	r24, 0x01AE
    25b6:	90 91 af 01 	lds	r25, 0x01AF
    25ba:	80 93 b2 00 	sts	0x00B2, r24
#elif defined (__AVR_ATmega8__)
	TCNT2 = MsTimer2::tcnt2;
#elif defined (__AVR_ATmega32U4__)
	// not necessary on 32u4's high speed timer4
#endif
	MsTimer2::_overflow();
    25be:	0e 94 7d 12 	call	0x24fa	; 0x24fa <_ZN8MsTimer29_overflowEv>
}
    25c2:	ff 91       	pop	r31
    25c4:	ef 91       	pop	r30
    25c6:	bf 91       	pop	r27
    25c8:	af 91       	pop	r26
    25ca:	9f 91       	pop	r25
    25cc:	8f 91       	pop	r24
    25ce:	7f 91       	pop	r23
    25d0:	6f 91       	pop	r22
    25d2:	5f 91       	pop	r21
    25d4:	4f 91       	pop	r20
    25d6:	3f 91       	pop	r19
    25d8:	2f 91       	pop	r18
    25da:	0f 90       	pop	r0
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	0f 90       	pop	r0
    25e0:	1f 90       	pop	r1
    25e2:	18 95       	reti

000025e4 <_ZN14RGBmatrixPanel9drawPixelEiij>:
  return (r << 12) | ((r & 0x8) << 8) | // 4/4/4 -> 5/6/5
         (g <<  7) | ((g & 0xC) << 3) |
         (b <<  1) | ( b        >> 3);
}

void RGBmatrixPanel::drawPixel(int16_t x, int16_t y, uint16_t c) {
    25e4:	cf 92       	push	r12
    25e6:	df 92       	push	r13
    25e8:	ef 92       	push	r14
    25ea:	ff 92       	push	r15
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	dc 01       	movw	r26, r24
  uint8_t r, g, b, bit, limit, *ptr;

  if((x < 0) || (x >= _width) || (y < 0) || (y >= _height)) return;
    25f6:	77 fd       	sbrc	r23, 7
    25f8:	22 c1       	rjmp	.+580    	; 0x283e <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
    25fa:	18 96       	adiw	r26, 0x08	; 8
    25fc:	8d 91       	ld	r24, X+
    25fe:	9c 91       	ld	r25, X
    2600:	19 97       	sbiw	r26, 0x09	; 9
    2602:	68 17       	cp	r22, r24
    2604:	79 07       	cpc	r23, r25
    2606:	0c f0       	brlt	.+2      	; 0x260a <_ZN14RGBmatrixPanel9drawPixelEiij+0x26>
    2608:	1a c1       	rjmp	.+564    	; 0x283e <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
    260a:	57 fd       	sbrc	r21, 7
    260c:	18 c1       	rjmp	.+560    	; 0x283e <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
    260e:	1a 96       	adiw	r26, 0x0a	; 10
    2610:	8d 91       	ld	r24, X+
    2612:	9c 91       	ld	r25, X
    2614:	1b 97       	sbiw	r26, 0x0b	; 11
    2616:	48 17       	cp	r20, r24
    2618:	59 07       	cpc	r21, r25
    261a:	0c f0       	brlt	.+2      	; 0x261e <_ZN14RGBmatrixPanel9drawPixelEiij+0x3a>
    261c:	10 c1       	rjmp	.+544    	; 0x283e <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>

  switch(rotation) {
    261e:	55 96       	adiw	r26, 0x15	; 21
    2620:	ec 91       	ld	r30, X
    2622:	55 97       	sbiw	r26, 0x15	; 21
    2624:	14 96       	adiw	r26, 0x04	; 4
    2626:	8d 91       	ld	r24, X+
    2628:	9c 91       	ld	r25, X
    262a:	15 97       	sbiw	r26, 0x05	; 5
    262c:	e2 30       	cpi	r30, 0x02	; 2
    262e:	59 f0       	breq	.+22     	; 0x2646 <_ZN14RGBmatrixPanel9drawPixelEiij+0x62>
    2630:	e3 30       	cpi	r30, 0x03	; 3
    2632:	c9 f0       	breq	.+50     	; 0x2666 <_ZN14RGBmatrixPanel9drawPixelEiij+0x82>
    2634:	e1 30       	cpi	r30, 0x01	; 1
    2636:	01 f5       	brne	.+64     	; 0x2678 <_ZN14RGBmatrixPanel9drawPixelEiij+0x94>
   case 1:
    _swap_int16_t(x, y);
    x = WIDTH  - 1 - x;
    2638:	fc 01       	movw	r30, r24
    263a:	31 97       	sbiw	r30, 0x01	; 1
    263c:	e4 1b       	sub	r30, r20
    263e:	f5 0b       	sbc	r31, r21
    2640:	ab 01       	movw	r20, r22
    2642:	bf 01       	movw	r22, r30
    2644:	19 c0       	rjmp	.+50     	; 0x2678 <_ZN14RGBmatrixPanel9drawPixelEiij+0x94>
    break;
   case 2:
    x = WIDTH  - 1 - x;
    2646:	fc 01       	movw	r30, r24
    2648:	31 97       	sbiw	r30, 0x01	; 1
    264a:	ef 01       	movw	r28, r30
    264c:	c6 1b       	sub	r28, r22
    264e:	d7 0b       	sbc	r29, r23
    2650:	be 01       	movw	r22, r28
    y = HEIGHT - 1 - y;
    2652:	16 96       	adiw	r26, 0x06	; 6
    2654:	ed 91       	ld	r30, X+
    2656:	fc 91       	ld	r31, X
    2658:	17 97       	sbiw	r26, 0x07	; 7
    265a:	31 97       	sbiw	r30, 0x01	; 1
    265c:	ef 01       	movw	r28, r30
    265e:	c4 1b       	sub	r28, r20
    2660:	d5 0b       	sbc	r29, r21
    2662:	ae 01       	movw	r20, r28
    2664:	09 c0       	rjmp	.+18     	; 0x2678 <_ZN14RGBmatrixPanel9drawPixelEiij+0x94>
    break;
   case 3:
    _swap_int16_t(x, y);
    y = HEIGHT - 1 - y;
    2666:	16 96       	adiw	r26, 0x06	; 6
    2668:	ed 91       	ld	r30, X+
    266a:	fc 91       	ld	r31, X
    266c:	17 97       	sbiw	r26, 0x07	; 7
    266e:	31 97       	sbiw	r30, 0x01	; 1
    2670:	e6 1b       	sub	r30, r22
    2672:	f7 0b       	sbc	r31, r23
    2674:	ba 01       	movw	r22, r20
    2676:	af 01       	movw	r20, r30
    break;
  }

  // Adafruit_GFX uses 16-bit color in 5/6/5 format, while matrix needs
  // 4/4/4.  Pluck out relevant bits while separating into R,G,B:
  r =  c >> 12;        // RRRRrggggggbbbbb
    2678:	89 01       	movw	r16, r18
    267a:	01 2f       	mov	r16, r17
    267c:	11 27       	eor	r17, r17
    267e:	02 95       	swap	r16
    2680:	0f 70       	andi	r16, 0x0F	; 15
    2682:	f0 2e       	mov	r15, r16
  g = (c >>  7) & 0xF; // rrrrrGGGGggbbbbb
    2684:	e9 01       	movw	r28, r18
    2686:	cc 0f       	add	r28, r28
    2688:	cd 2f       	mov	r28, r29
    268a:	cc 1f       	adc	r28, r28
    268c:	dd 0b       	sbc	r29, r29
    268e:	d1 95       	neg	r29
    2690:	ec 2f       	mov	r30, r28
    2692:	ef 70       	andi	r30, 0x0F	; 15
    2694:	ee 2e       	mov	r14, r30
  b = (c >>  1) & 0xF; // rrrrrggggggBBBBb
    2696:	36 95       	lsr	r19
    2698:	27 95       	ror	r18
    269a:	e2 2f       	mov	r30, r18
    269c:	ef 70       	andi	r30, 0x0F	; 15
    269e:	de 2e       	mov	r13, r30

  // Loop counter stuff
  bit   = 2;
  limit = 1 << nPlanes;

  if(y < nRows) {
    26a0:	5e 96       	adiw	r26, 0x1e	; 30
    26a2:	ec 91       	ld	r30, X
    26a4:	5e 97       	sbiw	r26, 0x1e	; 30
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	01 70       	andi	r16, 0x01	; 1
    26aa:	11 27       	eor	r17, r17
    26ac:	3c 2f       	mov	r19, r28
    26ae:	31 70       	andi	r19, 0x01	; 1
    26b0:	21 70       	andi	r18, 0x01	; 1
    26b2:	4e 17       	cp	r20, r30
    26b4:	5f 07       	cpc	r21, r31
    26b6:	0c f0       	brlt	.+2      	; 0x26ba <_ZN14RGBmatrixPanel9drawPixelEiij+0xd6>
    26b8:	6c c0       	rjmp	.+216    	; 0x2792 <_ZN14RGBmatrixPanel9drawPixelEiij+0x1ae>
    // Data for the upper half of the display is stored in the lower
    // bits of each byte.
    ptr = &matrixbuff[backindex][y * WIDTH * (nPlanes - 1) + x]; // Base addr
    26ba:	5f 96       	adiw	r26, 0x1f	; 31
    26bc:	ec 91       	ld	r30, X
    26be:	5f 97       	sbiw	r26, 0x1f	; 31
    26c0:	ed 01       	movw	r28, r26
    26c2:	ce 0f       	add	r28, r30
    26c4:	d1 1d       	adc	r29, r1
    26c6:	ce 0f       	add	r28, r30
    26c8:	d1 1d       	adc	r29, r1
    26ca:	48 9f       	mul	r20, r24
    26cc:	f0 01       	movw	r30, r0
    26ce:	49 9f       	mul	r20, r25
    26d0:	f0 0d       	add	r31, r0
    26d2:	58 9f       	mul	r21, r24
    26d4:	f0 0d       	add	r31, r0
    26d6:	11 24       	eor	r1, r1
    26d8:	af 01       	movw	r20, r30
    26da:	44 0f       	add	r20, r20
    26dc:	55 1f       	adc	r21, r21
    26de:	e4 0f       	add	r30, r20
    26e0:	f5 1f       	adc	r31, r21
    26e2:	6e 0f       	add	r22, r30
    26e4:	7f 1f       	adc	r23, r31
    26e6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    26e8:	fb 8d       	ldd	r31, Y+27	; 0x1b
    26ea:	e6 0f       	add	r30, r22
    26ec:	f7 1f       	adc	r31, r23
    // Plane 0 is a tricky case -- its data is spread about,
    // stored in least two bits not used by the other planes.
    ptr[WIDTH*2] &= ~B00000011;           // Plane 0 R,G mask out in one op
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	ef 01       	movw	r28, r30
    26f4:	c8 0f       	add	r28, r24
    26f6:	d9 1f       	adc	r29, r25
    26f8:	88 81       	ld	r24, Y
    26fa:	8c 7f       	andi	r24, 0xFC	; 252
    26fc:	88 83       	st	Y, r24
    if(r & 1) ptr[WIDTH*2] |=  B00000001; // Plane 0 R: 64 bytes ahead, bit 0
    26fe:	01 2b       	or	r16, r17
    2700:	59 f0       	breq	.+22     	; 0x2718 <_ZN14RGBmatrixPanel9drawPixelEiij+0x134>
    2702:	14 96       	adiw	r26, 0x04	; 4
    2704:	cd 91       	ld	r28, X+
    2706:	dc 91       	ld	r29, X
    2708:	15 97       	sbiw	r26, 0x05	; 5
    270a:	cc 0f       	add	r28, r28
    270c:	dd 1f       	adc	r29, r29
    270e:	ce 0f       	add	r28, r30
    2710:	df 1f       	adc	r29, r31
    2712:	88 81       	ld	r24, Y
    2714:	81 60       	ori	r24, 0x01	; 1
    2716:	88 83       	st	Y, r24
    if(g & 1) ptr[WIDTH*2] |=  B00000010; // Plane 0 G: 64 bytes ahead, bit 1
    2718:	33 23       	and	r19, r19
    271a:	59 f0       	breq	.+22     	; 0x2732 <_ZN14RGBmatrixPanel9drawPixelEiij+0x14e>
    271c:	14 96       	adiw	r26, 0x04	; 4
    271e:	cd 91       	ld	r28, X+
    2720:	dc 91       	ld	r29, X
    2722:	15 97       	sbiw	r26, 0x05	; 5
    2724:	cc 0f       	add	r28, r28
    2726:	dd 1f       	adc	r29, r29
    2728:	ce 0f       	add	r28, r30
    272a:	df 1f       	adc	r29, r31
    272c:	88 81       	ld	r24, Y
    272e:	82 60       	ori	r24, 0x02	; 2
    2730:	88 83       	st	Y, r24
    2732:	14 96       	adiw	r26, 0x04	; 4
    2734:	cd 91       	ld	r28, X+
    2736:	dc 91       	ld	r29, X
    2738:	15 97       	sbiw	r26, 0x05	; 5
    if(b & 1) ptr[WIDTH]   |=  B00000001; // Plane 0 B: 32 bytes ahead, bit 0
    273a:	ce 0f       	add	r28, r30
    273c:	df 1f       	adc	r29, r31
    273e:	88 81       	ld	r24, Y
    2740:	22 23       	and	r18, r18
    2742:	31 f0       	breq	.+12     	; 0x2750 <_ZN14RGBmatrixPanel9drawPixelEiij+0x16c>
    2744:	81 60       	ori	r24, 0x01	; 1
    2746:	88 83       	st	Y, r24
    x = WIDTH  - 1 - x;
    y = HEIGHT - 1 - y;
    break;
   case 3:
    _swap_int16_t(x, y);
    y = HEIGHT - 1 - y;
    2748:	23 e0       	ldi	r18, 0x03	; 3
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	92 e0       	ldi	r25, 0x02	; 2
    274e:	1a c0       	rjmp	.+52     	; 0x2784 <_ZN14RGBmatrixPanel9drawPixelEiij+0x1a0>
    // stored in least two bits not used by the other planes.
    ptr[WIDTH*2] &= ~B00000011;           // Plane 0 R,G mask out in one op
    if(r & 1) ptr[WIDTH*2] |=  B00000001; // Plane 0 R: 64 bytes ahead, bit 0
    if(g & 1) ptr[WIDTH*2] |=  B00000010; // Plane 0 G: 64 bytes ahead, bit 1
    if(b & 1) ptr[WIDTH]   |=  B00000001; // Plane 0 B: 32 bytes ahead, bit 0
    else      ptr[WIDTH]   &= ~B00000001; // Plane 0 B unset; mask out
    2750:	8e 7f       	andi	r24, 0xFE	; 254
    2752:	f9 cf       	rjmp	.-14     	; 0x2746 <_ZN14RGBmatrixPanel9drawPixelEiij+0x162>
    // The remaining three image planes are more normal-ish.
    // Data is stored in the high 6 bits so it can be quickly
    // copied to the DATAPORT register w/6 output lines.
    for(; bit < limit; bit <<= 1) {
      *ptr &= ~B00011100;            // Mask out R,G,B in one op
      if(r & bit) *ptr |= B00000100; // Plane N R: bit 2
    2754:	80 83       	st	Z, r24
      if(g & bit) *ptr |= B00001000; // Plane N G: bit 3
    2756:	89 2f       	mov	r24, r25
    2758:	8e 21       	and	r24, r14
    275a:	19 f0       	breq	.+6      	; 0x2762 <_ZN14RGBmatrixPanel9drawPixelEiij+0x17e>
    275c:	80 81       	ld	r24, Z
    275e:	88 60       	ori	r24, 0x08	; 8
    2760:	80 83       	st	Z, r24
      if(b & bit) *ptr |= B00010000; // Plane N B: bit 4
    2762:	89 2f       	mov	r24, r25
    2764:	8d 21       	and	r24, r13
    2766:	19 f0       	breq	.+6      	; 0x276e <_ZN14RGBmatrixPanel9drawPixelEiij+0x18a>
    2768:	80 81       	ld	r24, Z
    276a:	80 61       	ori	r24, 0x10	; 16
    276c:	80 83       	st	Z, r24
      ptr  += WIDTH;                 // Advance to next bit plane
    276e:	14 96       	adiw	r26, 0x04	; 4
    2770:	4d 91       	ld	r20, X+
    2772:	5c 91       	ld	r21, X
    2774:	15 97       	sbiw	r26, 0x05	; 5
    2776:	e4 0f       	add	r30, r20
    2778:	f5 1f       	adc	r31, r21
    if(b & 1) ptr[WIDTH]   |=  B00000001; // Plane 0 B: 32 bytes ahead, bit 0
    else      ptr[WIDTH]   &= ~B00000001; // Plane 0 B unset; mask out
    // The remaining three image planes are more normal-ish.
    // Data is stored in the high 6 bits so it can be quickly
    // copied to the DATAPORT register w/6 output lines.
    for(; bit < limit; bit <<= 1) {
    277a:	99 0f       	add	r25, r25
    277c:	21 50       	subi	r18, 0x01	; 1
    277e:	31 09       	sbc	r19, r1
    2780:	09 f4       	brne	.+2      	; 0x2784 <_ZN14RGBmatrixPanel9drawPixelEiij+0x1a0>
    2782:	5d c0       	rjmp	.+186    	; 0x283e <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
      *ptr &= ~B00011100;            // Mask out R,G,B in one op
    2784:	80 81       	ld	r24, Z
    2786:	83 7e       	andi	r24, 0xE3	; 227
      if(r & bit) *ptr |= B00000100; // Plane N R: bit 2
    2788:	49 2f       	mov	r20, r25
    278a:	4f 21       	and	r20, r15
    278c:	19 f3       	breq	.-58     	; 0x2754 <_ZN14RGBmatrixPanel9drawPixelEiij+0x170>
    278e:	84 60       	ori	r24, 0x04	; 4
    2790:	e1 cf       	rjmp	.-62     	; 0x2754 <_ZN14RGBmatrixPanel9drawPixelEiij+0x170>
      ptr  += WIDTH;                 // Advance to next bit plane
    }
  } else {
    // Data for the lower half of the display is stored in the upper
    // bits, except for the plane 0 stuff, using 2 least bits.
    ptr = &matrixbuff[backindex][(y - nRows) * WIDTH * (nPlanes - 1) + x];
    2792:	5f 96       	adiw	r26, 0x1f	; 31
    2794:	cc 90       	ld	r12, X
    2796:	5f 97       	sbiw	r26, 0x1f	; 31
    2798:	ed 01       	movw	r28, r26
    279a:	cc 0d       	add	r28, r12
    279c:	d1 1d       	adc	r29, r1
    279e:	cc 0d       	add	r28, r12
    27a0:	d1 1d       	adc	r29, r1
    27a2:	4e 1b       	sub	r20, r30
    27a4:	5f 0b       	sbc	r21, r31
    27a6:	48 9f       	mul	r20, r24
    27a8:	f0 01       	movw	r30, r0
    27aa:	49 9f       	mul	r20, r25
    27ac:	f0 0d       	add	r31, r0
    27ae:	58 9f       	mul	r21, r24
    27b0:	f0 0d       	add	r31, r0
    27b2:	11 24       	eor	r1, r1
    27b4:	cf 01       	movw	r24, r30
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	e8 0f       	add	r30, r24
    27bc:	f9 1f       	adc	r31, r25
    27be:	6e 0f       	add	r22, r30
    27c0:	7f 1f       	adc	r23, r31
    27c2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    27c4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    27c6:	e6 0f       	add	r30, r22
    27c8:	f7 1f       	adc	r31, r23
    *ptr &= ~B00000011;                  // Plane 0 G,B mask out in one op
    27ca:	80 81       	ld	r24, Z
    27cc:	8c 7f       	andi	r24, 0xFC	; 252
    27ce:	80 83       	st	Z, r24
    27d0:	14 96       	adiw	r26, 0x04	; 4
    27d2:	cd 91       	ld	r28, X+
    27d4:	dc 91       	ld	r29, X
    27d6:	15 97       	sbiw	r26, 0x05	; 5
    if(r & 1)  ptr[WIDTH] |=  B00000010; // Plane 0 R: 32 bytes ahead, bit 1
    27d8:	ce 0f       	add	r28, r30
    27da:	df 1f       	adc	r29, r31
    27dc:	88 81       	ld	r24, Y
    27de:	01 2b       	or	r16, r17
    27e0:	11 f0       	breq	.+4      	; 0x27e6 <_ZN14RGBmatrixPanel9drawPixelEiij+0x202>
    27e2:	82 60       	ori	r24, 0x02	; 2
    27e4:	01 c0       	rjmp	.+2      	; 0x27e8 <_ZN14RGBmatrixPanel9drawPixelEiij+0x204>
    else       ptr[WIDTH] &= ~B00000010; // Plane 0 R unset; mask out
    27e6:	8d 7f       	andi	r24, 0xFD	; 253
    27e8:	88 83       	st	Y, r24
    if(g & 1) *ptr        |=  B00000001; // Plane 0 G: bit 0
    27ea:	33 23       	and	r19, r19
    27ec:	19 f0       	breq	.+6      	; 0x27f4 <_ZN14RGBmatrixPanel9drawPixelEiij+0x210>
    27ee:	80 81       	ld	r24, Z
    27f0:	81 60       	ori	r24, 0x01	; 1
    27f2:	80 83       	st	Z, r24
    if(b & 1) *ptr        |=  B00000010; // Plane 0 B: bit 0
    27f4:	22 23       	and	r18, r18
    27f6:	19 f0       	breq	.+6      	; 0x27fe <_ZN14RGBmatrixPanel9drawPixelEiij+0x21a>
    27f8:	80 81       	ld	r24, Z
    27fa:	82 60       	ori	r24, 0x02	; 2
    27fc:	80 83       	st	Z, r24
    x = WIDTH  - 1 - x;
    y = HEIGHT - 1 - y;
    break;
   case 3:
    _swap_int16_t(x, y);
    y = HEIGHT - 1 - y;
    27fe:	23 e0       	ldi	r18, 0x03	; 3
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	92 e0       	ldi	r25, 0x02	; 2
    if(r & 1)  ptr[WIDTH] |=  B00000010; // Plane 0 R: 32 bytes ahead, bit 1
    else       ptr[WIDTH] &= ~B00000010; // Plane 0 R unset; mask out
    if(g & 1) *ptr        |=  B00000001; // Plane 0 G: bit 0
    if(b & 1) *ptr        |=  B00000010; // Plane 0 B: bit 0
    for(; bit < limit; bit <<= 1) {
      *ptr &= ~B11100000;            // Mask out R,G,B in one op
    2804:	80 81       	ld	r24, Z
    2806:	8f 71       	andi	r24, 0x1F	; 31
      if(r & bit) *ptr |= B00100000; // Plane N R: bit 5
    2808:	49 2f       	mov	r20, r25
    280a:	4f 21       	and	r20, r15
    280c:	09 f0       	breq	.+2      	; 0x2810 <_ZN14RGBmatrixPanel9drawPixelEiij+0x22c>
    280e:	80 62       	ori	r24, 0x20	; 32
    2810:	80 83       	st	Z, r24
      if(g & bit) *ptr |= B01000000; // Plane N G: bit 6
    2812:	89 2f       	mov	r24, r25
    2814:	8e 21       	and	r24, r14
    2816:	19 f0       	breq	.+6      	; 0x281e <_ZN14RGBmatrixPanel9drawPixelEiij+0x23a>
    2818:	80 81       	ld	r24, Z
    281a:	80 64       	ori	r24, 0x40	; 64
    281c:	80 83       	st	Z, r24
      if(b & bit) *ptr |= B10000000; // Plane N B: bit 7
    281e:	89 2f       	mov	r24, r25
    2820:	8d 21       	and	r24, r13
    2822:	19 f0       	breq	.+6      	; 0x282a <_ZN14RGBmatrixPanel9drawPixelEiij+0x246>
    2824:	80 81       	ld	r24, Z
    2826:	80 68       	ori	r24, 0x80	; 128
    2828:	80 83       	st	Z, r24
      ptr  += WIDTH;                 // Advance to next bit plane
    282a:	14 96       	adiw	r26, 0x04	; 4
    282c:	4d 91       	ld	r20, X+
    282e:	5c 91       	ld	r21, X
    2830:	15 97       	sbiw	r26, 0x05	; 5
    2832:	e4 0f       	add	r30, r20
    2834:	f5 1f       	adc	r31, r21
    *ptr &= ~B00000011;                  // Plane 0 G,B mask out in one op
    if(r & 1)  ptr[WIDTH] |=  B00000010; // Plane 0 R: 32 bytes ahead, bit 1
    else       ptr[WIDTH] &= ~B00000010; // Plane 0 R unset; mask out
    if(g & 1) *ptr        |=  B00000001; // Plane 0 G: bit 0
    if(b & 1) *ptr        |=  B00000010; // Plane 0 B: bit 0
    for(; bit < limit; bit <<= 1) {
    2836:	99 0f       	add	r25, r25
    2838:	21 50       	subi	r18, 0x01	; 1
    283a:	31 09       	sbc	r19, r1
    283c:	19 f7       	brne	.-58     	; 0x2804 <_ZN14RGBmatrixPanel9drawPixelEiij+0x220>
      if(g & bit) *ptr |= B01000000; // Plane N G: bit 6
      if(b & bit) *ptr |= B10000000; // Plane N B: bit 7
      ptr  += WIDTH;                 // Advance to next bit plane
    }
  }
}
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	ff 90       	pop	r15
    2848:	ef 90       	pop	r14
    284a:	df 90       	pop	r13
    284c:	cf 90       	pop	r12
    284e:	08 95       	ret

00002850 <_ZN14RGBmatrixPanel4initEhhhhhhhbh>:
// are even an actual need.
static RGBmatrixPanel *activePanel = NULL;

// Code common to both the 16x32 and 32x32 constructors:
void RGBmatrixPanel::init(uint8_t rows, uint8_t a, uint8_t b, uint8_t c,
  uint8_t sclk, uint8_t latch, uint8_t oe, boolean dbuf, uint8_t width) {
    2850:	2f 92       	push	r2
    2852:	3f 92       	push	r3
    2854:	4f 92       	push	r4
    2856:	5f 92       	push	r5
    2858:	6f 92       	push	r6
    285a:	7f 92       	push	r7
    285c:	8f 92       	push	r8
    285e:	af 92       	push	r10
    2860:	cf 92       	push	r12
    2862:	df 92       	push	r13
    2864:	ef 92       	push	r14
    2866:	ff 92       	push	r15
    2868:	0f 93       	push	r16
    286a:	1f 93       	push	r17
    286c:	cf 93       	push	r28
    286e:	df 93       	push	r29
    2870:	00 d0       	rcall	.+0      	; 0x2872 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x22>
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	3c 01       	movw	r6, r24
    2878:	16 2f       	mov	r17, r22
    287a:	d4 2e       	mov	r13, r20
    287c:	f2 2e       	mov	r15, r18

  nRows = rows; // Number of multiplexed rows; actual height is 2X this
    287e:	dc 01       	movw	r26, r24
    2880:	5e 96       	adiw	r26, 0x1e	; 30
    2882:	6c 93       	st	X, r22

  // Allocate and initialize matrix buffer:
  int buffsize  = width * nRows * 3, // x3 = 3 bytes holds 4 planes "packed"
    2884:	4d 88       	ldd	r4, Y+21	; 0x15
    2886:	46 9e       	mul	r4, r22
    2888:	c0 01       	movw	r24, r0
    288a:	11 24       	eor	r1, r1
    288c:	2c 01       	movw	r4, r24
    288e:	44 0c       	add	r4, r4
    2890:	55 1c       	adc	r5, r5
    2892:	48 0e       	add	r4, r24
    2894:	59 1e       	adc	r5, r25
      allocsize = (dbuf == true) ? (buffsize * 2) : buffsize;
    2896:	a2 01       	movw	r20, r4
    2898:	88 20       	and	r8, r8
    289a:	11 f0       	breq	.+4      	; 0x28a0 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x50>
    289c:	44 0f       	add	r20, r20
    289e:	55 1f       	adc	r21, r21
  if(NULL == (matrixbuff[0] = (uint8_t *)malloc(allocsize))) return;
    28a0:	ca 01       	movw	r24, r20
    28a2:	49 83       	std	Y+1, r20	; 0x01
    28a4:	5a 83       	std	Y+2, r21	; 0x02
    28a6:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <malloc>
    28aa:	1c 01       	movw	r2, r24
    28ac:	f3 01       	movw	r30, r6
    28ae:	93 8f       	std	Z+27, r25	; 0x1b
    28b0:	82 8f       	std	Z+26, r24	; 0x1a
    28b2:	49 81       	ldd	r20, Y+1	; 0x01
    28b4:	5a 81       	ldd	r21, Y+2	; 0x02
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	09 f4       	brne	.+2      	; 0x28bc <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x6c>
    28ba:	a9 c0       	rjmp	.+338    	; 0x2a0e <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x1be>
  memset(matrixbuff[0], 0, allocsize);
    28bc:	60 e0       	ldi	r22, 0x00	; 0
    28be:	70 e0       	ldi	r23, 0x00	; 0
    28c0:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <memset>
  // If not double-buffered, both buffers then point to the same address:
  matrixbuff[1] = (dbuf == true) ? &matrixbuff[0][buffsize] : matrixbuff[0];
    28c4:	88 20       	and	r8, r8
    28c6:	19 f0       	breq	.+6      	; 0x28ce <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x7e>
    28c8:	42 0c       	add	r4, r2
    28ca:	53 1c       	adc	r5, r3
    28cc:	01 c0       	rjmp	.+2      	; 0x28d0 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x80>
    28ce:	21 01       	movw	r4, r2
    28d0:	d3 01       	movw	r26, r6
    28d2:	5d 96       	adiw	r26, 0x1d	; 29
    28d4:	5c 92       	st	X, r5
    28d6:	4e 92       	st	-X, r4
    28d8:	5c 97       	sbiw	r26, 0x1c	; 28

  // Save pin numbers for use by begin() method later.
  _a     = a;
    28da:	d7 96       	adiw	r26, 0x37	; 55
    28dc:	dc 92       	st	X, r13
    28de:	d7 97       	sbiw	r26, 0x37	; 55
  _b     = b;
    28e0:	d8 96       	adiw	r26, 0x38	; 56
    28e2:	fc 92       	st	X, r15
    28e4:	d8 97       	sbiw	r26, 0x38	; 56
  _c     = c;
    28e6:	d9 96       	adiw	r26, 0x39	; 57
    28e8:	0c 93       	st	X, r16
    28ea:	d9 97       	sbiw	r26, 0x39	; 57
  _sclk  = sclk;
    28ec:	d4 96       	adiw	r26, 0x34	; 52
    28ee:	ec 92       	st	X, r14
    28f0:	d4 97       	sbiw	r26, 0x34	; 52
  _latch = latch;
    28f2:	d5 96       	adiw	r26, 0x35	; 53
    28f4:	cc 92       	st	X, r12
    28f6:	d5 97       	sbiw	r26, 0x35	; 53
  _oe    = oe;
    28f8:	d6 96       	adiw	r26, 0x36	; 54
    28fa:	ac 92       	st	X, r10
    28fc:	d6 97       	sbiw	r26, 0x36	; 54

  // Look up port registers and pin masks ahead of time,
  // avoids many slow digitalWrite() calls later.
  sclkpin   = digitalPinToBitMask(sclk);
    28fe:	ee 2d       	mov	r30, r14
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	e5 54       	subi	r30, 0x45	; 69
    2904:	f9 4f       	sbci	r31, 0xF9	; 249
    2906:	e4 91       	lpm	r30, Z
    2908:	9d 96       	adiw	r26, 0x2d	; 45
    290a:	ec 93       	st	X, r30
    290c:	9d 97       	sbiw	r26, 0x2d	; 45
  latport   = portOutputRegister(digitalPinToPort(latch));
    290e:	2c 2d       	mov	r18, r12
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	f9 01       	movw	r30, r18
    2914:	e1 53       	subi	r30, 0x31	; 49
    2916:	f9 4f       	sbci	r31, 0xF9	; 249
    2918:	e4 91       	lpm	r30, Z
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	ee 0f       	add	r30, r30
    291e:	ff 1f       	adc	r31, r31
    2920:	ed 51       	subi	r30, 0x1D	; 29
    2922:	f9 4f       	sbci	r31, 0xF9	; 249
    2924:	85 91       	lpm	r24, Z+
    2926:	94 91       	lpm	r25, Z
    2928:	f3 01       	movw	r30, r6
    292a:	92 a3       	std	Z+34, r25	; 0x22
    292c:	81 a3       	std	Z+33, r24	; 0x21
  latpin    = digitalPinToBitMask(latch);
    292e:	f9 01       	movw	r30, r18
    2930:	e5 54       	subi	r30, 0x45	; 69
    2932:	f9 4f       	sbci	r31, 0xF9	; 249
    2934:	24 91       	lpm	r18, Z
    2936:	9e 96       	adiw	r26, 0x2e	; 46
    2938:	2c 93       	st	X, r18
    293a:	9e 97       	sbiw	r26, 0x2e	; 46
  oeport    = portOutputRegister(digitalPinToPort(oe));
    293c:	8a 2d       	mov	r24, r10
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	fc 01       	movw	r30, r24
    2942:	e1 53       	subi	r30, 0x31	; 49
    2944:	f9 4f       	sbci	r31, 0xF9	; 249
    2946:	e4 91       	lpm	r30, Z
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	ee 0f       	add	r30, r30
    294c:	ff 1f       	adc	r31, r31
    294e:	ed 51       	subi	r30, 0x1D	; 29
    2950:	f9 4f       	sbci	r31, 0xF9	; 249
    2952:	25 91       	lpm	r18, Z+
    2954:	34 91       	lpm	r19, Z
    2956:	f3 01       	movw	r30, r6
    2958:	34 a3       	std	Z+36, r19	; 0x24
    295a:	23 a3       	std	Z+35, r18	; 0x23
  oepin     = digitalPinToBitMask(oe);
    295c:	fc 01       	movw	r30, r24
    295e:	e5 54       	subi	r30, 0x45	; 69
    2960:	f9 4f       	sbci	r31, 0xF9	; 249
    2962:	84 91       	lpm	r24, Z
    2964:	9f 96       	adiw	r26, 0x2f	; 47
    2966:	8c 93       	st	X, r24
    2968:	9f 97       	sbiw	r26, 0x2f	; 47
  addraport = portOutputRegister(digitalPinToPort(a));
    296a:	4d 2d       	mov	r20, r13
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	fa 01       	movw	r30, r20
    2970:	e1 53       	subi	r30, 0x31	; 49
    2972:	f9 4f       	sbci	r31, 0xF9	; 249
    2974:	e4 91       	lpm	r30, Z
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	ee 0f       	add	r30, r30
    297a:	ff 1f       	adc	r31, r31
    297c:	ed 51       	subi	r30, 0x1D	; 29
    297e:	f9 4f       	sbci	r31, 0xF9	; 249
    2980:	85 91       	lpm	r24, Z+
    2982:	94 91       	lpm	r25, Z
    2984:	f3 01       	movw	r30, r6
    2986:	96 a3       	std	Z+38, r25	; 0x26
    2988:	85 a3       	std	Z+37, r24	; 0x25
  addrapin  = digitalPinToBitMask(a);
    298a:	fa 01       	movw	r30, r20
    298c:	e5 54       	subi	r30, 0x45	; 69
    298e:	f9 4f       	sbci	r31, 0xF9	; 249
    2990:	e4 91       	lpm	r30, Z
    2992:	d0 96       	adiw	r26, 0x30	; 48
    2994:	ec 93       	st	X, r30
    2996:	d0 97       	sbiw	r26, 0x30	; 48
  addrbport = portOutputRegister(digitalPinToPort(b));
    2998:	2f 2d       	mov	r18, r15
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	f9 01       	movw	r30, r18
    299e:	e1 53       	subi	r30, 0x31	; 49
    29a0:	f9 4f       	sbci	r31, 0xF9	; 249
    29a2:	e4 91       	lpm	r30, Z
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	ee 0f       	add	r30, r30
    29a8:	ff 1f       	adc	r31, r31
    29aa:	ed 51       	subi	r30, 0x1D	; 29
    29ac:	f9 4f       	sbci	r31, 0xF9	; 249
    29ae:	85 91       	lpm	r24, Z+
    29b0:	94 91       	lpm	r25, Z
    29b2:	f3 01       	movw	r30, r6
    29b4:	90 a7       	std	Z+40, r25	; 0x28
    29b6:	87 a3       	std	Z+39, r24	; 0x27
  addrbpin  = digitalPinToBitMask(b);
    29b8:	f9 01       	movw	r30, r18
    29ba:	e5 54       	subi	r30, 0x45	; 69
    29bc:	f9 4f       	sbci	r31, 0xF9	; 249
    29be:	24 91       	lpm	r18, Z
    29c0:	d1 96       	adiw	r26, 0x31	; 49
    29c2:	2c 93       	st	X, r18
    29c4:	d1 97       	sbiw	r26, 0x31	; 49
  addrcport = portOutputRegister(digitalPinToPort(c));
    29c6:	80 2f       	mov	r24, r16
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	fc 01       	movw	r30, r24
    29cc:	e1 53       	subi	r30, 0x31	; 49
    29ce:	f9 4f       	sbci	r31, 0xF9	; 249
    29d0:	e4 91       	lpm	r30, Z
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	ee 0f       	add	r30, r30
    29d6:	ff 1f       	adc	r31, r31
    29d8:	ed 51       	subi	r30, 0x1D	; 29
    29da:	f9 4f       	sbci	r31, 0xF9	; 249
    29dc:	25 91       	lpm	r18, Z+
    29de:	34 91       	lpm	r19, Z
    29e0:	f3 01       	movw	r30, r6
    29e2:	32 a7       	std	Z+42, r19	; 0x2a
    29e4:	21 a7       	std	Z+41, r18	; 0x29
  addrcpin  = digitalPinToBitMask(c); 
    29e6:	fc 01       	movw	r30, r24
    29e8:	e5 54       	subi	r30, 0x45	; 69
    29ea:	f9 4f       	sbci	r31, 0xF9	; 249
    29ec:	84 91       	lpm	r24, Z
    29ee:	d2 96       	adiw	r26, 0x32	; 50
    29f0:	8c 93       	st	X, r24
    29f2:	d2 97       	sbiw	r26, 0x32	; 50
  plane     = nPlanes - 1;
    29f4:	83 e0       	ldi	r24, 0x03	; 3
    29f6:	dc 96       	adiw	r26, 0x3c	; 60
    29f8:	8c 93       	st	X, r24
    29fa:	dc 97       	sbiw	r26, 0x3c	; 60
  row       = nRows   - 1;
    29fc:	11 50       	subi	r17, 0x01	; 1
    29fe:	db 96       	adiw	r26, 0x3b	; 59
    2a00:	1c 93       	st	X, r17
    2a02:	db 97       	sbiw	r26, 0x3b	; 59
  swapflag  = false;
    2a04:	90 96       	adiw	r26, 0x20	; 32
    2a06:	1c 92       	st	X, r1
    2a08:	90 97       	sbiw	r26, 0x20	; 32
  backindex = 0;     // Array index of back buffer
    2a0a:	5f 96       	adiw	r26, 0x1f	; 31
    2a0c:	1c 92       	st	X, r1
}
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	df 91       	pop	r29
    2a14:	cf 91       	pop	r28
    2a16:	1f 91       	pop	r17
    2a18:	0f 91       	pop	r16
    2a1a:	ff 90       	pop	r15
    2a1c:	ef 90       	pop	r14
    2a1e:	df 90       	pop	r13
    2a20:	cf 90       	pop	r12
    2a22:	af 90       	pop	r10
    2a24:	8f 90       	pop	r8
    2a26:	7f 90       	pop	r7
    2a28:	6f 90       	pop	r6
    2a2a:	5f 90       	pop	r5
    2a2c:	4f 90       	pop	r4
    2a2e:	3f 90       	pop	r3
    2a30:	2f 90       	pop	r2
    2a32:	08 95       	ret

00002a34 <_ZN14RGBmatrixPanelC1Ehhhhhhhbh>:

  init(8, a, b, c, sclk, latch, oe, dbuf, 32);
}

// Constructor for 32x32 or 32x64 panel:
RGBmatrixPanel::RGBmatrixPanel(
    2a34:	6f 92       	push	r6
    2a36:	7f 92       	push	r7
    2a38:	8f 92       	push	r8
    2a3a:	af 92       	push	r10
    2a3c:	bf 92       	push	r11
    2a3e:	cf 92       	push	r12
    2a40:	df 92       	push	r13
    2a42:	ef 92       	push	r14
    2a44:	ff 92       	push	r15
    2a46:	0f 93       	push	r16
    2a48:	1f 93       	push	r17
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	1f 92       	push	r1
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	3c 01       	movw	r6, r24
    2a56:	d6 2e       	mov	r13, r22
    2a58:	b4 2e       	mov	r11, r20
    2a5a:	10 2f       	mov	r17, r16
    2a5c:	f9 88       	ldd	r15, Y+17	; 0x11
  uint8_t a, uint8_t b, uint8_t c, uint8_t d,
  uint8_t sclk, uint8_t latch, uint8_t oe, boolean dbuf, uint8_t width) :
  Adafruit_GFX(width, 32) {
    2a5e:	6f 2d       	mov	r22, r15
    2a60:	70 e0       	ldi	r23, 0x00	; 0
    2a62:	40 e2       	ldi	r20, 0x20	; 32
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	29 83       	std	Y+1, r18	; 0x01
    2a68:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <_ZN12Adafruit_GFXC1Eii>
    2a6c:	83 e3       	ldi	r24, 0x33	; 51
    2a6e:	91 e0       	ldi	r25, 0x01	; 1
    2a70:	d3 01       	movw	r26, r6
    2a72:	8d 93       	st	X+, r24
    2a74:	9c 93       	st	X, r25

  init(16, a, b, c, sclk, latch, oe, dbuf, width);
    2a76:	ff 92       	push	r15
    2a78:	29 81       	ldd	r18, Y+1	; 0x01
    2a7a:	02 2f       	mov	r16, r18
    2a7c:	2b 2d       	mov	r18, r11
    2a7e:	4d 2d       	mov	r20, r13
    2a80:	60 e1       	ldi	r22, 0x10	; 16
    2a82:	c3 01       	movw	r24, r6
    2a84:	0e 94 28 14 	call	0x2850	; 0x2850 <_ZN14RGBmatrixPanel4initEhhhhhhhbh>

  // Init a few extra 32x32-specific elements:
  _d        = d;
    2a88:	f3 01       	movw	r30, r6
    2a8a:	12 af       	std	Z+58, r17	; 0x3a
  addrdport = portOutputRegister(digitalPinToPort(d));
    2a8c:	01 2f       	mov	r16, r17
    2a8e:	10 e0       	ldi	r17, 0x00	; 0
    2a90:	f8 01       	movw	r30, r16
    2a92:	e1 53       	subi	r30, 0x31	; 49
    2a94:	f9 4f       	sbci	r31, 0xF9	; 249
    2a96:	e4 91       	lpm	r30, Z
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	ee 0f       	add	r30, r30
    2a9c:	ff 1f       	adc	r31, r31
    2a9e:	ed 51       	subi	r30, 0x1D	; 29
    2aa0:	f9 4f       	sbci	r31, 0xF9	; 249
    2aa2:	85 91       	lpm	r24, Z+
    2aa4:	94 91       	lpm	r25, Z
    2aa6:	d3 01       	movw	r26, r6
    2aa8:	9c 96       	adiw	r26, 0x2c	; 44
    2aaa:	9c 93       	st	X, r25
    2aac:	8e 93       	st	-X, r24
    2aae:	9b 97       	sbiw	r26, 0x2b	; 43
  addrdpin  = digitalPinToBitMask(d);
    2ab0:	f8 01       	movw	r30, r16
    2ab2:	e5 54       	subi	r30, 0x45	; 69
    2ab4:	f9 4f       	sbci	r31, 0xF9	; 249
    2ab6:	e4 91       	lpm	r30, Z
    2ab8:	d3 96       	adiw	r26, 0x33	; 51
    2aba:	ec 93       	st	X, r30
}
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	df 91       	pop	r29
    2ac2:	cf 91       	pop	r28
    2ac4:	1f 91       	pop	r17
    2ac6:	0f 91       	pop	r16
    2ac8:	ff 90       	pop	r15
    2aca:	ef 90       	pop	r14
    2acc:	df 90       	pop	r13
    2ace:	cf 90       	pop	r12
    2ad0:	bf 90       	pop	r11
    2ad2:	af 90       	pop	r10
    2ad4:	8f 90       	pop	r8
    2ad6:	7f 90       	pop	r7
    2ad8:	6f 90       	pop	r6
    2ada:	08 95       	ret

00002adc <_ZN14RGBmatrixPanel5beginEv>:

void RGBmatrixPanel::begin(void) {
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
    2ae0:	ec 01       	movw	r28, r24

  backindex   = 0;                         // Back buffer
    2ae2:	1f 8e       	std	Y+31, r1	; 0x1f
  buffptr     = matrixbuff[1 - backindex]; // -> front buffer
    2ae4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ae6:	e1 e0       	ldi	r30, 0x01	; 1
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	e8 1b       	sub	r30, r24
    2aec:	f1 09       	sbc	r31, r1
    2aee:	3d 96       	adiw	r30, 0x0d	; 13
    2af0:	ee 0f       	add	r30, r30
    2af2:	ff 1f       	adc	r31, r31
    2af4:	ec 0f       	add	r30, r28
    2af6:	fd 1f       	adc	r31, r29
    2af8:	80 81       	ld	r24, Z
    2afa:	91 81       	ldd	r25, Z+1	; 0x01
    2afc:	9e af       	std	Y+62, r25	; 0x3e
    2afe:	8d af       	std	Y+61, r24	; 0x3d
  activePanel = this;                      // For interrupt hander
    2b00:	d0 93 bc 01 	sts	0x01BC, r29
    2b04:	c0 93 bb 01 	sts	0x01BB, r28

  // Enable all comm & address pins as outputs, set default states:
  pinMode(_sclk , OUTPUT); SCLKPORT   &= ~sclkpin;  // Low
    2b08:	61 e0       	ldi	r22, 0x01	; 1
    2b0a:	8c a9       	ldd	r24, Y+52	; 0x34
    2b0c:	0e 94 2d 1c 	call	0x385a	; 0x385a <pinMode>
    2b10:	95 b1       	in	r25, 0x05	; 5
    2b12:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b14:	80 95       	com	r24
    2b16:	89 23       	and	r24, r25
    2b18:	85 b9       	out	0x05, r24	; 5
  pinMode(_latch, OUTPUT); *latport   &= ~latpin;   // Low
    2b1a:	61 e0       	ldi	r22, 0x01	; 1
    2b1c:	8d a9       	ldd	r24, Y+53	; 0x35
    2b1e:	0e 94 2d 1c 	call	0x385a	; 0x385a <pinMode>
    2b22:	e9 a1       	ldd	r30, Y+33	; 0x21
    2b24:	fa a1       	ldd	r31, Y+34	; 0x22
    2b26:	90 81       	ld	r25, Z
    2b28:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b2a:	80 95       	com	r24
    2b2c:	89 23       	and	r24, r25
    2b2e:	80 83       	st	Z, r24
  pinMode(_oe   , OUTPUT); *oeport    |= oepin;     // High (disable output)
    2b30:	61 e0       	ldi	r22, 0x01	; 1
    2b32:	8e a9       	ldd	r24, Y+54	; 0x36
    2b34:	0e 94 2d 1c 	call	0x385a	; 0x385a <pinMode>
    2b38:	eb a1       	ldd	r30, Y+35	; 0x23
    2b3a:	fc a1       	ldd	r31, Y+36	; 0x24
    2b3c:	90 81       	ld	r25, Z
    2b3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b40:	89 2b       	or	r24, r25
    2b42:	80 83       	st	Z, r24
  pinMode(_a    , OUTPUT); *addraport &= ~addrapin; // Low
    2b44:	61 e0       	ldi	r22, 0x01	; 1
    2b46:	8f a9       	ldd	r24, Y+55	; 0x37
    2b48:	0e 94 2d 1c 	call	0x385a	; 0x385a <pinMode>
    2b4c:	ed a1       	ldd	r30, Y+37	; 0x25
    2b4e:	fe a1       	ldd	r31, Y+38	; 0x26
    2b50:	90 81       	ld	r25, Z
    2b52:	88 a9       	ldd	r24, Y+48	; 0x30
    2b54:	80 95       	com	r24
    2b56:	89 23       	and	r24, r25
    2b58:	80 83       	st	Z, r24
  pinMode(_b    , OUTPUT); *addrbport &= ~addrbpin; // Low
    2b5a:	61 e0       	ldi	r22, 0x01	; 1
    2b5c:	88 ad       	ldd	r24, Y+56	; 0x38
    2b5e:	0e 94 2d 1c 	call	0x385a	; 0x385a <pinMode>
    2b62:	ef a1       	ldd	r30, Y+39	; 0x27
    2b64:	f8 a5       	ldd	r31, Y+40	; 0x28
    2b66:	90 81       	ld	r25, Z
    2b68:	89 a9       	ldd	r24, Y+49	; 0x31
    2b6a:	80 95       	com	r24
    2b6c:	89 23       	and	r24, r25
    2b6e:	80 83       	st	Z, r24
  pinMode(_c    , OUTPUT); *addrcport &= ~addrcpin; // Low
    2b70:	61 e0       	ldi	r22, 0x01	; 1
    2b72:	89 ad       	ldd	r24, Y+57	; 0x39
    2b74:	0e 94 2d 1c 	call	0x385a	; 0x385a <pinMode>
    2b78:	e9 a5       	ldd	r30, Y+41	; 0x29
    2b7a:	fa a5       	ldd	r31, Y+42	; 0x2a
    2b7c:	90 81       	ld	r25, Z
    2b7e:	8a a9       	ldd	r24, Y+50	; 0x32
    2b80:	80 95       	com	r24
    2b82:	89 23       	and	r24, r25
    2b84:	80 83       	st	Z, r24
  if(nRows > 8) {
    2b86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b88:	89 30       	cpi	r24, 0x09	; 9
    2b8a:	58 f0       	brcs	.+22     	; 0x2ba2 <_ZN14RGBmatrixPanel5beginEv+0xc6>
    pinMode(_d  , OUTPUT); *addrdport &= ~addrdpin; // Low
    2b8c:	61 e0       	ldi	r22, 0x01	; 1
    2b8e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b90:	0e 94 2d 1c 	call	0x385a	; 0x385a <pinMode>
    2b94:	eb a5       	ldd	r30, Y+43	; 0x2b
    2b96:	fc a5       	ldd	r31, Y+44	; 0x2c
    2b98:	90 81       	ld	r25, Z
    2b9a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b9c:	80 95       	com	r24
    2b9e:	89 23       	and	r24, r25
    2ba0:	80 83       	st	Z, r24
  }

  // The high six bits of the data port are set as outputs;
  // Might make this configurable in the future, but not yet.
  DATADIR  = B11111100;
    2ba2:	8c ef       	ldi	r24, 0xFC	; 252
    2ba4:	8a b9       	out	0x0a, r24	; 10
  DATAPORT = 0;
    2ba6:	1b b8       	out	0x0b, r1	; 11

  // Set up Timer1 for interrupt:
  TCCR1A  = _BV(WGM11); // Mode 14 (fast PWM), OC1A off
    2ba8:	82 e0       	ldi	r24, 0x02	; 2
    2baa:	80 93 80 00 	sts	0x0080, r24
  TCCR1B  = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // Mode 14, no prescale
    2bae:	89 e1       	ldi	r24, 0x19	; 25
    2bb0:	80 93 81 00 	sts	0x0081, r24
  ICR1    = 100;
    2bb4:	84 e6       	ldi	r24, 0x64	; 100
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	90 93 87 00 	sts	0x0087, r25
    2bbc:	80 93 86 00 	sts	0x0086, r24
  TIMSK1 |= _BV(TOIE1); // Enable Timer1 interrupt
    2bc0:	80 91 6f 00 	lds	r24, 0x006F
    2bc4:	81 60       	ori	r24, 0x01	; 1
    2bc6:	80 93 6f 00 	sts	0x006F, r24
  sei();                // Enable global interrupts
    2bca:	78 94       	sei
}
    2bcc:	df 91       	pop	r29
    2bce:	cf 91       	pop	r28
    2bd0:	08 95       	ret

00002bd2 <_ZN14RGBmatrixPanel8Color333Ehhh>:
// Promote 3/3/3 RGB to Adafruit_GFX 5/6/5
uint16_t RGBmatrixPanel::Color333(uint8_t r, uint8_t g, uint8_t b) {
  // RRRrrGGGgggBBBbb
  return ((r & 0x7) << 13) | ((r & 0x6) << 10) |
         ((g & 0x7) <<  8) | ((g & 0x7) <<  5) |
         ((b & 0x7) <<  2) | ((b & 0x6) >>  1);
    2bd2:	82 2f       	mov	r24, r18
    2bd4:	86 70       	andi	r24, 0x06	; 6
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	95 95       	asr	r25
    2bda:	87 95       	ror	r24
    2bdc:	27 70       	andi	r18, 0x07	; 7
    2bde:	54 e0       	ldi	r21, 0x04	; 4
    2be0:	25 9f       	mul	r18, r21
    2be2:	90 01       	movw	r18, r0
    2be4:	11 24       	eor	r1, r1
    2be6:	28 2b       	or	r18, r24
    2be8:	39 2b       	or	r19, r25
// benefit of older code using one of the original color formats.

// Promote 3/3/3 RGB to Adafruit_GFX 5/6/5
uint16_t RGBmatrixPanel::Color333(uint8_t r, uint8_t g, uint8_t b) {
  // RRRrrGGGgggBBBbb
  return ((r & 0x7) << 13) | ((r & 0x6) << 10) |
    2bea:	86 2f       	mov	r24, r22
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	98 2f       	mov	r25, r24
    2bf0:	88 27       	eor	r24, r24
    2bf2:	92 95       	swap	r25
    2bf4:	99 0f       	add	r25, r25
    2bf6:	90 7e       	andi	r25, 0xE0	; 224
    2bf8:	82 2b       	or	r24, r18
    2bfa:	93 2b       	or	r25, r19
         ((g & 0x7) <<  8) | ((g & 0x7) <<  5) |
    2bfc:	24 2f       	mov	r18, r20
    2bfe:	27 70       	andi	r18, 0x07	; 7
    2c00:	92 2b       	or	r25, r18
    2c02:	20 e2       	ldi	r18, 0x20	; 32
    2c04:	42 9f       	mul	r20, r18
    2c06:	a0 01       	movw	r20, r0
    2c08:	11 24       	eor	r1, r1
    2c0a:	55 27       	eor	r21, r21
    2c0c:	84 2b       	or	r24, r20
    2c0e:	95 2b       	or	r25, r21
// benefit of older code using one of the original color formats.

// Promote 3/3/3 RGB to Adafruit_GFX 5/6/5
uint16_t RGBmatrixPanel::Color333(uint8_t r, uint8_t g, uint8_t b) {
  // RRRrrGGGgggBBBbb
  return ((r & 0x7) << 13) | ((r & 0x6) << 10) |
    2c10:	66 70       	andi	r22, 0x06	; 6
    2c12:	70 e0       	ldi	r23, 0x00	; 0
    2c14:	76 2f       	mov	r23, r22
    2c16:	66 27       	eor	r22, r22
    2c18:	77 0f       	add	r23, r23
    2c1a:	77 0f       	add	r23, r23
         ((g & 0x7) <<  8) | ((g & 0x7) <<  5) |
         ((b & 0x7) <<  2) | ((b & 0x6) >>  1);
}
    2c1c:	86 2b       	or	r24, r22
    2c1e:	97 2b       	or	r25, r23
    2c20:	08 95       	ret

00002c22 <_ZN14RGBmatrixPanel13updateDisplayEv>:
// being issued to the LED matrix for the *next* bitplane and/or row
// while the *current* plane/row is being shown.  As a result, the
// counter variables change between past/present/future tense in mid-
// function...hopefully tenses are sufficiently commented.

void RGBmatrixPanel::updateDisplay(void) {
    2c22:	cf 92       	push	r12
    2c24:	df 92       	push	r13
    2c26:	ff 92       	push	r15
    2c28:	0f 93       	push	r16
    2c2a:	1f 93       	push	r17
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	dc 01       	movw	r26, r24
  uint8_t  i, tick, tock, *ptr;
  uint16_t t, duration;

  *oeport  |= oepin;  // Disable LED output during row/plane switchover
    2c32:	93 96       	adiw	r26, 0x23	; 35
    2c34:	ed 91       	ld	r30, X+
    2c36:	fc 91       	ld	r31, X
    2c38:	94 97       	sbiw	r26, 0x24	; 36
    2c3a:	90 81       	ld	r25, Z
    2c3c:	9f 96       	adiw	r26, 0x2f	; 47
    2c3e:	8c 91       	ld	r24, X
    2c40:	9f 97       	sbiw	r26, 0x2f	; 47
    2c42:	89 2b       	or	r24, r25
    2c44:	80 83       	st	Z, r24
  *latport |= latpin; // Latch data loaded during *prior* interrupt
    2c46:	91 96       	adiw	r26, 0x21	; 33
    2c48:	ed 91       	ld	r30, X+
    2c4a:	fc 91       	ld	r31, X
    2c4c:	92 97       	sbiw	r26, 0x22	; 34
    2c4e:	90 81       	ld	r25, Z
    2c50:	9e 96       	adiw	r26, 0x2e	; 46
    2c52:	8c 91       	ld	r24, X
    2c54:	9e 97       	sbiw	r26, 0x2e	; 46
    2c56:	89 2b       	or	r24, r25
    2c58:	80 83       	st	Z, r24
  // This is because duration is the display time for the data loaded
  // on the PRIOR interrupt.  CALLOVERHEAD is subtracted from the
  // result because that time is implicit between the timer overflow
  // (interrupt triggered) and the initial LEDs-off line at the start
  // of this method.
  t = (nRows > 8) ? LOOPTIME : (LOOPTIME * 2);
    2c5a:	5e 96       	adiw	r26, 0x1e	; 30
    2c5c:	3c 91       	ld	r19, X
    2c5e:	5e 97       	sbiw	r26, 0x1e	; 30
    2c60:	39 30       	cpi	r19, 0x09	; 9
    2c62:	18 f4       	brcc	.+6      	; 0x2c6a <_ZN14RGBmatrixPanel13updateDisplayEv+0x48>
    2c64:	80 e9       	ldi	r24, 0x90	; 144
    2c66:	91 e0       	ldi	r25, 0x01	; 1
    2c68:	02 c0       	rjmp	.+4      	; 0x2c6e <_ZN14RGBmatrixPanel13updateDisplayEv+0x4c>
    2c6a:	88 ec       	ldi	r24, 0xC8	; 200
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
  duration = ((t + CALLOVERHEAD * 2) << plane) - CALLOVERHEAD;
    2c6e:	dc 96       	adiw	r26, 0x3c	; 60
    2c70:	2c 91       	ld	r18, X
    2c72:	dc 97       	sbiw	r26, 0x3c	; 60
    2c74:	88 58       	subi	r24, 0x88	; 136
    2c76:	9f 4f       	sbci	r25, 0xFF	; 255
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <_ZN14RGBmatrixPanel13updateDisplayEv+0x5c>
    2c7a:	88 0f       	add	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	2a 95       	dec	r18
    2c80:	e2 f7       	brpl	.-8      	; 0x2c7a <_ZN14RGBmatrixPanel13updateDisplayEv+0x58>
    2c82:	cc 97       	sbiw	r24, 0x3c	; 60
  // advancing to the next line.  While it might seem beneficial to
  // advance lines every time and interleave the planes to reduce
  // vertical scanning artifacts, in practice with this panel it causes
  // a green 'ghosting' effect on black pixels, a much worse artifact.

  if(++plane >= nPlanes) {      // Advance plane counter.  Maxed out?
    2c84:	dc 96       	adiw	r26, 0x3c	; 60
    2c86:	2c 91       	ld	r18, X
    2c88:	dc 97       	sbiw	r26, 0x3c	; 60
    2c8a:	2f 5f       	subi	r18, 0xFF	; 255
    2c8c:	dc 96       	adiw	r26, 0x3c	; 60
    2c8e:	2c 93       	st	X, r18
    2c90:	dc 97       	sbiw	r26, 0x3c	; 60
    2c92:	24 30       	cpi	r18, 0x04	; 4
    2c94:	98 f1       	brcs	.+102    	; 0x2cfc <_ZN14RGBmatrixPanel13updateDisplayEv+0xda>
    plane = 0;                  // Yes, reset to plane 0, and
    2c96:	dc 96       	adiw	r26, 0x3c	; 60
    2c98:	1c 92       	st	X, r1
    2c9a:	dc 97       	sbiw	r26, 0x3c	; 60
    if(++row >= nRows) {        // advance row counter.  Maxed out?
    2c9c:	db 96       	adiw	r26, 0x3b	; 59
    2c9e:	2c 91       	ld	r18, X
    2ca0:	db 97       	sbiw	r26, 0x3b	; 59
    2ca2:	2f 5f       	subi	r18, 0xFF	; 255
    2ca4:	db 96       	adiw	r26, 0x3b	; 59
    2ca6:	2c 93       	st	X, r18
    2ca8:	db 97       	sbiw	r26, 0x3b	; 59
    2caa:	23 17       	cp	r18, r19
    2cac:	08 f4       	brcc	.+2      	; 0x2cb0 <_ZN14RGBmatrixPanel13updateDisplayEv+0x8e>
    2cae:	7d c0       	rjmp	.+250    	; 0x2daa <_ZN14RGBmatrixPanel13updateDisplayEv+0x188>
      row     = 0;              // Yes, reset row counter, then...
    2cb0:	db 96       	adiw	r26, 0x3b	; 59
    2cb2:	1c 92       	st	X, r1
    2cb4:	db 97       	sbiw	r26, 0x3b	; 59
      if(swapflag == true) {    // Swap front/back buffers if requested
    2cb6:	90 96       	adiw	r26, 0x20	; 32
    2cb8:	2c 91       	ld	r18, X
    2cba:	90 97       	sbiw	r26, 0x20	; 32
    2cbc:	22 23       	and	r18, r18
    2cbe:	59 f0       	breq	.+22     	; 0x2cd6 <_ZN14RGBmatrixPanel13updateDisplayEv+0xb4>
        backindex = 1 - backindex;
    2cc0:	5f 96       	adiw	r26, 0x1f	; 31
    2cc2:	3c 91       	ld	r19, X
    2cc4:	5f 97       	sbiw	r26, 0x1f	; 31
    2cc6:	21 e0       	ldi	r18, 0x01	; 1
    2cc8:	23 1b       	sub	r18, r19
    2cca:	5f 96       	adiw	r26, 0x1f	; 31
    2ccc:	2c 93       	st	X, r18
    2cce:	5f 97       	sbiw	r26, 0x1f	; 31
        swapflag  = false;
    2cd0:	90 96       	adiw	r26, 0x20	; 32
    2cd2:	1c 92       	st	X, r1
    2cd4:	90 97       	sbiw	r26, 0x20	; 32
      }
      buffptr = matrixbuff[1-backindex]; // Reset into front buffer
    2cd6:	5f 96       	adiw	r26, 0x1f	; 31
    2cd8:	2c 91       	ld	r18, X
    2cda:	5f 97       	sbiw	r26, 0x1f	; 31
    2cdc:	e1 e0       	ldi	r30, 0x01	; 1
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	e2 1b       	sub	r30, r18
    2ce2:	f1 09       	sbc	r31, r1
    2ce4:	3d 96       	adiw	r30, 0x0d	; 13
    2ce6:	ee 0f       	add	r30, r30
    2ce8:	ff 1f       	adc	r31, r31
    2cea:	ea 0f       	add	r30, r26
    2cec:	fb 1f       	adc	r31, r27
    2cee:	20 81       	ld	r18, Z
    2cf0:	31 81       	ldd	r19, Z+1	; 0x01
    2cf2:	de 96       	adiw	r26, 0x3e	; 62
    2cf4:	3c 93       	st	X, r19
    2cf6:	2e 93       	st	-X, r18
    2cf8:	dd 97       	sbiw	r26, 0x3d	; 61
    2cfa:	57 c0       	rjmp	.+174    	; 0x2daa <_ZN14RGBmatrixPanel13updateDisplayEv+0x188>
    }
  } else if(plane == 1) {
    2cfc:	dc 96       	adiw	r26, 0x3c	; 60
    2cfe:	2c 91       	ld	r18, X
    2d00:	dc 97       	sbiw	r26, 0x3c	; 60
    2d02:	21 30       	cpi	r18, 0x01	; 1
    2d04:	09 f0       	breq	.+2      	; 0x2d08 <_ZN14RGBmatrixPanel13updateDisplayEv+0xe6>
    2d06:	51 c0       	rjmp	.+162    	; 0x2daa <_ZN14RGBmatrixPanel13updateDisplayEv+0x188>
    // Plane 0 was loaded on prior interrupt invocation and is about to
    // latch now, so update the row address lines before we do that:
    if(row & 0x1)   *addraport |=  addrapin;
    2d08:	db 96       	adiw	r26, 0x3b	; 59
    2d0a:	3c 91       	ld	r19, X
    2d0c:	db 97       	sbiw	r26, 0x3b	; 59
    2d0e:	95 96       	adiw	r26, 0x25	; 37
    2d10:	ed 91       	ld	r30, X+
    2d12:	fc 91       	ld	r31, X
    2d14:	96 97       	sbiw	r26, 0x26	; 38
    2d16:	d0 96       	adiw	r26, 0x30	; 48
    2d18:	2c 91       	ld	r18, X
    2d1a:	d0 97       	sbiw	r26, 0x30	; 48
    2d1c:	30 ff       	sbrs	r19, 0
    2d1e:	03 c0       	rjmp	.+6      	; 0x2d26 <_ZN14RGBmatrixPanel13updateDisplayEv+0x104>
    2d20:	30 81       	ld	r19, Z
    2d22:	23 2b       	or	r18, r19
    2d24:	03 c0       	rjmp	.+6      	; 0x2d2c <_ZN14RGBmatrixPanel13updateDisplayEv+0x10a>
    else            *addraport &= ~addrapin;
    2d26:	30 81       	ld	r19, Z
    2d28:	20 95       	com	r18
    2d2a:	23 23       	and	r18, r19
    2d2c:	20 83       	st	Z, r18
    if(row & 0x2)   *addrbport |=  addrbpin;
    2d2e:	db 96       	adiw	r26, 0x3b	; 59
    2d30:	3c 91       	ld	r19, X
    2d32:	db 97       	sbiw	r26, 0x3b	; 59
    2d34:	97 96       	adiw	r26, 0x27	; 39
    2d36:	ed 91       	ld	r30, X+
    2d38:	fc 91       	ld	r31, X
    2d3a:	98 97       	sbiw	r26, 0x28	; 40
    2d3c:	d1 96       	adiw	r26, 0x31	; 49
    2d3e:	2c 91       	ld	r18, X
    2d40:	d1 97       	sbiw	r26, 0x31	; 49
    2d42:	31 ff       	sbrs	r19, 1
    2d44:	03 c0       	rjmp	.+6      	; 0x2d4c <_ZN14RGBmatrixPanel13updateDisplayEv+0x12a>
    2d46:	30 81       	ld	r19, Z
    2d48:	23 2b       	or	r18, r19
    2d4a:	03 c0       	rjmp	.+6      	; 0x2d52 <_ZN14RGBmatrixPanel13updateDisplayEv+0x130>
    else            *addrbport &= ~addrbpin;
    2d4c:	30 81       	ld	r19, Z
    2d4e:	20 95       	com	r18
    2d50:	23 23       	and	r18, r19
    2d52:	20 83       	st	Z, r18
    if(row & 0x4)   *addrcport |=  addrcpin;
    2d54:	db 96       	adiw	r26, 0x3b	; 59
    2d56:	3c 91       	ld	r19, X
    2d58:	db 97       	sbiw	r26, 0x3b	; 59
    2d5a:	99 96       	adiw	r26, 0x29	; 41
    2d5c:	ed 91       	ld	r30, X+
    2d5e:	fc 91       	ld	r31, X
    2d60:	9a 97       	sbiw	r26, 0x2a	; 42
    2d62:	d2 96       	adiw	r26, 0x32	; 50
    2d64:	2c 91       	ld	r18, X
    2d66:	d2 97       	sbiw	r26, 0x32	; 50
    2d68:	32 ff       	sbrs	r19, 2
    2d6a:	03 c0       	rjmp	.+6      	; 0x2d72 <_ZN14RGBmatrixPanel13updateDisplayEv+0x150>
    2d6c:	30 81       	ld	r19, Z
    2d6e:	23 2b       	or	r18, r19
    2d70:	03 c0       	rjmp	.+6      	; 0x2d78 <_ZN14RGBmatrixPanel13updateDisplayEv+0x156>
    else            *addrcport &= ~addrcpin;
    2d72:	30 81       	ld	r19, Z
    2d74:	20 95       	com	r18
    2d76:	23 23       	and	r18, r19
    2d78:	20 83       	st	Z, r18
    if(nRows > 8) {
    2d7a:	5e 96       	adiw	r26, 0x1e	; 30
    2d7c:	2c 91       	ld	r18, X
    2d7e:	5e 97       	sbiw	r26, 0x1e	; 30
    2d80:	29 30       	cpi	r18, 0x09	; 9
    2d82:	98 f0       	brcs	.+38     	; 0x2daa <_ZN14RGBmatrixPanel13updateDisplayEv+0x188>
      if(row & 0x8) *addrdport |=  addrdpin;
    2d84:	db 96       	adiw	r26, 0x3b	; 59
    2d86:	3c 91       	ld	r19, X
    2d88:	db 97       	sbiw	r26, 0x3b	; 59
    2d8a:	9b 96       	adiw	r26, 0x2b	; 43
    2d8c:	ed 91       	ld	r30, X+
    2d8e:	fc 91       	ld	r31, X
    2d90:	9c 97       	sbiw	r26, 0x2c	; 44
    2d92:	d3 96       	adiw	r26, 0x33	; 51
    2d94:	2c 91       	ld	r18, X
    2d96:	d3 97       	sbiw	r26, 0x33	; 51
    2d98:	33 ff       	sbrs	r19, 3
    2d9a:	03 c0       	rjmp	.+6      	; 0x2da2 <_ZN14RGBmatrixPanel13updateDisplayEv+0x180>
    2d9c:	30 81       	ld	r19, Z
    2d9e:	23 2b       	or	r18, r19
    2da0:	03 c0       	rjmp	.+6      	; 0x2da8 <_ZN14RGBmatrixPanel13updateDisplayEv+0x186>
      else          *addrdport &= ~addrdpin;
    2da2:	30 81       	ld	r19, Z
    2da4:	20 95       	com	r18
    2da6:	23 23       	and	r18, r19
    2da8:	20 83       	st	Z, r18
    }
  }

  // buffptr, being 'volatile' type, doesn't take well to optimization.
  // A local register copy can speed some things up:
  ptr = (uint8_t *)buffptr;
    2daa:	dd 96       	adiw	r26, 0x3d	; 61
    2dac:	ed 91       	ld	r30, X+
    2dae:	fc 91       	ld	r31, X
    2db0:	de 97       	sbiw	r26, 0x3e	; 62

  ICR1      = duration; // Set interval for next interrupt
    2db2:	90 93 87 00 	sts	0x0087, r25
    2db6:	80 93 86 00 	sts	0x0086, r24
  TCNT1     = 0;        // Restart interrupt timer
    2dba:	10 92 85 00 	sts	0x0085, r1
    2dbe:	10 92 84 00 	sts	0x0084, r1
  *oeport  &= ~oepin;   // Re-enable output
    2dc2:	93 96       	adiw	r26, 0x23	; 35
    2dc4:	cd 91       	ld	r28, X+
    2dc6:	dc 91       	ld	r29, X
    2dc8:	94 97       	sbiw	r26, 0x24	; 36
    2dca:	98 81       	ld	r25, Y
    2dcc:	9f 96       	adiw	r26, 0x2f	; 47
    2dce:	8c 91       	ld	r24, X
    2dd0:	9f 97       	sbiw	r26, 0x2f	; 47
    2dd2:	80 95       	com	r24
    2dd4:	89 23       	and	r24, r25
    2dd6:	88 83       	st	Y, r24
  *latport &= ~latpin;  // Latch down
    2dd8:	91 96       	adiw	r26, 0x21	; 33
    2dda:	cd 91       	ld	r28, X+
    2ddc:	dc 91       	ld	r29, X
    2dde:	92 97       	sbiw	r26, 0x22	; 34
    2de0:	98 81       	ld	r25, Y
    2de2:	9e 96       	adiw	r26, 0x2e	; 46
    2de4:	8c 91       	ld	r24, X
    2de6:	9e 97       	sbiw	r26, 0x2e	; 46
    2de8:	80 95       	com	r24
    2dea:	89 23       	and	r24, r25
    2dec:	88 83       	st	Y, r24
  // not have to load/modify/store bits every single time.  It's a
  // somewhat rude trick that ONLY works because the interrupt
  // handler is set ISR_BLOCK, halting any other interrupts that
  // might otherwise also be twiddling the port at the same time
  // (else this would clobber them).
  tock = SCLKPORT;
    2dee:	25 b1       	in	r18, 0x05	; 5
  tick = tock | sclkpin;
    2df0:	9d 96       	adiw	r26, 0x2d	; 45
    2df2:	9c 91       	ld	r25, X
    2df4:	9d 97       	sbiw	r26, 0x2d	; 45
    2df6:	92 2b       	or	r25, r18

  if(plane > 0) { // 188 ticks from TCNT1=0 (above) to end of function
    2df8:	dc 96       	adiw	r26, 0x3c	; 60
    2dfa:	8c 91       	ld	r24, X
    2dfc:	dc 97       	sbiw	r26, 0x3c	; 60
    2dfe:	88 23       	and	r24, r24
    2e00:	09 f4       	brne	.+2      	; 0x2e04 <_ZN14RGBmatrixPanel13updateDisplayEv+0x1e2>
    2e02:	0d c1       	rjmp	.+538    	; 0x301e <_ZN14RGBmatrixPanel13updateDisplayEv+0x3fc>
         [clk]  "I" (_SFR_IO_ADDR(SCLKPORT)), \
         [tick] "r" (tick),                   \
         [tock] "r" (tock));

    // Loop is unrolled for speed:
    pew pew pew pew pew pew pew pew
    2e04:	01 90       	ld	r0, Z+
    2e06:	0b b8       	out	0x0b, r0	; 11
    2e08:	95 b9       	out	0x05, r25	; 5
    2e0a:	25 b9       	out	0x05, r18	; 5
    2e0c:	01 90       	ld	r0, Z+
    2e0e:	0b b8       	out	0x0b, r0	; 11
    2e10:	95 b9       	out	0x05, r25	; 5
    2e12:	25 b9       	out	0x05, r18	; 5
    2e14:	01 90       	ld	r0, Z+
    2e16:	0b b8       	out	0x0b, r0	; 11
    2e18:	95 b9       	out	0x05, r25	; 5
    2e1a:	25 b9       	out	0x05, r18	; 5
    2e1c:	01 90       	ld	r0, Z+
    2e1e:	0b b8       	out	0x0b, r0	; 11
    2e20:	95 b9       	out	0x05, r25	; 5
    2e22:	25 b9       	out	0x05, r18	; 5
    2e24:	01 90       	ld	r0, Z+
    2e26:	0b b8       	out	0x0b, r0	; 11
    2e28:	95 b9       	out	0x05, r25	; 5
    2e2a:	25 b9       	out	0x05, r18	; 5
    2e2c:	01 90       	ld	r0, Z+
    2e2e:	0b b8       	out	0x0b, r0	; 11
    2e30:	95 b9       	out	0x05, r25	; 5
    2e32:	25 b9       	out	0x05, r18	; 5
    2e34:	01 90       	ld	r0, Z+
    2e36:	0b b8       	out	0x0b, r0	; 11
    2e38:	95 b9       	out	0x05, r25	; 5
    2e3a:	25 b9       	out	0x05, r18	; 5
    2e3c:	01 90       	ld	r0, Z+
    2e3e:	0b b8       	out	0x0b, r0	; 11
    2e40:	95 b9       	out	0x05, r25	; 5
    2e42:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    2e44:	01 90       	ld	r0, Z+
    2e46:	0b b8       	out	0x0b, r0	; 11
    2e48:	95 b9       	out	0x05, r25	; 5
    2e4a:	25 b9       	out	0x05, r18	; 5
    2e4c:	01 90       	ld	r0, Z+
    2e4e:	0b b8       	out	0x0b, r0	; 11
    2e50:	95 b9       	out	0x05, r25	; 5
    2e52:	25 b9       	out	0x05, r18	; 5
    2e54:	01 90       	ld	r0, Z+
    2e56:	0b b8       	out	0x0b, r0	; 11
    2e58:	95 b9       	out	0x05, r25	; 5
    2e5a:	25 b9       	out	0x05, r18	; 5
    2e5c:	01 90       	ld	r0, Z+
    2e5e:	0b b8       	out	0x0b, r0	; 11
    2e60:	95 b9       	out	0x05, r25	; 5
    2e62:	25 b9       	out	0x05, r18	; 5
    2e64:	01 90       	ld	r0, Z+
    2e66:	0b b8       	out	0x0b, r0	; 11
    2e68:	95 b9       	out	0x05, r25	; 5
    2e6a:	25 b9       	out	0x05, r18	; 5
    2e6c:	01 90       	ld	r0, Z+
    2e6e:	0b b8       	out	0x0b, r0	; 11
    2e70:	95 b9       	out	0x05, r25	; 5
    2e72:	25 b9       	out	0x05, r18	; 5
    2e74:	01 90       	ld	r0, Z+
    2e76:	0b b8       	out	0x0b, r0	; 11
    2e78:	95 b9       	out	0x05, r25	; 5
    2e7a:	25 b9       	out	0x05, r18	; 5
    2e7c:	01 90       	ld	r0, Z+
    2e7e:	0b b8       	out	0x0b, r0	; 11
    2e80:	95 b9       	out	0x05, r25	; 5
    2e82:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    2e84:	01 90       	ld	r0, Z+
    2e86:	0b b8       	out	0x0b, r0	; 11
    2e88:	95 b9       	out	0x05, r25	; 5
    2e8a:	25 b9       	out	0x05, r18	; 5
    2e8c:	01 90       	ld	r0, Z+
    2e8e:	0b b8       	out	0x0b, r0	; 11
    2e90:	95 b9       	out	0x05, r25	; 5
    2e92:	25 b9       	out	0x05, r18	; 5
    2e94:	01 90       	ld	r0, Z+
    2e96:	0b b8       	out	0x0b, r0	; 11
    2e98:	95 b9       	out	0x05, r25	; 5
    2e9a:	25 b9       	out	0x05, r18	; 5
    2e9c:	01 90       	ld	r0, Z+
    2e9e:	0b b8       	out	0x0b, r0	; 11
    2ea0:	95 b9       	out	0x05, r25	; 5
    2ea2:	25 b9       	out	0x05, r18	; 5
    2ea4:	01 90       	ld	r0, Z+
    2ea6:	0b b8       	out	0x0b, r0	; 11
    2ea8:	95 b9       	out	0x05, r25	; 5
    2eaa:	25 b9       	out	0x05, r18	; 5
    2eac:	01 90       	ld	r0, Z+
    2eae:	0b b8       	out	0x0b, r0	; 11
    2eb0:	95 b9       	out	0x05, r25	; 5
    2eb2:	25 b9       	out	0x05, r18	; 5
    2eb4:	01 90       	ld	r0, Z+
    2eb6:	0b b8       	out	0x0b, r0	; 11
    2eb8:	95 b9       	out	0x05, r25	; 5
    2eba:	25 b9       	out	0x05, r18	; 5
    2ebc:	01 90       	ld	r0, Z+
    2ebe:	0b b8       	out	0x0b, r0	; 11
    2ec0:	95 b9       	out	0x05, r25	; 5
    2ec2:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    2ec4:	01 90       	ld	r0, Z+
    2ec6:	0b b8       	out	0x0b, r0	; 11
    2ec8:	95 b9       	out	0x05, r25	; 5
    2eca:	25 b9       	out	0x05, r18	; 5
    2ecc:	01 90       	ld	r0, Z+
    2ece:	0b b8       	out	0x0b, r0	; 11
    2ed0:	95 b9       	out	0x05, r25	; 5
    2ed2:	25 b9       	out	0x05, r18	; 5
    2ed4:	01 90       	ld	r0, Z+
    2ed6:	0b b8       	out	0x0b, r0	; 11
    2ed8:	95 b9       	out	0x05, r25	; 5
    2eda:	25 b9       	out	0x05, r18	; 5
    2edc:	01 90       	ld	r0, Z+
    2ede:	0b b8       	out	0x0b, r0	; 11
    2ee0:	95 b9       	out	0x05, r25	; 5
    2ee2:	25 b9       	out	0x05, r18	; 5
    2ee4:	01 90       	ld	r0, Z+
    2ee6:	0b b8       	out	0x0b, r0	; 11
    2ee8:	95 b9       	out	0x05, r25	; 5
    2eea:	25 b9       	out	0x05, r18	; 5
    2eec:	01 90       	ld	r0, Z+
    2eee:	0b b8       	out	0x0b, r0	; 11
    2ef0:	95 b9       	out	0x05, r25	; 5
    2ef2:	25 b9       	out	0x05, r18	; 5
    2ef4:	01 90       	ld	r0, Z+
    2ef6:	0b b8       	out	0x0b, r0	; 11
    2ef8:	95 b9       	out	0x05, r25	; 5
    2efa:	25 b9       	out	0x05, r18	; 5
    2efc:	01 90       	ld	r0, Z+
    2efe:	0b b8       	out	0x0b, r0	; 11
    2f00:	95 b9       	out	0x05, r25	; 5
    2f02:	25 b9       	out	0x05, r18	; 5

      if (WIDTH == 64) {
    2f04:	14 96       	adiw	r26, 0x04	; 4
    2f06:	4d 91       	ld	r20, X+
    2f08:	5c 91       	ld	r21, X
    2f0a:	15 97       	sbiw	r26, 0x05	; 5
    2f0c:	40 34       	cpi	r20, 0x40	; 64
    2f0e:	51 05       	cpc	r21, r1
    2f10:	09 f0       	breq	.+2      	; 0x2f14 <_ZN14RGBmatrixPanel13updateDisplayEv+0x2f2>
    2f12:	80 c0       	rjmp	.+256    	; 0x3014 <_ZN14RGBmatrixPanel13updateDisplayEv+0x3f2>
    pew pew pew pew pew pew pew pew
    2f14:	01 90       	ld	r0, Z+
    2f16:	0b b8       	out	0x0b, r0	; 11
    2f18:	95 b9       	out	0x05, r25	; 5
    2f1a:	25 b9       	out	0x05, r18	; 5
    2f1c:	01 90       	ld	r0, Z+
    2f1e:	0b b8       	out	0x0b, r0	; 11
    2f20:	95 b9       	out	0x05, r25	; 5
    2f22:	25 b9       	out	0x05, r18	; 5
    2f24:	01 90       	ld	r0, Z+
    2f26:	0b b8       	out	0x0b, r0	; 11
    2f28:	95 b9       	out	0x05, r25	; 5
    2f2a:	25 b9       	out	0x05, r18	; 5
    2f2c:	01 90       	ld	r0, Z+
    2f2e:	0b b8       	out	0x0b, r0	; 11
    2f30:	95 b9       	out	0x05, r25	; 5
    2f32:	25 b9       	out	0x05, r18	; 5
    2f34:	01 90       	ld	r0, Z+
    2f36:	0b b8       	out	0x0b, r0	; 11
    2f38:	95 b9       	out	0x05, r25	; 5
    2f3a:	25 b9       	out	0x05, r18	; 5
    2f3c:	01 90       	ld	r0, Z+
    2f3e:	0b b8       	out	0x0b, r0	; 11
    2f40:	95 b9       	out	0x05, r25	; 5
    2f42:	25 b9       	out	0x05, r18	; 5
    2f44:	01 90       	ld	r0, Z+
    2f46:	0b b8       	out	0x0b, r0	; 11
    2f48:	95 b9       	out	0x05, r25	; 5
    2f4a:	25 b9       	out	0x05, r18	; 5
    2f4c:	01 90       	ld	r0, Z+
    2f4e:	0b b8       	out	0x0b, r0	; 11
    2f50:	95 b9       	out	0x05, r25	; 5
    2f52:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    2f54:	01 90       	ld	r0, Z+
    2f56:	0b b8       	out	0x0b, r0	; 11
    2f58:	95 b9       	out	0x05, r25	; 5
    2f5a:	25 b9       	out	0x05, r18	; 5
    2f5c:	01 90       	ld	r0, Z+
    2f5e:	0b b8       	out	0x0b, r0	; 11
    2f60:	95 b9       	out	0x05, r25	; 5
    2f62:	25 b9       	out	0x05, r18	; 5
    2f64:	01 90       	ld	r0, Z+
    2f66:	0b b8       	out	0x0b, r0	; 11
    2f68:	95 b9       	out	0x05, r25	; 5
    2f6a:	25 b9       	out	0x05, r18	; 5
    2f6c:	01 90       	ld	r0, Z+
    2f6e:	0b b8       	out	0x0b, r0	; 11
    2f70:	95 b9       	out	0x05, r25	; 5
    2f72:	25 b9       	out	0x05, r18	; 5
    2f74:	01 90       	ld	r0, Z+
    2f76:	0b b8       	out	0x0b, r0	; 11
    2f78:	95 b9       	out	0x05, r25	; 5
    2f7a:	25 b9       	out	0x05, r18	; 5
    2f7c:	01 90       	ld	r0, Z+
    2f7e:	0b b8       	out	0x0b, r0	; 11
    2f80:	95 b9       	out	0x05, r25	; 5
    2f82:	25 b9       	out	0x05, r18	; 5
    2f84:	01 90       	ld	r0, Z+
    2f86:	0b b8       	out	0x0b, r0	; 11
    2f88:	95 b9       	out	0x05, r25	; 5
    2f8a:	25 b9       	out	0x05, r18	; 5
    2f8c:	01 90       	ld	r0, Z+
    2f8e:	0b b8       	out	0x0b, r0	; 11
    2f90:	95 b9       	out	0x05, r25	; 5
    2f92:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    2f94:	01 90       	ld	r0, Z+
    2f96:	0b b8       	out	0x0b, r0	; 11
    2f98:	95 b9       	out	0x05, r25	; 5
    2f9a:	25 b9       	out	0x05, r18	; 5
    2f9c:	01 90       	ld	r0, Z+
    2f9e:	0b b8       	out	0x0b, r0	; 11
    2fa0:	95 b9       	out	0x05, r25	; 5
    2fa2:	25 b9       	out	0x05, r18	; 5
    2fa4:	01 90       	ld	r0, Z+
    2fa6:	0b b8       	out	0x0b, r0	; 11
    2fa8:	95 b9       	out	0x05, r25	; 5
    2faa:	25 b9       	out	0x05, r18	; 5
    2fac:	01 90       	ld	r0, Z+
    2fae:	0b b8       	out	0x0b, r0	; 11
    2fb0:	95 b9       	out	0x05, r25	; 5
    2fb2:	25 b9       	out	0x05, r18	; 5
    2fb4:	01 90       	ld	r0, Z+
    2fb6:	0b b8       	out	0x0b, r0	; 11
    2fb8:	95 b9       	out	0x05, r25	; 5
    2fba:	25 b9       	out	0x05, r18	; 5
    2fbc:	01 90       	ld	r0, Z+
    2fbe:	0b b8       	out	0x0b, r0	; 11
    2fc0:	95 b9       	out	0x05, r25	; 5
    2fc2:	25 b9       	out	0x05, r18	; 5
    2fc4:	01 90       	ld	r0, Z+
    2fc6:	0b b8       	out	0x0b, r0	; 11
    2fc8:	95 b9       	out	0x05, r25	; 5
    2fca:	25 b9       	out	0x05, r18	; 5
    2fcc:	01 90       	ld	r0, Z+
    2fce:	0b b8       	out	0x0b, r0	; 11
    2fd0:	95 b9       	out	0x05, r25	; 5
    2fd2:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    2fd4:	01 90       	ld	r0, Z+
    2fd6:	0b b8       	out	0x0b, r0	; 11
    2fd8:	95 b9       	out	0x05, r25	; 5
    2fda:	25 b9       	out	0x05, r18	; 5
    2fdc:	01 90       	ld	r0, Z+
    2fde:	0b b8       	out	0x0b, r0	; 11
    2fe0:	95 b9       	out	0x05, r25	; 5
    2fe2:	25 b9       	out	0x05, r18	; 5
    2fe4:	01 90       	ld	r0, Z+
    2fe6:	0b b8       	out	0x0b, r0	; 11
    2fe8:	95 b9       	out	0x05, r25	; 5
    2fea:	25 b9       	out	0x05, r18	; 5
    2fec:	01 90       	ld	r0, Z+
    2fee:	0b b8       	out	0x0b, r0	; 11
    2ff0:	95 b9       	out	0x05, r25	; 5
    2ff2:	25 b9       	out	0x05, r18	; 5
    2ff4:	01 90       	ld	r0, Z+
    2ff6:	0b b8       	out	0x0b, r0	; 11
    2ff8:	95 b9       	out	0x05, r25	; 5
    2ffa:	25 b9       	out	0x05, r18	; 5
    2ffc:	01 90       	ld	r0, Z+
    2ffe:	0b b8       	out	0x0b, r0	; 11
    3000:	95 b9       	out	0x05, r25	; 5
    3002:	25 b9       	out	0x05, r18	; 5
    3004:	01 90       	ld	r0, Z+
    3006:	0b b8       	out	0x0b, r0	; 11
    3008:	95 b9       	out	0x05, r25	; 5
    300a:	25 b9       	out	0x05, r18	; 5
    300c:	01 90       	ld	r0, Z+
    300e:	0b b8       	out	0x0b, r0	; 11
    3010:	95 b9       	out	0x05, r25	; 5
    3012:	25 b9       	out	0x05, r18	; 5
      }

    buffptr = ptr; //+= 32;
    3014:	de 96       	adiw	r26, 0x3e	; 62
    3016:	fc 93       	st	X, r31
    3018:	ee 93       	st	-X, r30
    301a:	dd 97       	sbiw	r26, 0x3d	; 61
    301c:	32 c0       	rjmp	.+100    	; 0x3082 <_ZN14RGBmatrixPanel13updateDisplayEv+0x460>
    301e:	f1 2c       	mov	r15, r1
    // the slack, with all its data packed into the 2 least bits not
    // used by the other planes.  This works because the unpacking and
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<WIDTH; i++) {
    3020:	cf 2c       	mov	r12, r15
    3022:	d1 2c       	mov	r13, r1
    3024:	14 96       	adiw	r26, 0x04	; 4
    3026:	6d 91       	ld	r22, X+
    3028:	7c 91       	ld	r23, X
    302a:	15 97       	sbiw	r26, 0x05	; 5
    302c:	c6 16       	cp	r12, r22
    302e:	d7 06       	cpc	r13, r23
    3030:	44 f5       	brge	.+80     	; 0x3082 <_ZN14RGBmatrixPanel13updateDisplayEv+0x460>
      DATAPORT =
        ( ptr[i]    << 6)         |
        ((ptr[i+WIDTH] << 4) & 0x30) |
    3032:	86 01       	movw	r16, r12
    3034:	06 0f       	add	r16, r22
    3036:	17 1f       	adc	r17, r23
    3038:	af 01       	movw	r20, r30
    303a:	40 0f       	add	r20, r16
    303c:	51 1f       	adc	r21, r17
    303e:	ea 01       	movw	r28, r20
    3040:	48 81       	ld	r20, Y
    3042:	d0 e1       	ldi	r29, 0x10	; 16
    3044:	4d 9f       	mul	r20, r29
    3046:	a0 01       	movw	r20, r0
    3048:	11 24       	eor	r1, r1
        ((ptr[i+WIDTH*2] << 2) & 0x0C);
    304a:	34 2f       	mov	r19, r20
    304c:	30 73       	andi	r19, 0x30	; 48
    304e:	6e 0f       	add	r22, r30
    3050:	7f 1f       	adc	r23, r31
    3052:	60 0f       	add	r22, r16
    3054:	71 1f       	adc	r23, r17
    3056:	eb 01       	movw	r28, r22
    3058:	88 81       	ld	r24, Y
    305a:	d4 e0       	ldi	r29, 0x04	; 4
    305c:	8d 9f       	mul	r24, r29
    305e:	a0 01       	movw	r20, r0
    3060:	11 24       	eor	r1, r1
    3062:	4c 70       	andi	r20, 0x0C	; 12
    3064:	43 2b       	or	r20, r19
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<WIDTH; i++) {
      DATAPORT =
        ( ptr[i]    << 6)         |
    3066:	e6 01       	movw	r28, r12
    3068:	ce 0f       	add	r28, r30
    306a:	df 1f       	adc	r29, r31
    306c:	68 81       	ld	r22, Y
    306e:	80 e4       	ldi	r24, 0x40	; 64
    3070:	68 9f       	mul	r22, r24
    3072:	b0 01       	movw	r22, r0
    3074:	11 24       	eor	r1, r1
        ((ptr[i+WIDTH] << 4) & 0x30) |
        ((ptr[i+WIDTH*2] << 2) & 0x0C);
    3076:	46 2b       	or	r20, r22
    3078:	4b b9       	out	0x0b, r20	; 11
      SCLKPORT = tick; // Clock lo
    307a:	95 b9       	out	0x05, r25	; 5
      SCLKPORT = tock; // Clock hi
    307c:	25 b9       	out	0x05, r18	; 5
    // the slack, with all its data packed into the 2 least bits not
    // used by the other planes.  This works because the unpacking and
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<WIDTH; i++) {
    307e:	f3 94       	inc	r15
    3080:	cf cf       	rjmp	.-98     	; 0x3020 <_ZN14RGBmatrixPanel13updateDisplayEv+0x3fe>
        ((ptr[i+WIDTH*2] << 2) & 0x0C);
      SCLKPORT = tick; // Clock lo
      SCLKPORT = tock; // Clock hi
    } 
  }
}
    3082:	df 91       	pop	r29
    3084:	cf 91       	pop	r28
    3086:	1f 91       	pop	r17
    3088:	0f 91       	pop	r16
    308a:	ff 90       	pop	r15
    308c:	df 90       	pop	r13
    308e:	cf 90       	pop	r12
    3090:	08 95       	ret

00003092 <__vector_13>:
  Serial.println(F("\n};"));
}

// -------------------- Interrupt handler stuff --------------------

ISR(TIMER1_OVF_vect, ISR_BLOCK) { // ISR_BLOCK important -- see notes later
    3092:	1f 92       	push	r1
    3094:	0f 92       	push	r0
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	0f 92       	push	r0
    309a:	11 24       	eor	r1, r1
    309c:	2f 93       	push	r18
    309e:	3f 93       	push	r19
    30a0:	4f 93       	push	r20
    30a2:	5f 93       	push	r21
    30a4:	6f 93       	push	r22
    30a6:	7f 93       	push	r23
    30a8:	8f 93       	push	r24
    30aa:	9f 93       	push	r25
    30ac:	af 93       	push	r26
    30ae:	bf 93       	push	r27
    30b0:	ef 93       	push	r30
    30b2:	ff 93       	push	r31
  activePanel->updateDisplay();   // Call refresh func for active display
    30b4:	80 91 bb 01 	lds	r24, 0x01BB
    30b8:	90 91 bc 01 	lds	r25, 0x01BC
    30bc:	0e 94 11 16 	call	0x2c22	; 0x2c22 <_ZN14RGBmatrixPanel13updateDisplayEv>
  TIFR1 |= TOV1;                  // Clear Timer1 interrupt flag
    30c0:	86 b3       	in	r24, 0x16	; 22
    30c2:	86 bb       	out	0x16, r24	; 22
}
    30c4:	ff 91       	pop	r31
    30c6:	ef 91       	pop	r30
    30c8:	bf 91       	pop	r27
    30ca:	af 91       	pop	r26
    30cc:	9f 91       	pop	r25
    30ce:	8f 91       	pop	r24
    30d0:	7f 91       	pop	r23
    30d2:	6f 91       	pop	r22
    30d4:	5f 91       	pop	r21
    30d6:	4f 91       	pop	r20
    30d8:	3f 91       	pop	r19
    30da:	2f 91       	pop	r18
    30dc:	0f 90       	pop	r0
    30de:	0f be       	out	0x3f, r0	; 63
    30e0:	0f 90       	pop	r0
    30e2:	1f 90       	pop	r1
    30e4:	18 95       	reti

000030e6 <_ZN14RGBmatrixPanel10fillScreenEj>:
    }
  }
}

void RGBmatrixPanel::fillScreen(uint16_t c) {
  if((c == 0x0000) || (c == 0xffff)) {
    30e6:	9b 01       	movw	r18, r22
    30e8:	21 50       	subi	r18, 0x01	; 1
    30ea:	31 09       	sbc	r19, r1
    30ec:	2e 3f       	cpi	r18, 0xFE	; 254
    30ee:	3f 4f       	sbci	r19, 0xFF	; 255
    30f0:	f0 f0       	brcs	.+60     	; 0x312e <_ZN14RGBmatrixPanel10fillScreenEj+0x48>
    // For black or white, all bits in frame buffer will be identically
    // set or unset (regardless of weird bit packing), so it's OK to just
    // quickly memset the whole thing:
    memset(matrixbuff[backindex], c, WIDTH * nRows * 3);
    30f2:	dc 01       	movw	r26, r24
    30f4:	5f 96       	adiw	r26, 0x1f	; 31
    30f6:	2c 91       	ld	r18, X
    30f8:	5f 97       	sbiw	r26, 0x1f	; 31
    30fa:	5e 96       	adiw	r26, 0x1e	; 30
    30fc:	3c 91       	ld	r19, X
    30fe:	5e 97       	sbiw	r26, 0x1e	; 30
    3100:	14 96       	adiw	r26, 0x04	; 4
    3102:	ed 91       	ld	r30, X+
    3104:	fc 91       	ld	r31, X
    3106:	15 97       	sbiw	r26, 0x05	; 5
    3108:	3e 9f       	mul	r19, r30
    310a:	a0 01       	movw	r20, r0
    310c:	3f 9f       	mul	r19, r31
    310e:	50 0d       	add	r21, r0
    3110:	11 24       	eor	r1, r1
    3112:	fa 01       	movw	r30, r20
    3114:	ee 0f       	add	r30, r30
    3116:	ff 1f       	adc	r31, r31
    3118:	4e 0f       	add	r20, r30
    311a:	5f 1f       	adc	r21, r31
    311c:	fc 01       	movw	r30, r24
    311e:	e2 0f       	add	r30, r18
    3120:	f1 1d       	adc	r31, r1
    3122:	e2 0f       	add	r30, r18
    3124:	f1 1d       	adc	r31, r1
    3126:	82 8d       	ldd	r24, Z+26	; 0x1a
    3128:	93 8d       	ldd	r25, Z+27	; 0x1b
    312a:	0c 94 da 1e 	jmp	0x3db4	; 0x3db4 <memset>
  } else {
    // Otherwise, need to handle it the long way:
    Adafruit_GFX::fillScreen(c);
    312e:	0c 94 55 0f 	jmp	0x1eaa	; 0x1eaa <_ZN12Adafruit_GFX10fillScreenEj>

00003132 <_ZN3YouC1Ehhh>:
#include "You.h"

You::You(byte num, byte _x, byte _y) {
    3132:	fc 01       	movw	r30, r24
	x = _x;
    3134:	40 83       	st	Z, r20
	y = _y;
    3136:	21 83       	std	Z+1, r18	; 0x01
	
	core_color = (num == 1) ? BLUE : GREEN; // SAVES SPACE
    3138:	61 30       	cpi	r22, 0x01	; 1
    313a:	11 f0       	breq	.+4      	; 0x3140 <_ZN3YouC1Ehhh+0xe>
    313c:	83 e0       	ldi	r24, 0x03	; 3
    313e:	01 c0       	rjmp	.+2      	; 0x3142 <_ZN3YouC1Ehhh+0x10>
    3140:	85 e0       	ldi	r24, 0x05	; 5
    3142:	84 83       	std	Z+4, r24	; 0x04
	
	frame = 0;
    3144:	13 82       	std	Z+3, r1	; 0x03
	life = 10;
    3146:	8a e0       	ldi	r24, 0x0A	; 10
    3148:	82 83       	std	Z+2, r24	; 0x02
    314a:	08 95       	ret

0000314c <_ZN3You4MoveEv>:
}

void You::Move() {
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	ec 01       	movw	r28, r24
	if (usart.Has_Input(UP) && y > 0) --y;
    3152:	62 e0       	ldi	r22, 0x02	; 2
    3154:	89 e9       	ldi	r24, 0x99	; 153
    3156:	91 e0       	ldi	r25, 0x01	; 1
    3158:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <_ZN7Signals9Has_InputE8Controls>
    315c:	88 23       	and	r24, r24
    315e:	19 f0       	breq	.+6      	; 0x3166 <_ZN3You4MoveEv+0x1a>
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	81 11       	cpse	r24, r1
    3164:	21 c0       	rjmp	.+66     	; 0x31a8 <_ZN3You4MoveEv+0x5c>
	if (usart.Has_Input(DOWN) && y < 31) ++y;
    3166:	65 e0       	ldi	r22, 0x05	; 5
    3168:	89 e9       	ldi	r24, 0x99	; 153
    316a:	91 e0       	ldi	r25, 0x01	; 1
    316c:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <_ZN7Signals9Has_InputE8Controls>
    3170:	88 23       	and	r24, r24
    3172:	19 f0       	breq	.+6      	; 0x317a <_ZN3You4MoveEv+0x2e>
    3174:	89 81       	ldd	r24, Y+1	; 0x01
    3176:	8f 31       	cpi	r24, 0x1F	; 31
    3178:	d0 f0       	brcs	.+52     	; 0x31ae <_ZN3You4MoveEv+0x62>
	if (usart.Has_Input(LEFT) && x > 0) --x;
    317a:	64 e0       	ldi	r22, 0x04	; 4
    317c:	89 e9       	ldi	r24, 0x99	; 153
    317e:	91 e0       	ldi	r25, 0x01	; 1
    3180:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <_ZN7Signals9Has_InputE8Controls>
    3184:	88 23       	and	r24, r24
    3186:	19 f0       	breq	.+6      	; 0x318e <_ZN3You4MoveEv+0x42>
    3188:	88 81       	ld	r24, Y
    318a:	81 11       	cpse	r24, r1
    318c:	13 c0       	rjmp	.+38     	; 0x31b4 <_ZN3You4MoveEv+0x68>
	if (usart.Has_Input(RIGHT) && x < 31) ++x;
    318e:	61 e0       	ldi	r22, 0x01	; 1
    3190:	89 e9       	ldi	r24, 0x99	; 153
    3192:	91 e0       	ldi	r25, 0x01	; 1
    3194:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <_ZN7Signals9Has_InputE8Controls>
    3198:	88 23       	and	r24, r24
    319a:	79 f0       	breq	.+30     	; 0x31ba <_ZN3You4MoveEv+0x6e>
    319c:	88 81       	ld	r24, Y
    319e:	8f 31       	cpi	r24, 0x1F	; 31
    31a0:	60 f4       	brcc	.+24     	; 0x31ba <_ZN3You4MoveEv+0x6e>
    31a2:	8f 5f       	subi	r24, 0xFF	; 255
    31a4:	88 83       	st	Y, r24
    31a6:	09 c0       	rjmp	.+18     	; 0x31ba <_ZN3You4MoveEv+0x6e>
	frame = 0;
	life = 10;
}

void You::Move() {
	if (usart.Has_Input(UP) && y > 0) --y;
    31a8:	81 50       	subi	r24, 0x01	; 1
    31aa:	89 83       	std	Y+1, r24	; 0x01
    31ac:	dc cf       	rjmp	.-72     	; 0x3166 <_ZN3You4MoveEv+0x1a>
	if (usart.Has_Input(DOWN) && y < 31) ++y;
    31ae:	8f 5f       	subi	r24, 0xFF	; 255
    31b0:	89 83       	std	Y+1, r24	; 0x01
    31b2:	e3 cf       	rjmp	.-58     	; 0x317a <_ZN3You4MoveEv+0x2e>
	if (usart.Has_Input(LEFT) && x > 0) --x;
    31b4:	81 50       	subi	r24, 0x01	; 1
    31b6:	88 83       	st	Y, r24
    31b8:	ea cf       	rjmp	.-44     	; 0x318e <_ZN3You4MoveEv+0x42>
	if (usart.Has_Input(RIGHT) && x < 31) ++x;
}
    31ba:	df 91       	pop	r29
    31bc:	cf 91       	pop	r28
    31be:	08 95       	ret

000031c0 <_ZN3You9Get_StateEv>:
	}
}

Pl_States You::Get_State() {
	return state;
}
    31c0:	fc 01       	movw	r30, r24
    31c2:	85 81       	ldd	r24, Z+5	; 0x05
    31c4:	08 95       	ret

000031c6 <_ZN3You8Get_LifeEv>:

byte You::Get_Life() {
	return life;
}
    31c6:	fc 01       	movw	r30, r24
    31c8:	82 81       	ldd	r24, Z+2	; 0x02
    31ca:	08 95       	ret

000031cc <_ZN3You19Compare_CoordinatesEhh>:

bool You::Compare_Coordinates(byte obj_x, byte obj_y) {
    31cc:	fc 01       	movw	r30, r24
	return (x == obj_x && y == obj_y);
    31ce:	80 81       	ld	r24, Z
    31d0:	86 13       	cpse	r24, r22
    31d2:	03 c0       	rjmp	.+6      	; 0x31da <_ZN3You19Compare_CoordinatesEhh+0xe>
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	91 81       	ldd	r25, Z+1	; 0x01
    31d8:	94 13       	cpse	r25, r20
    31da:	80 e0       	ldi	r24, 0x00	; 0
}
    31dc:	08 95       	ret

000031de <_ZN3You15Receieve_DamageEv>:

void You::Receieve_Damage() {
    31de:	cf 93       	push	r28
    31e0:	df 93       	push	r29
	if (state != Pl_Normal) return;
    31e2:	fc 01       	movw	r30, r24
    31e4:	25 81       	ldd	r18, Z+5	; 0x05
    31e6:	21 30       	cpi	r18, 0x01	; 1
    31e8:	89 f4       	brne	.+34     	; 0x320c <_ZN3You15Receieve_DamageEv+0x2e>
    31ea:	ec 01       	movw	r28, r24
	--life;
    31ec:	82 81       	ldd	r24, Z+2	; 0x02
    31ee:	81 50       	subi	r24, 0x01	; 1
    31f0:	82 83       	std	Z+2, r24	; 0x02
	//if (core_color == BLUE) 
	usart.Signal_Event(P1_HIT);
    31f2:	61 e0       	ldi	r22, 0x01	; 1
    31f4:	89 e9       	ldi	r24, 0x99	; 153
    31f6:	91 e0       	ldi	r25, 0x01	; 1
    31f8:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <_ZN7Signals12Signal_EventE6Events>
	//else if (core_color == GREEN) usart.Signal_Event(P2_HIT);
	if (life > 0) {
    31fc:	8a 81       	ldd	r24, Y+2	; 0x02
		frame = 0;
    31fe:	1b 82       	std	Y+3, r1	; 0x03
	if (state != Pl_Normal) return;
	--life;
	//if (core_color == BLUE) 
	usart.Signal_Event(P1_HIT);
	//else if (core_color == GREEN) usart.Signal_Event(P2_HIT);
	if (life > 0) {
    3200:	88 23       	and	r24, r24
    3202:	11 f0       	breq	.+4      	; 0x3208 <_ZN3You15Receieve_DamageEv+0x2a>
		frame = 0;
		state = Pl_Invincible;
    3204:	83 e0       	ldi	r24, 0x03	; 3
    3206:	01 c0       	rjmp	.+2      	; 0x320a <_ZN3You15Receieve_DamageEv+0x2c>
	}
	else {
		frame = 0;
		state = Pl_Explode;
    3208:	82 e0       	ldi	r24, 0x02	; 2
    320a:	8d 83       	std	Y+5, r24	; 0x05
	}
}
    320c:	df 91       	pop	r29
    320e:	cf 91       	pop	r28
    3210:	08 95       	ret

00003212 <_ZN3You4DrawEv>:
	if (usart.Has_Input(DOWN) && y < 31) ++y;
	if (usart.Has_Input(LEFT) && x > 0) --x;
	if (usart.Has_Input(RIGHT) && x < 31) ++x;
}

void You::Draw() {
    3212:	0f 93       	push	r16
    3214:	1f 93       	push	r17
    3216:	cf 93       	push	r28
    3218:	df 93       	push	r29
    321a:	ec 01       	movw	r28, r24
	static uint8_t cnt = 0;
	switch (state) {
    321c:	8d 81       	ldd	r24, Y+5	; 0x05
    321e:	82 30       	cpi	r24, 0x02	; 2
    3220:	59 f1       	breq	.+86     	; 0x3278 <_ZN3You4DrawEv+0x66>
    3222:	83 30       	cpi	r24, 0x03	; 3
    3224:	51 f0       	breq	.+20     	; 0x323a <_ZN3You4DrawEv+0x28>
    3226:	81 30       	cpi	r24, 0x01	; 1
    3228:	a1 f5       	brne	.+104    	; 0x3292 <_ZN3You4DrawEv+0x80>
		case Pl_Normal:
			draw_panel(x, y, frame, 3);
    322a:	ae 01       	movw	r20, r28
    322c:	4d 5f       	subi	r20, 0xFD	; 253
    322e:	5f 4f       	sbci	r21, 0xFF	; 255
    3230:	be 01       	movw	r22, r28
    3232:	6f 5f       	subi	r22, 0xFF	; 255
    3234:	7f 4f       	sbci	r23, 0xFF	; 255
    3236:	23 e0       	ldi	r18, 0x03	; 3
    3238:	0c c0       	rjmp	.+24     	; 0x3252 <_ZN3You4DrawEv+0x40>
			matrix.drawPixel(x, y, return_color(core_color));
		break;
		
		case Pl_Invincible:
			if (frame % 20 < 10) {
    323a:	8b 81       	ldd	r24, Y+3	; 0x03
    323c:	64 e1       	ldi	r22, 0x14	; 20
    323e:	0e 94 b7 1c 	call	0x396e	; 0x396e <__udivmodqi4>
    3242:	9a 30       	cpi	r25, 0x0A	; 10
    3244:	30 f5       	brcc	.+76     	; 0x3292 <_ZN3You4DrawEv+0x80>
				draw_panel(x, y, cnt, 3);
    3246:	be 01       	movw	r22, r28
    3248:	6f 5f       	subi	r22, 0xFF	; 255
    324a:	7f 4f       	sbci	r23, 0xFF	; 255
    324c:	23 e0       	ldi	r18, 0x03	; 3
    324e:	4d eb       	ldi	r20, 0xBD	; 189
    3250:	51 e0       	ldi	r21, 0x01	; 1
    3252:	ce 01       	movw	r24, r28
    3254:	0e 94 cb 03 	call	0x796	; 0x796 <_Z10draw_panelRhS_S_h>
				matrix.drawPixel(x, y, return_color(core_color));
    3258:	8c 81       	ldd	r24, Y+4	; 0x04
    325a:	0e 94 a8 03 	call	0x750	; 0x750 <_Z12return_color6Colors>
    325e:	49 81       	ldd	r20, Y+1	; 0x01
    3260:	50 e0       	ldi	r21, 0x00	; 0
    3262:	68 81       	ld	r22, Y
    3264:	70 e0       	ldi	r23, 0x00	; 0
    3266:	9c 01       	movw	r18, r24
    3268:	8a e5       	ldi	r24, 0x5A	; 90
    326a:	91 e0       	ldi	r25, 0x01	; 1
		break;
		
		default:
		break;
	}
}
    326c:	df 91       	pop	r29
    326e:	cf 91       	pop	r28
    3270:	1f 91       	pop	r17
    3272:	0f 91       	pop	r16
		break;
		
		case Pl_Invincible:
			if (frame % 20 < 10) {
				draw_panel(x, y, cnt, 3);
				matrix.drawPixel(x, y, return_color(core_color));
    3274:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <_ZN14RGBmatrixPanel9drawPixelEiij>
			}
			else if (frame % 20 >= 10); // nothing or something
		break;
		
		case Pl_Explode:
			draw_explosion_l(x, y, frame, 3, core_color);
    3278:	8e 01       	movw	r16, r28
    327a:	0c 5f       	subi	r16, 0xFC	; 252
    327c:	1f 4f       	sbci	r17, 0xFF	; 255
    327e:	ae 01       	movw	r20, r28
    3280:	4d 5f       	subi	r20, 0xFD	; 253
    3282:	5f 4f       	sbci	r21, 0xFF	; 255
    3284:	be 01       	movw	r22, r28
    3286:	6f 5f       	subi	r22, 0xFF	; 255
    3288:	7f 4f       	sbci	r23, 0xFF	; 255
    328a:	23 e0       	ldi	r18, 0x03	; 3
    328c:	ce 01       	movw	r24, r28
    328e:	0e 94 3f 04 	call	0x87e	; 0x87e <_Z16draw_explosion_lRhS_S_hR6Colors>
		break;
		
		default:
		break;
	}
}
    3292:	df 91       	pop	r29
    3294:	cf 91       	pop	r28
    3296:	1f 91       	pop	r17
    3298:	0f 91       	pop	r16
    329a:	08 95       	ret

0000329c <_ZN3You4TickEv>:
		frame = 0;
		state = Pl_Explode;
	}
}

void You::Tick() {
    329c:	cf 93       	push	r28
    329e:	df 93       	push	r29
    32a0:	ec 01       	movw	r28, r24
	switch (state) {
    32a2:	8d 81       	ldd	r24, Y+5	; 0x05
    32a4:	88 23       	and	r24, r24
    32a6:	19 f0       	breq	.+6      	; 0x32ae <_ZN3You4TickEv+0x12>
    32a8:	83 30       	cpi	r24, 0x03	; 3
    32aa:	49 f0       	breq	.+18     	; 0x32be <_ZN3You4TickEv+0x22>
    32ac:	10 c0       	rjmp	.+32     	; 0x32ce <_ZN3You4TickEv+0x32>
		case Pl_Start:
			if (usart.Has_Signal(START_GAME)) {
    32ae:	60 e0       	ldi	r22, 0x00	; 0
    32b0:	89 e9       	ldi	r24, 0x99	; 153
    32b2:	91 e0       	ldi	r25, 0x01	; 1
    32b4:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <_ZN7Signals10Has_SignalE6Events>
    32b8:	88 23       	and	r24, r24
    32ba:	49 f0       	breq	.+18     	; 0x32ce <_ZN3You4TickEv+0x32>
    32bc:	06 c0       	rjmp	.+12     	; 0x32ca <_ZN3You4TickEv+0x2e>
		case Pl_Normal:
			// Transitions happen in Recieve Damage
		break;
		
		case Pl_Invincible:
			state = (frame++ >= 60) ? Pl_Normal : Pl_Invincible;
    32be:	9b 81       	ldd	r25, Y+3	; 0x03
    32c0:	21 e0       	ldi	r18, 0x01	; 1
    32c2:	29 0f       	add	r18, r25
    32c4:	2b 83       	std	Y+3, r18	; 0x03
    32c6:	9c 33       	cpi	r25, 0x3C	; 60
    32c8:	08 f0       	brcs	.+2      	; 0x32cc <_ZN3You4TickEv+0x30>
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	8d 83       	std	Y+5, r24	; 0x05
		
		default:
		break;
	}
	
	switch (state) {
    32ce:	8d 81       	ldd	r24, Y+5	; 0x05
    32d0:	82 30       	cpi	r24, 0x02	; 2
    32d2:	61 f0       	breq	.+24     	; 0x32ec <_ZN3You4TickEv+0x50>
    32d4:	83 30       	cpi	r24, 0x03	; 3
    32d6:	11 f0       	breq	.+4      	; 0x32dc <_ZN3You4TickEv+0x40>
    32d8:	81 30       	cpi	r24, 0x01	; 1
    32da:	91 f4       	brne	.+36     	; 0x3300 <_ZN3You4TickEv+0x64>
		Move();
		Draw();
		break;
		
		case Pl_Invincible:
		Move();
    32dc:	ce 01       	movw	r24, r28
    32de:	0e 94 a6 18 	call	0x314c	; 0x314c <_ZN3You4MoveEv>
		Draw();
    32e2:	ce 01       	movw	r24, r28
		break;
		
		default:
		break;
	}
}
    32e4:	df 91       	pop	r29
    32e6:	cf 91       	pop	r28
		Draw();
		break;
		
		case Pl_Invincible:
		Move();
		Draw();
    32e8:	0c 94 09 19 	jmp	0x3212	; 0x3212 <_ZN3You4DrawEv>
		break;
		
		case Pl_Explode:
		Draw();
    32ec:	ce 01       	movw	r24, r28
    32ee:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN3You4DrawEv>
		usart.Signal_Event(LOSE);
    32f2:	63 e0       	ldi	r22, 0x03	; 3
    32f4:	89 e9       	ldi	r24, 0x99	; 153
    32f6:	91 e0       	ldi	r25, 0x01	; 1
		break;
		
		default:
		break;
	}
}
    32f8:	df 91       	pop	r29
    32fa:	cf 91       	pop	r28
		Draw();
		break;
		
		case Pl_Explode:
		Draw();
		usart.Signal_Event(LOSE);
    32fc:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <_ZN7Signals12Signal_EventE6Events>
		break;
		
		default:
		break;
	}
}
    3300:	df 91       	pop	r29
    3302:	cf 91       	pop	r28
    3304:	08 95       	ret

00003306 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    3306:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <abort>

0000330a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    330a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    330c:	91 8d       	ldd	r25, Z+25	; 0x19
    330e:	22 8d       	ldd	r18, Z+26	; 0x1a
    3310:	89 2f       	mov	r24, r25
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	80 5c       	subi	r24, 0xC0	; 192
    3316:	9f 4f       	sbci	r25, 0xFF	; 255
    3318:	82 1b       	sub	r24, r18
    331a:	91 09       	sbc	r25, r1
}
    331c:	8f 73       	andi	r24, 0x3F	; 63
    331e:	99 27       	eor	r25, r25
    3320:	08 95       	ret

00003322 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3322:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3324:	91 8d       	ldd	r25, Z+25	; 0x19
    3326:	82 8d       	ldd	r24, Z+26	; 0x1a
    3328:	98 17       	cp	r25, r24
    332a:	31 f0       	breq	.+12     	; 0x3338 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    332c:	82 8d       	ldd	r24, Z+26	; 0x1a
    332e:	e8 0f       	add	r30, r24
    3330:	f1 1d       	adc	r31, r1
    3332:	85 8d       	ldd	r24, Z+29	; 0x1d
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3338:	8f ef       	ldi	r24, 0xFF	; 255
    333a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    333c:	08 95       	ret

0000333e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    333e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3340:	91 8d       	ldd	r25, Z+25	; 0x19
    3342:	82 8d       	ldd	r24, Z+26	; 0x1a
    3344:	98 17       	cp	r25, r24
    3346:	61 f0       	breq	.+24     	; 0x3360 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3348:	82 8d       	ldd	r24, Z+26	; 0x1a
    334a:	df 01       	movw	r26, r30
    334c:	a8 0f       	add	r26, r24
    334e:	b1 1d       	adc	r27, r1
    3350:	5d 96       	adiw	r26, 0x1d	; 29
    3352:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3354:	92 8d       	ldd	r25, Z+26	; 0x1a
    3356:	9f 5f       	subi	r25, 0xFF	; 255
    3358:	9f 73       	andi	r25, 0x3F	; 63
    335a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3360:	8f ef       	ldi	r24, 0xFF	; 255
    3362:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3364:	08 95       	ret

00003366 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3366:	87 e1       	ldi	r24, 0x17	; 23
    3368:	9b e1       	ldi	r25, 0x1B	; 27
    336a:	89 2b       	or	r24, r25
    336c:	49 f0       	breq	.+18     	; 0x3380 <_Z14serialEventRunv+0x1a>
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	89 2b       	or	r24, r25
    3374:	29 f0       	breq	.+10     	; 0x3380 <_Z14serialEventRunv+0x1a>
    3376:	0e 94 17 1b 	call	0x362e	; 0x362e <_Z17Serial0_availablev>
    337a:	81 11       	cpse	r24, r1
    337c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3380:	08 95       	ret

00003382 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3382:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3384:	84 8d       	ldd	r24, Z+28	; 0x1c
    3386:	df 01       	movw	r26, r30
    3388:	a8 0f       	add	r26, r24
    338a:	b1 1d       	adc	r27, r1
    338c:	a3 5a       	subi	r26, 0xA3	; 163
    338e:	bf 4f       	sbci	r27, 0xFF	; 255
    3390:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3392:	84 8d       	ldd	r24, Z+28	; 0x1c
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	01 96       	adiw	r24, 0x01	; 1
    3398:	8f 73       	andi	r24, 0x3F	; 63
    339a:	99 27       	eor	r25, r25
    339c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    339e:	a6 89       	ldd	r26, Z+22	; 0x16
    33a0:	b7 89       	ldd	r27, Z+23	; 0x17
    33a2:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    33a4:	a0 89       	ldd	r26, Z+16	; 0x10
    33a6:	b1 89       	ldd	r27, Z+17	; 0x11
    33a8:	8c 91       	ld	r24, X
    33aa:	80 64       	ori	r24, 0x40	; 64
    33ac:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    33ae:	93 8d       	ldd	r25, Z+27	; 0x1b
    33b0:	84 8d       	ldd	r24, Z+28	; 0x1c
    33b2:	98 13       	cpse	r25, r24
    33b4:	06 c0       	rjmp	.+12     	; 0x33c2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    33b6:	02 88       	ldd	r0, Z+18	; 0x12
    33b8:	f3 89       	ldd	r31, Z+19	; 0x13
    33ba:	e0 2d       	mov	r30, r0
    33bc:	80 81       	ld	r24, Z
    33be:	8f 7d       	andi	r24, 0xDF	; 223
    33c0:	80 83       	st	Z, r24
    33c2:	08 95       	ret

000033c4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    33c4:	cf 93       	push	r28
    33c6:	df 93       	push	r29
    33c8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    33ca:	88 8d       	ldd	r24, Y+24	; 0x18
    33cc:	88 23       	and	r24, r24
    33ce:	c9 f0       	breq	.+50     	; 0x3402 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    33d0:	ea 89       	ldd	r30, Y+18	; 0x12
    33d2:	fb 89       	ldd	r31, Y+19	; 0x13
    33d4:	80 81       	ld	r24, Z
    33d6:	85 fd       	sbrc	r24, 5
    33d8:	05 c0       	rjmp	.+10     	; 0x33e4 <_ZN14HardwareSerial5flushEv+0x20>
    33da:	a8 89       	ldd	r26, Y+16	; 0x10
    33dc:	b9 89       	ldd	r27, Y+17	; 0x11
    33de:	8c 91       	ld	r24, X
    33e0:	86 fd       	sbrc	r24, 6
    33e2:	0f c0       	rjmp	.+30     	; 0x3402 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    33e4:	0f b6       	in	r0, 0x3f	; 63
    33e6:	07 fc       	sbrc	r0, 7
    33e8:	f5 cf       	rjmp	.-22     	; 0x33d4 <_ZN14HardwareSerial5flushEv+0x10>
    33ea:	80 81       	ld	r24, Z
    33ec:	85 ff       	sbrs	r24, 5
    33ee:	f2 cf       	rjmp	.-28     	; 0x33d4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    33f0:	a8 89       	ldd	r26, Y+16	; 0x10
    33f2:	b9 89       	ldd	r27, Y+17	; 0x11
    33f4:	8c 91       	ld	r24, X
    33f6:	85 ff       	sbrs	r24, 5
    33f8:	ed cf       	rjmp	.-38     	; 0x33d4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    33fa:	ce 01       	movw	r24, r28
    33fc:	0e 94 c1 19 	call	0x3382	; 0x3382 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3400:	e7 cf       	rjmp	.-50     	; 0x33d0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3402:	df 91       	pop	r29
    3404:	cf 91       	pop	r28
    3406:	08 95       	ret

00003408 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    3408:	ef 92       	push	r14
    340a:	ff 92       	push	r15
    340c:	0f 93       	push	r16
    340e:	1f 93       	push	r17
    3410:	cf 93       	push	r28
    3412:	df 93       	push	r29
    3414:	ec 01       	movw	r28, r24
  _written = true;
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    341a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    341c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    341e:	98 13       	cpse	r25, r24
    3420:	05 c0       	rjmp	.+10     	; 0x342c <_ZN14HardwareSerial5writeEh+0x24>
    3422:	e8 89       	ldd	r30, Y+16	; 0x10
    3424:	f9 89       	ldd	r31, Y+17	; 0x11
    3426:	80 81       	ld	r24, Z
    3428:	85 fd       	sbrc	r24, 5
    342a:	24 c0       	rjmp	.+72     	; 0x3474 <_ZN14HardwareSerial5writeEh+0x6c>
    342c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    342e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3430:	10 e0       	ldi	r17, 0x00	; 0
    3432:	0f 5f       	subi	r16, 0xFF	; 255
    3434:	1f 4f       	sbci	r17, 0xFF	; 255
    3436:	0f 73       	andi	r16, 0x3F	; 63
    3438:	11 27       	eor	r17, r17
    343a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    343c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    343e:	e8 12       	cpse	r14, r24
    3440:	0c c0       	rjmp	.+24     	; 0x345a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3442:	0f b6       	in	r0, 0x3f	; 63
    3444:	07 fc       	sbrc	r0, 7
    3446:	fa cf       	rjmp	.-12     	; 0x343c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3448:	e8 89       	ldd	r30, Y+16	; 0x10
    344a:	f9 89       	ldd	r31, Y+17	; 0x11
    344c:	80 81       	ld	r24, Z
    344e:	85 ff       	sbrs	r24, 5
    3450:	f5 cf       	rjmp	.-22     	; 0x343c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3452:	ce 01       	movw	r24, r28
    3454:	0e 94 c1 19 	call	0x3382	; 0x3382 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3458:	f1 cf       	rjmp	.-30     	; 0x343c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    345a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    345c:	fe 01       	movw	r30, r28
    345e:	e8 0f       	add	r30, r24
    3460:	f1 1d       	adc	r31, r1
    3462:	e3 5a       	subi	r30, 0xA3	; 163
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    3468:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    346a:	ea 89       	ldd	r30, Y+18	; 0x12
    346c:	fb 89       	ldd	r31, Y+19	; 0x13
    346e:	80 81       	ld	r24, Z
    3470:	80 62       	ori	r24, 0x20	; 32
    3472:	07 c0       	rjmp	.+14     	; 0x3482 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3474:	ee 89       	ldd	r30, Y+22	; 0x16
    3476:	ff 89       	ldd	r31, Y+23	; 0x17
    3478:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    347a:	e8 89       	ldd	r30, Y+16	; 0x10
    347c:	f9 89       	ldd	r31, Y+17	; 0x11
    347e:	80 81       	ld	r24, Z
    3480:	80 64       	ori	r24, 0x40	; 64
    3482:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	df 91       	pop	r29
    348a:	cf 91       	pop	r28
    348c:	1f 91       	pop	r17
    348e:	0f 91       	pop	r16
    3490:	ff 90       	pop	r15
    3492:	ef 90       	pop	r14
    3494:	08 95       	ret

00003496 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3496:	cf 92       	push	r12
    3498:	df 92       	push	r13
    349a:	ef 92       	push	r14
    349c:	ff 92       	push	r15
    349e:	1f 93       	push	r17
    34a0:	cf 93       	push	r28
    34a2:	df 93       	push	r29
    34a4:	ec 01       	movw	r28, r24
    34a6:	6a 01       	movw	r12, r20
    34a8:	7b 01       	movw	r14, r22
    34aa:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    34ac:	e8 89       	ldd	r30, Y+16	; 0x10
    34ae:	f9 89       	ldd	r31, Y+17	; 0x11
    34b0:	82 e0       	ldi	r24, 0x02	; 2
    34b2:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    34b4:	41 15       	cp	r20, r1
    34b6:	51 4e       	sbci	r21, 0xE1	; 225
    34b8:	61 05       	cpc	r22, r1
    34ba:	71 05       	cpc	r23, r1
    34bc:	b1 f0       	breq	.+44     	; 0x34ea <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    34be:	60 e0       	ldi	r22, 0x00	; 0
    34c0:	79 e0       	ldi	r23, 0x09	; 9
    34c2:	8d e3       	ldi	r24, 0x3D	; 61
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	a7 01       	movw	r20, r14
    34c8:	96 01       	movw	r18, r12
    34ca:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <__udivmodsi4>
    34ce:	da 01       	movw	r26, r20
    34d0:	c9 01       	movw	r24, r18
    34d2:	01 97       	sbiw	r24, 0x01	; 1
    34d4:	a1 09       	sbc	r26, r1
    34d6:	b1 09       	sbc	r27, r1
    34d8:	b6 95       	lsr	r27
    34da:	a7 95       	ror	r26
    34dc:	97 95       	ror	r25
    34de:	87 95       	ror	r24
    34e0:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    34e2:	41 15       	cp	r20, r1
    34e4:	80 e1       	ldi	r24, 0x10	; 16
    34e6:	58 07       	cpc	r21, r24
    34e8:	a8 f0       	brcs	.+42     	; 0x3514 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    34ea:	e8 89       	ldd	r30, Y+16	; 0x10
    34ec:	f9 89       	ldd	r31, Y+17	; 0x11
    34ee:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    34f0:	60 e8       	ldi	r22, 0x80	; 128
    34f2:	74 e8       	ldi	r23, 0x84	; 132
    34f4:	8e e1       	ldi	r24, 0x1E	; 30
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	a7 01       	movw	r20, r14
    34fa:	96 01       	movw	r18, r12
    34fc:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <__udivmodsi4>
    3500:	ba 01       	movw	r22, r20
    3502:	a9 01       	movw	r20, r18
    3504:	41 50       	subi	r20, 0x01	; 1
    3506:	51 09       	sbc	r21, r1
    3508:	61 09       	sbc	r22, r1
    350a:	71 09       	sbc	r23, r1
    350c:	76 95       	lsr	r23
    350e:	67 95       	ror	r22
    3510:	57 95       	ror	r21
    3512:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3514:	ec 85       	ldd	r30, Y+12	; 0x0c
    3516:	fd 85       	ldd	r31, Y+13	; 0x0d
    3518:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    351a:	ee 85       	ldd	r30, Y+14	; 0x0e
    351c:	ff 85       	ldd	r31, Y+15	; 0x0f
    351e:	40 83       	st	Z, r20

  _written = false;
    3520:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3522:	ec 89       	ldd	r30, Y+20	; 0x14
    3524:	fd 89       	ldd	r31, Y+21	; 0x15
    3526:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3528:	ea 89       	ldd	r30, Y+18	; 0x12
    352a:	fb 89       	ldd	r31, Y+19	; 0x13
    352c:	80 81       	ld	r24, Z
    352e:	80 61       	ori	r24, 0x10	; 16
    3530:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3532:	ea 89       	ldd	r30, Y+18	; 0x12
    3534:	fb 89       	ldd	r31, Y+19	; 0x13
    3536:	80 81       	ld	r24, Z
    3538:	88 60       	ori	r24, 0x08	; 8
    353a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    353c:	ea 89       	ldd	r30, Y+18	; 0x12
    353e:	fb 89       	ldd	r31, Y+19	; 0x13
    3540:	80 81       	ld	r24, Z
    3542:	80 68       	ori	r24, 0x80	; 128
    3544:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3546:	ea 89       	ldd	r30, Y+18	; 0x12
    3548:	fb 89       	ldd	r31, Y+19	; 0x13
    354a:	80 81       	ld	r24, Z
    354c:	8f 7d       	andi	r24, 0xDF	; 223
    354e:	80 83       	st	Z, r24
}
    3550:	df 91       	pop	r29
    3552:	cf 91       	pop	r28
    3554:	1f 91       	pop	r17
    3556:	ff 90       	pop	r15
    3558:	ef 90       	pop	r14
    355a:	df 90       	pop	r13
    355c:	cf 90       	pop	r12
    355e:	08 95       	ret

00003560 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    3560:	fc 01       	movw	r30, r24
    3562:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    3564:	44 8d       	ldd	r20, Z+28	; 0x1c
    3566:	25 2f       	mov	r18, r21
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	84 2f       	mov	r24, r20
    356c:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    356e:	82 1b       	sub	r24, r18
    3570:	93 0b       	sbc	r25, r19
    3572:	54 17       	cp	r21, r20
    3574:	10 f0       	brcs	.+4      	; 0x357a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    3576:	cf 96       	adiw	r24, 0x3f	; 63
    3578:	08 95       	ret
  return tail - head - 1;
    357a:	01 97       	sbiw	r24, 0x01	; 1
}
    357c:	08 95       	ret

0000357e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    357e:	1f 92       	push	r1
    3580:	0f 92       	push	r0
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	0f 92       	push	r0
    3586:	11 24       	eor	r1, r1
    3588:	2f 93       	push	r18
    358a:	8f 93       	push	r24
    358c:	9f 93       	push	r25
    358e:	ef 93       	push	r30
    3590:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3592:	e0 91 ce 01 	lds	r30, 0x01CE
    3596:	f0 91 cf 01 	lds	r31, 0x01CF
    359a:	80 81       	ld	r24, Z
    359c:	e0 91 d4 01 	lds	r30, 0x01D4
    35a0:	f0 91 d5 01 	lds	r31, 0x01D5
    35a4:	82 fd       	sbrc	r24, 2
    35a6:	12 c0       	rjmp	.+36     	; 0x35cc <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    35a8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    35aa:	80 91 d7 01 	lds	r24, 0x01D7
    35ae:	8f 5f       	subi	r24, 0xFF	; 255
    35b0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    35b2:	20 91 d8 01 	lds	r18, 0x01D8
    35b6:	82 17       	cp	r24, r18
    35b8:	51 f0       	breq	.+20     	; 0x35ce <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    35ba:	e0 91 d7 01 	lds	r30, 0x01D7
    35be:	f0 e0       	ldi	r31, 0x00	; 0
    35c0:	e2 54       	subi	r30, 0x42	; 66
    35c2:	fe 4f       	sbci	r31, 0xFE	; 254
    35c4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    35c6:	80 93 d7 01 	sts	0x01D7, r24
    35ca:	01 c0       	rjmp	.+2      	; 0x35ce <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    35cc:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    35ce:	ff 91       	pop	r31
    35d0:	ef 91       	pop	r30
    35d2:	9f 91       	pop	r25
    35d4:	8f 91       	pop	r24
    35d6:	2f 91       	pop	r18
    35d8:	0f 90       	pop	r0
    35da:	0f be       	out	0x3f, r0	; 63
    35dc:	0f 90       	pop	r0
    35de:	1f 90       	pop	r1
    35e0:	18 95       	reti

000035e2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    35e2:	1f 92       	push	r1
    35e4:	0f 92       	push	r0
    35e6:	0f b6       	in	r0, 0x3f	; 63
    35e8:	0f 92       	push	r0
    35ea:	11 24       	eor	r1, r1
    35ec:	2f 93       	push	r18
    35ee:	3f 93       	push	r19
    35f0:	4f 93       	push	r20
    35f2:	5f 93       	push	r21
    35f4:	6f 93       	push	r22
    35f6:	7f 93       	push	r23
    35f8:	8f 93       	push	r24
    35fa:	9f 93       	push	r25
    35fc:	af 93       	push	r26
    35fe:	bf 93       	push	r27
    3600:	ef 93       	push	r30
    3602:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3604:	8e eb       	ldi	r24, 0xBE	; 190
    3606:	91 e0       	ldi	r25, 0x01	; 1
    3608:	0e 94 c1 19 	call	0x3382	; 0x3382 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    360c:	ff 91       	pop	r31
    360e:	ef 91       	pop	r30
    3610:	bf 91       	pop	r27
    3612:	af 91       	pop	r26
    3614:	9f 91       	pop	r25
    3616:	8f 91       	pop	r24
    3618:	7f 91       	pop	r23
    361a:	6f 91       	pop	r22
    361c:	5f 91       	pop	r21
    361e:	4f 91       	pop	r20
    3620:	3f 91       	pop	r19
    3622:	2f 91       	pop	r18
    3624:	0f 90       	pop	r0
    3626:	0f be       	out	0x3f, r0	; 63
    3628:	0f 90       	pop	r0
    362a:	1f 90       	pop	r1
    362c:	18 95       	reti

0000362e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    362e:	8e eb       	ldi	r24, 0xBE	; 190
    3630:	91 e0       	ldi	r25, 0x01	; 1
    3632:	0e 94 85 19 	call	0x330a	; 0x330a <_ZN14HardwareSerial9availableEv>
    3636:	21 e0       	ldi	r18, 0x01	; 1
    3638:	89 2b       	or	r24, r25
    363a:	09 f4       	brne	.+2      	; 0x363e <_Z17Serial0_availablev+0x10>
    363c:	20 e0       	ldi	r18, 0x00	; 0
}
    363e:	82 2f       	mov	r24, r18
    3640:	08 95       	ret

00003642 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3642:	ee eb       	ldi	r30, 0xBE	; 190
    3644:	f1 e0       	ldi	r31, 0x01	; 1
    3646:	13 82       	std	Z+3, r1	; 0x03
    3648:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    364a:	88 ee       	ldi	r24, 0xE8	; 232
    364c:	93 e0       	ldi	r25, 0x03	; 3
    364e:	a0 e0       	ldi	r26, 0x00	; 0
    3650:	b0 e0       	ldi	r27, 0x00	; 0
    3652:	84 83       	std	Z+4, r24	; 0x04
    3654:	95 83       	std	Z+5, r25	; 0x05
    3656:	a6 83       	std	Z+6, r26	; 0x06
    3658:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    365a:	8b e4       	ldi	r24, 0x4B	; 75
    365c:	91 e0       	ldi	r25, 0x01	; 1
    365e:	91 83       	std	Z+1, r25	; 0x01
    3660:	80 83       	st	Z, r24
    3662:	85 ec       	ldi	r24, 0xC5	; 197
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	95 87       	std	Z+13, r25	; 0x0d
    3668:	84 87       	std	Z+12, r24	; 0x0c
    366a:	84 ec       	ldi	r24, 0xC4	; 196
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	97 87       	std	Z+15, r25	; 0x0f
    3670:	86 87       	std	Z+14, r24	; 0x0e
    3672:	80 ec       	ldi	r24, 0xC0	; 192
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	91 8b       	std	Z+17, r25	; 0x11
    3678:	80 8b       	std	Z+16, r24	; 0x10
    367a:	81 ec       	ldi	r24, 0xC1	; 193
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	93 8b       	std	Z+19, r25	; 0x13
    3680:	82 8b       	std	Z+18, r24	; 0x12
    3682:	82 ec       	ldi	r24, 0xC2	; 194
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	95 8b       	std	Z+21, r25	; 0x15
    3688:	84 8b       	std	Z+20, r24	; 0x14
    368a:	86 ec       	ldi	r24, 0xC6	; 198
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	97 8b       	std	Z+23, r25	; 0x17
    3690:	86 8b       	std	Z+22, r24	; 0x16
    3692:	11 8e       	std	Z+25, r1	; 0x19
    3694:	12 8e       	std	Z+26, r1	; 0x1a
    3696:	13 8e       	std	Z+27, r1	; 0x1b
    3698:	14 8e       	std	Z+28, r1	; 0x1c
    369a:	08 95       	ret

0000369c <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    369c:	08 95       	ret

0000369e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    369e:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <init>

	initVariant();
    36a2:	0e 94 4e 1b 	call	0x369c	; 0x369c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    36a6:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    36aa:	c3 eb       	ldi	r28, 0xB3	; 179
    36ac:	d9 e1       	ldi	r29, 0x19	; 25
#endif
	
	setup();
    
	for (;;) {
		loop();
    36ae:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <loop>
		if (serialEventRun) serialEventRun();
    36b2:	20 97       	sbiw	r28, 0x00	; 0
    36b4:	e1 f3       	breq	.-8      	; 0x36ae <main+0x10>
    36b6:	0e 94 b3 19 	call	0x3366	; 0x3366 <_Z14serialEventRunv>
    36ba:	f9 cf       	rjmp	.-14     	; 0x36ae <main+0x10>

000036bc <_Znwj>:
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    36bc:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <malloc>

000036c0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    36c0:	cf 92       	push	r12
    36c2:	df 92       	push	r13
    36c4:	ef 92       	push	r14
    36c6:	ff 92       	push	r15
    36c8:	0f 93       	push	r16
    36ca:	1f 93       	push	r17
    36cc:	cf 93       	push	r28
    36ce:	df 93       	push	r29
    36d0:	6c 01       	movw	r12, r24
    36d2:	7a 01       	movw	r14, r20
    36d4:	8b 01       	movw	r16, r22
  size_t n = 0;
    36d6:	c0 e0       	ldi	r28, 0x00	; 0
    36d8:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    36da:	ce 15       	cp	r28, r14
    36dc:	df 05       	cpc	r29, r15
    36de:	89 f0       	breq	.+34     	; 0x3702 <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
    36e0:	d8 01       	movw	r26, r16
    36e2:	6d 91       	ld	r22, X+
    36e4:	8d 01       	movw	r16, r26
    36e6:	d6 01       	movw	r26, r12
    36e8:	ed 91       	ld	r30, X+
    36ea:	fc 91       	ld	r31, X
    36ec:	01 90       	ld	r0, Z+
    36ee:	f0 81       	ld	r31, Z
    36f0:	e0 2d       	mov	r30, r0
    36f2:	c6 01       	movw	r24, r12
    36f4:	09 95       	icall
    36f6:	89 2b       	or	r24, r25
    36f8:	11 f4       	brne	.+4      	; 0x36fe <_ZN5Print5writeEPKhj+0x3e>
    36fa:	7e 01       	movw	r14, r28
    36fc:	02 c0       	rjmp	.+4      	; 0x3702 <_ZN5Print5writeEPKhj+0x42>
    36fe:	21 96       	adiw	r28, 0x01	; 1
    3700:	ec cf       	rjmp	.-40     	; 0x36da <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
    3702:	c7 01       	movw	r24, r14
    3704:	df 91       	pop	r29
    3706:	cf 91       	pop	r28
    3708:	1f 91       	pop	r17
    370a:	0f 91       	pop	r16
    370c:	ff 90       	pop	r15
    370e:	ef 90       	pop	r14
    3710:	df 90       	pop	r13
    3712:	cf 90       	pop	r12
    3714:	08 95       	ret

00003716 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3716:	1f 92       	push	r1
    3718:	0f 92       	push	r0
    371a:	0f b6       	in	r0, 0x3f	; 63
    371c:	0f 92       	push	r0
    371e:	11 24       	eor	r1, r1
    3720:	2f 93       	push	r18
    3722:	3f 93       	push	r19
    3724:	8f 93       	push	r24
    3726:	9f 93       	push	r25
    3728:	af 93       	push	r26
    372a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    372c:	80 91 5c 02 	lds	r24, 0x025C
    3730:	90 91 5d 02 	lds	r25, 0x025D
    3734:	a0 91 5e 02 	lds	r26, 0x025E
    3738:	b0 91 5f 02 	lds	r27, 0x025F
	unsigned char f = timer0_fract;
    373c:	30 91 5b 02 	lds	r19, 0x025B

	m += MILLIS_INC;
	f += FRACT_INC;
    3740:	23 e0       	ldi	r18, 0x03	; 3
    3742:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    3744:	2d 37       	cpi	r18, 0x7D	; 125
    3746:	20 f4       	brcc	.+8      	; 0x3750 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    3748:	01 96       	adiw	r24, 0x01	; 1
    374a:	a1 1d       	adc	r26, r1
    374c:	b1 1d       	adc	r27, r1
    374e:	05 c0       	rjmp	.+10     	; 0x375a <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    3750:	26 e8       	ldi	r18, 0x86	; 134
    3752:	23 0f       	add	r18, r19
		m += 1;
    3754:	02 96       	adiw	r24, 0x02	; 2
    3756:	a1 1d       	adc	r26, r1
    3758:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    375a:	20 93 5b 02 	sts	0x025B, r18
	timer0_millis = m;
    375e:	80 93 5c 02 	sts	0x025C, r24
    3762:	90 93 5d 02 	sts	0x025D, r25
    3766:	a0 93 5e 02 	sts	0x025E, r26
    376a:	b0 93 5f 02 	sts	0x025F, r27
	timer0_overflow_count++;
    376e:	80 91 60 02 	lds	r24, 0x0260
    3772:	90 91 61 02 	lds	r25, 0x0261
    3776:	a0 91 62 02 	lds	r26, 0x0262
    377a:	b0 91 63 02 	lds	r27, 0x0263
    377e:	01 96       	adiw	r24, 0x01	; 1
    3780:	a1 1d       	adc	r26, r1
    3782:	b1 1d       	adc	r27, r1
    3784:	80 93 60 02 	sts	0x0260, r24
    3788:	90 93 61 02 	sts	0x0261, r25
    378c:	a0 93 62 02 	sts	0x0262, r26
    3790:	b0 93 63 02 	sts	0x0263, r27
}
    3794:	bf 91       	pop	r27
    3796:	af 91       	pop	r26
    3798:	9f 91       	pop	r25
    379a:	8f 91       	pop	r24
    379c:	3f 91       	pop	r19
    379e:	2f 91       	pop	r18
    37a0:	0f 90       	pop	r0
    37a2:	0f be       	out	0x3f, r0	; 63
    37a4:	0f 90       	pop	r0
    37a6:	1f 90       	pop	r1
    37a8:	18 95       	reti

000037aa <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    37aa:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    37ac:	84 b5       	in	r24, 0x24	; 36
    37ae:	82 60       	ori	r24, 0x02	; 2
    37b0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    37b2:	84 b5       	in	r24, 0x24	; 36
    37b4:	81 60       	ori	r24, 0x01	; 1
    37b6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    37b8:	85 b5       	in	r24, 0x25	; 37
    37ba:	82 60       	ori	r24, 0x02	; 2
    37bc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    37be:	85 b5       	in	r24, 0x25	; 37
    37c0:	81 60       	ori	r24, 0x01	; 1
    37c2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    37c4:	ee e6       	ldi	r30, 0x6E	; 110
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	80 81       	ld	r24, Z
    37ca:	81 60       	ori	r24, 0x01	; 1
    37cc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    37ce:	e1 e8       	ldi	r30, 0x81	; 129
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    37d4:	80 81       	ld	r24, Z
    37d6:	82 60       	ori	r24, 0x02	; 2
    37d8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    37da:	80 81       	ld	r24, Z
    37dc:	81 60       	ori	r24, 0x01	; 1
    37de:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    37e0:	e0 e8       	ldi	r30, 0x80	; 128
    37e2:	f0 e0       	ldi	r31, 0x00	; 0
    37e4:	80 81       	ld	r24, Z
    37e6:	81 60       	ori	r24, 0x01	; 1
    37e8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    37ea:	e1 eb       	ldi	r30, 0xB1	; 177
    37ec:	f0 e0       	ldi	r31, 0x00	; 0
    37ee:	80 81       	ld	r24, Z
    37f0:	84 60       	ori	r24, 0x04	; 4
    37f2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    37f4:	e0 eb       	ldi	r30, 0xB0	; 176
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	80 81       	ld	r24, Z
    37fa:	81 60       	ori	r24, 0x01	; 1
    37fc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    37fe:	ea e7       	ldi	r30, 0x7A	; 122
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	84 60       	ori	r24, 0x04	; 4
    3806:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3808:	80 81       	ld	r24, Z
    380a:	82 60       	ori	r24, 0x02	; 2
    380c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    380e:	80 81       	ld	r24, Z
    3810:	81 60       	ori	r24, 0x01	; 1
    3812:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3814:	80 81       	ld	r24, Z
    3816:	80 68       	ori	r24, 0x80	; 128
    3818:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    381a:	10 92 c1 00 	sts	0x00C1, r1
    381e:	08 95       	ret

00003820 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3820:	8e 30       	cpi	r24, 0x0E	; 14
    3822:	08 f0       	brcs	.+2      	; 0x3826 <analogRead+0x6>
    3824:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3826:	87 70       	andi	r24, 0x07	; 7
    3828:	20 91 0a 01 	lds	r18, 0x010A
    382c:	90 e4       	ldi	r25, 0x40	; 64
    382e:	29 9f       	mul	r18, r25
    3830:	90 01       	movw	r18, r0
    3832:	11 24       	eor	r1, r1
    3834:	82 2b       	or	r24, r18
    3836:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    383a:	80 91 7a 00 	lds	r24, 0x007A
    383e:	80 64       	ori	r24, 0x40	; 64
    3840:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3844:	80 91 7a 00 	lds	r24, 0x007A
    3848:	86 fd       	sbrc	r24, 6
    384a:	fc cf       	rjmp	.-8      	; 0x3844 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    384c:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
    3850:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3854:	90 e0       	ldi	r25, 0x00	; 0
}
    3856:	92 2b       	or	r25, r18
    3858:	08 95       	ret

0000385a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    385a:	cf 93       	push	r28
    385c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	fc 01       	movw	r30, r24
    3862:	e5 54       	subi	r30, 0x45	; 69
    3864:	f9 4f       	sbci	r31, 0xF9	; 249
    3866:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3868:	fc 01       	movw	r30, r24
    386a:	e1 53       	subi	r30, 0x31	; 49
    386c:	f9 4f       	sbci	r31, 0xF9	; 249
    386e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3870:	88 23       	and	r24, r24
    3872:	61 f1       	breq	.+88     	; 0x38cc <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	88 0f       	add	r24, r24
    3878:	99 1f       	adc	r25, r25
    387a:	fc 01       	movw	r30, r24
    387c:	e3 51       	subi	r30, 0x13	; 19
    387e:	f9 4f       	sbci	r31, 0xF9	; 249
    3880:	c5 91       	lpm	r28, Z+
    3882:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3884:	fc 01       	movw	r30, r24
    3886:	ed 51       	subi	r30, 0x1D	; 29
    3888:	f9 4f       	sbci	r31, 0xF9	; 249
    388a:	a5 91       	lpm	r26, Z+
    388c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    388e:	61 11       	cpse	r22, r1
    3890:	09 c0       	rjmp	.+18     	; 0x38a4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3892:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3894:	f8 94       	cli
		*reg &= ~bit;
    3896:	88 81       	ld	r24, Y
    3898:	20 95       	com	r18
    389a:	82 23       	and	r24, r18
    389c:	88 83       	st	Y, r24
		*out &= ~bit;
    389e:	ec 91       	ld	r30, X
    38a0:	2e 23       	and	r18, r30
    38a2:	0b c0       	rjmp	.+22     	; 0x38ba <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    38a4:	62 30       	cpi	r22, 0x02	; 2
    38a6:	61 f4       	brne	.+24     	; 0x38c0 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    38a8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    38aa:	f8 94       	cli
		*reg &= ~bit;
    38ac:	38 81       	ld	r19, Y
    38ae:	82 2f       	mov	r24, r18
    38b0:	80 95       	com	r24
    38b2:	83 23       	and	r24, r19
    38b4:	88 83       	st	Y, r24
		*out |= bit;
    38b6:	ec 91       	ld	r30, X
    38b8:	2e 2b       	or	r18, r30
    38ba:	2c 93       	st	X, r18
		SREG = oldSREG;
    38bc:	9f bf       	out	0x3f, r25	; 63
    38be:	06 c0       	rjmp	.+12     	; 0x38cc <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    38c0:	8f b7       	in	r24, 0x3f	; 63
                cli();
    38c2:	f8 94       	cli
		*reg |= bit;
    38c4:	e8 81       	ld	r30, Y
    38c6:	2e 2b       	or	r18, r30
    38c8:	28 83       	st	Y, r18
		SREG = oldSREG;
    38ca:	8f bf       	out	0x3f, r24	; 63
	}
}
    38cc:	df 91       	pop	r29
    38ce:	cf 91       	pop	r28
    38d0:	08 95       	ret

000038d2 <_Z10randomSeedm>:
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
  if (seed != 0) {
    38d2:	61 15       	cp	r22, r1
    38d4:	71 05       	cpc	r23, r1
    38d6:	81 05       	cpc	r24, r1
    38d8:	91 05       	cpc	r25, r1
    38da:	11 f0       	breq	.+4      	; 0x38e0 <_Z10randomSeedm+0xe>
    srandom(seed);
    38dc:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <srandom>
    38e0:	08 95       	ret

000038e2 <_Z6randoml>:
  }
}

long random(long howbig)
{
    38e2:	cf 93       	push	r28
    38e4:	df 93       	push	r29
    38e6:	00 d0       	rcall	.+0      	; 0x38e8 <_Z6randoml+0x6>
    38e8:	00 d0       	rcall	.+0      	; 0x38ea <_Z6randoml+0x8>
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
  if (howbig == 0) {
    38ee:	61 15       	cp	r22, r1
    38f0:	71 05       	cpc	r23, r1
    38f2:	81 05       	cpc	r24, r1
    38f4:	91 05       	cpc	r25, r1
    38f6:	79 f0       	breq	.+30     	; 0x3916 <_Z6randoml+0x34>
    38f8:	9b 01       	movw	r18, r22
    38fa:	ac 01       	movw	r20, r24
    return 0;
  }
  return random() % howbig;
    38fc:	69 83       	std	Y+1, r22	; 0x01
    38fe:	3a 83       	std	Y+2, r19	; 0x02
    3900:	4b 83       	std	Y+3, r20	; 0x03
    3902:	5c 83       	std	Y+4, r21	; 0x04
    3904:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <random>
    3908:	29 81       	ldd	r18, Y+1	; 0x01
    390a:	3a 81       	ldd	r19, Y+2	; 0x02
    390c:	4b 81       	ldd	r20, Y+3	; 0x03
    390e:	5c 81       	ldd	r21, Y+4	; 0x04
    3910:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <__divmodsi4>
    3914:	03 c0       	rjmp	.+6      	; 0x391c <_Z6randoml+0x3a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    3916:	60 e0       	ldi	r22, 0x00	; 0
    3918:	70 e0       	ldi	r23, 0x00	; 0
    391a:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
    391c:	0f 90       	pop	r0
    391e:	0f 90       	pop	r0
    3920:	0f 90       	pop	r0
    3922:	0f 90       	pop	r0
    3924:	df 91       	pop	r29
    3926:	cf 91       	pop	r28
    3928:	08 95       	ret

0000392a <_Z6randomll>:

long random(long howsmall, long howbig)
{
    392a:	cf 92       	push	r12
    392c:	df 92       	push	r13
    392e:	ef 92       	push	r14
    3930:	ff 92       	push	r15
    3932:	0f 93       	push	r16
    3934:	1f 93       	push	r17
  if (howsmall >= howbig) {
    3936:	62 17       	cp	r22, r18
    3938:	73 07       	cpc	r23, r19
    393a:	84 07       	cpc	r24, r20
    393c:	95 07       	cpc	r25, r21
    393e:	84 f4       	brge	.+32     	; 0x3960 <_Z6randomll+0x36>
    3940:	89 01       	movw	r16, r18
    3942:	9a 01       	movw	r18, r20
    3944:	6b 01       	movw	r12, r22
    3946:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
    3948:	c9 01       	movw	r24, r18
    394a:	b8 01       	movw	r22, r16
    394c:	6c 19       	sub	r22, r12
    394e:	7d 09       	sbc	r23, r13
    3950:	8e 09       	sbc	r24, r14
    3952:	9f 09       	sbc	r25, r15
  return random(diff) + howsmall;
    3954:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <_Z6randoml>
    3958:	6c 0d       	add	r22, r12
    395a:	7d 1d       	adc	r23, r13
    395c:	8e 1d       	adc	r24, r14
    395e:	9f 1d       	adc	r25, r15
}
    3960:	1f 91       	pop	r17
    3962:	0f 91       	pop	r16
    3964:	ff 90       	pop	r15
    3966:	ef 90       	pop	r14
    3968:	df 90       	pop	r13
    396a:	cf 90       	pop	r12
    396c:	08 95       	ret

0000396e <__udivmodqi4>:
    396e:	99 1b       	sub	r25, r25
    3970:	79 e0       	ldi	r23, 0x09	; 9
    3972:	04 c0       	rjmp	.+8      	; 0x397c <__udivmodqi4_ep>

00003974 <__udivmodqi4_loop>:
    3974:	99 1f       	adc	r25, r25
    3976:	96 17       	cp	r25, r22
    3978:	08 f0       	brcs	.+2      	; 0x397c <__udivmodqi4_ep>
    397a:	96 1b       	sub	r25, r22

0000397c <__udivmodqi4_ep>:
    397c:	88 1f       	adc	r24, r24
    397e:	7a 95       	dec	r23
    3980:	c9 f7       	brne	.-14     	; 0x3974 <__udivmodqi4_loop>
    3982:	80 95       	com	r24
    3984:	08 95       	ret

00003986 <__udivmodhi4>:
    3986:	aa 1b       	sub	r26, r26
    3988:	bb 1b       	sub	r27, r27
    398a:	51 e1       	ldi	r21, 0x11	; 17
    398c:	07 c0       	rjmp	.+14     	; 0x399c <__udivmodhi4_ep>

0000398e <__udivmodhi4_loop>:
    398e:	aa 1f       	adc	r26, r26
    3990:	bb 1f       	adc	r27, r27
    3992:	a6 17       	cp	r26, r22
    3994:	b7 07       	cpc	r27, r23
    3996:	10 f0       	brcs	.+4      	; 0x399c <__udivmodhi4_ep>
    3998:	a6 1b       	sub	r26, r22
    399a:	b7 0b       	sbc	r27, r23

0000399c <__udivmodhi4_ep>:
    399c:	88 1f       	adc	r24, r24
    399e:	99 1f       	adc	r25, r25
    39a0:	5a 95       	dec	r21
    39a2:	a9 f7       	brne	.-22     	; 0x398e <__udivmodhi4_loop>
    39a4:	80 95       	com	r24
    39a6:	90 95       	com	r25
    39a8:	bc 01       	movw	r22, r24
    39aa:	cd 01       	movw	r24, r26
    39ac:	08 95       	ret

000039ae <__divmodhi4>:
    39ae:	97 fb       	bst	r25, 7
    39b0:	07 2e       	mov	r0, r23
    39b2:	16 f4       	brtc	.+4      	; 0x39b8 <__divmodhi4+0xa>
    39b4:	00 94       	com	r0
    39b6:	07 d0       	rcall	.+14     	; 0x39c6 <__divmodhi4_neg1>
    39b8:	77 fd       	sbrc	r23, 7
    39ba:	09 d0       	rcall	.+18     	; 0x39ce <__divmodhi4_neg2>
    39bc:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodhi4>
    39c0:	07 fc       	sbrc	r0, 7
    39c2:	05 d0       	rcall	.+10     	; 0x39ce <__divmodhi4_neg2>
    39c4:	3e f4       	brtc	.+14     	; 0x39d4 <__divmodhi4_exit>

000039c6 <__divmodhi4_neg1>:
    39c6:	90 95       	com	r25
    39c8:	81 95       	neg	r24
    39ca:	9f 4f       	sbci	r25, 0xFF	; 255
    39cc:	08 95       	ret

000039ce <__divmodhi4_neg2>:
    39ce:	70 95       	com	r23
    39d0:	61 95       	neg	r22
    39d2:	7f 4f       	sbci	r23, 0xFF	; 255

000039d4 <__divmodhi4_exit>:
    39d4:	08 95       	ret

000039d6 <__udivmodsi4>:
    39d6:	a1 e2       	ldi	r26, 0x21	; 33
    39d8:	1a 2e       	mov	r1, r26
    39da:	aa 1b       	sub	r26, r26
    39dc:	bb 1b       	sub	r27, r27
    39de:	fd 01       	movw	r30, r26
    39e0:	0d c0       	rjmp	.+26     	; 0x39fc <__udivmodsi4_ep>

000039e2 <__udivmodsi4_loop>:
    39e2:	aa 1f       	adc	r26, r26
    39e4:	bb 1f       	adc	r27, r27
    39e6:	ee 1f       	adc	r30, r30
    39e8:	ff 1f       	adc	r31, r31
    39ea:	a2 17       	cp	r26, r18
    39ec:	b3 07       	cpc	r27, r19
    39ee:	e4 07       	cpc	r30, r20
    39f0:	f5 07       	cpc	r31, r21
    39f2:	20 f0       	brcs	.+8      	; 0x39fc <__udivmodsi4_ep>
    39f4:	a2 1b       	sub	r26, r18
    39f6:	b3 0b       	sbc	r27, r19
    39f8:	e4 0b       	sbc	r30, r20
    39fa:	f5 0b       	sbc	r31, r21

000039fc <__udivmodsi4_ep>:
    39fc:	66 1f       	adc	r22, r22
    39fe:	77 1f       	adc	r23, r23
    3a00:	88 1f       	adc	r24, r24
    3a02:	99 1f       	adc	r25, r25
    3a04:	1a 94       	dec	r1
    3a06:	69 f7       	brne	.-38     	; 0x39e2 <__udivmodsi4_loop>
    3a08:	60 95       	com	r22
    3a0a:	70 95       	com	r23
    3a0c:	80 95       	com	r24
    3a0e:	90 95       	com	r25
    3a10:	9b 01       	movw	r18, r22
    3a12:	ac 01       	movw	r20, r24
    3a14:	bd 01       	movw	r22, r26
    3a16:	cf 01       	movw	r24, r30
    3a18:	08 95       	ret

00003a1a <__divmodsi4>:
    3a1a:	05 2e       	mov	r0, r21
    3a1c:	97 fb       	bst	r25, 7
    3a1e:	1e f4       	brtc	.+6      	; 0x3a26 <__divmodsi4+0xc>
    3a20:	00 94       	com	r0
    3a22:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__negsi2>
    3a26:	57 fd       	sbrc	r21, 7
    3a28:	07 d0       	rcall	.+14     	; 0x3a38 <__divmodsi4_neg2>
    3a2a:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <__udivmodsi4>
    3a2e:	07 fc       	sbrc	r0, 7
    3a30:	03 d0       	rcall	.+6      	; 0x3a38 <__divmodsi4_neg2>
    3a32:	4e f4       	brtc	.+18     	; 0x3a46 <__divmodsi4_exit>
    3a34:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <__negsi2>

00003a38 <__divmodsi4_neg2>:
    3a38:	50 95       	com	r21
    3a3a:	40 95       	com	r20
    3a3c:	30 95       	com	r19
    3a3e:	21 95       	neg	r18
    3a40:	3f 4f       	sbci	r19, 0xFF	; 255
    3a42:	4f 4f       	sbci	r20, 0xFF	; 255
    3a44:	5f 4f       	sbci	r21, 0xFF	; 255

00003a46 <__divmodsi4_exit>:
    3a46:	08 95       	ret

00003a48 <__negsi2>:
    3a48:	90 95       	com	r25
    3a4a:	80 95       	com	r24
    3a4c:	70 95       	com	r23
    3a4e:	61 95       	neg	r22
    3a50:	7f 4f       	sbci	r23, 0xFF	; 255
    3a52:	8f 4f       	sbci	r24, 0xFF	; 255
    3a54:	9f 4f       	sbci	r25, 0xFF	; 255
    3a56:	08 95       	ret

00003a58 <__tablejump2__>:
    3a58:	ee 0f       	add	r30, r30
    3a5a:	ff 1f       	adc	r31, r31
    3a5c:	05 90       	lpm	r0, Z+
    3a5e:	f4 91       	lpm	r31, Z
    3a60:	e0 2d       	mov	r30, r0
    3a62:	09 94       	ijmp

00003a64 <__muluhisi3>:
    3a64:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__umulhisi3>
    3a68:	a5 9f       	mul	r26, r21
    3a6a:	90 0d       	add	r25, r0
    3a6c:	b4 9f       	mul	r27, r20
    3a6e:	90 0d       	add	r25, r0
    3a70:	a4 9f       	mul	r26, r20
    3a72:	80 0d       	add	r24, r0
    3a74:	91 1d       	adc	r25, r1
    3a76:	11 24       	eor	r1, r1
    3a78:	08 95       	ret

00003a7a <__umulhisi3>:
    3a7a:	a2 9f       	mul	r26, r18
    3a7c:	b0 01       	movw	r22, r0
    3a7e:	b3 9f       	mul	r27, r19
    3a80:	c0 01       	movw	r24, r0
    3a82:	a3 9f       	mul	r26, r19
    3a84:	70 0d       	add	r23, r0
    3a86:	81 1d       	adc	r24, r1
    3a88:	11 24       	eor	r1, r1
    3a8a:	91 1d       	adc	r25, r1
    3a8c:	b2 9f       	mul	r27, r18
    3a8e:	70 0d       	add	r23, r0
    3a90:	81 1d       	adc	r24, r1
    3a92:	11 24       	eor	r1, r1
    3a94:	91 1d       	adc	r25, r1
    3a96:	08 95       	ret

00003a98 <malloc>:
    3a98:	cf 93       	push	r28
    3a9a:	df 93       	push	r29
    3a9c:	82 30       	cpi	r24, 0x02	; 2
    3a9e:	91 05       	cpc	r25, r1
    3aa0:	10 f4       	brcc	.+4      	; 0x3aa6 <malloc+0xe>
    3aa2:	82 e0       	ldi	r24, 0x02	; 2
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	e0 91 66 02 	lds	r30, 0x0266
    3aaa:	f0 91 67 02 	lds	r31, 0x0267
    3aae:	20 e0       	ldi	r18, 0x00	; 0
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	c0 e0       	ldi	r28, 0x00	; 0
    3ab4:	d0 e0       	ldi	r29, 0x00	; 0
    3ab6:	30 97       	sbiw	r30, 0x00	; 0
    3ab8:	11 f1       	breq	.+68     	; 0x3afe <malloc+0x66>
    3aba:	40 81       	ld	r20, Z
    3abc:	51 81       	ldd	r21, Z+1	; 0x01
    3abe:	48 17       	cp	r20, r24
    3ac0:	59 07       	cpc	r21, r25
    3ac2:	c0 f0       	brcs	.+48     	; 0x3af4 <malloc+0x5c>
    3ac4:	48 17       	cp	r20, r24
    3ac6:	59 07       	cpc	r21, r25
    3ac8:	61 f4       	brne	.+24     	; 0x3ae2 <malloc+0x4a>
    3aca:	82 81       	ldd	r24, Z+2	; 0x02
    3acc:	93 81       	ldd	r25, Z+3	; 0x03
    3ace:	20 97       	sbiw	r28, 0x00	; 0
    3ad0:	19 f0       	breq	.+6      	; 0x3ad8 <malloc+0x40>
    3ad2:	9b 83       	std	Y+3, r25	; 0x03
    3ad4:	8a 83       	std	Y+2, r24	; 0x02
    3ad6:	2b c0       	rjmp	.+86     	; 0x3b2e <malloc+0x96>
    3ad8:	90 93 67 02 	sts	0x0267, r25
    3adc:	80 93 66 02 	sts	0x0266, r24
    3ae0:	26 c0       	rjmp	.+76     	; 0x3b2e <malloc+0x96>
    3ae2:	21 15       	cp	r18, r1
    3ae4:	31 05       	cpc	r19, r1
    3ae6:	19 f0       	breq	.+6      	; 0x3aee <malloc+0x56>
    3ae8:	42 17       	cp	r20, r18
    3aea:	53 07       	cpc	r21, r19
    3aec:	18 f4       	brcc	.+6      	; 0x3af4 <malloc+0x5c>
    3aee:	9a 01       	movw	r18, r20
    3af0:	be 01       	movw	r22, r28
    3af2:	df 01       	movw	r26, r30
    3af4:	ef 01       	movw	r28, r30
    3af6:	02 80       	ldd	r0, Z+2	; 0x02
    3af8:	f3 81       	ldd	r31, Z+3	; 0x03
    3afa:	e0 2d       	mov	r30, r0
    3afc:	dc cf       	rjmp	.-72     	; 0x3ab6 <malloc+0x1e>
    3afe:	21 15       	cp	r18, r1
    3b00:	31 05       	cpc	r19, r1
    3b02:	09 f1       	breq	.+66     	; 0x3b46 <malloc+0xae>
    3b04:	28 1b       	sub	r18, r24
    3b06:	39 0b       	sbc	r19, r25
    3b08:	24 30       	cpi	r18, 0x04	; 4
    3b0a:	31 05       	cpc	r19, r1
    3b0c:	90 f4       	brcc	.+36     	; 0x3b32 <malloc+0x9a>
    3b0e:	12 96       	adiw	r26, 0x02	; 2
    3b10:	8d 91       	ld	r24, X+
    3b12:	9c 91       	ld	r25, X
    3b14:	13 97       	sbiw	r26, 0x03	; 3
    3b16:	61 15       	cp	r22, r1
    3b18:	71 05       	cpc	r23, r1
    3b1a:	21 f0       	breq	.+8      	; 0x3b24 <malloc+0x8c>
    3b1c:	fb 01       	movw	r30, r22
    3b1e:	93 83       	std	Z+3, r25	; 0x03
    3b20:	82 83       	std	Z+2, r24	; 0x02
    3b22:	04 c0       	rjmp	.+8      	; 0x3b2c <malloc+0x94>
    3b24:	90 93 67 02 	sts	0x0267, r25
    3b28:	80 93 66 02 	sts	0x0266, r24
    3b2c:	fd 01       	movw	r30, r26
    3b2e:	32 96       	adiw	r30, 0x02	; 2
    3b30:	44 c0       	rjmp	.+136    	; 0x3bba <malloc+0x122>
    3b32:	fd 01       	movw	r30, r26
    3b34:	e2 0f       	add	r30, r18
    3b36:	f3 1f       	adc	r31, r19
    3b38:	81 93       	st	Z+, r24
    3b3a:	91 93       	st	Z+, r25
    3b3c:	22 50       	subi	r18, 0x02	; 2
    3b3e:	31 09       	sbc	r19, r1
    3b40:	2d 93       	st	X+, r18
    3b42:	3c 93       	st	X, r19
    3b44:	3a c0       	rjmp	.+116    	; 0x3bba <malloc+0x122>
    3b46:	20 91 64 02 	lds	r18, 0x0264
    3b4a:	30 91 65 02 	lds	r19, 0x0265
    3b4e:	23 2b       	or	r18, r19
    3b50:	41 f4       	brne	.+16     	; 0x3b62 <malloc+0xca>
    3b52:	20 91 02 01 	lds	r18, 0x0102
    3b56:	30 91 03 01 	lds	r19, 0x0103
    3b5a:	30 93 65 02 	sts	0x0265, r19
    3b5e:	20 93 64 02 	sts	0x0264, r18
    3b62:	20 91 00 01 	lds	r18, 0x0100
    3b66:	30 91 01 01 	lds	r19, 0x0101
    3b6a:	21 15       	cp	r18, r1
    3b6c:	31 05       	cpc	r19, r1
    3b6e:	41 f4       	brne	.+16     	; 0x3b80 <malloc+0xe8>
    3b70:	2d b7       	in	r18, 0x3d	; 61
    3b72:	3e b7       	in	r19, 0x3e	; 62
    3b74:	40 91 04 01 	lds	r20, 0x0104
    3b78:	50 91 05 01 	lds	r21, 0x0105
    3b7c:	24 1b       	sub	r18, r20
    3b7e:	35 0b       	sbc	r19, r21
    3b80:	e0 91 64 02 	lds	r30, 0x0264
    3b84:	f0 91 65 02 	lds	r31, 0x0265
    3b88:	e2 17       	cp	r30, r18
    3b8a:	f3 07       	cpc	r31, r19
    3b8c:	a0 f4       	brcc	.+40     	; 0x3bb6 <malloc+0x11e>
    3b8e:	2e 1b       	sub	r18, r30
    3b90:	3f 0b       	sbc	r19, r31
    3b92:	28 17       	cp	r18, r24
    3b94:	39 07       	cpc	r19, r25
    3b96:	78 f0       	brcs	.+30     	; 0x3bb6 <malloc+0x11e>
    3b98:	ac 01       	movw	r20, r24
    3b9a:	4e 5f       	subi	r20, 0xFE	; 254
    3b9c:	5f 4f       	sbci	r21, 0xFF	; 255
    3b9e:	24 17       	cp	r18, r20
    3ba0:	35 07       	cpc	r19, r21
    3ba2:	48 f0       	brcs	.+18     	; 0x3bb6 <malloc+0x11e>
    3ba4:	4e 0f       	add	r20, r30
    3ba6:	5f 1f       	adc	r21, r31
    3ba8:	50 93 65 02 	sts	0x0265, r21
    3bac:	40 93 64 02 	sts	0x0264, r20
    3bb0:	81 93       	st	Z+, r24
    3bb2:	91 93       	st	Z+, r25
    3bb4:	02 c0       	rjmp	.+4      	; 0x3bba <malloc+0x122>
    3bb6:	e0 e0       	ldi	r30, 0x00	; 0
    3bb8:	f0 e0       	ldi	r31, 0x00	; 0
    3bba:	cf 01       	movw	r24, r30
    3bbc:	df 91       	pop	r29
    3bbe:	cf 91       	pop	r28
    3bc0:	08 95       	ret

00003bc2 <free>:
    3bc2:	0f 93       	push	r16
    3bc4:	1f 93       	push	r17
    3bc6:	cf 93       	push	r28
    3bc8:	df 93       	push	r29
    3bca:	00 97       	sbiw	r24, 0x00	; 0
    3bcc:	09 f4       	brne	.+2      	; 0x3bd0 <free+0xe>
    3bce:	8c c0       	rjmp	.+280    	; 0x3ce8 <free+0x126>
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	32 97       	sbiw	r30, 0x02	; 2
    3bd4:	13 82       	std	Z+3, r1	; 0x03
    3bd6:	12 82       	std	Z+2, r1	; 0x02
    3bd8:	00 91 66 02 	lds	r16, 0x0266
    3bdc:	10 91 67 02 	lds	r17, 0x0267
    3be0:	01 15       	cp	r16, r1
    3be2:	11 05       	cpc	r17, r1
    3be4:	81 f4       	brne	.+32     	; 0x3c06 <free+0x44>
    3be6:	20 81       	ld	r18, Z
    3be8:	31 81       	ldd	r19, Z+1	; 0x01
    3bea:	82 0f       	add	r24, r18
    3bec:	93 1f       	adc	r25, r19
    3bee:	20 91 64 02 	lds	r18, 0x0264
    3bf2:	30 91 65 02 	lds	r19, 0x0265
    3bf6:	28 17       	cp	r18, r24
    3bf8:	39 07       	cpc	r19, r25
    3bfa:	79 f5       	brne	.+94     	; 0x3c5a <free+0x98>
    3bfc:	f0 93 65 02 	sts	0x0265, r31
    3c00:	e0 93 64 02 	sts	0x0264, r30
    3c04:	71 c0       	rjmp	.+226    	; 0x3ce8 <free+0x126>
    3c06:	d8 01       	movw	r26, r16
    3c08:	40 e0       	ldi	r20, 0x00	; 0
    3c0a:	50 e0       	ldi	r21, 0x00	; 0
    3c0c:	ae 17       	cp	r26, r30
    3c0e:	bf 07       	cpc	r27, r31
    3c10:	50 f4       	brcc	.+20     	; 0x3c26 <free+0x64>
    3c12:	12 96       	adiw	r26, 0x02	; 2
    3c14:	2d 91       	ld	r18, X+
    3c16:	3c 91       	ld	r19, X
    3c18:	13 97       	sbiw	r26, 0x03	; 3
    3c1a:	ad 01       	movw	r20, r26
    3c1c:	21 15       	cp	r18, r1
    3c1e:	31 05       	cpc	r19, r1
    3c20:	09 f1       	breq	.+66     	; 0x3c64 <free+0xa2>
    3c22:	d9 01       	movw	r26, r18
    3c24:	f3 cf       	rjmp	.-26     	; 0x3c0c <free+0x4a>
    3c26:	9d 01       	movw	r18, r26
    3c28:	da 01       	movw	r26, r20
    3c2a:	33 83       	std	Z+3, r19	; 0x03
    3c2c:	22 83       	std	Z+2, r18	; 0x02
    3c2e:	60 81       	ld	r22, Z
    3c30:	71 81       	ldd	r23, Z+1	; 0x01
    3c32:	86 0f       	add	r24, r22
    3c34:	97 1f       	adc	r25, r23
    3c36:	82 17       	cp	r24, r18
    3c38:	93 07       	cpc	r25, r19
    3c3a:	69 f4       	brne	.+26     	; 0x3c56 <free+0x94>
    3c3c:	ec 01       	movw	r28, r24
    3c3e:	28 81       	ld	r18, Y
    3c40:	39 81       	ldd	r19, Y+1	; 0x01
    3c42:	26 0f       	add	r18, r22
    3c44:	37 1f       	adc	r19, r23
    3c46:	2e 5f       	subi	r18, 0xFE	; 254
    3c48:	3f 4f       	sbci	r19, 0xFF	; 255
    3c4a:	31 83       	std	Z+1, r19	; 0x01
    3c4c:	20 83       	st	Z, r18
    3c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c50:	9b 81       	ldd	r25, Y+3	; 0x03
    3c52:	93 83       	std	Z+3, r25	; 0x03
    3c54:	82 83       	std	Z+2, r24	; 0x02
    3c56:	45 2b       	or	r20, r21
    3c58:	29 f4       	brne	.+10     	; 0x3c64 <free+0xa2>
    3c5a:	f0 93 67 02 	sts	0x0267, r31
    3c5e:	e0 93 66 02 	sts	0x0266, r30
    3c62:	42 c0       	rjmp	.+132    	; 0x3ce8 <free+0x126>
    3c64:	13 96       	adiw	r26, 0x03	; 3
    3c66:	fc 93       	st	X, r31
    3c68:	ee 93       	st	-X, r30
    3c6a:	12 97       	sbiw	r26, 0x02	; 2
    3c6c:	ed 01       	movw	r28, r26
    3c6e:	49 91       	ld	r20, Y+
    3c70:	59 91       	ld	r21, Y+
    3c72:	9e 01       	movw	r18, r28
    3c74:	24 0f       	add	r18, r20
    3c76:	35 1f       	adc	r19, r21
    3c78:	e2 17       	cp	r30, r18
    3c7a:	f3 07       	cpc	r31, r19
    3c7c:	71 f4       	brne	.+28     	; 0x3c9a <free+0xd8>
    3c7e:	80 81       	ld	r24, Z
    3c80:	91 81       	ldd	r25, Z+1	; 0x01
    3c82:	84 0f       	add	r24, r20
    3c84:	95 1f       	adc	r25, r21
    3c86:	02 96       	adiw	r24, 0x02	; 2
    3c88:	11 96       	adiw	r26, 0x01	; 1
    3c8a:	9c 93       	st	X, r25
    3c8c:	8e 93       	st	-X, r24
    3c8e:	82 81       	ldd	r24, Z+2	; 0x02
    3c90:	93 81       	ldd	r25, Z+3	; 0x03
    3c92:	13 96       	adiw	r26, 0x03	; 3
    3c94:	9c 93       	st	X, r25
    3c96:	8e 93       	st	-X, r24
    3c98:	12 97       	sbiw	r26, 0x02	; 2
    3c9a:	e0 e0       	ldi	r30, 0x00	; 0
    3c9c:	f0 e0       	ldi	r31, 0x00	; 0
    3c9e:	d8 01       	movw	r26, r16
    3ca0:	12 96       	adiw	r26, 0x02	; 2
    3ca2:	8d 91       	ld	r24, X+
    3ca4:	9c 91       	ld	r25, X
    3ca6:	13 97       	sbiw	r26, 0x03	; 3
    3ca8:	00 97       	sbiw	r24, 0x00	; 0
    3caa:	19 f0       	breq	.+6      	; 0x3cb2 <free+0xf0>
    3cac:	f8 01       	movw	r30, r16
    3cae:	8c 01       	movw	r16, r24
    3cb0:	f6 cf       	rjmp	.-20     	; 0x3c9e <free+0xdc>
    3cb2:	8d 91       	ld	r24, X+
    3cb4:	9c 91       	ld	r25, X
    3cb6:	98 01       	movw	r18, r16
    3cb8:	2e 5f       	subi	r18, 0xFE	; 254
    3cba:	3f 4f       	sbci	r19, 0xFF	; 255
    3cbc:	82 0f       	add	r24, r18
    3cbe:	93 1f       	adc	r25, r19
    3cc0:	20 91 64 02 	lds	r18, 0x0264
    3cc4:	30 91 65 02 	lds	r19, 0x0265
    3cc8:	28 17       	cp	r18, r24
    3cca:	39 07       	cpc	r19, r25
    3ccc:	69 f4       	brne	.+26     	; 0x3ce8 <free+0x126>
    3cce:	30 97       	sbiw	r30, 0x00	; 0
    3cd0:	29 f4       	brne	.+10     	; 0x3cdc <free+0x11a>
    3cd2:	10 92 67 02 	sts	0x0267, r1
    3cd6:	10 92 66 02 	sts	0x0266, r1
    3cda:	02 c0       	rjmp	.+4      	; 0x3ce0 <free+0x11e>
    3cdc:	13 82       	std	Z+3, r1	; 0x03
    3cde:	12 82       	std	Z+2, r1	; 0x02
    3ce0:	10 93 65 02 	sts	0x0265, r17
    3ce4:	00 93 64 02 	sts	0x0264, r16
    3ce8:	df 91       	pop	r29
    3cea:	cf 91       	pop	r28
    3cec:	1f 91       	pop	r17
    3cee:	0f 91       	pop	r16
    3cf0:	08 95       	ret

00003cf2 <do_random>:
    3cf2:	8f 92       	push	r8
    3cf4:	9f 92       	push	r9
    3cf6:	af 92       	push	r10
    3cf8:	bf 92       	push	r11
    3cfa:	cf 92       	push	r12
    3cfc:	df 92       	push	r13
    3cfe:	ef 92       	push	r14
    3d00:	ff 92       	push	r15
    3d02:	cf 93       	push	r28
    3d04:	df 93       	push	r29
    3d06:	ec 01       	movw	r28, r24
    3d08:	68 81       	ld	r22, Y
    3d0a:	79 81       	ldd	r23, Y+1	; 0x01
    3d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d10:	61 15       	cp	r22, r1
    3d12:	71 05       	cpc	r23, r1
    3d14:	81 05       	cpc	r24, r1
    3d16:	91 05       	cpc	r25, r1
    3d18:	21 f4       	brne	.+8      	; 0x3d22 <do_random+0x30>
    3d1a:	64 e2       	ldi	r22, 0x24	; 36
    3d1c:	79 ed       	ldi	r23, 0xD9	; 217
    3d1e:	8b e5       	ldi	r24, 0x5B	; 91
    3d20:	97 e0       	ldi	r25, 0x07	; 7
    3d22:	2d e1       	ldi	r18, 0x1D	; 29
    3d24:	33 ef       	ldi	r19, 0xF3	; 243
    3d26:	41 e0       	ldi	r20, 0x01	; 1
    3d28:	50 e0       	ldi	r21, 0x00	; 0
    3d2a:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <__divmodsi4>
    3d2e:	49 01       	movw	r8, r18
    3d30:	5a 01       	movw	r10, r20
    3d32:	9b 01       	movw	r18, r22
    3d34:	ac 01       	movw	r20, r24
    3d36:	a7 ea       	ldi	r26, 0xA7	; 167
    3d38:	b1 e4       	ldi	r27, 0x41	; 65
    3d3a:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__muluhisi3>
    3d3e:	6b 01       	movw	r12, r22
    3d40:	7c 01       	movw	r14, r24
    3d42:	ac ee       	ldi	r26, 0xEC	; 236
    3d44:	b4 ef       	ldi	r27, 0xF4	; 244
    3d46:	a5 01       	movw	r20, r10
    3d48:	94 01       	movw	r18, r8
    3d4a:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__mulohisi3>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	8c 0d       	add	r24, r12
    3d54:	9d 1d       	adc	r25, r13
    3d56:	ae 1d       	adc	r26, r14
    3d58:	bf 1d       	adc	r27, r15
    3d5a:	b7 ff       	sbrs	r27, 7
    3d5c:	03 c0       	rjmp	.+6      	; 0x3d64 <do_random+0x72>
    3d5e:	01 97       	sbiw	r24, 0x01	; 1
    3d60:	a1 09       	sbc	r26, r1
    3d62:	b0 48       	sbci	r27, 0x80	; 128
    3d64:	88 83       	st	Y, r24
    3d66:	99 83       	std	Y+1, r25	; 0x01
    3d68:	aa 83       	std	Y+2, r26	; 0x02
    3d6a:	bb 83       	std	Y+3, r27	; 0x03
    3d6c:	bc 01       	movw	r22, r24
    3d6e:	cd 01       	movw	r24, r26
    3d70:	9f 77       	andi	r25, 0x7F	; 127
    3d72:	df 91       	pop	r29
    3d74:	cf 91       	pop	r28
    3d76:	ff 90       	pop	r15
    3d78:	ef 90       	pop	r14
    3d7a:	df 90       	pop	r13
    3d7c:	cf 90       	pop	r12
    3d7e:	bf 90       	pop	r11
    3d80:	af 90       	pop	r10
    3d82:	9f 90       	pop	r9
    3d84:	8f 90       	pop	r8
    3d86:	08 95       	ret

00003d88 <random_r>:
    3d88:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <do_random>
    3d8c:	08 95       	ret

00003d8e <random>:
    3d8e:	86 e0       	ldi	r24, 0x06	; 6
    3d90:	91 e0       	ldi	r25, 0x01	; 1
    3d92:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <do_random>
    3d96:	08 95       	ret

00003d98 <srandom>:
    3d98:	60 93 06 01 	sts	0x0106, r22
    3d9c:	70 93 07 01 	sts	0x0107, r23
    3da0:	80 93 08 01 	sts	0x0108, r24
    3da4:	90 93 09 01 	sts	0x0109, r25
    3da8:	08 95       	ret

00003daa <abort>:
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	f8 94       	cli
    3db0:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <_exit>

00003db4 <memset>:
    3db4:	dc 01       	movw	r26, r24
    3db6:	01 c0       	rjmp	.+2      	; 0x3dba <memset+0x6>
    3db8:	6d 93       	st	X+, r22
    3dba:	41 50       	subi	r20, 0x01	; 1
    3dbc:	50 40       	sbci	r21, 0x00	; 0
    3dbe:	e0 f7       	brcc	.-8      	; 0x3db8 <memset+0x4>
    3dc0:	08 95       	ret

00003dc2 <__mulshisi3>:
    3dc2:	b7 ff       	sbrs	r27, 7
    3dc4:	0c 94 32 1d 	jmp	0x3a64	; 0x3a64 <__muluhisi3>

00003dc8 <__mulohisi3>:
    3dc8:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__muluhisi3>
    3dcc:	82 1b       	sub	r24, r18
    3dce:	93 0b       	sbc	r25, r19
    3dd0:	08 95       	ret

00003dd2 <_exit>:
    3dd2:	f8 94       	cli

00003dd4 <__stop_program>:
    3dd4:	ff cf       	rjmp	.-2      	; 0x3dd4 <__stop_program>
