
Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00002a1c  00002ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c9  00800158  00800158  00002b08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006d0  00000000  00000000  00002b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000103a6  00000000  00000000  00003248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002733  00000000  00000000  000135ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000028fc  00000000  00000000  00015d21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b64  00000000  00000000  00018620  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003249  00000000  00000000  0001a184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c8fd  00000000  00000000  0001d3cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a30  00000000  00000000  00029cca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__ctors_end>
       4:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
       8:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
       c:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      10:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      14:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      18:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      1c:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      20:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      24:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__vector_9>
      28:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      2c:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      30:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      34:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__vector_13>
      38:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      3c:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      40:	0c 94 91 12 	jmp	0x2522	; 0x2522 <__vector_16>
      44:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      48:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__vector_18>
      4c:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_19>
      50:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      54:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      58:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      5c:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      60:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__vector_24>
      64:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 01       	movw	r0, r0
      6a:	00 00       	nop
      6c:	01 00       	.word	0x0001	; ????
      6e:	01 00       	.word	0x0001	; ????
      70:	01 00       	.word	0x0001	; ????
      72:	01 00       	.word	0x0001	; ????

00000074 <_ZL4font>:
      74:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
      84:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
      94:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
      a4:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
      b4:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
      c4:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
      d4:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
      e4:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
      f4:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     104:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     114:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     124:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     134:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     144:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     154:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     164:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     174:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     184:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     194:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     1a4:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     1b4:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     1c4:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     1d4:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     1e4:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     1f4:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     204:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     214:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     224:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     234:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     244:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     254:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     264:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     274:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     284:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     294:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     2a4:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     2b4:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     2c4:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     2d4:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     2e4:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     2f4:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     304:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     314:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     324:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     334:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     344:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     354:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     364:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     374:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     384:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     394:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     3a4:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     3b4:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     3c4:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     3d4:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     3e4:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     3f4:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     404:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     414:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     424:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     434:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     444:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     454:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     464:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     474:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     484:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     494:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     4a4:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     4b4:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     4c4:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     4d4:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     4e4:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     4f4:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     504:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     514:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     524:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     534:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     544:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     554:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     564:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000574 <digital_pin_to_timer_PGM>:
     574:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     584:	00 00 00 00                                         ....

00000588 <digital_pin_to_bit_mask_PGM>:
     588:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     598:	04 08 10 20                                         ... 

0000059c <digital_pin_to_port_PGM>:
     59c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     5ac:	03 03 03 03                                         ....

000005b0 <port_to_output_PGM>:
     5b0:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000005ba <port_to_mode_PGM>:
     5ba:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000005c4 <__ctors_start>:
     5c4:	35 03       	mulsu	r19, r21
     5c6:	96 10       	cpse	r9, r6
     5c8:	29 12       	cpse	r2, r25

000005ca <__ctors_end>:
     5ca:	11 24       	eor	r1, r1
     5cc:	1f be       	out	0x3f, r1	; 63
     5ce:	cf ef       	ldi	r28, 0xFF	; 255
     5d0:	d8 e0       	ldi	r29, 0x08	; 8
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	cd bf       	out	0x3d, r28	; 61

000005d6 <__do_copy_data>:
     5d6:	11 e0       	ldi	r17, 0x01	; 1
     5d8:	a0 e0       	ldi	r26, 0x00	; 0
     5da:	b1 e0       	ldi	r27, 0x01	; 1
     5dc:	ec e1       	ldi	r30, 0x1C	; 28
     5de:	fa e2       	ldi	r31, 0x2A	; 42
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <__do_copy_data+0x10>
     5e2:	05 90       	lpm	r0, Z+
     5e4:	0d 92       	st	X+, r0
     5e6:	a8 35       	cpi	r26, 0x58	; 88
     5e8:	b1 07       	cpc	r27, r17
     5ea:	d9 f7       	brne	.-10     	; 0x5e2 <__do_copy_data+0xc>

000005ec <__do_clear_bss>:
     5ec:	23 e0       	ldi	r18, 0x03	; 3
     5ee:	a8 e5       	ldi	r26, 0x58	; 88
     5f0:	b1 e0       	ldi	r27, 0x01	; 1
     5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <.do_clear_bss_start>

000005f4 <.do_clear_bss_loop>:
     5f4:	1d 92       	st	X+, r1

000005f6 <.do_clear_bss_start>:
     5f6:	a1 32       	cpi	r26, 0x21	; 33
     5f8:	b2 07       	cpc	r27, r18
     5fa:	e1 f7       	brne	.-8      	; 0x5f4 <.do_clear_bss_loop>

000005fc <__do_global_ctors>:
     5fc:	12 e0       	ldi	r17, 0x02	; 2
     5fe:	c5 ee       	ldi	r28, 0xE5	; 229
     600:	d2 e0       	ldi	r29, 0x02	; 2
     602:	04 c0       	rjmp	.+8      	; 0x60c <__do_global_ctors+0x10>
     604:	21 97       	sbiw	r28, 0x01	; 1
     606:	fe 01       	movw	r30, r28
     608:	0e 94 cd 13 	call	0x279a	; 0x279a <__tablejump2__>
     60c:	c2 3e       	cpi	r28, 0xE2	; 226
     60e:	d1 07       	cpc	r29, r17
     610:	c9 f7       	brne	.-14     	; 0x604 <__do_global_ctors+0x8>
     612:	0e 94 57 12 	call	0x24ae	; 0x24ae <main>
     616:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <_exit>

0000061a <__bad_interrupt>:
     61a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000061e <_Z4Tickv>:
#include <MsTimer2.h>

byte debug = 0x00;
bool UpdateFlag = false;
void Tick() {
	UpdateFlag = true;
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	80 93 68 01 	sts	0x0168, r24
	++debug;
     624:	80 91 69 01 	lds	r24, 0x0169
     628:	8f 5f       	subi	r24, 0xFF	; 255
     62a:	80 93 69 01 	sts	0x0169, r24
     62e:	08 95       	ret

00000630 <loop>:
Graphic sprites[13] = {P1, P2, PL_SHOT, ENM_CROSS, ENM_LINE, ENM_TRACER, ENM_PANEL,
					   ES_DOT, ES_LASER, ES_BALL, BS_EYE, ANIM_EXPLODE, ANIM_BIG_EXPLODE};
// enum Type {GRAPHIC, FRAME, POSX, POSY, POSX0, POSY0} dataType = GRAPHIC;
void loop() {
	//byte spi;
	if (UpdateFlag) {
     630:	80 91 68 01 	lds	r24, 0x0168
     634:	88 23       	and	r24, r24
     636:	c1 f0       	breq	.+48     	; 0x668 <loop+0x38>
		if (debug >= 20) {
     638:	80 91 69 01 	lds	r24, 0x0169
     63c:	84 31       	cpi	r24, 0x14	; 20
     63e:	68 f0       	brcs	.+26     	; 0x65a <loop+0x2a>
			static boolean output = HIGH;
			
			digitalWrite(LED_BUILTIN, output);
     640:	60 91 06 01 	lds	r22, 0x0106
     644:	8d e0       	ldi	r24, 0x0D	; 13
     646:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <digitalWrite>
			output = !output;
     64a:	90 91 06 01 	lds	r25, 0x0106
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	89 27       	eor	r24, r25
     652:	80 93 06 01 	sts	0x0106, r24
			debug = 0;
     656:	10 92 69 01 	sts	0x0169, r1
		}
		//matrix.fillScreen(0);
		UpdateFlag = false;
     65a:	10 92 68 01 	sts	0x0168, r1
		++debug;
     65e:	80 91 69 01 	lds	r24, 0x0169
     662:	8f 5f       	subi	r24, 0xFF	; 255
     664:	80 93 69 01 	sts	0x0169, r24
     668:	08 95       	ret

0000066a <_GLOBAL__sub_I_matrix>:
			}
		break;
		default:
		break;
	}
     66a:	8f 92       	push	r8
     66c:	af 92       	push	r10
     66e:	cf 92       	push	r12
     670:	ef 92       	push	r14
     672:	0f 93       	push	r16
#define A   A0
#define B   A1
#define C   A2
#define D   A3

RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false);
     674:	80 e2       	ldi	r24, 0x20	; 32
     676:	8f 93       	push	r24
     678:	81 2c       	mov	r8, r1
     67a:	89 e0       	ldi	r24, 0x09	; 9
     67c:	a8 2e       	mov	r10, r24
     67e:	9a e0       	ldi	r25, 0x0A	; 10
     680:	c9 2e       	mov	r12, r25
     682:	28 e0       	ldi	r18, 0x08	; 8
     684:	e2 2e       	mov	r14, r18
     686:	01 e1       	ldi	r16, 0x11	; 17
     688:	20 e1       	ldi	r18, 0x10	; 16
     68a:	4f e0       	ldi	r20, 0x0F	; 15
     68c:	6e e0       	ldi	r22, 0x0E	; 14
     68e:	8a e6       	ldi	r24, 0x6A	; 106
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	0e 94 26 0b 	call	0x164c	; 0x164c <_ZN14RGBmatrixPanelC1Ehhhhhhhbh>
     696:	0f 90       	pop	r0
			}
		break;
		default:
		break;
	}
     698:	0f 91       	pop	r16
     69a:	ef 90       	pop	r14
     69c:	cf 90       	pop	r12
     69e:	af 90       	pop	r10
     6a0:	8f 90       	pop	r8
     6a2:	08 95       	ret

000006a4 <setup>:
enum PROGMEM clr_index {RED, ORANGE, YELLOW, GREEN, CYAN, BLUE, PURPLE, WHITE};
uint16_t Colors[8];

void receiveEvent(int);

void setup() {
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     6b0:	26 e0       	ldi	r18, 0x06	; 6
     6b2:	40 e8       	ldi	r20, 0x80	; 128
     6b4:	55 e2       	ldi	r21, 0x25	; 37
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	87 e7       	ldi	r24, 0x77	; 119
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN14HardwareSerial5beginEmh>
	//Wire.onReceive(receiveEvent);
	
	Serial.begin(9600);
	while (!Serial);
	
	pinMode(LED_BUILTIN, OUTPUT);
     6c2:	61 e0       	ldi	r22, 0x01	; 1
     6c4:	8d e0       	ldi	r24, 0x0D	; 13
     6c6:	0e 94 3f 13 	call	0x267e	; 0x267e <pinMode>
	digitalWrite(LED_BUILTIN, LOW);
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	8d e0       	ldi	r24, 0x0D	; 13
     6ce:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <digitalWrite>
	
	MsTimer2::set(50, Tick);
     6d2:	4f e0       	ldi	r20, 0x0F	; 15
     6d4:	53 e0       	ldi	r21, 0x03	; 3
     6d6:	62 e3       	ldi	r22, 0x32	; 50
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	0e 94 2b 08 	call	0x1056	; 0x1056 <_ZN8MsTimer23setEmPFvvE>
	MsTimer2::start();
     6e2:	0e 94 73 08 	call	0x10e6	; 0x10e6 <_ZN8MsTimer25startEv>
	
	matrix.begin();
     6e6:	8a e6       	ldi	r24, 0x6A	; 106
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <_ZN14RGBmatrixPanel5beginEv>
	
	Colors[RED]		= matrix.Color333(3, 0, 0); // red
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	40 e0       	ldi	r20, 0x00	; 0
     6f2:	63 e0       	ldi	r22, 0x03	; 3
     6f4:	8a e6       	ldi	r24, 0x6A	; 106
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <_ZN14RGBmatrixPanel8Color333Ehhh>
     6fc:	90 93 59 01 	sts	0x0159, r25
     700:	80 93 58 01 	sts	0x0158, r24
	Colors[ORANGE]	= matrix.Color333(2, 1, 0); // orange
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	41 e0       	ldi	r20, 0x01	; 1
     708:	62 e0       	ldi	r22, 0x02	; 2
     70a:	8a e6       	ldi	r24, 0x6A	; 106
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <_ZN14RGBmatrixPanel8Color333Ehhh>
     712:	90 93 5b 01 	sts	0x015B, r25
     716:	80 93 5a 01 	sts	0x015A, r24
	Colors[YELLOW]	= matrix.Color333(3, 3, 0); // yellow
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	43 e0       	ldi	r20, 0x03	; 3
     71e:	63 e0       	ldi	r22, 0x03	; 3
     720:	8a e6       	ldi	r24, 0x6A	; 106
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <_ZN14RGBmatrixPanel8Color333Ehhh>
     728:	90 93 5d 01 	sts	0x015D, r25
     72c:	80 93 5c 01 	sts	0x015C, r24
	Colors[GREEN]	= matrix.Color333(0, 3, 0); // green
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	43 e0       	ldi	r20, 0x03	; 3
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	8a e6       	ldi	r24, 0x6A	; 106
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <_ZN14RGBmatrixPanel8Color333Ehhh>
     73e:	90 93 5f 01 	sts	0x015F, r25
     742:	80 93 5e 01 	sts	0x015E, r24
	Colors[CYAN]	= matrix.Color333(0, 3, 3); // cyan
     746:	23 e0       	ldi	r18, 0x03	; 3
     748:	43 e0       	ldi	r20, 0x03	; 3
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	8a e6       	ldi	r24, 0x6A	; 106
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <_ZN14RGBmatrixPanel8Color333Ehhh>
     754:	90 93 61 01 	sts	0x0161, r25
     758:	80 93 60 01 	sts	0x0160, r24
	Colors[BLUE]	= matrix.Color333(0, 0, 3); // blue
     75c:	23 e0       	ldi	r18, 0x03	; 3
     75e:	40 e0       	ldi	r20, 0x00	; 0
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	8a e6       	ldi	r24, 0x6A	; 106
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <_ZN14RGBmatrixPanel8Color333Ehhh>
     76a:	90 93 63 01 	sts	0x0163, r25
     76e:	80 93 62 01 	sts	0x0162, r24
	Colors[PURPLE]	= matrix.Color333(3, 0, 3); // purple
     772:	23 e0       	ldi	r18, 0x03	; 3
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	63 e0       	ldi	r22, 0x03	; 3
     778:	8a e6       	ldi	r24, 0x6A	; 106
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <_ZN14RGBmatrixPanel8Color333Ehhh>
     780:	90 93 65 01 	sts	0x0165, r25
     784:	80 93 64 01 	sts	0x0164, r24
	Colors[WHITE]	= matrix.Color333(3, 3, 3);  // white
     788:	23 e0       	ldi	r18, 0x03	; 3
     78a:	43 e0       	ldi	r20, 0x03	; 3
     78c:	63 e0       	ldi	r22, 0x03	; 3
     78e:	8a e6       	ldi	r24, 0x6A	; 106
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <_ZN14RGBmatrixPanel8Color333Ehhh>
     796:	90 93 67 01 	sts	0x0167, r25
     79a:	80 93 66 01 	sts	0x0166, r24
	
	matrix.fillScreen(0);
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	8a e6       	ldi	r24, 0x6A	; 106
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN14RGBmatrixPanel10fillScreenEj>
     7aa:	8d e0       	ldi	r24, 0x0D	; 13
     7ac:	e8 2e       	mov	r14, r24
     7ae:	f1 2c       	mov	r15, r1
     7b0:	00 e0       	ldi	r16, 0x00	; 0
     7b2:	10 e0       	ldi	r17, 0x00	; 0
enum PROGMEM clr_index {RED, ORANGE, YELLOW, GREEN, CYAN, BLUE, PURPLE, WHITE};
uint16_t Colors[8];

void receiveEvent(int);

void setup() {
     7b4:	c0 e0       	ldi	r28, 0x00	; 0
     7b6:	d0 e0       	ldi	r29, 0x00	; 0
     7b8:	fe 01       	movw	r30, r28
     7ba:	e0 0f       	add	r30, r16
     7bc:	f1 1f       	adc	r31, r17
     7be:	e8 59       	subi	r30, 0x98	; 152
     7c0:	ff 4f       	sbci	r31, 0xFF	; 255
	
	// matrix.drawPixel(15, 15, Colors[WHITE]);
	
	for (byte i = 0; i < 4; ++i) {
		for (byte j = 0; j < 3; ++j) {
			if(pgm_read_byte(&(ship[i][j]))) matrix.drawPixel(14+j, 13+i, Colors[WHITE]);
     7c2:	e4 91       	lpm	r30, Z
     7c4:	ee 23       	and	r30, r30
     7c6:	61 f0       	breq	.+24     	; 0x7e0 <setup+0x13c>
     7c8:	20 91 66 01 	lds	r18, 0x0166
     7cc:	30 91 67 01 	lds	r19, 0x0167
     7d0:	a7 01       	movw	r20, r14
     7d2:	be 01       	movw	r22, r28
     7d4:	62 5f       	subi	r22, 0xF2	; 242
     7d6:	7f 4f       	sbci	r23, 0xFF	; 255
     7d8:	8a e6       	ldi	r24, 0x6A	; 106
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 fe 08 	call	0x11fc	; 0x11fc <_ZN14RGBmatrixPanel9drawPixelEiij>
     7e0:	21 96       	adiw	r28, 0x01	; 1
	matrix.fillScreen(0);
	
	// matrix.drawPixel(15, 15, Colors[WHITE]);
	
	for (byte i = 0; i < 4; ++i) {
		for (byte j = 0; j < 3; ++j) {
     7e2:	c3 30       	cpi	r28, 0x03	; 3
     7e4:	d1 05       	cpc	r29, r1
     7e6:	41 f7       	brne	.-48     	; 0x7b8 <setup+0x114>
     7e8:	0d 5f       	subi	r16, 0xFD	; 253
     7ea:	1f 4f       	sbci	r17, 0xFF	; 255
     7ec:	8f ef       	ldi	r24, 0xFF	; 255
     7ee:	e8 1a       	sub	r14, r24
     7f0:	f8 0a       	sbc	r15, r24
	
	matrix.fillScreen(0);
	
	// matrix.drawPixel(15, 15, Colors[WHITE]);
	
	for (byte i = 0; i < 4; ++i) {
     7f2:	0c 30       	cpi	r16, 0x0C	; 12
     7f4:	11 05       	cpc	r17, r1
     7f6:	f1 f6       	brne	.-68     	; 0x7b4 <setup+0x110>
		for (byte j = 0; j < 3; ++j) {
			if(pgm_read_byte(&(ship[i][j]))) matrix.drawPixel(14+j, 13+i, Colors[WHITE]);
		}
	}
	matrix.drawPixel(15, 15, Colors[BLUE]);
     7f8:	20 91 62 01 	lds	r18, 0x0162
     7fc:	30 91 63 01 	lds	r19, 0x0163
     800:	4f e0       	ldi	r20, 0x0F	; 15
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	6f e0       	ldi	r22, 0x0F	; 15
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	8a e6       	ldi	r24, 0x6A	; 106
     80a:	91 e0       	ldi	r25, 0x01	; 1
}
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
	for (byte i = 0; i < 4; ++i) {
		for (byte j = 0; j < 3; ++j) {
			if(pgm_read_byte(&(ship[i][j]))) matrix.drawPixel(14+j, 13+i, Colors[WHITE]);
		}
	}
	matrix.drawPixel(15, 15, Colors[BLUE]);
     818:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <_ZN14RGBmatrixPanel9drawPixelEiij>

0000081c <_ZN12Adafruit_GFX8drawLineEiiiij>:
  }
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
 uint16_t color) {
     81c:	2f 92       	push	r2
     81e:	3f 92       	push	r3
     820:	4f 92       	push	r4
     822:	5f 92       	push	r5
     824:	6f 92       	push	r6
     826:	7f 92       	push	r7
     828:	8f 92       	push	r8
     82a:	9f 92       	push	r9
     82c:	af 92       	push	r10
     82e:	bf 92       	push	r11
     830:	cf 92       	push	r12
     832:	df 92       	push	r13
     834:	ef 92       	push	r14
     836:	ff 92       	push	r15
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	00 d0       	rcall	.+0      	; 0x842 <_ZN12Adafruit_GFX8drawLineEiiiij+0x26>
     842:	1f 92       	push	r1
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	4c 01       	movw	r8, r24
     84a:	7b 83       	std	Y+3, r23	; 0x03
     84c:	6a 83       	std	Y+2, r22	; 0x02
     84e:	6a 01       	movw	r12, r20
     850:	59 01       	movw	r10, r18
     852:	17 01       	movw	r2, r14
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
     854:	98 01       	movw	r18, r16
     856:	24 1b       	sub	r18, r20
     858:	35 0b       	sbc	r19, r21
     85a:	37 ff       	sbrs	r19, 7
     85c:	03 c0       	rjmp	.+6      	; 0x864 <_ZN12Adafruit_GFX8drawLineEiiiij+0x48>
     85e:	31 95       	neg	r19
     860:	21 95       	neg	r18
     862:	31 09       	sbc	r19, r1
     864:	c5 01       	movw	r24, r10
     866:	4a 81       	ldd	r20, Y+2	; 0x02
     868:	5b 81       	ldd	r21, Y+3	; 0x03
     86a:	84 1b       	sub	r24, r20
     86c:	95 0b       	sbc	r25, r21
     86e:	97 ff       	sbrs	r25, 7
     870:	03 c0       	rjmp	.+6      	; 0x878 <_ZN12Adafruit_GFX8drawLineEiiiij+0x5c>
     872:	91 95       	neg	r25
     874:	81 95       	neg	r24
     876:	91 09       	sbc	r25, r1
     878:	51 e0       	ldi	r21, 0x01	; 1
     87a:	59 83       	std	Y+1, r21	; 0x01
     87c:	82 17       	cp	r24, r18
     87e:	93 07       	cpc	r25, r19
     880:	14 f0       	brlt	.+4      	; 0x886 <_ZN12Adafruit_GFX8drawLineEiiiij+0x6a>
     882:	19 82       	std	Y+1, r1	; 0x01
     884:	0b c0       	rjmp	.+22     	; 0x89c <_ZN12Adafruit_GFX8drawLineEiiiij+0x80>
  if (steep) {
     886:	9a 2d       	mov	r25, r10
     888:	8b 2d       	mov	r24, r11
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
     88a:	58 01       	movw	r10, r16
     88c:	09 2f       	mov	r16, r25
     88e:	18 2f       	mov	r17, r24

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
 uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
     890:	9a 81       	ldd	r25, Y+2	; 0x02
     892:	8b 81       	ldd	r24, Y+3	; 0x03
    _swap_int16_t(x0, y0);
     894:	db 82       	std	Y+3, r13	; 0x03
     896:	ca 82       	std	Y+2, r12	; 0x02
     898:	c9 2e       	mov	r12, r25
     89a:	d8 2e       	mov	r13, r24
    _swap_int16_t(x1, y1);
  }

  if (x0 > x1) {
     89c:	8a 81       	ldd	r24, Y+2	; 0x02
     89e:	9b 81       	ldd	r25, Y+3	; 0x03
     8a0:	a8 16       	cp	r10, r24
     8a2:	b9 06       	cpc	r11, r25
     8a4:	5c f4       	brge	.+22     	; 0x8bc <_ZN12Adafruit_GFX8drawLineEiiiij+0xa0>
     8a6:	9c 2d       	mov	r25, r12
     8a8:	8d 2d       	mov	r24, r13
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
     8aa:	68 01       	movw	r12, r16
     8ac:	09 2f       	mov	r16, r25
     8ae:	18 2f       	mov	r17, r24
  if (steep) {
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
  }

  if (x0 > x1) {
     8b0:	9a 81       	ldd	r25, Y+2	; 0x02
     8b2:	8b 81       	ldd	r24, Y+3	; 0x03
     8b4:	bb 82       	std	Y+3, r11	; 0x03
     8b6:	aa 82       	std	Y+2, r10	; 0x02
     8b8:	a9 2e       	mov	r10, r25
     8ba:	b8 2e       	mov	r11, r24
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
     8bc:	25 01       	movw	r4, r10
     8be:	aa 81       	ldd	r26, Y+2	; 0x02
     8c0:	bb 81       	ldd	r27, Y+3	; 0x03
     8c2:	4a 1a       	sub	r4, r26
     8c4:	5b 0a       	sbc	r5, r27
  dy = abs(y1 - y0);
     8c6:	38 01       	movw	r6, r16
     8c8:	6c 18       	sub	r6, r12
     8ca:	7d 08       	sbc	r7, r13
     8cc:	77 fe       	sbrs	r7, 7
     8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <_ZN12Adafruit_GFX8drawLineEiiiij+0xba>
     8d0:	71 94       	neg	r7
     8d2:	61 94       	neg	r6
     8d4:	71 08       	sbc	r7, r1

  int16_t err = dx / 2;
     8d6:	72 01       	movw	r14, r4
     8d8:	57 fe       	sbrs	r5, 7
     8da:	03 c0       	rjmp	.+6      	; 0x8e2 <_ZN12Adafruit_GFX8drawLineEiiiij+0xc6>
     8dc:	bf ef       	ldi	r27, 0xFF	; 255
     8de:	eb 1a       	sub	r14, r27
     8e0:	fb 0a       	sbc	r15, r27
     8e2:	f5 94       	asr	r15
     8e4:	e7 94       	ror	r14
  int16_t ystep;

  if (y0 < y1) {
     8e6:	c0 16       	cp	r12, r16
     8e8:	d1 06       	cpc	r13, r17
     8ea:	1c f0       	brlt	.+6      	; 0x8f2 <_ZN12Adafruit_GFX8drawLineEiiiij+0xd6>
    ystep = 1;
  } else {
    ystep = -1;
     8ec:	0f ef       	ldi	r16, 0xFF	; 255
     8ee:	1f ef       	ldi	r17, 0xFF	; 255
     8f0:	1f c0       	rjmp	.+62     	; 0x930 <__stack+0x31>

  int16_t err = dx / 2;
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
     8f2:	01 e0       	ldi	r16, 0x01	; 1
     8f4:	10 e0       	ldi	r17, 0x00	; 0
     8f6:	1c c0       	rjmp	.+56     	; 0x930 <__stack+0x31>
     8f8:	d4 01       	movw	r26, r8
     8fa:	ed 91       	ld	r30, X+
     8fc:	fc 91       	ld	r31, X
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
     8fe:	b9 81       	ldd	r27, Y+1	; 0x01
      drawPixel(y0, x0, color);
     900:	04 80       	ldd	r0, Z+4	; 0x04
     902:	f5 81       	ldd	r31, Z+5	; 0x05
     904:	e0 2d       	mov	r30, r0
     906:	91 01       	movw	r18, r2
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
     908:	bb 23       	and	r27, r27
     90a:	c1 f0       	breq	.+48     	; 0x93c <__stack+0x3d>
      drawPixel(y0, x0, color);
     90c:	4a 81       	ldd	r20, Y+2	; 0x02
     90e:	5b 81       	ldd	r21, Y+3	; 0x03
     910:	b6 01       	movw	r22, r12
    } else {
      drawPixel(x0, y0, color);
     912:	c4 01       	movw	r24, r8
     914:	09 95       	icall
    }
    err -= dy;
     916:	e6 18       	sub	r14, r6
     918:	f7 08       	sbc	r15, r7
    if (err < 0) {
     91a:	f7 fe       	sbrs	r15, 7
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0x27>
      y0 += ystep;
     91e:	c0 0e       	add	r12, r16
     920:	d1 1e       	adc	r13, r17
      err += dx;
     922:	e4 0c       	add	r14, r4
     924:	f5 1c       	adc	r15, r5
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
     926:	ea 81       	ldd	r30, Y+2	; 0x02
     928:	fb 81       	ldd	r31, Y+3	; 0x03
     92a:	31 96       	adiw	r30, 0x01	; 1
     92c:	fb 83       	std	Y+3, r31	; 0x03
     92e:	ea 83       	std	Y+2, r30	; 0x02
     930:	4a 81       	ldd	r20, Y+2	; 0x02
     932:	5b 81       	ldd	r21, Y+3	; 0x03
     934:	a4 16       	cp	r10, r20
     936:	b5 06       	cpc	r11, r21
     938:	fc f6       	brge	.-66     	; 0x8f8 <_ZN12Adafruit_GFX8drawLineEiiiij+0xdc>
     93a:	04 c0       	rjmp	.+8      	; 0x944 <__stack+0x45>
    if (steep) {
      drawPixel(y0, x0, color);
    } else {
      drawPixel(x0, y0, color);
     93c:	a6 01       	movw	r20, r12
     93e:	6a 81       	ldd	r22, Y+2	; 0x02
     940:	7b 81       	ldd	r23, Y+3	; 0x03
     942:	e7 cf       	rjmp	.-50     	; 0x912 <__stack+0x13>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	bf 90       	pop	r11
     95c:	af 90       	pop	r10
     95e:	9f 90       	pop	r9
     960:	8f 90       	pop	r8
     962:	7f 90       	pop	r7
     964:	6f 90       	pop	r6
     966:	5f 90       	pop	r5
     968:	4f 90       	pop	r4
     96a:	3f 90       	pop	r3
     96c:	2f 90       	pop	r2
     96e:	08 95       	ret

00000970 <_ZN12Adafruit_GFX8drawRectEiiiij>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
     970:	6f 92       	push	r6
     972:	7f 92       	push	r7
     974:	8f 92       	push	r8
     976:	9f 92       	push	r9
     978:	af 92       	push	r10
     97a:	bf 92       	push	r11
     97c:	cf 92       	push	r12
     97e:	df 92       	push	r13
     980:	ef 92       	push	r14
     982:	ff 92       	push	r15
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	ec 01       	movw	r28, r24
     98e:	4b 01       	movw	r8, r22
     990:	5a 01       	movw	r10, r20
     992:	69 01       	movw	r12, r18
     994:	38 01       	movw	r6, r16
  drawFastHLine(x, y, w, color);
     996:	e8 81       	ld	r30, Y
     998:	f9 81       	ldd	r31, Y+1	; 0x01
     99a:	02 84       	ldd	r0, Z+10	; 0x0a
     99c:	f3 85       	ldd	r31, Z+11	; 0x0b
     99e:	e0 2d       	mov	r30, r0
     9a0:	87 01       	movw	r16, r14
     9a2:	09 95       	icall
  drawFastHLine(x, y+h-1, w, color);
     9a4:	e8 81       	ld	r30, Y
     9a6:	f9 81       	ldd	r31, Y+1	; 0x01
     9a8:	a5 01       	movw	r20, r10
     9aa:	46 0d       	add	r20, r6
     9ac:	57 1d       	adc	r21, r7
     9ae:	41 50       	subi	r20, 0x01	; 1
     9b0:	51 09       	sbc	r21, r1
     9b2:	02 84       	ldd	r0, Z+10	; 0x0a
     9b4:	f3 85       	ldd	r31, Z+11	; 0x0b
     9b6:	e0 2d       	mov	r30, r0
     9b8:	96 01       	movw	r18, r12
     9ba:	b4 01       	movw	r22, r8
     9bc:	ce 01       	movw	r24, r28
     9be:	09 95       	icall
  drawFastVLine(x, y, h, color);
     9c0:	e8 81       	ld	r30, Y
     9c2:	f9 81       	ldd	r31, Y+1	; 0x01
     9c4:	00 84       	ldd	r0, Z+8	; 0x08
     9c6:	f1 85       	ldd	r31, Z+9	; 0x09
     9c8:	e0 2d       	mov	r30, r0
     9ca:	93 01       	movw	r18, r6
     9cc:	a5 01       	movw	r20, r10
     9ce:	b4 01       	movw	r22, r8
     9d0:	ce 01       	movw	r24, r28
     9d2:	09 95       	icall
  drawFastVLine(x+w-1, y, h, color);
     9d4:	e8 81       	ld	r30, Y
     9d6:	f9 81       	ldd	r31, Y+1	; 0x01
     9d8:	c8 0c       	add	r12, r8
     9da:	d9 1c       	adc	r13, r9
     9dc:	b6 01       	movw	r22, r12
     9de:	61 50       	subi	r22, 0x01	; 1
     9e0:	71 09       	sbc	r23, r1
     9e2:	00 84       	ldd	r0, Z+8	; 0x08
     9e4:	f1 85       	ldd	r31, Z+9	; 0x09
     9e6:	e0 2d       	mov	r30, r0
     9e8:	93 01       	movw	r18, r6
     9ea:	a5 01       	movw	r20, r10
     9ec:	ce 01       	movw	r24, r28
     9ee:	09 95       	icall
}
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	ff 90       	pop	r15
     9fa:	ef 90       	pop	r14
     9fc:	df 90       	pop	r13
     9fe:	cf 90       	pop	r12
     a00:	bf 90       	pop	r11
     a02:	af 90       	pop	r10
     a04:	9f 90       	pop	r9
     a06:	8f 90       	pop	r8
     a08:	7f 90       	pop	r7
     a0a:	6f 90       	pop	r6
     a0c:	08 95       	ret

00000a0e <_ZN12Adafruit_GFX13drawFastVLineEiiij>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
 int16_t h, uint16_t color) {
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	78 01       	movw	r14, r16
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
     a18:	dc 01       	movw	r26, r24
     a1a:	ed 91       	ld	r30, X+
     a1c:	fc 91       	ld	r31, X
     a1e:	24 0f       	add	r18, r20
     a20:	35 1f       	adc	r19, r21
     a22:	89 01       	movw	r16, r18
     a24:	01 50       	subi	r16, 0x01	; 1
     a26:	11 09       	sbc	r17, r1
     a28:	06 80       	ldd	r0, Z+6	; 0x06
     a2a:	f7 81       	ldd	r31, Z+7	; 0x07
     a2c:	e0 2d       	mov	r30, r0
     a2e:	9b 01       	movw	r18, r22
     a30:	09 95       	icall
}
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	ff 90       	pop	r15
     a38:	ef 90       	pop	r14
     a3a:	08 95       	ret

00000a3c <_ZN12Adafruit_GFX13drawFastHLineEiiij>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
 int16_t w, uint16_t color) {
     a3c:	ef 92       	push	r14
     a3e:	ff 92       	push	r15
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
     a44:	dc 01       	movw	r26, r24
     a46:	ed 91       	ld	r30, X+
     a48:	fc 91       	ld	r31, X
     a4a:	26 0f       	add	r18, r22
     a4c:	37 1f       	adc	r19, r23
     a4e:	21 50       	subi	r18, 0x01	; 1
     a50:	31 09       	sbc	r19, r1
     a52:	06 80       	ldd	r0, Z+6	; 0x06
     a54:	f7 81       	ldd	r31, Z+7	; 0x07
     a56:	e0 2d       	mov	r30, r0
     a58:	78 01       	movw	r14, r16
     a5a:	8a 01       	movw	r16, r20
     a5c:	09 95       	icall
}
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	ff 90       	pop	r15
     a64:	ef 90       	pop	r14
     a66:	08 95       	ret

00000a68 <_ZN12Adafruit_GFX8fillRectEiiiij>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
     a68:	6f 92       	push	r6
     a6a:	7f 92       	push	r7
     a6c:	8f 92       	push	r8
     a6e:	9f 92       	push	r9
     a70:	af 92       	push	r10
     a72:	bf 92       	push	r11
     a74:	cf 92       	push	r12
     a76:	df 92       	push	r13
     a78:	ef 92       	push	r14
     a7a:	ff 92       	push	r15
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	6c 01       	movw	r12, r24
     a86:	5a 01       	movw	r10, r20
     a88:	48 01       	movw	r8, r16
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
     a8a:	eb 01       	movw	r28, r22
     a8c:	3b 01       	movw	r6, r22
     a8e:	62 0e       	add	r6, r18
     a90:	73 1e       	adc	r7, r19
     a92:	c6 15       	cp	r28, r6
     a94:	d7 05       	cpc	r29, r7
     a96:	74 f4       	brge	.+28     	; 0xab4 <_ZN12Adafruit_GFX8fillRectEiiiij+0x4c>
    drawFastVLine(i, y, h, color);
     a98:	d6 01       	movw	r26, r12
     a9a:	ed 91       	ld	r30, X+
     a9c:	fc 91       	ld	r31, X
     a9e:	00 84       	ldd	r0, Z+8	; 0x08
     aa0:	f1 85       	ldd	r31, Z+9	; 0x09
     aa2:	e0 2d       	mov	r30, r0
     aa4:	87 01       	movw	r16, r14
     aa6:	94 01       	movw	r18, r8
     aa8:	a5 01       	movw	r20, r10
     aaa:	be 01       	movw	r22, r28
     aac:	c6 01       	movw	r24, r12
     aae:	09 95       	icall
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
     ab0:	21 96       	adiw	r28, 0x01	; 1
     ab2:	ef cf       	rjmp	.-34     	; 0xa92 <_ZN12Adafruit_GFX8fillRectEiiiij+0x2a>
    drawFastVLine(i, y, h, color);
  }
}
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	df 90       	pop	r13
     ac2:	cf 90       	pop	r12
     ac4:	bf 90       	pop	r11
     ac6:	af 90       	pop	r10
     ac8:	9f 90       	pop	r9
     aca:	8f 90       	pop	r8
     acc:	7f 90       	pop	r7
     ace:	6f 90       	pop	r6
     ad0:	08 95       	ret

00000ad2 <_ZN12Adafruit_GFX10fillScreenEj>:

void Adafruit_GFX::fillScreen(uint16_t color) {
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
  fillRect(0, 0, _width, _height, color);
     ada:	dc 01       	movw	r26, r24
     adc:	ed 91       	ld	r30, X+
     ade:	fc 91       	ld	r31, X
     ae0:	11 97       	sbiw	r26, 0x01	; 1
     ae2:	1a 96       	adiw	r26, 0x0a	; 10
     ae4:	0d 91       	ld	r16, X+
     ae6:	1c 91       	ld	r17, X
     ae8:	1b 97       	sbiw	r26, 0x0b	; 11
     aea:	18 96       	adiw	r26, 0x08	; 8
     aec:	2d 91       	ld	r18, X+
     aee:	3c 91       	ld	r19, X
     af0:	19 97       	sbiw	r26, 0x09	; 9
     af2:	06 84       	ldd	r0, Z+14	; 0x0e
     af4:	f7 85       	ldd	r31, Z+15	; 0x0f
     af6:	e0 2d       	mov	r30, r0
     af8:	7b 01       	movw	r14, r22
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	09 95       	icall
}
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	08 95       	ret

00000b0e <_ZN12Adafruit_GFX13invertDisplayEb>:

int16_t Adafruit_GFX::height(void) const {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
     b0e:	08 95       	ret

00000b10 <_ZN12Adafruit_GFXC1Eii>:

#ifndef _swap_int16_t
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
#endif

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
     b10:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     b12:	13 82       	std	Z+3, r1	; 0x03
     b14:	12 82       	std	Z+2, r1	; 0x02
  WIDTH(w), HEIGHT(h)
     b16:	8b e0       	ldi	r24, 0x0B	; 11
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	91 83       	std	Z+1, r25	; 0x01
     b1c:	80 83       	st	Z, r24
     b1e:	75 83       	std	Z+5, r23	; 0x05
     b20:	64 83       	std	Z+4, r22	; 0x04
     b22:	57 83       	std	Z+7, r21	; 0x07
     b24:	46 83       	std	Z+6, r20	; 0x06
{
  _width    = WIDTH;
     b26:	71 87       	std	Z+9, r23	; 0x09
     b28:	60 87       	std	Z+8, r22	; 0x08
  _height   = HEIGHT;
     b2a:	53 87       	std	Z+11, r21	; 0x0b
     b2c:	42 87       	std	Z+10, r20	; 0x0a
  rotation  = 0;
     b2e:	15 8a       	std	Z+21, r1	; 0x15
  cursor_y  = cursor_x    = 0;
     b30:	15 86       	std	Z+13, r1	; 0x0d
     b32:	14 86       	std	Z+12, r1	; 0x0c
     b34:	17 86       	std	Z+15, r1	; 0x0f
     b36:	16 86       	std	Z+14, r1	; 0x0e
  textsize  = 1;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	84 8b       	std	Z+20, r24	; 0x14
  textcolor = textbgcolor = 0xFFFF;
     b3c:	2f ef       	ldi	r18, 0xFF	; 255
     b3e:	3f ef       	ldi	r19, 0xFF	; 255
     b40:	33 8b       	std	Z+19, r19	; 0x13
     b42:	22 8b       	std	Z+18, r18	; 0x12
     b44:	31 8b       	std	Z+17, r19	; 0x11
     b46:	20 8b       	std	Z+16, r18	; 0x10
  wrap      = true;
     b48:	86 8b       	std	Z+22, r24	; 0x16
  _cp437    = false;
     b4a:	17 8a       	std	Z+23, r1	; 0x17
  gfxFont   = NULL;
     b4c:	11 8e       	std	Z+25, r1	; 0x19
     b4e:	10 8e       	std	Z+24, r1	; 0x18
     b50:	08 95       	ret

00000b52 <_ZN12Adafruit_GFX8drawCharEiihjjh>:
#endif
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
 uint16_t color, uint16_t bg, uint8_t size) {
     b52:	2f 92       	push	r2
     b54:	3f 92       	push	r3
     b56:	4f 92       	push	r4
     b58:	5f 92       	push	r5
     b5a:	6f 92       	push	r6
     b5c:	7f 92       	push	r7
     b5e:	8f 92       	push	r8
     b60:	9f 92       	push	r9
     b62:	af 92       	push	r10
     b64:	bf 92       	push	r11
     b66:	cf 92       	push	r12
     b68:	df 92       	push	r13
     b6a:	ef 92       	push	r14
     b6c:	ff 92       	push	r15
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	69 97       	sbiw	r28, 0x19	; 25
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	de bf       	out	0x3e, r29	; 62
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	cd bf       	out	0x3d, r28	; 61
     b86:	3c 01       	movw	r6, r24
     b88:	4a 01       	movw	r8, r20
     b8a:	1f 83       	std	Y+7, r17	; 0x07
     b8c:	0e 83       	std	Y+6, r16	; 0x06
     b8e:	fd 82       	std	Y+5, r15	; 0x05
     b90:	ec 82       	std	Y+4, r14	; 0x04
     b92:	ca 82       	std	Y+2, r12	; 0x02

  if(!gfxFont) { // 'Classic' built-in font
     b94:	dc 01       	movw	r26, r24
     b96:	58 96       	adiw	r26, 0x18	; 24
     b98:	4d 91       	ld	r20, X+
     b9a:	5c 91       	ld	r21, X
     b9c:	59 97       	sbiw	r26, 0x19	; 25
     b9e:	41 15       	cp	r20, r1
     ba0:	51 05       	cpc	r21, r1
     ba2:	09 f0       	breq	.+2      	; 0xba6 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x54>
     ba4:	a8 c0       	rjmp	.+336    	; 0xcf6 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1a4>

    if((x >= _width)            || // Clip right
     ba6:	18 96       	adiw	r26, 0x08	; 8
     ba8:	8d 91       	ld	r24, X+
     baa:	9c 91       	ld	r25, X
     bac:	19 97       	sbiw	r26, 0x09	; 9
     bae:	68 17       	cp	r22, r24
     bb0:	79 07       	cpc	r23, r25
     bb2:	0c f0       	brlt	.+2      	; 0xbb6 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x64>
     bb4:	60 c1       	rjmp	.+704    	; 0xe76 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
     bb6:	1a 96       	adiw	r26, 0x0a	; 10
     bb8:	8d 91       	ld	r24, X+
     bba:	9c 91       	ld	r25, X
     bbc:	1b 97       	sbiw	r26, 0x0b	; 11
     bbe:	88 16       	cp	r8, r24
     bc0:	99 06       	cpc	r9, r25
     bc2:	0c f0       	brlt	.+2      	; 0xbc6 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x74>
     bc4:	58 c1       	rjmp	.+688    	; 0xe76 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
       (y >= _height)           || // Clip bottom
       ((x + 6 * size - 1) < 0) || // Clip left
     bc6:	d1 2c       	mov	r13, r1
     bc8:	cb 01       	movw	r24, r22
     bca:	ea 81       	ldd	r30, Y+2	; 0x02
     bcc:	b6 e0       	ldi	r27, 0x06	; 6
     bce:	eb 9f       	mul	r30, r27
     bd0:	80 0d       	add	r24, r0
     bd2:	91 1d       	adc	r25, r1
     bd4:	11 24       	eor	r1, r1
 uint16_t color, uint16_t bg, uint8_t size) {

  if(!gfxFont) { // 'Classic' built-in font

    if((x >= _width)            || // Clip right
       (y >= _height)           || // Clip bottom
     bd6:	18 16       	cp	r1, r24
     bd8:	19 06       	cpc	r1, r25
     bda:	0c f0       	brlt	.+2      	; 0xbde <_ZN12Adafruit_GFX8drawCharEiihjjh+0x8c>
     bdc:	4c c1       	rjmp	.+664    	; 0xe76 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
       ((x + 6 * size - 1) < 0) || // Clip left
       ((y + 8 * size - 1) < 0))   // Clip top
     bde:	c6 01       	movw	r24, r12
     be0:	33 e0       	ldi	r19, 0x03	; 3
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	3a 95       	dec	r19
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x90>
     bea:	88 0d       	add	r24, r8
     bec:	99 1d       	adc	r25, r9

  if(!gfxFont) { // 'Classic' built-in font

    if((x >= _width)            || // Clip right
       (y >= _height)           || // Clip bottom
       ((x + 6 * size - 1) < 0) || // Clip left
     bee:	18 16       	cp	r1, r24
     bf0:	19 06       	cpc	r1, r25
     bf2:	0c f0       	brlt	.+2      	; 0xbf6 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xa4>
     bf4:	40 c1       	rjmp	.+640    	; 0xe76 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
     bf6:	d3 01       	movw	r26, r6
     bf8:	57 96       	adiw	r26, 0x17	; 23
     bfa:	8c 91       	ld	r24, X
     bfc:	81 11       	cpse	r24, r1
     bfe:	03 c0       	rjmp	.+6      	; 0xc06 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xb4>
     c00:	20 3b       	cpi	r18, 0xB0	; 176
     c02:	08 f0       	brcs	.+2      	; 0xc06 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xb4>
     c04:	2f 5f       	subi	r18, 0xFF	; 255

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
     c06:	b5 e0       	ldi	r27, 0x05	; 5
     c08:	2b 9f       	mul	r18, r27
     c0a:	90 01       	movw	r18, r0
     c0c:	11 24       	eor	r1, r1
     c0e:	7e 87       	std	Y+14, r23	; 0x0e
     c10:	6d 87       	std	Y+13, r22	; 0x0d
     c12:	2b 01       	movw	r4, r22
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

    for(int8_t i=0; i<6; i++ ) {
     c14:	1b 82       	std	Y+3, r1	; 0x03
     c16:	f9 01       	movw	r30, r18
     c18:	e6 1b       	sub	r30, r22
     c1a:	f7 0b       	sbc	r31, r23
     c1c:	f9 87       	std	Y+9, r31	; 0x09
     c1e:	e8 87       	std	Y+8, r30	; 0x08
     c20:	94 01       	movw	r18, r8
     c22:	28 5f       	subi	r18, 0xF8	; 248
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	3b 87       	std	Y+11, r19	; 0x0b
     c28:	2a 87       	std	Y+10, r18	; 0x0a
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
     c2a:	3b 81       	ldd	r19, Y+3	; 0x03
     c2c:	35 30       	cpi	r19, 0x05	; 5
     c2e:	59 f0       	breq	.+22     	; 0xc46 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xf4>
     c30:	e8 85       	ldd	r30, Y+8	; 0x08
     c32:	f9 85       	ldd	r31, Y+9	; 0x09
     c34:	4d 85       	ldd	r20, Y+13	; 0x0d
     c36:	5e 85       	ldd	r21, Y+14	; 0x0e
     c38:	e4 0f       	add	r30, r20
     c3a:	f5 1f       	adc	r31, r21
     c3c:	ec 58       	subi	r30, 0x8C	; 140
     c3e:	ff 4f       	sbci	r31, 0xFF	; 255
     c40:	54 91       	lpm	r21, Z
     c42:	59 83       	std	Y+1, r21	; 0x01
     c44:	01 c0       	rjmp	.+2      	; 0xc48 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xf6>
      else      line = 0x0;
     c46:	19 82       	std	Y+1, r1	; 0x01
     c48:	14 01       	movw	r2, r8
     c4a:	54 01       	movw	r10, r8
      for(int8_t j=0; j<8; j++, line >>= 1) {
        if(line & 0x1) {
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	80 ff       	sbrs	r24, 0
     c50:	12 c0       	rjmp	.+36     	; 0xc76 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x124>
     c52:	d3 01       	movw	r26, r6
     c54:	ed 91       	ld	r30, X+
     c56:	fc 91       	ld	r31, X
          if(size == 1) drawPixel(x+i, y+j, color);
     c58:	ba 81       	ldd	r27, Y+2	; 0x02
     c5a:	b1 30       	cpi	r27, 0x01	; 1
     c5c:	31 f4       	brne	.+12     	; 0xc6a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x118>
     c5e:	04 80       	ldd	r0, Z+4	; 0x04
     c60:	f5 81       	ldd	r31, Z+5	; 0x05
     c62:	e0 2d       	mov	r30, r0
     c64:	2e 81       	ldd	r18, Y+6	; 0x06
     c66:	3f 81       	ldd	r19, Y+7	; 0x07
     c68:	18 c0       	rjmp	.+48     	; 0xc9a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x148>
          else          fillRect(x+(i*size), y+(j*size), size, size, color);
     c6a:	06 84       	ldd	r0, Z+14	; 0x0e
     c6c:	f7 85       	ldd	r31, Z+15	; 0x0f
     c6e:	e0 2d       	mov	r30, r0
     c70:	ee 80       	ldd	r14, Y+6	; 0x06
     c72:	ff 80       	ldd	r15, Y+7	; 0x07
     c74:	1d c0       	rjmp	.+58     	; 0xcb0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x15e>
        } else if(bg != color) {
     c76:	ec 81       	ldd	r30, Y+4	; 0x04
     c78:	fd 81       	ldd	r31, Y+5	; 0x05
     c7a:	2e 81       	ldd	r18, Y+6	; 0x06
     c7c:	3f 81       	ldd	r19, Y+7	; 0x07
     c7e:	e2 17       	cp	r30, r18
     c80:	f3 07       	cpc	r31, r19
     c82:	e1 f0       	breq	.+56     	; 0xcbc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x16a>
     c84:	d3 01       	movw	r26, r6
     c86:	ed 91       	ld	r30, X+
     c88:	fc 91       	ld	r31, X
          if(size == 1) drawPixel(x+i, y+j, bg);
     c8a:	ba 81       	ldd	r27, Y+2	; 0x02
     c8c:	b1 30       	cpi	r27, 0x01	; 1
     c8e:	59 f4       	brne	.+22     	; 0xca6 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x154>
     c90:	04 80       	ldd	r0, Z+4	; 0x04
     c92:	f5 81       	ldd	r31, Z+5	; 0x05
     c94:	e0 2d       	mov	r30, r0
     c96:	2c 81       	ldd	r18, Y+4	; 0x04
     c98:	3d 81       	ldd	r19, Y+5	; 0x05
     c9a:	a5 01       	movw	r20, r10
     c9c:	6d 85       	ldd	r22, Y+13	; 0x0d
     c9e:	7e 85       	ldd	r23, Y+14	; 0x0e
     ca0:	c3 01       	movw	r24, r6
     ca2:	09 95       	icall
     ca4:	0b c0       	rjmp	.+22     	; 0xcbc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x16a>
          else          fillRect(x+i*size, y+j*size, size, size, bg);
     ca6:	06 84       	ldd	r0, Z+14	; 0x0e
     ca8:	f7 85       	ldd	r31, Z+15	; 0x0f
     caa:	e0 2d       	mov	r30, r0
     cac:	ec 80       	ldd	r14, Y+4	; 0x04
     cae:	fd 80       	ldd	r15, Y+5	; 0x05
     cb0:	86 01       	movw	r16, r12
     cb2:	96 01       	movw	r18, r12
     cb4:	a1 01       	movw	r20, r2
     cb6:	b2 01       	movw	r22, r4
     cb8:	c3 01       	movw	r24, r6
     cba:	09 95       	icall

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
      else      line = 0x0;
      for(int8_t j=0; j<8; j++, line >>= 1) {
     cbc:	e9 81       	ldd	r30, Y+1	; 0x01
     cbe:	e6 95       	lsr	r30
     cc0:	e9 83       	std	Y+1, r30	; 0x01
     cc2:	2c 0c       	add	r2, r12
     cc4:	3d 1c       	adc	r3, r13
     cc6:	ff ef       	ldi	r31, 0xFF	; 255
     cc8:	af 1a       	sub	r10, r31
     cca:	bf 0a       	sbc	r11, r31
     ccc:	2a 85       	ldd	r18, Y+10	; 0x0a
     cce:	3b 85       	ldd	r19, Y+11	; 0x0b
     cd0:	a2 16       	cp	r10, r18
     cd2:	b3 06       	cpc	r11, r19
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x186>
     cd6:	ba cf       	rjmp	.-140    	; 0xc4c <_ZN12Adafruit_GFX8drawCharEiihjjh+0xfa>
     cd8:	3b 81       	ldd	r19, Y+3	; 0x03
     cda:	3f 5f       	subi	r19, 0xFF	; 255
     cdc:	3b 83       	std	Y+3, r19	; 0x03
     cde:	4c 0c       	add	r4, r12
     ce0:	5d 1c       	adc	r5, r13
     ce2:	4d 85       	ldd	r20, Y+13	; 0x0d
     ce4:	5e 85       	ldd	r21, Y+14	; 0x0e
     ce6:	4f 5f       	subi	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	5e 87       	std	Y+14, r21	; 0x0e
     cec:	4d 87       	std	Y+13, r20	; 0x0d
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

    for(int8_t i=0; i<6; i++ ) {
     cee:	36 30       	cpi	r19, 0x06	; 6
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1a2>
     cf2:	9b cf       	rjmp	.-202    	; 0xc2a <_ZN12Adafruit_GFX8drawCharEiihjjh+0xd8>
     cf4:	c0 c0       	rjmp	.+384    	; 0xe76 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling drawChar()
    // directly with 'bad' characters of font may cause mayhem!

    c -= pgm_read_byte(&gfxFont->first);
     cf6:	fa 01       	movw	r30, r20
     cf8:	34 96       	adiw	r30, 0x04	; 4
     cfa:	34 91       	lpm	r19, Z
    GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
     cfc:	32 97       	sbiw	r30, 0x02	; 2
     cfe:	85 91       	lpm	r24, Z+
     d00:	94 91       	lpm	r25, Z

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling drawChar()
    // directly with 'bad' characters of font may cause mayhem!

    c -= pgm_read_byte(&gfxFont->first);
     d02:	23 1b       	sub	r18, r19
    GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
     d04:	a7 e0       	ldi	r26, 0x07	; 7
     d06:	2a 9f       	mul	r18, r26
     d08:	80 0d       	add	r24, r0
     d0a:	91 1d       	adc	r25, r1
     d0c:	11 24       	eor	r1, r1
    uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
     d0e:	fa 01       	movw	r30, r20
     d10:	25 91       	lpm	r18, Z+
     d12:	34 91       	lpm	r19, Z
     d14:	38 8b       	std	Y+16, r19	; 0x10
     d16:	2f 87       	std	Y+15, r18	; 0x0f

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
     d18:	fc 01       	movw	r30, r24
     d1a:	25 90       	lpm	r2, Z+
     d1c:	34 90       	lpm	r3, Z
    uint8_t  w  = pgm_read_byte(&glyph->width),
     d1e:	fc 01       	movw	r30, r24
     d20:	32 96       	adiw	r30, 0x02	; 2
     d22:	34 91       	lpm	r19, Z
     d24:	3b 83       	std	Y+3, r19	; 0x03
             h  = pgm_read_byte(&glyph->height),
     d26:	31 96       	adiw	r30, 0x01	; 1
     d28:	44 91       	lpm	r20, Z
     d2a:	4c 87       	std	Y+12, r20	; 0x0c
             xa = pgm_read_byte(&glyph->xAdvance);
     d2c:	31 96       	adiw	r30, 0x01	; 1
     d2e:	e4 91       	lpm	r30, Z
    int8_t   xo = pgm_read_byte(&glyph->xOffset),
     d30:	fc 01       	movw	r30, r24
     d32:	35 96       	adiw	r30, 0x05	; 5
     d34:	a4 91       	lpm	r26, Z
             yo = pgm_read_byte(&glyph->yOffset);
     d36:	31 96       	adiw	r30, 0x01	; 1
     d38:	84 91       	lpm	r24, Z
    uint8_t  xx, yy, bits, bit = 0;
    int16_t  xo16, yo16;

    if(size > 1) {
     d3a:	5a 81       	ldd	r21, Y+2	; 0x02
     d3c:	52 30       	cpi	r21, 0x02	; 2
     d3e:	50 f0       	brcs	.+20     	; 0xd54 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x202>
      xo16 = xo;
     d40:	4a 2e       	mov	r4, r26
     d42:	0a 2e       	mov	r0, r26
     d44:	00 0c       	add	r0, r0
     d46:	55 08       	sbc	r5, r5
      yo16 = yo;
     d48:	e8 2f       	mov	r30, r24
     d4a:	08 2e       	mov	r0, r24
     d4c:	00 0c       	add	r0, r0
     d4e:	ff 0b       	sbc	r31, r31
     d50:	f9 87       	std	Y+9, r31	; 0x09
     d52:	e8 87       	std	Y+8, r30	; 0x08
     d54:	fa 81       	ldd	r31, Y+2	; 0x02
     d56:	cf 2e       	mov	r12, r31
     d58:	d1 2c       	mov	r13, r1
     d5a:	4c 9c       	mul	r4, r12
     d5c:	90 01       	movw	r18, r0
     d5e:	4d 9c       	mul	r4, r13
     d60:	30 0d       	add	r19, r0
     d62:	5c 9c       	mul	r5, r12
     d64:	30 0d       	add	r19, r0
     d66:	11 24       	eor	r1, r1
     d68:	a9 01       	movw	r20, r18
     d6a:	46 0f       	add	r20, r22
     d6c:	57 1f       	adc	r21, r23
     d6e:	5b 87       	std	Y+11, r21	; 0x0b
     d70:	4a 87       	std	Y+10, r20	; 0x0a
    uint8_t  w  = pgm_read_byte(&glyph->width),
             h  = pgm_read_byte(&glyph->height),
             xa = pgm_read_byte(&glyph->xAdvance);
    int8_t   xo = pgm_read_byte(&glyph->xOffset),
             yo = pgm_read_byte(&glyph->yOffset);
    uint8_t  xx, yy, bits, bit = 0;
     d72:	19 82       	std	Y+1, r1	; 0x01
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
     d74:	a1 2c       	mov	r10, r1
     d76:	ea 2f       	mov	r30, r26
     d78:	aa 0f       	add	r26, r26
     d7a:	ff 0b       	sbc	r31, r31
     d7c:	db 01       	movw	r26, r22
     d7e:	ae 0f       	add	r26, r30
     d80:	bf 1f       	adc	r27, r31
     d82:	bd 83       	std	Y+5, r27	; 0x05
     d84:	ac 83       	std	Y+4, r26	; 0x04
     d86:	bb 81       	ldd	r27, Y+3	; 0x03
     d88:	6b 0f       	add	r22, r27
     d8a:	71 1d       	adc	r23, r1
     d8c:	9b 01       	movw	r18, r22
     d8e:	2e 0f       	add	r18, r30
     d90:	3f 1f       	adc	r19, r31
     d92:	3d 8b       	std	Y+21, r19	; 0x15
     d94:	2c 8b       	std	Y+20, r18	; 0x14
        if(!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
     d96:	a4 01       	movw	r20, r8
     d98:	48 0f       	add	r20, r24
     d9a:	51 1d       	adc	r21, r1
     d9c:	87 fd       	sbrc	r24, 7
     d9e:	5a 95       	dec	r21
     da0:	5f 8b       	std	Y+23, r21	; 0x17
     da2:	4e 8b       	std	Y+22, r20	; 0x16
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
     da4:	9c 85       	ldd	r25, Y+12	; 0x0c
     da6:	a9 16       	cp	r10, r25
     da8:	08 f0       	brcs	.+2      	; 0xdac <_ZN12Adafruit_GFX8drawCharEiihjjh+0x25a>
     daa:	65 c0       	rjmp	.+202    	; 0xe76 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x324>
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
          } else {
            fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
     dac:	8a 2d       	mov	r24, r10
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	48 85       	ldd	r20, Y+8	; 0x08
     db2:	59 85       	ldd	r21, Y+9	; 0x09
     db4:	48 0f       	add	r20, r24
     db6:	59 1f       	adc	r21, r25
     db8:	4c 9d       	mul	r20, r12
     dba:	90 01       	movw	r18, r0
     dbc:	4d 9d       	mul	r20, r13
     dbe:	30 0d       	add	r19, r0
     dc0:	5c 9d       	mul	r21, r12
     dc2:	30 0d       	add	r19, r0
     dc4:	11 24       	eor	r1, r1
     dc6:	d9 01       	movw	r26, r18
     dc8:	a8 0d       	add	r26, r8
     dca:	b9 1d       	adc	r27, r9
     dcc:	be 87       	std	Y+14, r27	; 0x0e
     dce:	ad 87       	std	Y+13, r26	; 0x0d
     dd0:	ec 81       	ldd	r30, Y+4	; 0x04
     dd2:	fd 81       	ldd	r31, Y+5	; 0x05
     dd4:	f9 8f       	std	Y+25, r31	; 0x19
     dd6:	e8 8f       	std	Y+24, r30	; 0x18
     dd8:	4a 84       	ldd	r4, Y+10	; 0x0a
     dda:	5b 84       	ldd	r5, Y+11	; 0x0b
     ddc:	f9 81       	ldd	r31, Y+1	; 0x01
     dde:	2c 81       	ldd	r18, Y+4	; 0x04
     de0:	f2 1b       	sub	r31, r18
     de2:	f9 8b       	std	Y+17, r31	; 0x11
        if(!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
     de4:	4e 89       	ldd	r20, Y+22	; 0x16
     de6:	5f 89       	ldd	r21, Y+23	; 0x17
     de8:	48 0f       	add	r20, r24
     dea:	59 1f       	adc	r21, r25
     dec:	5b 8b       	std	Y+19, r21	; 0x13
     dee:	4a 8b       	std	Y+18, r20	; 0x12
     df0:	89 89       	ldd	r24, Y+17	; 0x11
     df2:	f8 8d       	ldd	r31, Y+24	; 0x18
     df4:	8f 0f       	add	r24, r31
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
      for(xx=0; xx<w; xx++) {
     df6:	28 8d       	ldd	r18, Y+24	; 0x18
     df8:	39 8d       	ldd	r19, Y+25	; 0x19
     dfa:	4c 89       	ldd	r20, Y+20	; 0x14
     dfc:	5d 89       	ldd	r21, Y+21	; 0x15
     dfe:	24 17       	cp	r18, r20
     e00:	35 07       	cpc	r19, r21
     e02:	99 f1       	breq	.+102    	; 0xe6a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x318>
        if(!(bit++ & 7)) {
     e04:	87 70       	andi	r24, 0x07	; 7
     e06:	41 f4       	brne	.+16     	; 0xe18 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2c6>
          bits = pgm_read_byte(&bitmap[bo++]);
     e08:	c1 01       	movw	r24, r2
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	ef 85       	ldd	r30, Y+15	; 0x0f
     e0e:	f8 89       	ldd	r31, Y+16	; 0x10
     e10:	e2 0d       	add	r30, r2
     e12:	f3 1d       	adc	r31, r3
     e14:	b4 90       	lpm	r11, Z
     e16:	1c 01       	movw	r2, r24
        }
        if(bits & 0x80) {
     e18:	b7 fe       	sbrs	r11, 7
     e1a:	1e c0       	rjmp	.+60     	; 0xe58 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x306>
     e1c:	d3 01       	movw	r26, r6
     e1e:	ed 91       	ld	r30, X+
     e20:	fc 91       	ld	r31, X
          if(size == 1) {
     e22:	ba 81       	ldd	r27, Y+2	; 0x02
     e24:	b1 30       	cpi	r27, 0x01	; 1
     e26:	61 f4       	brne	.+24     	; 0xe40 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2ee>
            drawPixel(x+xo+xx, y+yo+yy, color);
     e28:	04 80       	ldd	r0, Z+4	; 0x04
     e2a:	f5 81       	ldd	r31, Z+5	; 0x05
     e2c:	e0 2d       	mov	r30, r0
     e2e:	2e 81       	ldd	r18, Y+6	; 0x06
     e30:	3f 81       	ldd	r19, Y+7	; 0x07
     e32:	4a 89       	ldd	r20, Y+18	; 0x12
     e34:	5b 89       	ldd	r21, Y+19	; 0x13
     e36:	68 8d       	ldd	r22, Y+24	; 0x18
     e38:	79 8d       	ldd	r23, Y+25	; 0x19
     e3a:	c3 01       	movw	r24, r6
     e3c:	09 95       	icall
     e3e:	0c c0       	rjmp	.+24     	; 0xe58 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x306>
          } else {
            fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
     e40:	06 84       	ldd	r0, Z+14	; 0x0e
     e42:	f7 85       	ldd	r31, Z+15	; 0x0f
     e44:	e0 2d       	mov	r30, r0
     e46:	ee 80       	ldd	r14, Y+6	; 0x06
     e48:	ff 80       	ldd	r15, Y+7	; 0x07
     e4a:	86 01       	movw	r16, r12
     e4c:	96 01       	movw	r18, r12
     e4e:	4d 85       	ldd	r20, Y+13	; 0x0d
     e50:	5e 85       	ldd	r21, Y+14	; 0x0e
     e52:	b2 01       	movw	r22, r4
     e54:	c3 01       	movw	r24, r6
     e56:	09 95       	icall
          }
        }
        bits <<= 1;
     e58:	bb 0c       	add	r11, r11
     e5a:	4c 0c       	add	r4, r12
     e5c:	5d 1c       	adc	r5, r13
     e5e:	e8 8d       	ldd	r30, Y+24	; 0x18
     e60:	f9 8d       	ldd	r31, Y+25	; 0x19
     e62:	31 96       	adiw	r30, 0x01	; 1
     e64:	f9 8f       	std	Y+25, r31	; 0x19
     e66:	e8 8f       	std	Y+24, r30	; 0x18
     e68:	c3 cf       	rjmp	.-122    	; 0xdf0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x29e>
     e6a:	59 81       	ldd	r21, Y+1	; 0x01
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	58 0f       	add	r21, r24
     e70:	59 83       	std	Y+1, r21	; 0x01
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
     e72:	a3 94       	inc	r10
     e74:	97 cf       	rjmp	.-210    	; 0xda4 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x252>
        bits <<= 1;
      }
    }

  } // End classic vs custom font
}
     e76:	69 96       	adiw	r28, 0x19	; 25
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	df 90       	pop	r13
     e90:	cf 90       	pop	r12
     e92:	bf 90       	pop	r11
     e94:	af 90       	pop	r10
     e96:	9f 90       	pop	r9
     e98:	8f 90       	pop	r8
     e9a:	7f 90       	pop	r7
     e9c:	6f 90       	pop	r6
     e9e:	5f 90       	pop	r5
     ea0:	4f 90       	pop	r4
     ea2:	3f 90       	pop	r3
     ea4:	2f 90       	pop	r2
     ea6:	08 95       	ret

00000ea8 <_ZN12Adafruit_GFX5writeEh>:
    }
  }
}

#if ARDUINO >= 100
size_t Adafruit_GFX::write(uint8_t c) {
     ea8:	af 92       	push	r10
     eaa:	bf 92       	push	r11
     eac:	cf 92       	push	r12
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	ec 01       	movw	r28, r24
     ebc:	26 2f       	mov	r18, r22
#else
void Adafruit_GFX::write(uint8_t c) {
#endif

  if(!gfxFont) { // 'Classic' built-in font
     ebe:	88 8d       	ldd	r24, Y+24	; 0x18
     ec0:	99 8d       	ldd	r25, Y+25	; 0x19
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	09 f0       	breq	.+2      	; 0xec8 <_ZN12Adafruit_GFX5writeEh+0x20>
     ec6:	42 c0       	rjmp	.+132    	; 0xf4c <_ZN12Adafruit_GFX5writeEh+0xa4>

    if(c == '\n') {
     ec8:	6a 30       	cpi	r22, 0x0A	; 10
     eca:	69 f4       	brne	.+26     	; 0xee6 <_ZN12Adafruit_GFX5writeEh+0x3e>
      cursor_y += textsize*8;
     ecc:	2c 89       	ldd	r18, Y+20	; 0x14
     ece:	8e 85       	ldd	r24, Y+14	; 0x0e
     ed0:	9f 85       	ldd	r25, Y+15	; 0x0f
     ed2:	38 e0       	ldi	r19, 0x08	; 8
     ed4:	23 9f       	mul	r18, r19
     ed6:	80 0d       	add	r24, r0
     ed8:	91 1d       	adc	r25, r1
     eda:	11 24       	eor	r1, r1
     edc:	9f 87       	std	Y+15, r25	; 0x0f
     ede:	8e 87       	std	Y+14, r24	; 0x0e
      cursor_x  = 0;
     ee0:	1d 86       	std	Y+13, r1	; 0x0d
     ee2:	1c 86       	std	Y+12, r1	; 0x0c
     ee4:	ac c0       	rjmp	.+344    	; 0x103e <_ZN12Adafruit_GFX5writeEh+0x196>
    } else if(c == '\r') {
     ee6:	6d 30       	cpi	r22, 0x0D	; 13
     ee8:	09 f4       	brne	.+2      	; 0xeec <_ZN12Adafruit_GFX5writeEh+0x44>
     eea:	a9 c0       	rjmp	.+338    	; 0x103e <_ZN12Adafruit_GFX5writeEh+0x196>
      // skip em
    } else {
      if(wrap && ((cursor_x + textsize * 6) >= _width)) { // Heading off edge?
     eec:	8e 89       	ldd	r24, Y+22	; 0x16
     eee:	88 23       	and	r24, r24
     ef0:	c1 f0       	breq	.+48     	; 0xf22 <_ZN12Adafruit_GFX5writeEh+0x7a>
     ef2:	3c 89       	ldd	r19, Y+20	; 0x14
     ef4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ef6:	9d 85       	ldd	r25, Y+13	; 0x0d
     ef8:	46 e0       	ldi	r20, 0x06	; 6
     efa:	34 9f       	mul	r19, r20
     efc:	80 0d       	add	r24, r0
     efe:	91 1d       	adc	r25, r1
     f00:	11 24       	eor	r1, r1
     f02:	48 85       	ldd	r20, Y+8	; 0x08
     f04:	59 85       	ldd	r21, Y+9	; 0x09
     f06:	84 17       	cp	r24, r20
     f08:	95 07       	cpc	r25, r21
     f0a:	5c f0       	brlt	.+22     	; 0xf22 <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x  = 0;            // Reset x to zero
     f0c:	1d 86       	std	Y+13, r1	; 0x0d
     f0e:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize * 8; // Advance y one line
     f10:	8e 85       	ldd	r24, Y+14	; 0x0e
     f12:	9f 85       	ldd	r25, Y+15	; 0x0f
     f14:	e8 e0       	ldi	r30, 0x08	; 8
     f16:	3e 9f       	mul	r19, r30
     f18:	80 0d       	add	r24, r0
     f1a:	91 1d       	adc	r25, r1
     f1c:	11 24       	eor	r1, r1
     f1e:	9f 87       	std	Y+15, r25	; 0x0f
     f20:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
     f22:	ea 88       	ldd	r14, Y+18	; 0x12
     f24:	fb 88       	ldd	r15, Y+19	; 0x13
     f26:	08 89       	ldd	r16, Y+16	; 0x10
     f28:	19 89       	ldd	r17, Y+17	; 0x11
     f2a:	4e 85       	ldd	r20, Y+14	; 0x0e
     f2c:	5f 85       	ldd	r21, Y+15	; 0x0f
     f2e:	6c 85       	ldd	r22, Y+12	; 0x0c
     f30:	7d 85       	ldd	r23, Y+13	; 0x0d
     f32:	cc 88       	ldd	r12, Y+20	; 0x14
     f34:	ce 01       	movw	r24, r28
     f36:	0e 94 a9 05 	call	0xb52	; 0xb52 <_ZN12Adafruit_GFX8drawCharEiihjjh>
      cursor_x += textsize * 6;
     f3a:	2c 89       	ldd	r18, Y+20	; 0x14
     f3c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f3e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f40:	f6 e0       	ldi	r31, 0x06	; 6
     f42:	2f 9f       	mul	r18, r31
     f44:	80 0d       	add	r24, r0
     f46:	91 1d       	adc	r25, r1
     f48:	11 24       	eor	r1, r1
     f4a:	41 c0       	rjmp	.+130    	; 0xfce <_ZN12Adafruit_GFX5writeEh+0x126>
    }

  } else { // Custom font

    if(c == '\n') {
     f4c:	6a 30       	cpi	r22, 0x0A	; 10
     f4e:	79 f4       	brne	.+30     	; 0xf6e <_ZN12Adafruit_GFX5writeEh+0xc6>
      cursor_x  = 0;
     f50:	1d 86       	std	Y+13, r1	; 0x0d
     f52:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += (int16_t)textsize *
     f54:	2c 89       	ldd	r18, Y+20	; 0x14
                  (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
     f56:	fc 01       	movw	r30, r24
     f58:	36 96       	adiw	r30, 0x06	; 6
     f5a:	e4 91       	lpm	r30, Z
     f5c:	8e 85       	ldd	r24, Y+14	; 0x0e
     f5e:	9f 85       	ldd	r25, Y+15	; 0x0f
     f60:	2e 9f       	mul	r18, r30
     f62:	80 0d       	add	r24, r0
     f64:	91 1d       	adc	r25, r1
     f66:	11 24       	eor	r1, r1
     f68:	9f 87       	std	Y+15, r25	; 0x0f
     f6a:	8e 87       	std	Y+14, r24	; 0x0e
     f6c:	68 c0       	rjmp	.+208    	; 0x103e <_ZN12Adafruit_GFX5writeEh+0x196>
    } else if(c != '\r') {
     f6e:	6d 30       	cpi	r22, 0x0D	; 13
     f70:	09 f4       	brne	.+2      	; 0xf74 <_ZN12Adafruit_GFX5writeEh+0xcc>
     f72:	65 c0       	rjmp	.+202    	; 0x103e <_ZN12Adafruit_GFX5writeEh+0x196>
      uint8_t first = pgm_read_byte(&gfxFont->first);
     f74:	ac 01       	movw	r20, r24
     f76:	4c 5f       	subi	r20, 0xFC	; 252
     f78:	5f 4f       	sbci	r21, 0xFF	; 255
     f7a:	fa 01       	movw	r30, r20
     f7c:	34 91       	lpm	r19, Z
      if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
     f7e:	63 17       	cp	r22, r19
     f80:	08 f4       	brcc	.+2      	; 0xf84 <_ZN12Adafruit_GFX5writeEh+0xdc>
     f82:	5d c0       	rjmp	.+186    	; 0x103e <_ZN12Adafruit_GFX5writeEh+0x196>
     f84:	31 96       	adiw	r30, 0x01	; 1
     f86:	e4 91       	lpm	r30, Z
     f88:	e6 17       	cp	r30, r22
     f8a:	08 f4       	brcc	.+2      	; 0xf8e <_ZN12Adafruit_GFX5writeEh+0xe6>
     f8c:	58 c0       	rjmp	.+176    	; 0x103e <_ZN12Adafruit_GFX5writeEh+0x196>
        uint8_t   c2    = c - pgm_read_byte(&gfxFont->first);
     f8e:	fa 01       	movw	r30, r20
     f90:	44 91       	lpm	r20, Z
     f92:	36 2f       	mov	r19, r22
     f94:	34 1b       	sub	r19, r20
        GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c2]);
     f96:	fc 01       	movw	r30, r24
     f98:	32 96       	adiw	r30, 0x02	; 2
     f9a:	a5 90       	lpm	r10, Z+
     f9c:	b4 90       	lpm	r11, Z
     f9e:	f7 e0       	ldi	r31, 0x07	; 7
     fa0:	3f 9f       	mul	r19, r31
     fa2:	a0 0c       	add	r10, r0
     fa4:	b1 1c       	adc	r11, r1
     fa6:	11 24       	eor	r1, r1
        uint8_t   w     = pgm_read_byte(&glyph->width),
     fa8:	f5 01       	movw	r30, r10
     faa:	32 96       	adiw	r30, 0x02	; 2
     fac:	34 91       	lpm	r19, Z
                  h     = pgm_read_byte(&glyph->height);
     fae:	31 96       	adiw	r30, 0x01	; 1
     fb0:	e4 91       	lpm	r30, Z
        if((w > 0) && (h > 0)) { // Is there an associated bitmap?
     fb2:	33 23       	and	r19, r19
     fb4:	11 f0       	breq	.+4      	; 0xfba <_ZN12Adafruit_GFX5writeEh+0x112>
     fb6:	e1 11       	cpse	r30, r1
     fb8:	0d c0       	rjmp	.+26     	; 0xfd4 <_ZN12Adafruit_GFX5writeEh+0x12c>
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
        }
        cursor_x += pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
     fba:	f5 01       	movw	r30, r10
     fbc:	34 96       	adiw	r30, 0x04	; 4
     fbe:	e4 91       	lpm	r30, Z
     fc0:	2c 89       	ldd	r18, Y+20	; 0x14
     fc2:	8c 85       	ldd	r24, Y+12	; 0x0c
     fc4:	9d 85       	ldd	r25, Y+13	; 0x0d
     fc6:	e2 9f       	mul	r30, r18
     fc8:	80 0d       	add	r24, r0
     fca:	91 1d       	adc	r25, r1
     fcc:	11 24       	eor	r1, r1
     fce:	9d 87       	std	Y+13, r25	; 0x0d
     fd0:	8c 87       	std	Y+12, r24	; 0x0c
     fd2:	35 c0       	rjmp	.+106    	; 0x103e <_ZN12Adafruit_GFX5writeEh+0x196>
        uint8_t   c2    = c - pgm_read_byte(&gfxFont->first);
        GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c2]);
        uint8_t   w     = pgm_read_byte(&glyph->width),
                  h     = pgm_read_byte(&glyph->height);
        if((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
     fd4:	f5 01       	movw	r30, r10
     fd6:	35 96       	adiw	r30, 0x05	; 5
     fd8:	44 91       	lpm	r20, Z
          if(wrap && ((cursor_x + textsize * (xo + w)) >= _width)) {
     fda:	5e 89       	ldd	r21, Y+22	; 0x16
     fdc:	55 23       	and	r21, r21
     fde:	11 f1       	breq	.+68     	; 0x1024 <_ZN12Adafruit_GFX5writeEh+0x17c>
     fe0:	6c 89       	ldd	r22, Y+20	; 0x14
     fe2:	e3 2f       	mov	r30, r19
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	e4 0f       	add	r30, r20
     fe8:	f1 1d       	adc	r31, r1
     fea:	47 fd       	sbrc	r20, 7
     fec:	fa 95       	dec	r31
     fee:	6e 9f       	mul	r22, r30
     ff0:	d0 01       	movw	r26, r0
     ff2:	6f 9f       	mul	r22, r31
     ff4:	b0 0d       	add	r27, r0
     ff6:	11 24       	eor	r1, r1
     ff8:	4c 85       	ldd	r20, Y+12	; 0x0c
     ffa:	5d 85       	ldd	r21, Y+13	; 0x0d
     ffc:	4a 0f       	add	r20, r26
     ffe:	5b 1f       	adc	r21, r27
    1000:	e8 85       	ldd	r30, Y+8	; 0x08
    1002:	f9 85       	ldd	r31, Y+9	; 0x09
    1004:	4e 17       	cp	r20, r30
    1006:	5f 07       	cpc	r21, r31
    1008:	6c f0       	brlt	.+26     	; 0x1024 <_ZN12Adafruit_GFX5writeEh+0x17c>
            // Drawing character would go off right edge; wrap to new line
            cursor_x  = 0;
    100a:	1d 86       	std	Y+13, r1	; 0x0d
    100c:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    100e:	fc 01       	movw	r30, r24
    1010:	36 96       	adiw	r30, 0x06	; 6
    1012:	e4 91       	lpm	r30, Z
    1014:	8e 85       	ldd	r24, Y+14	; 0x0e
    1016:	9f 85       	ldd	r25, Y+15	; 0x0f
    1018:	6e 9f       	mul	r22, r30
    101a:	80 0d       	add	r24, r0
    101c:	91 1d       	adc	r25, r1
    101e:	11 24       	eor	r1, r1
    1020:	9f 87       	std	Y+15, r25	; 0x0f
    1022:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    1024:	ea 88       	ldd	r14, Y+18	; 0x12
    1026:	fb 88       	ldd	r15, Y+19	; 0x13
    1028:	08 89       	ldd	r16, Y+16	; 0x10
    102a:	19 89       	ldd	r17, Y+17	; 0x11
    102c:	4e 85       	ldd	r20, Y+14	; 0x0e
    102e:	5f 85       	ldd	r21, Y+15	; 0x0f
    1030:	6c 85       	ldd	r22, Y+12	; 0x0c
    1032:	7d 85       	ldd	r23, Y+13	; 0x0d
    1034:	cc 88       	ldd	r12, Y+20	; 0x14
    1036:	ce 01       	movw	r24, r28
    1038:	0e 94 a9 05 	call	0xb52	; 0xb52 <_ZN12Adafruit_GFX8drawCharEiihjjh>
    103c:	be cf       	rjmp	.-132    	; 0xfba <_ZN12Adafruit_GFX5writeEh+0x112>

  }
#if ARDUINO >= 100
  return 1;
#endif
}
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	cf 90       	pop	r12
    1050:	bf 90       	pop	r11
    1052:	af 90       	pop	r10
    1054:	08 95       	ret

00001056 <_ZN8MsTimer23setEmPFvvE>:
#endif

void MsTimer2::set(unsigned long ms, void (*f)()) {
	float prescaler = 0.0;
	
	if (ms == 0)
    1056:	61 15       	cp	r22, r1
    1058:	71 05       	cpc	r23, r1
    105a:	81 05       	cpc	r24, r1
    105c:	91 05       	cpc	r25, r1
    105e:	69 f4       	brne	.+26     	; 0x107a <_ZN8MsTimer23setEmPFvvE+0x24>
		msecs = 1;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	a0 e0       	ldi	r26, 0x00	; 0
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	80 93 b2 01 	sts	0x01B2, r24
    106c:	90 93 b3 01 	sts	0x01B3, r25
    1070:	a0 93 b4 01 	sts	0x01B4, r26
    1074:	b0 93 b5 01 	sts	0x01B5, r27
    1078:	08 c0       	rjmp	.+16     	; 0x108a <_ZN8MsTimer23setEmPFvvE+0x34>
	else
		msecs = ms;
    107a:	60 93 b2 01 	sts	0x01B2, r22
    107e:	70 93 b3 01 	sts	0x01B3, r23
    1082:	80 93 b4 01 	sts	0x01B4, r24
    1086:	90 93 b5 01 	sts	0x01B5, r25
		
	func = f;
    108a:	50 93 b1 01 	sts	0x01B1, r21
    108e:	40 93 b0 01 	sts	0x01B0, r20

#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TIMSK2 &= ~(1<<TOIE2);
    1092:	80 91 70 00 	lds	r24, 0x0070
    1096:	8e 7f       	andi	r24, 0xFE	; 254
    1098:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~((1<<WGM21) | (1<<WGM20));
    109c:	80 91 b0 00 	lds	r24, 0x00B0
    10a0:	8c 7f       	andi	r24, 0xFC	; 252
    10a2:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B &= ~(1<<WGM22);
    10a6:	80 91 b1 00 	lds	r24, 0x00B1
    10aa:	87 7f       	andi	r24, 0xF7	; 247
    10ac:	80 93 b1 00 	sts	0x00B1, r24
	ASSR &= ~(1<<AS2);
    10b0:	80 91 b6 00 	lds	r24, 0x00B6
    10b4:	8f 7d       	andi	r24, 0xDF	; 223
    10b6:	80 93 b6 00 	sts	0x00B6, r24
	TIMSK2 &= ~(1<<OCIE2A);
    10ba:	80 91 70 00 	lds	r24, 0x0070
    10be:	8d 7f       	andi	r24, 0xFD	; 253
    10c0:	80 93 70 00 	sts	0x0070, r24
	
	if ((F_CPU >= 1000000UL) && (F_CPU <= 16000000UL)) {	// prescaler set to 64
		TCCR2B |= (1<<CS22);
    10c4:	80 91 b1 00 	lds	r24, 0x00B1
    10c8:	84 60       	ori	r24, 0x04	; 4
    10ca:	80 93 b1 00 	sts	0x00B1, r24
		TCCR2B &= ~((1<<CS21) | (1<<CS20));
    10ce:	80 91 b1 00 	lds	r24, 0x00B1
    10d2:	8c 7f       	andi	r24, 0xFC	; 252
    10d4:	80 93 b1 00 	sts	0x00B1, r24
	// nothing needed here
#else
#error Unsupported CPU type
#endif

	tcnt2 = 256 - (int)((float)F_CPU * 0.001 / prescaler);
    10d8:	86 e0       	ldi	r24, 0x06	; 6
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	90 93 aa 01 	sts	0x01AA, r25
    10e0:	80 93 a9 01 	sts	0x01A9, r24
    10e4:	08 95       	ret

000010e6 <_ZN8MsTimer25startEv>:
}

void MsTimer2::start() {
	count = 0;
    10e6:	10 92 ac 01 	sts	0x01AC, r1
    10ea:	10 92 ad 01 	sts	0x01AD, r1
    10ee:	10 92 ae 01 	sts	0x01AE, r1
    10f2:	10 92 af 01 	sts	0x01AF, r1
	overflowing = 0;
    10f6:	10 92 ab 01 	sts	0x01AB, r1
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined (__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TCNT2 = tcnt2;
    10fa:	80 91 a9 01 	lds	r24, 0x01A9
    10fe:	90 91 aa 01 	lds	r25, 0x01AA
    1102:	80 93 b2 00 	sts	0x00B2, r24
	TIMSK2 |= (1<<TOIE2);
    1106:	e0 e7       	ldi	r30, 0x70	; 112
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	81 60       	ori	r24, 0x01	; 1
    110e:	80 83       	st	Z, r24
    1110:	08 95       	ret

00001112 <_ZN8MsTimer29_overflowEv>:
	itimer.end();
#endif
}

void MsTimer2::_overflow() {
	count += 1;
    1112:	80 91 ac 01 	lds	r24, 0x01AC
    1116:	90 91 ad 01 	lds	r25, 0x01AD
    111a:	a0 91 ae 01 	lds	r26, 0x01AE
    111e:	b0 91 af 01 	lds	r27, 0x01AF
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	a1 1d       	adc	r26, r1
    1126:	b1 1d       	adc	r27, r1
    1128:	80 93 ac 01 	sts	0x01AC, r24
    112c:	90 93 ad 01 	sts	0x01AD, r25
    1130:	a0 93 ae 01 	sts	0x01AE, r26
    1134:	b0 93 af 01 	sts	0x01AF, r27
	
	if (count >= msecs && !overflowing) {
    1138:	80 91 ac 01 	lds	r24, 0x01AC
    113c:	90 91 ad 01 	lds	r25, 0x01AD
    1140:	a0 91 ae 01 	lds	r26, 0x01AE
    1144:	b0 91 af 01 	lds	r27, 0x01AF
    1148:	40 91 b2 01 	lds	r20, 0x01B2
    114c:	50 91 b3 01 	lds	r21, 0x01B3
    1150:	60 91 b4 01 	lds	r22, 0x01B4
    1154:	70 91 b5 01 	lds	r23, 0x01B5
    1158:	84 17       	cp	r24, r20
    115a:	95 07       	cpc	r25, r21
    115c:	a6 07       	cpc	r26, r22
    115e:	b7 07       	cpc	r27, r23
    1160:	10 f1       	brcs	.+68     	; 0x11a6 <_ZN8MsTimer29_overflowEv+0x94>
    1162:	80 91 ab 01 	lds	r24, 0x01AB
    1166:	81 11       	cpse	r24, r1
    1168:	1e c0       	rjmp	.+60     	; 0x11a6 <_ZN8MsTimer29_overflowEv+0x94>
		overflowing = 1;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	80 93 ab 01 	sts	0x01AB, r24
		count = count - msecs; // subtract ms to catch missed overflows
    1170:	80 91 ac 01 	lds	r24, 0x01AC
    1174:	90 91 ad 01 	lds	r25, 0x01AD
    1178:	a0 91 ae 01 	lds	r26, 0x01AE
    117c:	b0 91 af 01 	lds	r27, 0x01AF
    1180:	84 1b       	sub	r24, r20
    1182:	95 0b       	sbc	r25, r21
    1184:	a6 0b       	sbc	r26, r22
    1186:	b7 0b       	sbc	r27, r23
    1188:	80 93 ac 01 	sts	0x01AC, r24
    118c:	90 93 ad 01 	sts	0x01AD, r25
    1190:	a0 93 ae 01 	sts	0x01AE, r26
    1194:	b0 93 af 01 	sts	0x01AF, r27
					// set to 0 if you don't want this.
		(*func)();
    1198:	e0 91 b0 01 	lds	r30, 0x01B0
    119c:	f0 91 b1 01 	lds	r31, 0x01B1
    11a0:	09 95       	icall
		overflowing = 0;
    11a2:	10 92 ab 01 	sts	0x01AB, r1
    11a6:	08 95       	ret

000011a8 <__vector_9>:

#if defined (__AVR__)
#if defined (__AVR_ATmega32U4__)
ISR(TIMER4_OVF_vect) {
#else
ISR(TIMER2_OVF_vect) {
    11a8:	1f 92       	push	r1
    11aa:	0f 92       	push	r0
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	0f 92       	push	r0
    11b0:	11 24       	eor	r1, r1
    11b2:	2f 93       	push	r18
    11b4:	3f 93       	push	r19
    11b6:	4f 93       	push	r20
    11b8:	5f 93       	push	r21
    11ba:	6f 93       	push	r22
    11bc:	7f 93       	push	r23
    11be:	8f 93       	push	r24
    11c0:	9f 93       	push	r25
    11c2:	af 93       	push	r26
    11c4:	bf 93       	push	r27
    11c6:	ef 93       	push	r30
    11c8:	ff 93       	push	r31
#endif
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined (__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TCNT2 = MsTimer2::tcnt2;
    11ca:	80 91 a9 01 	lds	r24, 0x01A9
    11ce:	90 91 aa 01 	lds	r25, 0x01AA
    11d2:	80 93 b2 00 	sts	0x00B2, r24
#elif defined (__AVR_ATmega8__)
	TCNT2 = MsTimer2::tcnt2;
#elif defined (__AVR_ATmega32U4__)
	// not necessary on 32u4's high speed timer4
#endif
	MsTimer2::_overflow();
    11d6:	0e 94 89 08 	call	0x1112	; 0x1112 <_ZN8MsTimer29_overflowEv>
}
    11da:	ff 91       	pop	r31
    11dc:	ef 91       	pop	r30
    11de:	bf 91       	pop	r27
    11e0:	af 91       	pop	r26
    11e2:	9f 91       	pop	r25
    11e4:	8f 91       	pop	r24
    11e6:	7f 91       	pop	r23
    11e8:	6f 91       	pop	r22
    11ea:	5f 91       	pop	r21
    11ec:	4f 91       	pop	r20
    11ee:	3f 91       	pop	r19
    11f0:	2f 91       	pop	r18
    11f2:	0f 90       	pop	r0
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	0f 90       	pop	r0
    11f8:	1f 90       	pop	r1
    11fa:	18 95       	reti

000011fc <_ZN14RGBmatrixPanel9drawPixelEiij>:
  return (r << 12) | ((r & 0x8) << 8) | // 4/4/4 -> 5/6/5
         (g <<  7) | ((g & 0xC) << 3) |
         (b <<  1) | ( b        >> 3);
}

void RGBmatrixPanel::drawPixel(int16_t x, int16_t y, uint16_t c) {
    11fc:	cf 92       	push	r12
    11fe:	df 92       	push	r13
    1200:	ef 92       	push	r14
    1202:	ff 92       	push	r15
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	dc 01       	movw	r26, r24
  uint8_t r, g, b, bit, limit, *ptr;

  if((x < 0) || (x >= _width) || (y < 0) || (y >= _height)) return;
    120e:	77 fd       	sbrc	r23, 7
    1210:	22 c1       	rjmp	.+580    	; 0x1456 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
    1212:	18 96       	adiw	r26, 0x08	; 8
    1214:	8d 91       	ld	r24, X+
    1216:	9c 91       	ld	r25, X
    1218:	19 97       	sbiw	r26, 0x09	; 9
    121a:	68 17       	cp	r22, r24
    121c:	79 07       	cpc	r23, r25
    121e:	0c f0       	brlt	.+2      	; 0x1222 <_ZN14RGBmatrixPanel9drawPixelEiij+0x26>
    1220:	1a c1       	rjmp	.+564    	; 0x1456 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
    1222:	57 fd       	sbrc	r21, 7
    1224:	18 c1       	rjmp	.+560    	; 0x1456 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
    1226:	1a 96       	adiw	r26, 0x0a	; 10
    1228:	8d 91       	ld	r24, X+
    122a:	9c 91       	ld	r25, X
    122c:	1b 97       	sbiw	r26, 0x0b	; 11
    122e:	48 17       	cp	r20, r24
    1230:	59 07       	cpc	r21, r25
    1232:	0c f0       	brlt	.+2      	; 0x1236 <_ZN14RGBmatrixPanel9drawPixelEiij+0x3a>
    1234:	10 c1       	rjmp	.+544    	; 0x1456 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>

  switch(rotation) {
    1236:	55 96       	adiw	r26, 0x15	; 21
    1238:	ec 91       	ld	r30, X
    123a:	55 97       	sbiw	r26, 0x15	; 21
    123c:	14 96       	adiw	r26, 0x04	; 4
    123e:	8d 91       	ld	r24, X+
    1240:	9c 91       	ld	r25, X
    1242:	15 97       	sbiw	r26, 0x05	; 5
    1244:	e2 30       	cpi	r30, 0x02	; 2
    1246:	59 f0       	breq	.+22     	; 0x125e <_ZN14RGBmatrixPanel9drawPixelEiij+0x62>
    1248:	e3 30       	cpi	r30, 0x03	; 3
    124a:	c9 f0       	breq	.+50     	; 0x127e <_ZN14RGBmatrixPanel9drawPixelEiij+0x82>
    124c:	e1 30       	cpi	r30, 0x01	; 1
    124e:	01 f5       	brne	.+64     	; 0x1290 <_ZN14RGBmatrixPanel9drawPixelEiij+0x94>
   case 1:
    _swap_int16_t(x, y);
    x = WIDTH  - 1 - x;
    1250:	fc 01       	movw	r30, r24
    1252:	31 97       	sbiw	r30, 0x01	; 1
    1254:	e4 1b       	sub	r30, r20
    1256:	f5 0b       	sbc	r31, r21
    1258:	ab 01       	movw	r20, r22
    125a:	bf 01       	movw	r22, r30
    125c:	19 c0       	rjmp	.+50     	; 0x1290 <_ZN14RGBmatrixPanel9drawPixelEiij+0x94>
    break;
   case 2:
    x = WIDTH  - 1 - x;
    125e:	fc 01       	movw	r30, r24
    1260:	31 97       	sbiw	r30, 0x01	; 1
    1262:	ef 01       	movw	r28, r30
    1264:	c6 1b       	sub	r28, r22
    1266:	d7 0b       	sbc	r29, r23
    1268:	be 01       	movw	r22, r28
    y = HEIGHT - 1 - y;
    126a:	16 96       	adiw	r26, 0x06	; 6
    126c:	ed 91       	ld	r30, X+
    126e:	fc 91       	ld	r31, X
    1270:	17 97       	sbiw	r26, 0x07	; 7
    1272:	31 97       	sbiw	r30, 0x01	; 1
    1274:	ef 01       	movw	r28, r30
    1276:	c4 1b       	sub	r28, r20
    1278:	d5 0b       	sbc	r29, r21
    127a:	ae 01       	movw	r20, r28
    127c:	09 c0       	rjmp	.+18     	; 0x1290 <_ZN14RGBmatrixPanel9drawPixelEiij+0x94>
    break;
   case 3:
    _swap_int16_t(x, y);
    y = HEIGHT - 1 - y;
    127e:	16 96       	adiw	r26, 0x06	; 6
    1280:	ed 91       	ld	r30, X+
    1282:	fc 91       	ld	r31, X
    1284:	17 97       	sbiw	r26, 0x07	; 7
    1286:	31 97       	sbiw	r30, 0x01	; 1
    1288:	e6 1b       	sub	r30, r22
    128a:	f7 0b       	sbc	r31, r23
    128c:	ba 01       	movw	r22, r20
    128e:	af 01       	movw	r20, r30
    break;
  }

  // Adafruit_GFX uses 16-bit color in 5/6/5 format, while matrix needs
  // 4/4/4.  Pluck out relevant bits while separating into R,G,B:
  r =  c >> 12;        // RRRRrggggggbbbbb
    1290:	89 01       	movw	r16, r18
    1292:	01 2f       	mov	r16, r17
    1294:	11 27       	eor	r17, r17
    1296:	02 95       	swap	r16
    1298:	0f 70       	andi	r16, 0x0F	; 15
    129a:	f0 2e       	mov	r15, r16
  g = (c >>  7) & 0xF; // rrrrrGGGGggbbbbb
    129c:	e9 01       	movw	r28, r18
    129e:	cc 0f       	add	r28, r28
    12a0:	cd 2f       	mov	r28, r29
    12a2:	cc 1f       	adc	r28, r28
    12a4:	dd 0b       	sbc	r29, r29
    12a6:	d1 95       	neg	r29
    12a8:	ec 2f       	mov	r30, r28
    12aa:	ef 70       	andi	r30, 0x0F	; 15
    12ac:	ee 2e       	mov	r14, r30
  b = (c >>  1) & 0xF; // rrrrrggggggBBBBb
    12ae:	36 95       	lsr	r19
    12b0:	27 95       	ror	r18
    12b2:	e2 2f       	mov	r30, r18
    12b4:	ef 70       	andi	r30, 0x0F	; 15
    12b6:	de 2e       	mov	r13, r30

  // Loop counter stuff
  bit   = 2;
  limit = 1 << nPlanes;

  if(y < nRows) {
    12b8:	5e 96       	adiw	r26, 0x1e	; 30
    12ba:	ec 91       	ld	r30, X
    12bc:	5e 97       	sbiw	r26, 0x1e	; 30
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	01 70       	andi	r16, 0x01	; 1
    12c2:	11 27       	eor	r17, r17
    12c4:	3c 2f       	mov	r19, r28
    12c6:	31 70       	andi	r19, 0x01	; 1
    12c8:	21 70       	andi	r18, 0x01	; 1
    12ca:	4e 17       	cp	r20, r30
    12cc:	5f 07       	cpc	r21, r31
    12ce:	0c f0       	brlt	.+2      	; 0x12d2 <_ZN14RGBmatrixPanel9drawPixelEiij+0xd6>
    12d0:	6c c0       	rjmp	.+216    	; 0x13aa <_ZN14RGBmatrixPanel9drawPixelEiij+0x1ae>
    // Data for the upper half of the display is stored in the lower
    // bits of each byte.
    ptr = &matrixbuff[backindex][y * WIDTH * (nPlanes - 1) + x]; // Base addr
    12d2:	5f 96       	adiw	r26, 0x1f	; 31
    12d4:	ec 91       	ld	r30, X
    12d6:	5f 97       	sbiw	r26, 0x1f	; 31
    12d8:	ed 01       	movw	r28, r26
    12da:	ce 0f       	add	r28, r30
    12dc:	d1 1d       	adc	r29, r1
    12de:	ce 0f       	add	r28, r30
    12e0:	d1 1d       	adc	r29, r1
    12e2:	48 9f       	mul	r20, r24
    12e4:	f0 01       	movw	r30, r0
    12e6:	49 9f       	mul	r20, r25
    12e8:	f0 0d       	add	r31, r0
    12ea:	58 9f       	mul	r21, r24
    12ec:	f0 0d       	add	r31, r0
    12ee:	11 24       	eor	r1, r1
    12f0:	af 01       	movw	r20, r30
    12f2:	44 0f       	add	r20, r20
    12f4:	55 1f       	adc	r21, r21
    12f6:	e4 0f       	add	r30, r20
    12f8:	f5 1f       	adc	r31, r21
    12fa:	6e 0f       	add	r22, r30
    12fc:	7f 1f       	adc	r23, r31
    12fe:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1300:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1302:	e6 0f       	add	r30, r22
    1304:	f7 1f       	adc	r31, r23
    // Plane 0 is a tricky case -- its data is spread about,
    // stored in least two bits not used by the other planes.
    ptr[WIDTH*2] &= ~B00000011;           // Plane 0 R,G mask out in one op
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	ef 01       	movw	r28, r30
    130c:	c8 0f       	add	r28, r24
    130e:	d9 1f       	adc	r29, r25
    1310:	88 81       	ld	r24, Y
    1312:	8c 7f       	andi	r24, 0xFC	; 252
    1314:	88 83       	st	Y, r24
    if(r & 1) ptr[WIDTH*2] |=  B00000001; // Plane 0 R: 64 bytes ahead, bit 0
    1316:	01 2b       	or	r16, r17
    1318:	59 f0       	breq	.+22     	; 0x1330 <_ZN14RGBmatrixPanel9drawPixelEiij+0x134>
    131a:	14 96       	adiw	r26, 0x04	; 4
    131c:	cd 91       	ld	r28, X+
    131e:	dc 91       	ld	r29, X
    1320:	15 97       	sbiw	r26, 0x05	; 5
    1322:	cc 0f       	add	r28, r28
    1324:	dd 1f       	adc	r29, r29
    1326:	ce 0f       	add	r28, r30
    1328:	df 1f       	adc	r29, r31
    132a:	88 81       	ld	r24, Y
    132c:	81 60       	ori	r24, 0x01	; 1
    132e:	88 83       	st	Y, r24
    if(g & 1) ptr[WIDTH*2] |=  B00000010; // Plane 0 G: 64 bytes ahead, bit 1
    1330:	33 23       	and	r19, r19
    1332:	59 f0       	breq	.+22     	; 0x134a <_ZN14RGBmatrixPanel9drawPixelEiij+0x14e>
    1334:	14 96       	adiw	r26, 0x04	; 4
    1336:	cd 91       	ld	r28, X+
    1338:	dc 91       	ld	r29, X
    133a:	15 97       	sbiw	r26, 0x05	; 5
    133c:	cc 0f       	add	r28, r28
    133e:	dd 1f       	adc	r29, r29
    1340:	ce 0f       	add	r28, r30
    1342:	df 1f       	adc	r29, r31
    1344:	88 81       	ld	r24, Y
    1346:	82 60       	ori	r24, 0x02	; 2
    1348:	88 83       	st	Y, r24
    134a:	14 96       	adiw	r26, 0x04	; 4
    134c:	cd 91       	ld	r28, X+
    134e:	dc 91       	ld	r29, X
    1350:	15 97       	sbiw	r26, 0x05	; 5
    if(b & 1) ptr[WIDTH]   |=  B00000001; // Plane 0 B: 32 bytes ahead, bit 0
    1352:	ce 0f       	add	r28, r30
    1354:	df 1f       	adc	r29, r31
    1356:	88 81       	ld	r24, Y
    1358:	22 23       	and	r18, r18
    135a:	31 f0       	breq	.+12     	; 0x1368 <_ZN14RGBmatrixPanel9drawPixelEiij+0x16c>
    135c:	81 60       	ori	r24, 0x01	; 1
    135e:	88 83       	st	Y, r24
    x = WIDTH  - 1 - x;
    y = HEIGHT - 1 - y;
    break;
   case 3:
    _swap_int16_t(x, y);
    y = HEIGHT - 1 - y;
    1360:	23 e0       	ldi	r18, 0x03	; 3
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	92 e0       	ldi	r25, 0x02	; 2
    1366:	1a c0       	rjmp	.+52     	; 0x139c <_ZN14RGBmatrixPanel9drawPixelEiij+0x1a0>
    // stored in least two bits not used by the other planes.
    ptr[WIDTH*2] &= ~B00000011;           // Plane 0 R,G mask out in one op
    if(r & 1) ptr[WIDTH*2] |=  B00000001; // Plane 0 R: 64 bytes ahead, bit 0
    if(g & 1) ptr[WIDTH*2] |=  B00000010; // Plane 0 G: 64 bytes ahead, bit 1
    if(b & 1) ptr[WIDTH]   |=  B00000001; // Plane 0 B: 32 bytes ahead, bit 0
    else      ptr[WIDTH]   &= ~B00000001; // Plane 0 B unset; mask out
    1368:	8e 7f       	andi	r24, 0xFE	; 254
    136a:	f9 cf       	rjmp	.-14     	; 0x135e <_ZN14RGBmatrixPanel9drawPixelEiij+0x162>
    // The remaining three image planes are more normal-ish.
    // Data is stored in the high 6 bits so it can be quickly
    // copied to the DATAPORT register w/6 output lines.
    for(; bit < limit; bit <<= 1) {
      *ptr &= ~B00011100;            // Mask out R,G,B in one op
      if(r & bit) *ptr |= B00000100; // Plane N R: bit 2
    136c:	80 83       	st	Z, r24
      if(g & bit) *ptr |= B00001000; // Plane N G: bit 3
    136e:	89 2f       	mov	r24, r25
    1370:	8e 21       	and	r24, r14
    1372:	19 f0       	breq	.+6      	; 0x137a <_ZN14RGBmatrixPanel9drawPixelEiij+0x17e>
    1374:	80 81       	ld	r24, Z
    1376:	88 60       	ori	r24, 0x08	; 8
    1378:	80 83       	st	Z, r24
      if(b & bit) *ptr |= B00010000; // Plane N B: bit 4
    137a:	89 2f       	mov	r24, r25
    137c:	8d 21       	and	r24, r13
    137e:	19 f0       	breq	.+6      	; 0x1386 <_ZN14RGBmatrixPanel9drawPixelEiij+0x18a>
    1380:	80 81       	ld	r24, Z
    1382:	80 61       	ori	r24, 0x10	; 16
    1384:	80 83       	st	Z, r24
      ptr  += WIDTH;                 // Advance to next bit plane
    1386:	14 96       	adiw	r26, 0x04	; 4
    1388:	4d 91       	ld	r20, X+
    138a:	5c 91       	ld	r21, X
    138c:	15 97       	sbiw	r26, 0x05	; 5
    138e:	e4 0f       	add	r30, r20
    1390:	f5 1f       	adc	r31, r21
    if(b & 1) ptr[WIDTH]   |=  B00000001; // Plane 0 B: 32 bytes ahead, bit 0
    else      ptr[WIDTH]   &= ~B00000001; // Plane 0 B unset; mask out
    // The remaining three image planes are more normal-ish.
    // Data is stored in the high 6 bits so it can be quickly
    // copied to the DATAPORT register w/6 output lines.
    for(; bit < limit; bit <<= 1) {
    1392:	99 0f       	add	r25, r25
    1394:	21 50       	subi	r18, 0x01	; 1
    1396:	31 09       	sbc	r19, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <_ZN14RGBmatrixPanel9drawPixelEiij+0x1a0>
    139a:	5d c0       	rjmp	.+186    	; 0x1456 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
      *ptr &= ~B00011100;            // Mask out R,G,B in one op
    139c:	80 81       	ld	r24, Z
    139e:	83 7e       	andi	r24, 0xE3	; 227
      if(r & bit) *ptr |= B00000100; // Plane N R: bit 2
    13a0:	49 2f       	mov	r20, r25
    13a2:	4f 21       	and	r20, r15
    13a4:	19 f3       	breq	.-58     	; 0x136c <_ZN14RGBmatrixPanel9drawPixelEiij+0x170>
    13a6:	84 60       	ori	r24, 0x04	; 4
    13a8:	e1 cf       	rjmp	.-62     	; 0x136c <_ZN14RGBmatrixPanel9drawPixelEiij+0x170>
      ptr  += WIDTH;                 // Advance to next bit plane
    }
  } else {
    // Data for the lower half of the display is stored in the upper
    // bits, except for the plane 0 stuff, using 2 least bits.
    ptr = &matrixbuff[backindex][(y - nRows) * WIDTH * (nPlanes - 1) + x];
    13aa:	5f 96       	adiw	r26, 0x1f	; 31
    13ac:	cc 90       	ld	r12, X
    13ae:	5f 97       	sbiw	r26, 0x1f	; 31
    13b0:	ed 01       	movw	r28, r26
    13b2:	cc 0d       	add	r28, r12
    13b4:	d1 1d       	adc	r29, r1
    13b6:	cc 0d       	add	r28, r12
    13b8:	d1 1d       	adc	r29, r1
    13ba:	4e 1b       	sub	r20, r30
    13bc:	5f 0b       	sbc	r21, r31
    13be:	48 9f       	mul	r20, r24
    13c0:	f0 01       	movw	r30, r0
    13c2:	49 9f       	mul	r20, r25
    13c4:	f0 0d       	add	r31, r0
    13c6:	58 9f       	mul	r21, r24
    13c8:	f0 0d       	add	r31, r0
    13ca:	11 24       	eor	r1, r1
    13cc:	cf 01       	movw	r24, r30
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	e8 0f       	add	r30, r24
    13d4:	f9 1f       	adc	r31, r25
    13d6:	6e 0f       	add	r22, r30
    13d8:	7f 1f       	adc	r23, r31
    13da:	ea 8d       	ldd	r30, Y+26	; 0x1a
    13dc:	fb 8d       	ldd	r31, Y+27	; 0x1b
    13de:	e6 0f       	add	r30, r22
    13e0:	f7 1f       	adc	r31, r23
    *ptr &= ~B00000011;                  // Plane 0 G,B mask out in one op
    13e2:	80 81       	ld	r24, Z
    13e4:	8c 7f       	andi	r24, 0xFC	; 252
    13e6:	80 83       	st	Z, r24
    13e8:	14 96       	adiw	r26, 0x04	; 4
    13ea:	cd 91       	ld	r28, X+
    13ec:	dc 91       	ld	r29, X
    13ee:	15 97       	sbiw	r26, 0x05	; 5
    if(r & 1)  ptr[WIDTH] |=  B00000010; // Plane 0 R: 32 bytes ahead, bit 1
    13f0:	ce 0f       	add	r28, r30
    13f2:	df 1f       	adc	r29, r31
    13f4:	88 81       	ld	r24, Y
    13f6:	01 2b       	or	r16, r17
    13f8:	11 f0       	breq	.+4      	; 0x13fe <_ZN14RGBmatrixPanel9drawPixelEiij+0x202>
    13fa:	82 60       	ori	r24, 0x02	; 2
    13fc:	01 c0       	rjmp	.+2      	; 0x1400 <_ZN14RGBmatrixPanel9drawPixelEiij+0x204>
    else       ptr[WIDTH] &= ~B00000010; // Plane 0 R unset; mask out
    13fe:	8d 7f       	andi	r24, 0xFD	; 253
    1400:	88 83       	st	Y, r24
    if(g & 1) *ptr        |=  B00000001; // Plane 0 G: bit 0
    1402:	33 23       	and	r19, r19
    1404:	19 f0       	breq	.+6      	; 0x140c <_ZN14RGBmatrixPanel9drawPixelEiij+0x210>
    1406:	80 81       	ld	r24, Z
    1408:	81 60       	ori	r24, 0x01	; 1
    140a:	80 83       	st	Z, r24
    if(b & 1) *ptr        |=  B00000010; // Plane 0 B: bit 0
    140c:	22 23       	and	r18, r18
    140e:	19 f0       	breq	.+6      	; 0x1416 <_ZN14RGBmatrixPanel9drawPixelEiij+0x21a>
    1410:	80 81       	ld	r24, Z
    1412:	82 60       	ori	r24, 0x02	; 2
    1414:	80 83       	st	Z, r24
    x = WIDTH  - 1 - x;
    y = HEIGHT - 1 - y;
    break;
   case 3:
    _swap_int16_t(x, y);
    y = HEIGHT - 1 - y;
    1416:	23 e0       	ldi	r18, 0x03	; 3
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	92 e0       	ldi	r25, 0x02	; 2
    if(r & 1)  ptr[WIDTH] |=  B00000010; // Plane 0 R: 32 bytes ahead, bit 1
    else       ptr[WIDTH] &= ~B00000010; // Plane 0 R unset; mask out
    if(g & 1) *ptr        |=  B00000001; // Plane 0 G: bit 0
    if(b & 1) *ptr        |=  B00000010; // Plane 0 B: bit 0
    for(; bit < limit; bit <<= 1) {
      *ptr &= ~B11100000;            // Mask out R,G,B in one op
    141c:	80 81       	ld	r24, Z
    141e:	8f 71       	andi	r24, 0x1F	; 31
      if(r & bit) *ptr |= B00100000; // Plane N R: bit 5
    1420:	49 2f       	mov	r20, r25
    1422:	4f 21       	and	r20, r15
    1424:	09 f0       	breq	.+2      	; 0x1428 <_ZN14RGBmatrixPanel9drawPixelEiij+0x22c>
    1426:	80 62       	ori	r24, 0x20	; 32
    1428:	80 83       	st	Z, r24
      if(g & bit) *ptr |= B01000000; // Plane N G: bit 6
    142a:	89 2f       	mov	r24, r25
    142c:	8e 21       	and	r24, r14
    142e:	19 f0       	breq	.+6      	; 0x1436 <_ZN14RGBmatrixPanel9drawPixelEiij+0x23a>
    1430:	80 81       	ld	r24, Z
    1432:	80 64       	ori	r24, 0x40	; 64
    1434:	80 83       	st	Z, r24
      if(b & bit) *ptr |= B10000000; // Plane N B: bit 7
    1436:	89 2f       	mov	r24, r25
    1438:	8d 21       	and	r24, r13
    143a:	19 f0       	breq	.+6      	; 0x1442 <_ZN14RGBmatrixPanel9drawPixelEiij+0x246>
    143c:	80 81       	ld	r24, Z
    143e:	80 68       	ori	r24, 0x80	; 128
    1440:	80 83       	st	Z, r24
      ptr  += WIDTH;                 // Advance to next bit plane
    1442:	14 96       	adiw	r26, 0x04	; 4
    1444:	4d 91       	ld	r20, X+
    1446:	5c 91       	ld	r21, X
    1448:	15 97       	sbiw	r26, 0x05	; 5
    144a:	e4 0f       	add	r30, r20
    144c:	f5 1f       	adc	r31, r21
    *ptr &= ~B00000011;                  // Plane 0 G,B mask out in one op
    if(r & 1)  ptr[WIDTH] |=  B00000010; // Plane 0 R: 32 bytes ahead, bit 1
    else       ptr[WIDTH] &= ~B00000010; // Plane 0 R unset; mask out
    if(g & 1) *ptr        |=  B00000001; // Plane 0 G: bit 0
    if(b & 1) *ptr        |=  B00000010; // Plane 0 B: bit 0
    for(; bit < limit; bit <<= 1) {
    144e:	99 0f       	add	r25, r25
    1450:	21 50       	subi	r18, 0x01	; 1
    1452:	31 09       	sbc	r19, r1
    1454:	19 f7       	brne	.-58     	; 0x141c <_ZN14RGBmatrixPanel9drawPixelEiij+0x220>
      if(g & bit) *ptr |= B01000000; // Plane N G: bit 6
      if(b & bit) *ptr |= B10000000; // Plane N B: bit 7
      ptr  += WIDTH;                 // Advance to next bit plane
    }
  }
}
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	df 90       	pop	r13
    1464:	cf 90       	pop	r12
    1466:	08 95       	ret

00001468 <_ZN14RGBmatrixPanel4initEhhhhhhhbh>:
// are even an actual need.
static RGBmatrixPanel *activePanel = NULL;

// Code common to both the 16x32 and 32x32 constructors:
void RGBmatrixPanel::init(uint8_t rows, uint8_t a, uint8_t b, uint8_t c,
  uint8_t sclk, uint8_t latch, uint8_t oe, boolean dbuf, uint8_t width) {
    1468:	2f 92       	push	r2
    146a:	3f 92       	push	r3
    146c:	4f 92       	push	r4
    146e:	5f 92       	push	r5
    1470:	6f 92       	push	r6
    1472:	7f 92       	push	r7
    1474:	8f 92       	push	r8
    1476:	af 92       	push	r10
    1478:	cf 92       	push	r12
    147a:	df 92       	push	r13
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	00 d0       	rcall	.+0      	; 0x148a <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x22>
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	3c 01       	movw	r6, r24
    1490:	16 2f       	mov	r17, r22
    1492:	d4 2e       	mov	r13, r20
    1494:	f2 2e       	mov	r15, r18

  nRows = rows; // Number of multiplexed rows; actual height is 2X this
    1496:	dc 01       	movw	r26, r24
    1498:	5e 96       	adiw	r26, 0x1e	; 30
    149a:	6c 93       	st	X, r22

  // Allocate and initialize matrix buffer:
  int buffsize  = width * nRows * 3, // x3 = 3 bytes holds 4 planes "packed"
    149c:	4d 88       	ldd	r4, Y+21	; 0x15
    149e:	46 9e       	mul	r4, r22
    14a0:	c0 01       	movw	r24, r0
    14a2:	11 24       	eor	r1, r1
    14a4:	2c 01       	movw	r4, r24
    14a6:	44 0c       	add	r4, r4
    14a8:	55 1c       	adc	r5, r5
    14aa:	48 0e       	add	r4, r24
    14ac:	59 1e       	adc	r5, r25
      allocsize = (dbuf == true) ? (buffsize * 2) : buffsize;
    14ae:	a2 01       	movw	r20, r4
    14b0:	88 20       	and	r8, r8
    14b2:	11 f0       	breq	.+4      	; 0x14b8 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x50>
    14b4:	44 0f       	add	r20, r20
    14b6:	55 1f       	adc	r21, r21
  if(NULL == (matrixbuff[0] = (uint8_t *)malloc(allocsize))) return;
    14b8:	ca 01       	movw	r24, r20
    14ba:	49 83       	std	Y+1, r20	; 0x01
    14bc:	5a 83       	std	Y+2, r21	; 0x02
    14be:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <malloc>
    14c2:	1c 01       	movw	r2, r24
    14c4:	f3 01       	movw	r30, r6
    14c6:	93 8f       	std	Z+27, r25	; 0x1b
    14c8:	82 8f       	std	Z+26, r24	; 0x1a
    14ca:	49 81       	ldd	r20, Y+1	; 0x01
    14cc:	5a 81       	ldd	r21, Y+2	; 0x02
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x6c>
    14d2:	a9 c0       	rjmp	.+338    	; 0x1626 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x1be>
  memset(matrixbuff[0], 0, allocsize);
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <memset>
  // If not double-buffered, both buffers then point to the same address:
  matrixbuff[1] = (dbuf == true) ? &matrixbuff[0][buffsize] : matrixbuff[0];
    14dc:	88 20       	and	r8, r8
    14de:	19 f0       	breq	.+6      	; 0x14e6 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x7e>
    14e0:	42 0c       	add	r4, r2
    14e2:	53 1c       	adc	r5, r3
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x80>
    14e6:	21 01       	movw	r4, r2
    14e8:	d3 01       	movw	r26, r6
    14ea:	5d 96       	adiw	r26, 0x1d	; 29
    14ec:	5c 92       	st	X, r5
    14ee:	4e 92       	st	-X, r4
    14f0:	5c 97       	sbiw	r26, 0x1c	; 28

  // Save pin numbers for use by begin() method later.
  _a     = a;
    14f2:	d7 96       	adiw	r26, 0x37	; 55
    14f4:	dc 92       	st	X, r13
    14f6:	d7 97       	sbiw	r26, 0x37	; 55
  _b     = b;
    14f8:	d8 96       	adiw	r26, 0x38	; 56
    14fa:	fc 92       	st	X, r15
    14fc:	d8 97       	sbiw	r26, 0x38	; 56
  _c     = c;
    14fe:	d9 96       	adiw	r26, 0x39	; 57
    1500:	0c 93       	st	X, r16
    1502:	d9 97       	sbiw	r26, 0x39	; 57
  _sclk  = sclk;
    1504:	d4 96       	adiw	r26, 0x34	; 52
    1506:	ec 92       	st	X, r14
    1508:	d4 97       	sbiw	r26, 0x34	; 52
  _latch = latch;
    150a:	d5 96       	adiw	r26, 0x35	; 53
    150c:	cc 92       	st	X, r12
    150e:	d5 97       	sbiw	r26, 0x35	; 53
  _oe    = oe;
    1510:	d6 96       	adiw	r26, 0x36	; 54
    1512:	ac 92       	st	X, r10
    1514:	d6 97       	sbiw	r26, 0x36	; 54

  // Look up port registers and pin masks ahead of time,
  // avoids many slow digitalWrite() calls later.
  sclkpin   = digitalPinToBitMask(sclk);
    1516:	ee 2d       	mov	r30, r14
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	e8 57       	subi	r30, 0x78	; 120
    151c:	fa 4f       	sbci	r31, 0xFA	; 250
    151e:	e4 91       	lpm	r30, Z
    1520:	9d 96       	adiw	r26, 0x2d	; 45
    1522:	ec 93       	st	X, r30
    1524:	9d 97       	sbiw	r26, 0x2d	; 45
  latport   = portOutputRegister(digitalPinToPort(latch));
    1526:	2c 2d       	mov	r18, r12
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	f9 01       	movw	r30, r18
    152c:	e4 56       	subi	r30, 0x64	; 100
    152e:	fa 4f       	sbci	r31, 0xFA	; 250
    1530:	e4 91       	lpm	r30, Z
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	ee 0f       	add	r30, r30
    1536:	ff 1f       	adc	r31, r31
    1538:	e0 55       	subi	r30, 0x50	; 80
    153a:	fa 4f       	sbci	r31, 0xFA	; 250
    153c:	85 91       	lpm	r24, Z+
    153e:	94 91       	lpm	r25, Z
    1540:	f3 01       	movw	r30, r6
    1542:	92 a3       	std	Z+34, r25	; 0x22
    1544:	81 a3       	std	Z+33, r24	; 0x21
  latpin    = digitalPinToBitMask(latch);
    1546:	f9 01       	movw	r30, r18
    1548:	e8 57       	subi	r30, 0x78	; 120
    154a:	fa 4f       	sbci	r31, 0xFA	; 250
    154c:	24 91       	lpm	r18, Z
    154e:	9e 96       	adiw	r26, 0x2e	; 46
    1550:	2c 93       	st	X, r18
    1552:	9e 97       	sbiw	r26, 0x2e	; 46
  oeport    = portOutputRegister(digitalPinToPort(oe));
    1554:	8a 2d       	mov	r24, r10
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	fc 01       	movw	r30, r24
    155a:	e4 56       	subi	r30, 0x64	; 100
    155c:	fa 4f       	sbci	r31, 0xFA	; 250
    155e:	e4 91       	lpm	r30, Z
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	ee 0f       	add	r30, r30
    1564:	ff 1f       	adc	r31, r31
    1566:	e0 55       	subi	r30, 0x50	; 80
    1568:	fa 4f       	sbci	r31, 0xFA	; 250
    156a:	25 91       	lpm	r18, Z+
    156c:	34 91       	lpm	r19, Z
    156e:	f3 01       	movw	r30, r6
    1570:	34 a3       	std	Z+36, r19	; 0x24
    1572:	23 a3       	std	Z+35, r18	; 0x23
  oepin     = digitalPinToBitMask(oe);
    1574:	fc 01       	movw	r30, r24
    1576:	e8 57       	subi	r30, 0x78	; 120
    1578:	fa 4f       	sbci	r31, 0xFA	; 250
    157a:	84 91       	lpm	r24, Z
    157c:	9f 96       	adiw	r26, 0x2f	; 47
    157e:	8c 93       	st	X, r24
    1580:	9f 97       	sbiw	r26, 0x2f	; 47
  addraport = portOutputRegister(digitalPinToPort(a));
    1582:	4d 2d       	mov	r20, r13
    1584:	50 e0       	ldi	r21, 0x00	; 0
    1586:	fa 01       	movw	r30, r20
    1588:	e4 56       	subi	r30, 0x64	; 100
    158a:	fa 4f       	sbci	r31, 0xFA	; 250
    158c:	e4 91       	lpm	r30, Z
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	ee 0f       	add	r30, r30
    1592:	ff 1f       	adc	r31, r31
    1594:	e0 55       	subi	r30, 0x50	; 80
    1596:	fa 4f       	sbci	r31, 0xFA	; 250
    1598:	85 91       	lpm	r24, Z+
    159a:	94 91       	lpm	r25, Z
    159c:	f3 01       	movw	r30, r6
    159e:	96 a3       	std	Z+38, r25	; 0x26
    15a0:	85 a3       	std	Z+37, r24	; 0x25
  addrapin  = digitalPinToBitMask(a);
    15a2:	fa 01       	movw	r30, r20
    15a4:	e8 57       	subi	r30, 0x78	; 120
    15a6:	fa 4f       	sbci	r31, 0xFA	; 250
    15a8:	e4 91       	lpm	r30, Z
    15aa:	d0 96       	adiw	r26, 0x30	; 48
    15ac:	ec 93       	st	X, r30
    15ae:	d0 97       	sbiw	r26, 0x30	; 48
  addrbport = portOutputRegister(digitalPinToPort(b));
    15b0:	2f 2d       	mov	r18, r15
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	f9 01       	movw	r30, r18
    15b6:	e4 56       	subi	r30, 0x64	; 100
    15b8:	fa 4f       	sbci	r31, 0xFA	; 250
    15ba:	e4 91       	lpm	r30, Z
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	ee 0f       	add	r30, r30
    15c0:	ff 1f       	adc	r31, r31
    15c2:	e0 55       	subi	r30, 0x50	; 80
    15c4:	fa 4f       	sbci	r31, 0xFA	; 250
    15c6:	85 91       	lpm	r24, Z+
    15c8:	94 91       	lpm	r25, Z
    15ca:	f3 01       	movw	r30, r6
    15cc:	90 a7       	std	Z+40, r25	; 0x28
    15ce:	87 a3       	std	Z+39, r24	; 0x27
  addrbpin  = digitalPinToBitMask(b);
    15d0:	f9 01       	movw	r30, r18
    15d2:	e8 57       	subi	r30, 0x78	; 120
    15d4:	fa 4f       	sbci	r31, 0xFA	; 250
    15d6:	24 91       	lpm	r18, Z
    15d8:	d1 96       	adiw	r26, 0x31	; 49
    15da:	2c 93       	st	X, r18
    15dc:	d1 97       	sbiw	r26, 0x31	; 49
  addrcport = portOutputRegister(digitalPinToPort(c));
    15de:	80 2f       	mov	r24, r16
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	fc 01       	movw	r30, r24
    15e4:	e4 56       	subi	r30, 0x64	; 100
    15e6:	fa 4f       	sbci	r31, 0xFA	; 250
    15e8:	e4 91       	lpm	r30, Z
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	ee 0f       	add	r30, r30
    15ee:	ff 1f       	adc	r31, r31
    15f0:	e0 55       	subi	r30, 0x50	; 80
    15f2:	fa 4f       	sbci	r31, 0xFA	; 250
    15f4:	25 91       	lpm	r18, Z+
    15f6:	34 91       	lpm	r19, Z
    15f8:	f3 01       	movw	r30, r6
    15fa:	32 a7       	std	Z+42, r19	; 0x2a
    15fc:	21 a7       	std	Z+41, r18	; 0x29
  addrcpin  = digitalPinToBitMask(c); 
    15fe:	fc 01       	movw	r30, r24
    1600:	e8 57       	subi	r30, 0x78	; 120
    1602:	fa 4f       	sbci	r31, 0xFA	; 250
    1604:	84 91       	lpm	r24, Z
    1606:	d2 96       	adiw	r26, 0x32	; 50
    1608:	8c 93       	st	X, r24
    160a:	d2 97       	sbiw	r26, 0x32	; 50
  plane     = nPlanes - 1;
    160c:	83 e0       	ldi	r24, 0x03	; 3
    160e:	dc 96       	adiw	r26, 0x3c	; 60
    1610:	8c 93       	st	X, r24
    1612:	dc 97       	sbiw	r26, 0x3c	; 60
  row       = nRows   - 1;
    1614:	11 50       	subi	r17, 0x01	; 1
    1616:	db 96       	adiw	r26, 0x3b	; 59
    1618:	1c 93       	st	X, r17
    161a:	db 97       	sbiw	r26, 0x3b	; 59
  swapflag  = false;
    161c:	90 96       	adiw	r26, 0x20	; 32
    161e:	1c 92       	st	X, r1
    1620:	90 97       	sbiw	r26, 0x20	; 32
  backindex = 0;     // Array index of back buffer
    1622:	5f 96       	adiw	r26, 0x1f	; 31
    1624:	1c 92       	st	X, r1
}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	cf 90       	pop	r12
    163a:	af 90       	pop	r10
    163c:	8f 90       	pop	r8
    163e:	7f 90       	pop	r7
    1640:	6f 90       	pop	r6
    1642:	5f 90       	pop	r5
    1644:	4f 90       	pop	r4
    1646:	3f 90       	pop	r3
    1648:	2f 90       	pop	r2
    164a:	08 95       	ret

0000164c <_ZN14RGBmatrixPanelC1Ehhhhhhhbh>:

  init(8, a, b, c, sclk, latch, oe, dbuf, 32);
}

// Constructor for 32x32 or 32x64 panel:
RGBmatrixPanel::RGBmatrixPanel(
    164c:	6f 92       	push	r6
    164e:	7f 92       	push	r7
    1650:	8f 92       	push	r8
    1652:	af 92       	push	r10
    1654:	bf 92       	push	r11
    1656:	cf 92       	push	r12
    1658:	df 92       	push	r13
    165a:	ef 92       	push	r14
    165c:	ff 92       	push	r15
    165e:	0f 93       	push	r16
    1660:	1f 93       	push	r17
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	1f 92       	push	r1
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	3c 01       	movw	r6, r24
    166e:	d6 2e       	mov	r13, r22
    1670:	b4 2e       	mov	r11, r20
    1672:	10 2f       	mov	r17, r16
    1674:	f9 88       	ldd	r15, Y+17	; 0x11
  uint8_t a, uint8_t b, uint8_t c, uint8_t d,
  uint8_t sclk, uint8_t latch, uint8_t oe, boolean dbuf, uint8_t width) :
  Adafruit_GFX(width, 32) {
    1676:	6f 2d       	mov	r22, r15
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	40 e2       	ldi	r20, 0x20	; 32
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	29 83       	std	Y+1, r18	; 0x01
    1680:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN12Adafruit_GFXC1Eii>
    1684:	83 e2       	ldi	r24, 0x23	; 35
    1686:	91 e0       	ldi	r25, 0x01	; 1
    1688:	d3 01       	movw	r26, r6
    168a:	8d 93       	st	X+, r24
    168c:	9c 93       	st	X, r25

  init(16, a, b, c, sclk, latch, oe, dbuf, width);
    168e:	ff 92       	push	r15
    1690:	29 81       	ldd	r18, Y+1	; 0x01
    1692:	02 2f       	mov	r16, r18
    1694:	2b 2d       	mov	r18, r11
    1696:	4d 2d       	mov	r20, r13
    1698:	60 e1       	ldi	r22, 0x10	; 16
    169a:	c3 01       	movw	r24, r6
    169c:	0e 94 34 0a 	call	0x1468	; 0x1468 <_ZN14RGBmatrixPanel4initEhhhhhhhbh>

  // Init a few extra 32x32-specific elements:
  _d        = d;
    16a0:	f3 01       	movw	r30, r6
    16a2:	12 af       	std	Z+58, r17	; 0x3a
  addrdport = portOutputRegister(digitalPinToPort(d));
    16a4:	01 2f       	mov	r16, r17
    16a6:	10 e0       	ldi	r17, 0x00	; 0
    16a8:	f8 01       	movw	r30, r16
    16aa:	e4 56       	subi	r30, 0x64	; 100
    16ac:	fa 4f       	sbci	r31, 0xFA	; 250
    16ae:	e4 91       	lpm	r30, Z
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	ee 0f       	add	r30, r30
    16b4:	ff 1f       	adc	r31, r31
    16b6:	e0 55       	subi	r30, 0x50	; 80
    16b8:	fa 4f       	sbci	r31, 0xFA	; 250
    16ba:	85 91       	lpm	r24, Z+
    16bc:	94 91       	lpm	r25, Z
    16be:	d3 01       	movw	r26, r6
    16c0:	9c 96       	adiw	r26, 0x2c	; 44
    16c2:	9c 93       	st	X, r25
    16c4:	8e 93       	st	-X, r24
    16c6:	9b 97       	sbiw	r26, 0x2b	; 43
  addrdpin  = digitalPinToBitMask(d);
    16c8:	f8 01       	movw	r30, r16
    16ca:	e8 57       	subi	r30, 0x78	; 120
    16cc:	fa 4f       	sbci	r31, 0xFA	; 250
    16ce:	e4 91       	lpm	r30, Z
    16d0:	d3 96       	adiw	r26, 0x33	; 51
    16d2:	ec 93       	st	X, r30
}
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	df 90       	pop	r13
    16e6:	cf 90       	pop	r12
    16e8:	bf 90       	pop	r11
    16ea:	af 90       	pop	r10
    16ec:	8f 90       	pop	r8
    16ee:	7f 90       	pop	r7
    16f0:	6f 90       	pop	r6
    16f2:	08 95       	ret

000016f4 <_ZN14RGBmatrixPanel5beginEv>:

void RGBmatrixPanel::begin(void) {
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	ec 01       	movw	r28, r24

  backindex   = 0;                         // Back buffer
    16fa:	1f 8e       	std	Y+31, r1	; 0x1f
  buffptr     = matrixbuff[1 - backindex]; // -> front buffer
    16fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16fe:	e1 e0       	ldi	r30, 0x01	; 1
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	e8 1b       	sub	r30, r24
    1704:	f1 09       	sbc	r31, r1
    1706:	3d 96       	adiw	r30, 0x0d	; 13
    1708:	ee 0f       	add	r30, r30
    170a:	ff 1f       	adc	r31, r31
    170c:	ec 0f       	add	r30, r28
    170e:	fd 1f       	adc	r31, r29
    1710:	80 81       	ld	r24, Z
    1712:	91 81       	ldd	r25, Z+1	; 0x01
    1714:	9e af       	std	Y+62, r25	; 0x3e
    1716:	8d af       	std	Y+61, r24	; 0x3d
  activePanel = this;                      // For interrupt hander
    1718:	d0 93 b7 01 	sts	0x01B7, r29
    171c:	c0 93 b6 01 	sts	0x01B6, r28

  // Enable all comm & address pins as outputs, set default states:
  pinMode(_sclk , OUTPUT); SCLKPORT   &= ~sclkpin;  // Low
    1720:	61 e0       	ldi	r22, 0x01	; 1
    1722:	8c a9       	ldd	r24, Y+52	; 0x34
    1724:	0e 94 3f 13 	call	0x267e	; 0x267e <pinMode>
    1728:	95 b1       	in	r25, 0x05	; 5
    172a:	8d a5       	ldd	r24, Y+45	; 0x2d
    172c:	80 95       	com	r24
    172e:	89 23       	and	r24, r25
    1730:	85 b9       	out	0x05, r24	; 5
  pinMode(_latch, OUTPUT); *latport   &= ~latpin;   // Low
    1732:	61 e0       	ldi	r22, 0x01	; 1
    1734:	8d a9       	ldd	r24, Y+53	; 0x35
    1736:	0e 94 3f 13 	call	0x267e	; 0x267e <pinMode>
    173a:	e9 a1       	ldd	r30, Y+33	; 0x21
    173c:	fa a1       	ldd	r31, Y+34	; 0x22
    173e:	90 81       	ld	r25, Z
    1740:	8e a5       	ldd	r24, Y+46	; 0x2e
    1742:	80 95       	com	r24
    1744:	89 23       	and	r24, r25
    1746:	80 83       	st	Z, r24
  pinMode(_oe   , OUTPUT); *oeport    |= oepin;     // High (disable output)
    1748:	61 e0       	ldi	r22, 0x01	; 1
    174a:	8e a9       	ldd	r24, Y+54	; 0x36
    174c:	0e 94 3f 13 	call	0x267e	; 0x267e <pinMode>
    1750:	eb a1       	ldd	r30, Y+35	; 0x23
    1752:	fc a1       	ldd	r31, Y+36	; 0x24
    1754:	90 81       	ld	r25, Z
    1756:	8f a5       	ldd	r24, Y+47	; 0x2f
    1758:	89 2b       	or	r24, r25
    175a:	80 83       	st	Z, r24
  pinMode(_a    , OUTPUT); *addraport &= ~addrapin; // Low
    175c:	61 e0       	ldi	r22, 0x01	; 1
    175e:	8f a9       	ldd	r24, Y+55	; 0x37
    1760:	0e 94 3f 13 	call	0x267e	; 0x267e <pinMode>
    1764:	ed a1       	ldd	r30, Y+37	; 0x25
    1766:	fe a1       	ldd	r31, Y+38	; 0x26
    1768:	90 81       	ld	r25, Z
    176a:	88 a9       	ldd	r24, Y+48	; 0x30
    176c:	80 95       	com	r24
    176e:	89 23       	and	r24, r25
    1770:	80 83       	st	Z, r24
  pinMode(_b    , OUTPUT); *addrbport &= ~addrbpin; // Low
    1772:	61 e0       	ldi	r22, 0x01	; 1
    1774:	88 ad       	ldd	r24, Y+56	; 0x38
    1776:	0e 94 3f 13 	call	0x267e	; 0x267e <pinMode>
    177a:	ef a1       	ldd	r30, Y+39	; 0x27
    177c:	f8 a5       	ldd	r31, Y+40	; 0x28
    177e:	90 81       	ld	r25, Z
    1780:	89 a9       	ldd	r24, Y+49	; 0x31
    1782:	80 95       	com	r24
    1784:	89 23       	and	r24, r25
    1786:	80 83       	st	Z, r24
  pinMode(_c    , OUTPUT); *addrcport &= ~addrcpin; // Low
    1788:	61 e0       	ldi	r22, 0x01	; 1
    178a:	89 ad       	ldd	r24, Y+57	; 0x39
    178c:	0e 94 3f 13 	call	0x267e	; 0x267e <pinMode>
    1790:	e9 a5       	ldd	r30, Y+41	; 0x29
    1792:	fa a5       	ldd	r31, Y+42	; 0x2a
    1794:	90 81       	ld	r25, Z
    1796:	8a a9       	ldd	r24, Y+50	; 0x32
    1798:	80 95       	com	r24
    179a:	89 23       	and	r24, r25
    179c:	80 83       	st	Z, r24
  if(nRows > 8) {
    179e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17a0:	89 30       	cpi	r24, 0x09	; 9
    17a2:	58 f0       	brcs	.+22     	; 0x17ba <_ZN14RGBmatrixPanel5beginEv+0xc6>
    pinMode(_d  , OUTPUT); *addrdport &= ~addrdpin; // Low
    17a4:	61 e0       	ldi	r22, 0x01	; 1
    17a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    17a8:	0e 94 3f 13 	call	0x267e	; 0x267e <pinMode>
    17ac:	eb a5       	ldd	r30, Y+43	; 0x2b
    17ae:	fc a5       	ldd	r31, Y+44	; 0x2c
    17b0:	90 81       	ld	r25, Z
    17b2:	8b a9       	ldd	r24, Y+51	; 0x33
    17b4:	80 95       	com	r24
    17b6:	89 23       	and	r24, r25
    17b8:	80 83       	st	Z, r24
  }

  // The high six bits of the data port are set as outputs;
  // Might make this configurable in the future, but not yet.
  DATADIR  = B11111100;
    17ba:	8c ef       	ldi	r24, 0xFC	; 252
    17bc:	8a b9       	out	0x0a, r24	; 10
  DATAPORT = 0;
    17be:	1b b8       	out	0x0b, r1	; 11

  // Set up Timer1 for interrupt:
  TCCR1A  = _BV(WGM11); // Mode 14 (fast PWM), OC1A off
    17c0:	82 e0       	ldi	r24, 0x02	; 2
    17c2:	80 93 80 00 	sts	0x0080, r24
  TCCR1B  = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // Mode 14, no prescale
    17c6:	89 e1       	ldi	r24, 0x19	; 25
    17c8:	80 93 81 00 	sts	0x0081, r24
  ICR1    = 100;
    17cc:	84 e6       	ldi	r24, 0x64	; 100
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	90 93 87 00 	sts	0x0087, r25
    17d4:	80 93 86 00 	sts	0x0086, r24
  TIMSK1 |= _BV(TOIE1); // Enable Timer1 interrupt
    17d8:	80 91 6f 00 	lds	r24, 0x006F
    17dc:	81 60       	ori	r24, 0x01	; 1
    17de:	80 93 6f 00 	sts	0x006F, r24
  sei();                // Enable global interrupts
    17e2:	78 94       	sei
}
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	08 95       	ret

000017ea <_ZN14RGBmatrixPanel8Color333Ehhh>:
// Promote 3/3/3 RGB to Adafruit_GFX 5/6/5
uint16_t RGBmatrixPanel::Color333(uint8_t r, uint8_t g, uint8_t b) {
  // RRRrrGGGgggBBBbb
  return ((r & 0x7) << 13) | ((r & 0x6) << 10) |
         ((g & 0x7) <<  8) | ((g & 0x7) <<  5) |
         ((b & 0x7) <<  2) | ((b & 0x6) >>  1);
    17ea:	82 2f       	mov	r24, r18
    17ec:	86 70       	andi	r24, 0x06	; 6
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	95 95       	asr	r25
    17f2:	87 95       	ror	r24
    17f4:	27 70       	andi	r18, 0x07	; 7
    17f6:	54 e0       	ldi	r21, 0x04	; 4
    17f8:	25 9f       	mul	r18, r21
    17fa:	90 01       	movw	r18, r0
    17fc:	11 24       	eor	r1, r1
    17fe:	28 2b       	or	r18, r24
    1800:	39 2b       	or	r19, r25
// benefit of older code using one of the original color formats.

// Promote 3/3/3 RGB to Adafruit_GFX 5/6/5
uint16_t RGBmatrixPanel::Color333(uint8_t r, uint8_t g, uint8_t b) {
  // RRRrrGGGgggBBBbb
  return ((r & 0x7) << 13) | ((r & 0x6) << 10) |
    1802:	86 2f       	mov	r24, r22
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	98 2f       	mov	r25, r24
    1808:	88 27       	eor	r24, r24
    180a:	92 95       	swap	r25
    180c:	99 0f       	add	r25, r25
    180e:	90 7e       	andi	r25, 0xE0	; 224
    1810:	82 2b       	or	r24, r18
    1812:	93 2b       	or	r25, r19
         ((g & 0x7) <<  8) | ((g & 0x7) <<  5) |
    1814:	24 2f       	mov	r18, r20
    1816:	27 70       	andi	r18, 0x07	; 7
    1818:	92 2b       	or	r25, r18
    181a:	20 e2       	ldi	r18, 0x20	; 32
    181c:	42 9f       	mul	r20, r18
    181e:	a0 01       	movw	r20, r0
    1820:	11 24       	eor	r1, r1
    1822:	55 27       	eor	r21, r21
    1824:	84 2b       	or	r24, r20
    1826:	95 2b       	or	r25, r21
// benefit of older code using one of the original color formats.

// Promote 3/3/3 RGB to Adafruit_GFX 5/6/5
uint16_t RGBmatrixPanel::Color333(uint8_t r, uint8_t g, uint8_t b) {
  // RRRrrGGGgggBBBbb
  return ((r & 0x7) << 13) | ((r & 0x6) << 10) |
    1828:	66 70       	andi	r22, 0x06	; 6
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	76 2f       	mov	r23, r22
    182e:	66 27       	eor	r22, r22
    1830:	77 0f       	add	r23, r23
    1832:	77 0f       	add	r23, r23
         ((g & 0x7) <<  8) | ((g & 0x7) <<  5) |
         ((b & 0x7) <<  2) | ((b & 0x6) >>  1);
}
    1834:	86 2b       	or	r24, r22
    1836:	97 2b       	or	r25, r23
    1838:	08 95       	ret

0000183a <_ZN14RGBmatrixPanel13updateDisplayEv>:
// being issued to the LED matrix for the *next* bitplane and/or row
// while the *current* plane/row is being shown.  As a result, the
// counter variables change between past/present/future tense in mid-
// function...hopefully tenses are sufficiently commented.

void RGBmatrixPanel::updateDisplay(void) {
    183a:	cf 92       	push	r12
    183c:	df 92       	push	r13
    183e:	ff 92       	push	r15
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	dc 01       	movw	r26, r24
  uint8_t  i, tick, tock, *ptr;
  uint16_t t, duration;

  *oeport  |= oepin;  // Disable LED output during row/plane switchover
    184a:	93 96       	adiw	r26, 0x23	; 35
    184c:	ed 91       	ld	r30, X+
    184e:	fc 91       	ld	r31, X
    1850:	94 97       	sbiw	r26, 0x24	; 36
    1852:	90 81       	ld	r25, Z
    1854:	9f 96       	adiw	r26, 0x2f	; 47
    1856:	8c 91       	ld	r24, X
    1858:	9f 97       	sbiw	r26, 0x2f	; 47
    185a:	89 2b       	or	r24, r25
    185c:	80 83       	st	Z, r24
  *latport |= latpin; // Latch data loaded during *prior* interrupt
    185e:	91 96       	adiw	r26, 0x21	; 33
    1860:	ed 91       	ld	r30, X+
    1862:	fc 91       	ld	r31, X
    1864:	92 97       	sbiw	r26, 0x22	; 34
    1866:	90 81       	ld	r25, Z
    1868:	9e 96       	adiw	r26, 0x2e	; 46
    186a:	8c 91       	ld	r24, X
    186c:	9e 97       	sbiw	r26, 0x2e	; 46
    186e:	89 2b       	or	r24, r25
    1870:	80 83       	st	Z, r24
  // This is because duration is the display time for the data loaded
  // on the PRIOR interrupt.  CALLOVERHEAD is subtracted from the
  // result because that time is implicit between the timer overflow
  // (interrupt triggered) and the initial LEDs-off line at the start
  // of this method.
  t = (nRows > 8) ? LOOPTIME : (LOOPTIME * 2);
    1872:	5e 96       	adiw	r26, 0x1e	; 30
    1874:	3c 91       	ld	r19, X
    1876:	5e 97       	sbiw	r26, 0x1e	; 30
    1878:	39 30       	cpi	r19, 0x09	; 9
    187a:	18 f4       	brcc	.+6      	; 0x1882 <_ZN14RGBmatrixPanel13updateDisplayEv+0x48>
    187c:	80 e9       	ldi	r24, 0x90	; 144
    187e:	91 e0       	ldi	r25, 0x01	; 1
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <_ZN14RGBmatrixPanel13updateDisplayEv+0x4c>
    1882:	88 ec       	ldi	r24, 0xC8	; 200
    1884:	90 e0       	ldi	r25, 0x00	; 0
  duration = ((t + CALLOVERHEAD * 2) << plane) - CALLOVERHEAD;
    1886:	dc 96       	adiw	r26, 0x3c	; 60
    1888:	2c 91       	ld	r18, X
    188a:	dc 97       	sbiw	r26, 0x3c	; 60
    188c:	88 58       	subi	r24, 0x88	; 136
    188e:	9f 4f       	sbci	r25, 0xFF	; 255
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <_ZN14RGBmatrixPanel13updateDisplayEv+0x5c>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	2a 95       	dec	r18
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <_ZN14RGBmatrixPanel13updateDisplayEv+0x58>
    189a:	cc 97       	sbiw	r24, 0x3c	; 60
  // advancing to the next line.  While it might seem beneficial to
  // advance lines every time and interleave the planes to reduce
  // vertical scanning artifacts, in practice with this panel it causes
  // a green 'ghosting' effect on black pixels, a much worse artifact.

  if(++plane >= nPlanes) {      // Advance plane counter.  Maxed out?
    189c:	dc 96       	adiw	r26, 0x3c	; 60
    189e:	2c 91       	ld	r18, X
    18a0:	dc 97       	sbiw	r26, 0x3c	; 60
    18a2:	2f 5f       	subi	r18, 0xFF	; 255
    18a4:	dc 96       	adiw	r26, 0x3c	; 60
    18a6:	2c 93       	st	X, r18
    18a8:	dc 97       	sbiw	r26, 0x3c	; 60
    18aa:	24 30       	cpi	r18, 0x04	; 4
    18ac:	98 f1       	brcs	.+102    	; 0x1914 <_ZN14RGBmatrixPanel13updateDisplayEv+0xda>
    plane = 0;                  // Yes, reset to plane 0, and
    18ae:	dc 96       	adiw	r26, 0x3c	; 60
    18b0:	1c 92       	st	X, r1
    18b2:	dc 97       	sbiw	r26, 0x3c	; 60
    if(++row >= nRows) {        // advance row counter.  Maxed out?
    18b4:	db 96       	adiw	r26, 0x3b	; 59
    18b6:	2c 91       	ld	r18, X
    18b8:	db 97       	sbiw	r26, 0x3b	; 59
    18ba:	2f 5f       	subi	r18, 0xFF	; 255
    18bc:	db 96       	adiw	r26, 0x3b	; 59
    18be:	2c 93       	st	X, r18
    18c0:	db 97       	sbiw	r26, 0x3b	; 59
    18c2:	23 17       	cp	r18, r19
    18c4:	08 f4       	brcc	.+2      	; 0x18c8 <_ZN14RGBmatrixPanel13updateDisplayEv+0x8e>
    18c6:	7d c0       	rjmp	.+250    	; 0x19c2 <_ZN14RGBmatrixPanel13updateDisplayEv+0x188>
      row     = 0;              // Yes, reset row counter, then...
    18c8:	db 96       	adiw	r26, 0x3b	; 59
    18ca:	1c 92       	st	X, r1
    18cc:	db 97       	sbiw	r26, 0x3b	; 59
      if(swapflag == true) {    // Swap front/back buffers if requested
    18ce:	90 96       	adiw	r26, 0x20	; 32
    18d0:	2c 91       	ld	r18, X
    18d2:	90 97       	sbiw	r26, 0x20	; 32
    18d4:	22 23       	and	r18, r18
    18d6:	59 f0       	breq	.+22     	; 0x18ee <_ZN14RGBmatrixPanel13updateDisplayEv+0xb4>
        backindex = 1 - backindex;
    18d8:	5f 96       	adiw	r26, 0x1f	; 31
    18da:	3c 91       	ld	r19, X
    18dc:	5f 97       	sbiw	r26, 0x1f	; 31
    18de:	21 e0       	ldi	r18, 0x01	; 1
    18e0:	23 1b       	sub	r18, r19
    18e2:	5f 96       	adiw	r26, 0x1f	; 31
    18e4:	2c 93       	st	X, r18
    18e6:	5f 97       	sbiw	r26, 0x1f	; 31
        swapflag  = false;
    18e8:	90 96       	adiw	r26, 0x20	; 32
    18ea:	1c 92       	st	X, r1
    18ec:	90 97       	sbiw	r26, 0x20	; 32
      }
      buffptr = matrixbuff[1-backindex]; // Reset into front buffer
    18ee:	5f 96       	adiw	r26, 0x1f	; 31
    18f0:	2c 91       	ld	r18, X
    18f2:	5f 97       	sbiw	r26, 0x1f	; 31
    18f4:	e1 e0       	ldi	r30, 0x01	; 1
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	e2 1b       	sub	r30, r18
    18fa:	f1 09       	sbc	r31, r1
    18fc:	3d 96       	adiw	r30, 0x0d	; 13
    18fe:	ee 0f       	add	r30, r30
    1900:	ff 1f       	adc	r31, r31
    1902:	ea 0f       	add	r30, r26
    1904:	fb 1f       	adc	r31, r27
    1906:	20 81       	ld	r18, Z
    1908:	31 81       	ldd	r19, Z+1	; 0x01
    190a:	de 96       	adiw	r26, 0x3e	; 62
    190c:	3c 93       	st	X, r19
    190e:	2e 93       	st	-X, r18
    1910:	dd 97       	sbiw	r26, 0x3d	; 61
    1912:	57 c0       	rjmp	.+174    	; 0x19c2 <_ZN14RGBmatrixPanel13updateDisplayEv+0x188>
    }
  } else if(plane == 1) {
    1914:	dc 96       	adiw	r26, 0x3c	; 60
    1916:	2c 91       	ld	r18, X
    1918:	dc 97       	sbiw	r26, 0x3c	; 60
    191a:	21 30       	cpi	r18, 0x01	; 1
    191c:	09 f0       	breq	.+2      	; 0x1920 <_ZN14RGBmatrixPanel13updateDisplayEv+0xe6>
    191e:	51 c0       	rjmp	.+162    	; 0x19c2 <_ZN14RGBmatrixPanel13updateDisplayEv+0x188>
    // Plane 0 was loaded on prior interrupt invocation and is about to
    // latch now, so update the row address lines before we do that:
    if(row & 0x1)   *addraport |=  addrapin;
    1920:	db 96       	adiw	r26, 0x3b	; 59
    1922:	3c 91       	ld	r19, X
    1924:	db 97       	sbiw	r26, 0x3b	; 59
    1926:	95 96       	adiw	r26, 0x25	; 37
    1928:	ed 91       	ld	r30, X+
    192a:	fc 91       	ld	r31, X
    192c:	96 97       	sbiw	r26, 0x26	; 38
    192e:	d0 96       	adiw	r26, 0x30	; 48
    1930:	2c 91       	ld	r18, X
    1932:	d0 97       	sbiw	r26, 0x30	; 48
    1934:	30 ff       	sbrs	r19, 0
    1936:	03 c0       	rjmp	.+6      	; 0x193e <_ZN14RGBmatrixPanel13updateDisplayEv+0x104>
    1938:	30 81       	ld	r19, Z
    193a:	23 2b       	or	r18, r19
    193c:	03 c0       	rjmp	.+6      	; 0x1944 <_ZN14RGBmatrixPanel13updateDisplayEv+0x10a>
    else            *addraport &= ~addrapin;
    193e:	30 81       	ld	r19, Z
    1940:	20 95       	com	r18
    1942:	23 23       	and	r18, r19
    1944:	20 83       	st	Z, r18
    if(row & 0x2)   *addrbport |=  addrbpin;
    1946:	db 96       	adiw	r26, 0x3b	; 59
    1948:	3c 91       	ld	r19, X
    194a:	db 97       	sbiw	r26, 0x3b	; 59
    194c:	97 96       	adiw	r26, 0x27	; 39
    194e:	ed 91       	ld	r30, X+
    1950:	fc 91       	ld	r31, X
    1952:	98 97       	sbiw	r26, 0x28	; 40
    1954:	d1 96       	adiw	r26, 0x31	; 49
    1956:	2c 91       	ld	r18, X
    1958:	d1 97       	sbiw	r26, 0x31	; 49
    195a:	31 ff       	sbrs	r19, 1
    195c:	03 c0       	rjmp	.+6      	; 0x1964 <_ZN14RGBmatrixPanel13updateDisplayEv+0x12a>
    195e:	30 81       	ld	r19, Z
    1960:	23 2b       	or	r18, r19
    1962:	03 c0       	rjmp	.+6      	; 0x196a <_ZN14RGBmatrixPanel13updateDisplayEv+0x130>
    else            *addrbport &= ~addrbpin;
    1964:	30 81       	ld	r19, Z
    1966:	20 95       	com	r18
    1968:	23 23       	and	r18, r19
    196a:	20 83       	st	Z, r18
    if(row & 0x4)   *addrcport |=  addrcpin;
    196c:	db 96       	adiw	r26, 0x3b	; 59
    196e:	3c 91       	ld	r19, X
    1970:	db 97       	sbiw	r26, 0x3b	; 59
    1972:	99 96       	adiw	r26, 0x29	; 41
    1974:	ed 91       	ld	r30, X+
    1976:	fc 91       	ld	r31, X
    1978:	9a 97       	sbiw	r26, 0x2a	; 42
    197a:	d2 96       	adiw	r26, 0x32	; 50
    197c:	2c 91       	ld	r18, X
    197e:	d2 97       	sbiw	r26, 0x32	; 50
    1980:	32 ff       	sbrs	r19, 2
    1982:	03 c0       	rjmp	.+6      	; 0x198a <_ZN14RGBmatrixPanel13updateDisplayEv+0x150>
    1984:	30 81       	ld	r19, Z
    1986:	23 2b       	or	r18, r19
    1988:	03 c0       	rjmp	.+6      	; 0x1990 <_ZN14RGBmatrixPanel13updateDisplayEv+0x156>
    else            *addrcport &= ~addrcpin;
    198a:	30 81       	ld	r19, Z
    198c:	20 95       	com	r18
    198e:	23 23       	and	r18, r19
    1990:	20 83       	st	Z, r18
    if(nRows > 8) {
    1992:	5e 96       	adiw	r26, 0x1e	; 30
    1994:	2c 91       	ld	r18, X
    1996:	5e 97       	sbiw	r26, 0x1e	; 30
    1998:	29 30       	cpi	r18, 0x09	; 9
    199a:	98 f0       	brcs	.+38     	; 0x19c2 <_ZN14RGBmatrixPanel13updateDisplayEv+0x188>
      if(row & 0x8) *addrdport |=  addrdpin;
    199c:	db 96       	adiw	r26, 0x3b	; 59
    199e:	3c 91       	ld	r19, X
    19a0:	db 97       	sbiw	r26, 0x3b	; 59
    19a2:	9b 96       	adiw	r26, 0x2b	; 43
    19a4:	ed 91       	ld	r30, X+
    19a6:	fc 91       	ld	r31, X
    19a8:	9c 97       	sbiw	r26, 0x2c	; 44
    19aa:	d3 96       	adiw	r26, 0x33	; 51
    19ac:	2c 91       	ld	r18, X
    19ae:	d3 97       	sbiw	r26, 0x33	; 51
    19b0:	33 ff       	sbrs	r19, 3
    19b2:	03 c0       	rjmp	.+6      	; 0x19ba <_ZN14RGBmatrixPanel13updateDisplayEv+0x180>
    19b4:	30 81       	ld	r19, Z
    19b6:	23 2b       	or	r18, r19
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <_ZN14RGBmatrixPanel13updateDisplayEv+0x186>
      else          *addrdport &= ~addrdpin;
    19ba:	30 81       	ld	r19, Z
    19bc:	20 95       	com	r18
    19be:	23 23       	and	r18, r19
    19c0:	20 83       	st	Z, r18
    }
  }

  // buffptr, being 'volatile' type, doesn't take well to optimization.
  // A local register copy can speed some things up:
  ptr = (uint8_t *)buffptr;
    19c2:	dd 96       	adiw	r26, 0x3d	; 61
    19c4:	ed 91       	ld	r30, X+
    19c6:	fc 91       	ld	r31, X
    19c8:	de 97       	sbiw	r26, 0x3e	; 62

  ICR1      = duration; // Set interval for next interrupt
    19ca:	90 93 87 00 	sts	0x0087, r25
    19ce:	80 93 86 00 	sts	0x0086, r24
  TCNT1     = 0;        // Restart interrupt timer
    19d2:	10 92 85 00 	sts	0x0085, r1
    19d6:	10 92 84 00 	sts	0x0084, r1
  *oeport  &= ~oepin;   // Re-enable output
    19da:	93 96       	adiw	r26, 0x23	; 35
    19dc:	cd 91       	ld	r28, X+
    19de:	dc 91       	ld	r29, X
    19e0:	94 97       	sbiw	r26, 0x24	; 36
    19e2:	98 81       	ld	r25, Y
    19e4:	9f 96       	adiw	r26, 0x2f	; 47
    19e6:	8c 91       	ld	r24, X
    19e8:	9f 97       	sbiw	r26, 0x2f	; 47
    19ea:	80 95       	com	r24
    19ec:	89 23       	and	r24, r25
    19ee:	88 83       	st	Y, r24
  *latport &= ~latpin;  // Latch down
    19f0:	91 96       	adiw	r26, 0x21	; 33
    19f2:	cd 91       	ld	r28, X+
    19f4:	dc 91       	ld	r29, X
    19f6:	92 97       	sbiw	r26, 0x22	; 34
    19f8:	98 81       	ld	r25, Y
    19fa:	9e 96       	adiw	r26, 0x2e	; 46
    19fc:	8c 91       	ld	r24, X
    19fe:	9e 97       	sbiw	r26, 0x2e	; 46
    1a00:	80 95       	com	r24
    1a02:	89 23       	and	r24, r25
    1a04:	88 83       	st	Y, r24
  // not have to load/modify/store bits every single time.  It's a
  // somewhat rude trick that ONLY works because the interrupt
  // handler is set ISR_BLOCK, halting any other interrupts that
  // might otherwise also be twiddling the port at the same time
  // (else this would clobber them).
  tock = SCLKPORT;
    1a06:	25 b1       	in	r18, 0x05	; 5
  tick = tock | sclkpin;
    1a08:	9d 96       	adiw	r26, 0x2d	; 45
    1a0a:	9c 91       	ld	r25, X
    1a0c:	9d 97       	sbiw	r26, 0x2d	; 45
    1a0e:	92 2b       	or	r25, r18

  if(plane > 0) { // 188 ticks from TCNT1=0 (above) to end of function
    1a10:	dc 96       	adiw	r26, 0x3c	; 60
    1a12:	8c 91       	ld	r24, X
    1a14:	dc 97       	sbiw	r26, 0x3c	; 60
    1a16:	88 23       	and	r24, r24
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <_ZN14RGBmatrixPanel13updateDisplayEv+0x1e2>
    1a1a:	0d c1       	rjmp	.+538    	; 0x1c36 <_ZN14RGBmatrixPanel13updateDisplayEv+0x3fc>
         [clk]  "I" (_SFR_IO_ADDR(SCLKPORT)), \
         [tick] "r" (tick),                   \
         [tock] "r" (tock));

    // Loop is unrolled for speed:
    pew pew pew pew pew pew pew pew
    1a1c:	01 90       	ld	r0, Z+
    1a1e:	0b b8       	out	0x0b, r0	; 11
    1a20:	95 b9       	out	0x05, r25	; 5
    1a22:	25 b9       	out	0x05, r18	; 5
    1a24:	01 90       	ld	r0, Z+
    1a26:	0b b8       	out	0x0b, r0	; 11
    1a28:	95 b9       	out	0x05, r25	; 5
    1a2a:	25 b9       	out	0x05, r18	; 5
    1a2c:	01 90       	ld	r0, Z+
    1a2e:	0b b8       	out	0x0b, r0	; 11
    1a30:	95 b9       	out	0x05, r25	; 5
    1a32:	25 b9       	out	0x05, r18	; 5
    1a34:	01 90       	ld	r0, Z+
    1a36:	0b b8       	out	0x0b, r0	; 11
    1a38:	95 b9       	out	0x05, r25	; 5
    1a3a:	25 b9       	out	0x05, r18	; 5
    1a3c:	01 90       	ld	r0, Z+
    1a3e:	0b b8       	out	0x0b, r0	; 11
    1a40:	95 b9       	out	0x05, r25	; 5
    1a42:	25 b9       	out	0x05, r18	; 5
    1a44:	01 90       	ld	r0, Z+
    1a46:	0b b8       	out	0x0b, r0	; 11
    1a48:	95 b9       	out	0x05, r25	; 5
    1a4a:	25 b9       	out	0x05, r18	; 5
    1a4c:	01 90       	ld	r0, Z+
    1a4e:	0b b8       	out	0x0b, r0	; 11
    1a50:	95 b9       	out	0x05, r25	; 5
    1a52:	25 b9       	out	0x05, r18	; 5
    1a54:	01 90       	ld	r0, Z+
    1a56:	0b b8       	out	0x0b, r0	; 11
    1a58:	95 b9       	out	0x05, r25	; 5
    1a5a:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1a5c:	01 90       	ld	r0, Z+
    1a5e:	0b b8       	out	0x0b, r0	; 11
    1a60:	95 b9       	out	0x05, r25	; 5
    1a62:	25 b9       	out	0x05, r18	; 5
    1a64:	01 90       	ld	r0, Z+
    1a66:	0b b8       	out	0x0b, r0	; 11
    1a68:	95 b9       	out	0x05, r25	; 5
    1a6a:	25 b9       	out	0x05, r18	; 5
    1a6c:	01 90       	ld	r0, Z+
    1a6e:	0b b8       	out	0x0b, r0	; 11
    1a70:	95 b9       	out	0x05, r25	; 5
    1a72:	25 b9       	out	0x05, r18	; 5
    1a74:	01 90       	ld	r0, Z+
    1a76:	0b b8       	out	0x0b, r0	; 11
    1a78:	95 b9       	out	0x05, r25	; 5
    1a7a:	25 b9       	out	0x05, r18	; 5
    1a7c:	01 90       	ld	r0, Z+
    1a7e:	0b b8       	out	0x0b, r0	; 11
    1a80:	95 b9       	out	0x05, r25	; 5
    1a82:	25 b9       	out	0x05, r18	; 5
    1a84:	01 90       	ld	r0, Z+
    1a86:	0b b8       	out	0x0b, r0	; 11
    1a88:	95 b9       	out	0x05, r25	; 5
    1a8a:	25 b9       	out	0x05, r18	; 5
    1a8c:	01 90       	ld	r0, Z+
    1a8e:	0b b8       	out	0x0b, r0	; 11
    1a90:	95 b9       	out	0x05, r25	; 5
    1a92:	25 b9       	out	0x05, r18	; 5
    1a94:	01 90       	ld	r0, Z+
    1a96:	0b b8       	out	0x0b, r0	; 11
    1a98:	95 b9       	out	0x05, r25	; 5
    1a9a:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1a9c:	01 90       	ld	r0, Z+
    1a9e:	0b b8       	out	0x0b, r0	; 11
    1aa0:	95 b9       	out	0x05, r25	; 5
    1aa2:	25 b9       	out	0x05, r18	; 5
    1aa4:	01 90       	ld	r0, Z+
    1aa6:	0b b8       	out	0x0b, r0	; 11
    1aa8:	95 b9       	out	0x05, r25	; 5
    1aaa:	25 b9       	out	0x05, r18	; 5
    1aac:	01 90       	ld	r0, Z+
    1aae:	0b b8       	out	0x0b, r0	; 11
    1ab0:	95 b9       	out	0x05, r25	; 5
    1ab2:	25 b9       	out	0x05, r18	; 5
    1ab4:	01 90       	ld	r0, Z+
    1ab6:	0b b8       	out	0x0b, r0	; 11
    1ab8:	95 b9       	out	0x05, r25	; 5
    1aba:	25 b9       	out	0x05, r18	; 5
    1abc:	01 90       	ld	r0, Z+
    1abe:	0b b8       	out	0x0b, r0	; 11
    1ac0:	95 b9       	out	0x05, r25	; 5
    1ac2:	25 b9       	out	0x05, r18	; 5
    1ac4:	01 90       	ld	r0, Z+
    1ac6:	0b b8       	out	0x0b, r0	; 11
    1ac8:	95 b9       	out	0x05, r25	; 5
    1aca:	25 b9       	out	0x05, r18	; 5
    1acc:	01 90       	ld	r0, Z+
    1ace:	0b b8       	out	0x0b, r0	; 11
    1ad0:	95 b9       	out	0x05, r25	; 5
    1ad2:	25 b9       	out	0x05, r18	; 5
    1ad4:	01 90       	ld	r0, Z+
    1ad6:	0b b8       	out	0x0b, r0	; 11
    1ad8:	95 b9       	out	0x05, r25	; 5
    1ada:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1adc:	01 90       	ld	r0, Z+
    1ade:	0b b8       	out	0x0b, r0	; 11
    1ae0:	95 b9       	out	0x05, r25	; 5
    1ae2:	25 b9       	out	0x05, r18	; 5
    1ae4:	01 90       	ld	r0, Z+
    1ae6:	0b b8       	out	0x0b, r0	; 11
    1ae8:	95 b9       	out	0x05, r25	; 5
    1aea:	25 b9       	out	0x05, r18	; 5
    1aec:	01 90       	ld	r0, Z+
    1aee:	0b b8       	out	0x0b, r0	; 11
    1af0:	95 b9       	out	0x05, r25	; 5
    1af2:	25 b9       	out	0x05, r18	; 5
    1af4:	01 90       	ld	r0, Z+
    1af6:	0b b8       	out	0x0b, r0	; 11
    1af8:	95 b9       	out	0x05, r25	; 5
    1afa:	25 b9       	out	0x05, r18	; 5
    1afc:	01 90       	ld	r0, Z+
    1afe:	0b b8       	out	0x0b, r0	; 11
    1b00:	95 b9       	out	0x05, r25	; 5
    1b02:	25 b9       	out	0x05, r18	; 5
    1b04:	01 90       	ld	r0, Z+
    1b06:	0b b8       	out	0x0b, r0	; 11
    1b08:	95 b9       	out	0x05, r25	; 5
    1b0a:	25 b9       	out	0x05, r18	; 5
    1b0c:	01 90       	ld	r0, Z+
    1b0e:	0b b8       	out	0x0b, r0	; 11
    1b10:	95 b9       	out	0x05, r25	; 5
    1b12:	25 b9       	out	0x05, r18	; 5
    1b14:	01 90       	ld	r0, Z+
    1b16:	0b b8       	out	0x0b, r0	; 11
    1b18:	95 b9       	out	0x05, r25	; 5
    1b1a:	25 b9       	out	0x05, r18	; 5

      if (WIDTH == 64) {
    1b1c:	14 96       	adiw	r26, 0x04	; 4
    1b1e:	4d 91       	ld	r20, X+
    1b20:	5c 91       	ld	r21, X
    1b22:	15 97       	sbiw	r26, 0x05	; 5
    1b24:	40 34       	cpi	r20, 0x40	; 64
    1b26:	51 05       	cpc	r21, r1
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <_ZN14RGBmatrixPanel13updateDisplayEv+0x2f2>
    1b2a:	80 c0       	rjmp	.+256    	; 0x1c2c <_ZN14RGBmatrixPanel13updateDisplayEv+0x3f2>
    pew pew pew pew pew pew pew pew
    1b2c:	01 90       	ld	r0, Z+
    1b2e:	0b b8       	out	0x0b, r0	; 11
    1b30:	95 b9       	out	0x05, r25	; 5
    1b32:	25 b9       	out	0x05, r18	; 5
    1b34:	01 90       	ld	r0, Z+
    1b36:	0b b8       	out	0x0b, r0	; 11
    1b38:	95 b9       	out	0x05, r25	; 5
    1b3a:	25 b9       	out	0x05, r18	; 5
    1b3c:	01 90       	ld	r0, Z+
    1b3e:	0b b8       	out	0x0b, r0	; 11
    1b40:	95 b9       	out	0x05, r25	; 5
    1b42:	25 b9       	out	0x05, r18	; 5
    1b44:	01 90       	ld	r0, Z+
    1b46:	0b b8       	out	0x0b, r0	; 11
    1b48:	95 b9       	out	0x05, r25	; 5
    1b4a:	25 b9       	out	0x05, r18	; 5
    1b4c:	01 90       	ld	r0, Z+
    1b4e:	0b b8       	out	0x0b, r0	; 11
    1b50:	95 b9       	out	0x05, r25	; 5
    1b52:	25 b9       	out	0x05, r18	; 5
    1b54:	01 90       	ld	r0, Z+
    1b56:	0b b8       	out	0x0b, r0	; 11
    1b58:	95 b9       	out	0x05, r25	; 5
    1b5a:	25 b9       	out	0x05, r18	; 5
    1b5c:	01 90       	ld	r0, Z+
    1b5e:	0b b8       	out	0x0b, r0	; 11
    1b60:	95 b9       	out	0x05, r25	; 5
    1b62:	25 b9       	out	0x05, r18	; 5
    1b64:	01 90       	ld	r0, Z+
    1b66:	0b b8       	out	0x0b, r0	; 11
    1b68:	95 b9       	out	0x05, r25	; 5
    1b6a:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1b6c:	01 90       	ld	r0, Z+
    1b6e:	0b b8       	out	0x0b, r0	; 11
    1b70:	95 b9       	out	0x05, r25	; 5
    1b72:	25 b9       	out	0x05, r18	; 5
    1b74:	01 90       	ld	r0, Z+
    1b76:	0b b8       	out	0x0b, r0	; 11
    1b78:	95 b9       	out	0x05, r25	; 5
    1b7a:	25 b9       	out	0x05, r18	; 5
    1b7c:	01 90       	ld	r0, Z+
    1b7e:	0b b8       	out	0x0b, r0	; 11
    1b80:	95 b9       	out	0x05, r25	; 5
    1b82:	25 b9       	out	0x05, r18	; 5
    1b84:	01 90       	ld	r0, Z+
    1b86:	0b b8       	out	0x0b, r0	; 11
    1b88:	95 b9       	out	0x05, r25	; 5
    1b8a:	25 b9       	out	0x05, r18	; 5
    1b8c:	01 90       	ld	r0, Z+
    1b8e:	0b b8       	out	0x0b, r0	; 11
    1b90:	95 b9       	out	0x05, r25	; 5
    1b92:	25 b9       	out	0x05, r18	; 5
    1b94:	01 90       	ld	r0, Z+
    1b96:	0b b8       	out	0x0b, r0	; 11
    1b98:	95 b9       	out	0x05, r25	; 5
    1b9a:	25 b9       	out	0x05, r18	; 5
    1b9c:	01 90       	ld	r0, Z+
    1b9e:	0b b8       	out	0x0b, r0	; 11
    1ba0:	95 b9       	out	0x05, r25	; 5
    1ba2:	25 b9       	out	0x05, r18	; 5
    1ba4:	01 90       	ld	r0, Z+
    1ba6:	0b b8       	out	0x0b, r0	; 11
    1ba8:	95 b9       	out	0x05, r25	; 5
    1baa:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1bac:	01 90       	ld	r0, Z+
    1bae:	0b b8       	out	0x0b, r0	; 11
    1bb0:	95 b9       	out	0x05, r25	; 5
    1bb2:	25 b9       	out	0x05, r18	; 5
    1bb4:	01 90       	ld	r0, Z+
    1bb6:	0b b8       	out	0x0b, r0	; 11
    1bb8:	95 b9       	out	0x05, r25	; 5
    1bba:	25 b9       	out	0x05, r18	; 5
    1bbc:	01 90       	ld	r0, Z+
    1bbe:	0b b8       	out	0x0b, r0	; 11
    1bc0:	95 b9       	out	0x05, r25	; 5
    1bc2:	25 b9       	out	0x05, r18	; 5
    1bc4:	01 90       	ld	r0, Z+
    1bc6:	0b b8       	out	0x0b, r0	; 11
    1bc8:	95 b9       	out	0x05, r25	; 5
    1bca:	25 b9       	out	0x05, r18	; 5
    1bcc:	01 90       	ld	r0, Z+
    1bce:	0b b8       	out	0x0b, r0	; 11
    1bd0:	95 b9       	out	0x05, r25	; 5
    1bd2:	25 b9       	out	0x05, r18	; 5
    1bd4:	01 90       	ld	r0, Z+
    1bd6:	0b b8       	out	0x0b, r0	; 11
    1bd8:	95 b9       	out	0x05, r25	; 5
    1bda:	25 b9       	out	0x05, r18	; 5
    1bdc:	01 90       	ld	r0, Z+
    1bde:	0b b8       	out	0x0b, r0	; 11
    1be0:	95 b9       	out	0x05, r25	; 5
    1be2:	25 b9       	out	0x05, r18	; 5
    1be4:	01 90       	ld	r0, Z+
    1be6:	0b b8       	out	0x0b, r0	; 11
    1be8:	95 b9       	out	0x05, r25	; 5
    1bea:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1bec:	01 90       	ld	r0, Z+
    1bee:	0b b8       	out	0x0b, r0	; 11
    1bf0:	95 b9       	out	0x05, r25	; 5
    1bf2:	25 b9       	out	0x05, r18	; 5
    1bf4:	01 90       	ld	r0, Z+
    1bf6:	0b b8       	out	0x0b, r0	; 11
    1bf8:	95 b9       	out	0x05, r25	; 5
    1bfa:	25 b9       	out	0x05, r18	; 5
    1bfc:	01 90       	ld	r0, Z+
    1bfe:	0b b8       	out	0x0b, r0	; 11
    1c00:	95 b9       	out	0x05, r25	; 5
    1c02:	25 b9       	out	0x05, r18	; 5
    1c04:	01 90       	ld	r0, Z+
    1c06:	0b b8       	out	0x0b, r0	; 11
    1c08:	95 b9       	out	0x05, r25	; 5
    1c0a:	25 b9       	out	0x05, r18	; 5
    1c0c:	01 90       	ld	r0, Z+
    1c0e:	0b b8       	out	0x0b, r0	; 11
    1c10:	95 b9       	out	0x05, r25	; 5
    1c12:	25 b9       	out	0x05, r18	; 5
    1c14:	01 90       	ld	r0, Z+
    1c16:	0b b8       	out	0x0b, r0	; 11
    1c18:	95 b9       	out	0x05, r25	; 5
    1c1a:	25 b9       	out	0x05, r18	; 5
    1c1c:	01 90       	ld	r0, Z+
    1c1e:	0b b8       	out	0x0b, r0	; 11
    1c20:	95 b9       	out	0x05, r25	; 5
    1c22:	25 b9       	out	0x05, r18	; 5
    1c24:	01 90       	ld	r0, Z+
    1c26:	0b b8       	out	0x0b, r0	; 11
    1c28:	95 b9       	out	0x05, r25	; 5
    1c2a:	25 b9       	out	0x05, r18	; 5
      }

    buffptr = ptr; //+= 32;
    1c2c:	de 96       	adiw	r26, 0x3e	; 62
    1c2e:	fc 93       	st	X, r31
    1c30:	ee 93       	st	-X, r30
    1c32:	dd 97       	sbiw	r26, 0x3d	; 61
    1c34:	32 c0       	rjmp	.+100    	; 0x1c9a <_ZN14RGBmatrixPanel13updateDisplayEv+0x460>
    1c36:	f1 2c       	mov	r15, r1
    // the slack, with all its data packed into the 2 least bits not
    // used by the other planes.  This works because the unpacking and
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<WIDTH; i++) {
    1c38:	cf 2c       	mov	r12, r15
    1c3a:	d1 2c       	mov	r13, r1
    1c3c:	14 96       	adiw	r26, 0x04	; 4
    1c3e:	6d 91       	ld	r22, X+
    1c40:	7c 91       	ld	r23, X
    1c42:	15 97       	sbiw	r26, 0x05	; 5
    1c44:	c6 16       	cp	r12, r22
    1c46:	d7 06       	cpc	r13, r23
    1c48:	44 f5       	brge	.+80     	; 0x1c9a <_ZN14RGBmatrixPanel13updateDisplayEv+0x460>
      DATAPORT =
        ( ptr[i]    << 6)         |
        ((ptr[i+WIDTH] << 4) & 0x30) |
    1c4a:	86 01       	movw	r16, r12
    1c4c:	06 0f       	add	r16, r22
    1c4e:	17 1f       	adc	r17, r23
    1c50:	af 01       	movw	r20, r30
    1c52:	40 0f       	add	r20, r16
    1c54:	51 1f       	adc	r21, r17
    1c56:	ea 01       	movw	r28, r20
    1c58:	48 81       	ld	r20, Y
    1c5a:	d0 e1       	ldi	r29, 0x10	; 16
    1c5c:	4d 9f       	mul	r20, r29
    1c5e:	a0 01       	movw	r20, r0
    1c60:	11 24       	eor	r1, r1
        ((ptr[i+WIDTH*2] << 2) & 0x0C);
    1c62:	34 2f       	mov	r19, r20
    1c64:	30 73       	andi	r19, 0x30	; 48
    1c66:	6e 0f       	add	r22, r30
    1c68:	7f 1f       	adc	r23, r31
    1c6a:	60 0f       	add	r22, r16
    1c6c:	71 1f       	adc	r23, r17
    1c6e:	eb 01       	movw	r28, r22
    1c70:	88 81       	ld	r24, Y
    1c72:	d4 e0       	ldi	r29, 0x04	; 4
    1c74:	8d 9f       	mul	r24, r29
    1c76:	a0 01       	movw	r20, r0
    1c78:	11 24       	eor	r1, r1
    1c7a:	4c 70       	andi	r20, 0x0C	; 12
    1c7c:	43 2b       	or	r20, r19
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<WIDTH; i++) {
      DATAPORT =
        ( ptr[i]    << 6)         |
    1c7e:	e6 01       	movw	r28, r12
    1c80:	ce 0f       	add	r28, r30
    1c82:	df 1f       	adc	r29, r31
    1c84:	68 81       	ld	r22, Y
    1c86:	80 e4       	ldi	r24, 0x40	; 64
    1c88:	68 9f       	mul	r22, r24
    1c8a:	b0 01       	movw	r22, r0
    1c8c:	11 24       	eor	r1, r1
        ((ptr[i+WIDTH] << 4) & 0x30) |
        ((ptr[i+WIDTH*2] << 2) & 0x0C);
    1c8e:	46 2b       	or	r20, r22
    1c90:	4b b9       	out	0x0b, r20	; 11
      SCLKPORT = tick; // Clock lo
    1c92:	95 b9       	out	0x05, r25	; 5
      SCLKPORT = tock; // Clock hi
    1c94:	25 b9       	out	0x05, r18	; 5
    // the slack, with all its data packed into the 2 least bits not
    // used by the other planes.  This works because the unpacking and
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<WIDTH; i++) {
    1c96:	f3 94       	inc	r15
    1c98:	cf cf       	rjmp	.-98     	; 0x1c38 <_ZN14RGBmatrixPanel13updateDisplayEv+0x3fe>
        ((ptr[i+WIDTH*2] << 2) & 0x0C);
      SCLKPORT = tick; // Clock lo
      SCLKPORT = tock; // Clock hi
    } 
  }
}
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	ff 90       	pop	r15
    1ca4:	df 90       	pop	r13
    1ca6:	cf 90       	pop	r12
    1ca8:	08 95       	ret

00001caa <__vector_13>:
  Serial.println(F("\n};"));
}

// -------------------- Interrupt handler stuff --------------------

ISR(TIMER1_OVF_vect, ISR_BLOCK) { // ISR_BLOCK important -- see notes later
    1caa:	1f 92       	push	r1
    1cac:	0f 92       	push	r0
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	0f 92       	push	r0
    1cb2:	11 24       	eor	r1, r1
    1cb4:	2f 93       	push	r18
    1cb6:	3f 93       	push	r19
    1cb8:	4f 93       	push	r20
    1cba:	5f 93       	push	r21
    1cbc:	6f 93       	push	r22
    1cbe:	7f 93       	push	r23
    1cc0:	8f 93       	push	r24
    1cc2:	9f 93       	push	r25
    1cc4:	af 93       	push	r26
    1cc6:	bf 93       	push	r27
    1cc8:	ef 93       	push	r30
    1cca:	ff 93       	push	r31
  activePanel->updateDisplay();   // Call refresh func for active display
    1ccc:	80 91 b6 01 	lds	r24, 0x01B6
    1cd0:	90 91 b7 01 	lds	r25, 0x01B7
    1cd4:	0e 94 1d 0c 	call	0x183a	; 0x183a <_ZN14RGBmatrixPanel13updateDisplayEv>
  TIFR1 |= TOV1;                  // Clear Timer1 interrupt flag
    1cd8:	86 b3       	in	r24, 0x16	; 22
    1cda:	86 bb       	out	0x16, r24	; 22
}
    1cdc:	ff 91       	pop	r31
    1cde:	ef 91       	pop	r30
    1ce0:	bf 91       	pop	r27
    1ce2:	af 91       	pop	r26
    1ce4:	9f 91       	pop	r25
    1ce6:	8f 91       	pop	r24
    1ce8:	7f 91       	pop	r23
    1cea:	6f 91       	pop	r22
    1cec:	5f 91       	pop	r21
    1cee:	4f 91       	pop	r20
    1cf0:	3f 91       	pop	r19
    1cf2:	2f 91       	pop	r18
    1cf4:	0f 90       	pop	r0
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	0f 90       	pop	r0
    1cfa:	1f 90       	pop	r1
    1cfc:	18 95       	reti

00001cfe <_ZN14RGBmatrixPanel10fillScreenEj>:
    }
  }
}

void RGBmatrixPanel::fillScreen(uint16_t c) {
  if((c == 0x0000) || (c == 0xffff)) {
    1cfe:	9b 01       	movw	r18, r22
    1d00:	21 50       	subi	r18, 0x01	; 1
    1d02:	31 09       	sbc	r19, r1
    1d04:	2e 3f       	cpi	r18, 0xFE	; 254
    1d06:	3f 4f       	sbci	r19, 0xFF	; 255
    1d08:	f0 f0       	brcs	.+60     	; 0x1d46 <_ZN14RGBmatrixPanel10fillScreenEj+0x48>
    // For black or white, all bits in frame buffer will be identically
    // set or unset (regardless of weird bit packing), so it's OK to just
    // quickly memset the whole thing:
    memset(matrixbuff[backindex], c, WIDTH * nRows * 3);
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	5f 96       	adiw	r26, 0x1f	; 31
    1d0e:	2c 91       	ld	r18, X
    1d10:	5f 97       	sbiw	r26, 0x1f	; 31
    1d12:	5e 96       	adiw	r26, 0x1e	; 30
    1d14:	3c 91       	ld	r19, X
    1d16:	5e 97       	sbiw	r26, 0x1e	; 30
    1d18:	14 96       	adiw	r26, 0x04	; 4
    1d1a:	ed 91       	ld	r30, X+
    1d1c:	fc 91       	ld	r31, X
    1d1e:	15 97       	sbiw	r26, 0x05	; 5
    1d20:	3e 9f       	mul	r19, r30
    1d22:	a0 01       	movw	r20, r0
    1d24:	3f 9f       	mul	r19, r31
    1d26:	50 0d       	add	r21, r0
    1d28:	11 24       	eor	r1, r1
    1d2a:	fa 01       	movw	r30, r20
    1d2c:	ee 0f       	add	r30, r30
    1d2e:	ff 1f       	adc	r31, r31
    1d30:	4e 0f       	add	r20, r30
    1d32:	5f 1f       	adc	r21, r31
    1d34:	fc 01       	movw	r30, r24
    1d36:	e2 0f       	add	r30, r18
    1d38:	f1 1d       	adc	r31, r1
    1d3a:	e2 0f       	add	r30, r18
    1d3c:	f1 1d       	adc	r31, r1
    1d3e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d40:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d42:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <memset>
  } else {
    // Otherwise, need to handle it the long way:
    Adafruit_GFX::fillScreen(c);
    1d46:	0c 94 69 05 	jmp	0xad2	; 0xad2 <_ZN12Adafruit_GFX10fillScreenEj>

00001d4a <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    1d4a:	61 32       	cpi	r22, 0x21	; 33
    1d4c:	98 f4       	brcc	.+38     	; 0x1d74 <twi_transmit+0x2a>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    1d4e:	20 91 25 02 	lds	r18, 0x0225
    1d52:	24 30       	cpi	r18, 0x04	; 4
    1d54:	89 f4       	brne	.+34     	; 0x1d78 <twi_transmit+0x2e>
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    1d56:	60 93 da 01 	sts	0x01DA, r22
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	2c ed       	ldi	r18, 0xDC	; 220
    1d5e:	31 e0       	ldi	r19, 0x01	; 1
  for(i = 0; i < length; ++i){
    1d60:	d9 01       	movw	r26, r18
    1d62:	8a 2f       	mov	r24, r26
    1d64:	82 1b       	sub	r24, r18
    1d66:	86 17       	cp	r24, r22
    1d68:	18 f4       	brcc	.+6      	; 0x1d70 <twi_transmit+0x26>
    twi_txBuffer[i] = data[i];
    1d6a:	81 91       	ld	r24, Z+
    1d6c:	8d 93       	st	X+, r24
    1d6e:	f9 cf       	rjmp	.-14     	; 0x1d62 <twi_transmit+0x18>
  }
  
  return 0;
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	08 95       	ret
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
    1d78:	82 e0       	ldi	r24, 0x02	; 2
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    1d7a:	08 95       	ret

00001d7c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1d7c:	85 ed       	ldi	r24, 0xD5	; 213
    1d7e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1d82:	80 91 bc 00 	lds	r24, 0x00BC
    1d86:	84 fd       	sbrc	r24, 4
    1d88:	fc cf       	rjmp	.-8      	; 0x1d82 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1d8a:	10 92 25 02 	sts	0x0225, r1
    1d8e:	08 95       	ret

00001d90 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1d90:	85 ec       	ldi	r24, 0xC5	; 197
    1d92:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    1d96:	10 92 25 02 	sts	0x0225, r1
    1d9a:	08 95       	ret

00001d9c <__vector_24>:
}

ISR(TWI_vect)
{
    1d9c:	1f 92       	push	r1
    1d9e:	0f 92       	push	r0
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	0f 92       	push	r0
    1da4:	11 24       	eor	r1, r1
    1da6:	2f 93       	push	r18
    1da8:	3f 93       	push	r19
    1daa:	4f 93       	push	r20
    1dac:	5f 93       	push	r21
    1dae:	6f 93       	push	r22
    1db0:	7f 93       	push	r23
    1db2:	8f 93       	push	r24
    1db4:	9f 93       	push	r25
    1db6:	af 93       	push	r26
    1db8:	bf 93       	push	r27
    1dba:	ef 93       	push	r30
    1dbc:	ff 93       	push	r31
  switch(TW_STATUS){
    1dbe:	80 91 b9 00 	lds	r24, 0x00B9
    1dc2:	88 7f       	andi	r24, 0xF8	; 248
    1dc4:	80 36       	cpi	r24, 0x60	; 96
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <__vector_24+0x2e>
    1dc8:	9e c0       	rjmp	.+316    	; 0x1f06 <__vector_24+0x16a>
    1dca:	78 f5       	brcc	.+94     	; 0x1e2a <__vector_24+0x8e>
    1dcc:	88 32       	cpi	r24, 0x28	; 40
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <__vector_24+0x36>
    1dd0:	5d c0       	rjmp	.+186    	; 0x1e8c <__vector_24+0xf0>
    1dd2:	90 f4       	brcc	.+36     	; 0x1df8 <__vector_24+0x5c>
    1dd4:	80 31       	cpi	r24, 0x10	; 16
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <__vector_24+0x3e>
    1dd8:	56 c0       	rjmp	.+172    	; 0x1e86 <__vector_24+0xea>
    1dda:	38 f4       	brcc	.+14     	; 0x1dea <__vector_24+0x4e>
    1ddc:	88 23       	and	r24, r24
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <__vector_24+0x46>
    1de0:	f5 c0       	rjmp	.+490    	; 0x1fcc <__vector_24+0x230>
    1de2:	88 30       	cpi	r24, 0x08	; 8
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <__vector_24+0x4c>
    1de6:	4f c0       	rjmp	.+158    	; 0x1e86 <__vector_24+0xea>
    1de8:	f5 c0       	rjmp	.+490    	; 0x1fd4 <__vector_24+0x238>
    1dea:	88 31       	cpi	r24, 0x18	; 24
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <__vector_24+0x54>
    1dee:	4e c0       	rjmp	.+156    	; 0x1e8c <__vector_24+0xf0>
    1df0:	80 32       	cpi	r24, 0x20	; 32
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <__vector_24+0x5a>
    1df4:	5f c0       	rjmp	.+190    	; 0x1eb4 <__vector_24+0x118>
    1df6:	ee c0       	rjmp	.+476    	; 0x1fd4 <__vector_24+0x238>
    1df8:	80 34       	cpi	r24, 0x40	; 64
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <__vector_24+0x62>
    1dfc:	6a c0       	rjmp	.+212    	; 0x1ed2 <__vector_24+0x136>
    1dfe:	58 f4       	brcc	.+22     	; 0x1e16 <__vector_24+0x7a>
    1e00:	80 33       	cpi	r24, 0x30	; 48
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <__vector_24+0x6a>
    1e04:	57 c0       	rjmp	.+174    	; 0x1eb4 <__vector_24+0x118>
    1e06:	88 33       	cpi	r24, 0x38	; 56
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <__vector_24+0x70>
    1e0a:	e4 c0       	rjmp	.+456    	; 0x1fd4 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1e0c:	80 93 b8 01 	sts	0x01B8, r24
      twi_releaseBus();
    1e10:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <twi_releaseBus>
      break;
    1e14:	df c0       	rjmp	.+446    	; 0x1fd4 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e16:	80 35       	cpi	r24, 0x50	; 80
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <__vector_24+0x80>
    1e1a:	4f c0       	rjmp	.+158    	; 0x1eba <__vector_24+0x11e>
    1e1c:	88 35       	cpi	r24, 0x58	; 88
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <__vector_24+0x86>
    1e20:	5d c0       	rjmp	.+186    	; 0x1edc <__vector_24+0x140>
    1e22:	88 34       	cpi	r24, 0x48	; 72
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <__vector_24+0x8c>
    1e26:	d6 c0       	rjmp	.+428    	; 0x1fd4 <__vector_24+0x238>
    1e28:	d3 c0       	rjmp	.+422    	; 0x1fd0 <__vector_24+0x234>
    1e2a:	88 39       	cpi	r24, 0x98	; 152
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <__vector_24+0x94>
    1e2e:	c4 c0       	rjmp	.+392    	; 0x1fb8 <__vector_24+0x21c>
    1e30:	a8 f4       	brcc	.+42     	; 0x1e5c <__vector_24+0xc0>
    1e32:	88 37       	cpi	r24, 0x78	; 120
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <__vector_24+0x9c>
    1e36:	67 c0       	rjmp	.+206    	; 0x1f06 <__vector_24+0x16a>
    1e38:	38 f4       	brcc	.+14     	; 0x1e48 <__vector_24+0xac>
    1e3a:	88 36       	cpi	r24, 0x68	; 104
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <__vector_24+0xa4>
    1e3e:	63 c0       	rjmp	.+198    	; 0x1f06 <__vector_24+0x16a>
    1e40:	80 37       	cpi	r24, 0x70	; 112
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <__vector_24+0xaa>
    1e44:	60 c0       	rjmp	.+192    	; 0x1f06 <__vector_24+0x16a>
    1e46:	c6 c0       	rjmp	.+396    	; 0x1fd4 <__vector_24+0x238>
    1e48:	88 38       	cpi	r24, 0x88	; 136
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <__vector_24+0xb2>
    1e4c:	b5 c0       	rjmp	.+362    	; 0x1fb8 <__vector_24+0x21c>
    1e4e:	80 39       	cpi	r24, 0x90	; 144
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <__vector_24+0xb8>
    1e52:	5f c0       	rjmp	.+190    	; 0x1f12 <__vector_24+0x176>
    1e54:	80 38       	cpi	r24, 0x80	; 128
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <__vector_24+0xbe>
    1e58:	bd c0       	rjmp	.+378    	; 0x1fd4 <__vector_24+0x238>
    1e5a:	5b c0       	rjmp	.+182    	; 0x1f12 <__vector_24+0x176>
    1e5c:	80 3b       	cpi	r24, 0xB0	; 176
    1e5e:	09 f4       	brne	.+2      	; 0x1e62 <__vector_24+0xc6>
    1e60:	83 c0       	rjmp	.+262    	; 0x1f68 <__vector_24+0x1cc>
    1e62:	38 f4       	brcc	.+14     	; 0x1e72 <__vector_24+0xd6>
    1e64:	80 3a       	cpi	r24, 0xA0	; 160
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <__vector_24+0xce>
    1e68:	66 c0       	rjmp	.+204    	; 0x1f36 <__vector_24+0x19a>
    1e6a:	88 3a       	cpi	r24, 0xA8	; 168
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <__vector_24+0xd4>
    1e6e:	7c c0       	rjmp	.+248    	; 0x1f68 <__vector_24+0x1cc>
    1e70:	b1 c0       	rjmp	.+354    	; 0x1fd4 <__vector_24+0x238>
    1e72:	80 3c       	cpi	r24, 0xC0	; 192
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <__vector_24+0xdc>
    1e76:	a4 c0       	rjmp	.+328    	; 0x1fc0 <__vector_24+0x224>
    1e78:	88 3c       	cpi	r24, 0xC8	; 200
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <__vector_24+0xe2>
    1e7c:	a1 c0       	rjmp	.+322    	; 0x1fc0 <__vector_24+0x224>
    1e7e:	88 3b       	cpi	r24, 0xB8	; 184
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <__vector_24+0xe8>
    1e82:	87 c0       	rjmp	.+270    	; 0x1f92 <__vector_24+0x1f6>
    1e84:	a7 c0       	rjmp	.+334    	; 0x1fd4 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1e86:	80 91 24 02 	lds	r24, 0x0224
    1e8a:	10 c0       	rjmp	.+32     	; 0x1eac <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1e8c:	90 91 fd 01 	lds	r25, 0x01FD
    1e90:	80 91 fc 01 	lds	r24, 0x01FC
    1e94:	98 17       	cp	r25, r24
    1e96:	70 f5       	brcc	.+92     	; 0x1ef4 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1e98:	e0 91 fd 01 	lds	r30, 0x01FD
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	8e 0f       	add	r24, r30
    1ea0:	80 93 fd 01 	sts	0x01FD, r24
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	e2 50       	subi	r30, 0x02	; 2
    1ea8:	fe 4f       	sbci	r31, 0xFE	; 254
    1eaa:	80 81       	ld	r24, Z
    1eac:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1eb0:	85 ec       	ldi	r24, 0xC5	; 197
    1eb2:	83 c0       	rjmp	.+262    	; 0x1fba <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1eb4:	80 93 b8 01 	sts	0x01B8, r24
    1eb8:	8b c0       	rjmp	.+278    	; 0x1fd0 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1eba:	e0 91 fd 01 	lds	r30, 0x01FD
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	8e 0f       	add	r24, r30
    1ec2:	80 93 fd 01 	sts	0x01FD, r24
    1ec6:	80 91 bb 00 	lds	r24, 0x00BB
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	e2 50       	subi	r30, 0x02	; 2
    1ece:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed0:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1ed2:	90 91 fd 01 	lds	r25, 0x01FD
    1ed6:	80 91 fc 01 	lds	r24, 0x01FC
    1eda:	6b c0       	rjmp	.+214    	; 0x1fb2 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1edc:	e0 91 fd 01 	lds	r30, 0x01FD
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	8e 0f       	add	r24, r30
    1ee4:	80 93 fd 01 	sts	0x01FD, r24
    1ee8:	80 91 bb 00 	lds	r24, 0x00BB
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	e2 50       	subi	r30, 0x02	; 2
    1ef0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef2:	80 83       	st	Z, r24
	if (twi_sendStop)
    1ef4:	80 91 23 02 	lds	r24, 0x0223
    1ef8:	81 11       	cpse	r24, r1
    1efa:	6a c0       	rjmp	.+212    	; 0x1fd0 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	80 93 22 02 	sts	0x0222, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1f02:	84 ea       	ldi	r24, 0xA4	; 164
    1f04:	5e c0       	rjmp	.+188    	; 0x1fc2 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1f06:	83 e0       	ldi	r24, 0x03	; 3
    1f08:	80 93 25 02 	sts	0x0225, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1f0c:	10 92 b9 01 	sts	0x01B9, r1
    1f10:	cf cf       	rjmp	.-98     	; 0x1eb0 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1f12:	80 91 b9 01 	lds	r24, 0x01B9
    1f16:	80 32       	cpi	r24, 0x20	; 32
    1f18:	08 f0       	brcs	.+2      	; 0x1f1c <__vector_24+0x180>
    1f1a:	4e c0       	rjmp	.+156    	; 0x1fb8 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1f1c:	e0 91 b9 01 	lds	r30, 0x01B9
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	8e 0f       	add	r24, r30
    1f24:	80 93 b9 01 	sts	0x01B9, r24
    1f28:	80 91 bb 00 	lds	r24, 0x00BB
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	e6 54       	subi	r30, 0x46	; 70
    1f30:	fe 4f       	sbci	r31, 0xFE	; 254
    1f32:	80 83       	st	Z, r24
    1f34:	bd cf       	rjmp	.-134    	; 0x1eb0 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1f36:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1f3a:	80 91 b9 01 	lds	r24, 0x01B9
    1f3e:	80 32       	cpi	r24, 0x20	; 32
    1f40:	30 f4       	brcc	.+12     	; 0x1f4e <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1f42:	e0 91 b9 01 	lds	r30, 0x01B9
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	e6 54       	subi	r30, 0x46	; 70
    1f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f4c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1f4e:	60 91 b9 01 	lds	r22, 0x01B9
    1f52:	70 e0       	ldi	r23, 0x00	; 0
    1f54:	e0 91 1e 02 	lds	r30, 0x021E
    1f58:	f0 91 1f 02 	lds	r31, 0x021F
    1f5c:	8a eb       	ldi	r24, 0xBA	; 186
    1f5e:	91 e0       	ldi	r25, 0x01	; 1
    1f60:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1f62:	10 92 b9 01 	sts	0x01B9, r1
      break;
    1f66:	36 c0       	rjmp	.+108    	; 0x1fd4 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1f68:	84 e0       	ldi	r24, 0x04	; 4
    1f6a:	80 93 25 02 	sts	0x0225, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1f6e:	10 92 db 01 	sts	0x01DB, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1f72:	10 92 da 01 	sts	0x01DA, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1f76:	e0 91 20 02 	lds	r30, 0x0220
    1f7a:	f0 91 21 02 	lds	r31, 0x0221
    1f7e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1f80:	80 91 da 01 	lds	r24, 0x01DA
    1f84:	81 11       	cpse	r24, r1
    1f86:	05 c0       	rjmp	.+10     	; 0x1f92 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	80 93 da 01 	sts	0x01DA, r24
        twi_txBuffer[0] = 0x00;
    1f8e:	10 92 dc 01 	sts	0x01DC, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1f92:	e0 91 db 01 	lds	r30, 0x01DB
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	8e 0f       	add	r24, r30
    1f9a:	80 93 db 01 	sts	0x01DB, r24
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	e4 52       	subi	r30, 0x24	; 36
    1fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa4:	80 81       	ld	r24, Z
    1fa6:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1faa:	90 91 db 01 	lds	r25, 0x01DB
    1fae:	80 91 da 01 	lds	r24, 0x01DA
    1fb2:	98 17       	cp	r25, r24
    1fb4:	08 f4       	brcc	.+2      	; 0x1fb8 <__vector_24+0x21c>
    1fb6:	7c cf       	rjmp	.-264    	; 0x1eb0 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1fb8:	85 e8       	ldi	r24, 0x85	; 133
    1fba:	80 93 bc 00 	sts	0x00BC, r24
    1fbe:	0a c0       	rjmp	.+20     	; 0x1fd4 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1fc0:	85 ec       	ldi	r24, 0xC5	; 197
    1fc2:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1fc6:	10 92 25 02 	sts	0x0225, r1
      break;
    1fca:	04 c0       	rjmp	.+8      	; 0x1fd4 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1fcc:	10 92 b8 01 	sts	0x01B8, r1
      twi_stop();
    1fd0:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <twi_stop>
      break;
  }
}
    1fd4:	ff 91       	pop	r31
    1fd6:	ef 91       	pop	r30
    1fd8:	bf 91       	pop	r27
    1fda:	af 91       	pop	r26
    1fdc:	9f 91       	pop	r25
    1fde:	8f 91       	pop	r24
    1fe0:	7f 91       	pop	r23
    1fe2:	6f 91       	pop	r22
    1fe4:	5f 91       	pop	r21
    1fe6:	4f 91       	pop	r20
    1fe8:	3f 91       	pop	r19
    1fea:	2f 91       	pop	r18
    1fec:	0f 90       	pop	r0
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	0f 90       	pop	r0
    1ff2:	1f 90       	pop	r1
    1ff4:	18 95       	reti

00001ff6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    1ff6:	80 91 55 02 	lds	r24, 0x0255
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	20 91 56 02 	lds	r18, 0x0256
}
    2000:	82 1b       	sub	r24, r18
    2002:	91 09       	sbc	r25, r1
    2004:	08 95       	ret

00002006 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2006:	90 91 56 02 	lds	r25, 0x0256
    200a:	80 91 55 02 	lds	r24, 0x0255
    200e:	98 17       	cp	r25, r24
    2010:	50 f4       	brcc	.+20     	; 0x2026 <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
    2012:	e9 2f       	mov	r30, r25
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	e9 5a       	subi	r30, 0xA9	; 169
    2018:	fd 4f       	sbci	r31, 0xFD	; 253
    201a:	20 81       	ld	r18, Z
    201c:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    201e:	9f 5f       	subi	r25, 0xFF	; 255
    2020:	90 93 56 02 	sts	0x0256, r25
    2024:	02 c0       	rjmp	.+4      	; 0x202a <_ZN7TwoWire4readEv+0x24>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    2026:	2f ef       	ldi	r18, 0xFF	; 255
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    202a:	c9 01       	movw	r24, r18
    202c:	08 95       	ret

0000202e <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    202e:	e0 91 56 02 	lds	r30, 0x0256
    2032:	80 91 55 02 	lds	r24, 0x0255
    2036:	e8 17       	cp	r30, r24
    2038:	30 f4       	brcc	.+12     	; 0x2046 <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	e9 5a       	subi	r30, 0xA9	; 169
    203e:	fd 4f       	sbci	r31, 0xFD	; 253
    2040:	80 81       	ld	r24, Z
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    2046:	8f ef       	ldi	r24, 0xFF	; 255
    2048:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    204a:	08 95       	ret

0000204c <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    204c:	08 95       	ret

0000204e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    204e:	cf 92       	push	r12
    2050:	df 92       	push	r13
    2052:	ef 92       	push	r14
    2054:	ff 92       	push	r15
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	7c 01       	movw	r14, r24
    2060:	26 2f       	mov	r18, r22
    2062:	97 2f       	mov	r25, r23
    2064:	8a 01       	movw	r16, r20
  if(transmitting){
    2066:	80 91 32 02 	lds	r24, 0x0232
    206a:	88 23       	and	r24, r24
    206c:	91 f0       	breq	.+36     	; 0x2092 <_ZN7TwoWire5writeEPKhj+0x44>
    206e:	c6 2f       	mov	r28, r22
    2070:	d7 2f       	mov	r29, r23
    2072:	6e 01       	movw	r12, r28
    2074:	c4 0e       	add	r12, r20
    2076:	d5 1e       	adc	r13, r21
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2078:	cc 15       	cp	r28, r12
    207a:	dd 05       	cpc	r29, r13
    207c:	71 f0       	breq	.+28     	; 0x209a <_ZN7TwoWire5writeEPKhj+0x4c>
      write(data[i]);
    207e:	69 91       	ld	r22, Y+
    2080:	d7 01       	movw	r26, r14
    2082:	ed 91       	ld	r30, X+
    2084:	fc 91       	ld	r31, X
    2086:	01 90       	ld	r0, Z+
    2088:	f0 81       	ld	r31, Z
    208a:	e0 2d       	mov	r30, r0
    208c:	c7 01       	movw	r24, r14
    208e:	09 95       	icall
    2090:	f3 cf       	rjmp	.-26     	; 0x2078 <_ZN7TwoWire5writeEPKhj+0x2a>
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    2092:	64 2f       	mov	r22, r20
    2094:	82 2f       	mov	r24, r18
    2096:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <twi_transmit>
  }
  return quantity;
}
    209a:	c8 01       	movw	r24, r16
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	0f 91       	pop	r16
    20a4:	ff 90       	pop	r15
    20a6:	ef 90       	pop	r14
    20a8:	df 90       	pop	r13
    20aa:	cf 90       	pop	r12
    20ac:	08 95       	ret

000020ae <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	1f 92       	push	r1
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    20ba:	20 91 32 02 	lds	r18, 0x0232
    20be:	22 23       	and	r18, r18
    20c0:	d1 f0       	breq	.+52     	; 0x20f6 <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    20c2:	20 91 33 02 	lds	r18, 0x0233
    20c6:	20 32       	cpi	r18, 0x20	; 32
    20c8:	40 f0       	brcs	.+16     	; 0x20da <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    20ca:	21 e0       	ldi	r18, 0x01	; 1
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	fc 01       	movw	r30, r24
    20d0:	33 83       	std	Z+3, r19	; 0x03
    20d2:	22 83       	std	Z+2, r18	; 0x02
      setWriteError();
      return 0;
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	15 c0       	rjmp	.+42     	; 0x2104 <_ZN7TwoWire5writeEh+0x56>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    20da:	80 91 34 02 	lds	r24, 0x0234
    20de:	e8 2f       	mov	r30, r24
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	eb 5c       	subi	r30, 0xCB	; 203
    20e4:	fd 4f       	sbci	r31, 0xFD	; 253
    20e6:	99 81       	ldd	r25, Y+1	; 0x01
    20e8:	90 83       	st	Z, r25
    ++txBufferIndex;
    20ea:	8f 5f       	subi	r24, 0xFF	; 255
    20ec:	80 93 34 02 	sts	0x0234, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    20f0:	80 93 33 02 	sts	0x0233, r24
    20f4:	05 c0       	rjmp	.+10     	; 0x2100 <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    20f6:	61 e0       	ldi	r22, 0x01	; 1
    20f8:	ce 01       	movw	r24, r28
    20fa:	01 96       	adiw	r24, 0x01	; 1
    20fc:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <twi_transmit>
  }
  return 1;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
}
    2104:	0f 90       	pop	r0
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	08 95       	ret

0000210c <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    210c:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    210e:	13 82       	std	Z+3, r1	; 0x03
    2110:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2112:	88 ee       	ldi	r24, 0xE8	; 232
    2114:	93 e0       	ldi	r25, 0x03	; 3
    2116:	a0 e0       	ldi	r26, 0x00	; 0
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	84 83       	std	Z+4, r24	; 0x04
    211c:	95 83       	std	Z+5, r25	; 0x05
    211e:	a6 83       	std	Z+6, r26	; 0x06
    2120:	b7 83       	std	Z+7, r27	; 0x07
    2122:	8b e3       	ldi	r24, 0x3B	; 59
    2124:	91 e0       	ldi	r25, 0x01	; 1
    2126:	91 83       	std	Z+1, r25	; 0x01
    2128:	80 83       	st	Z, r24
    212a:	08 95       	ret

0000212c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    212c:	86 e2       	ldi	r24, 0x26	; 38
    212e:	92 e0       	ldi	r25, 0x02	; 2
    2130:	0c 94 86 10 	jmp	0x210c	; 0x210c <_ZN7TwoWireC1Ev>

00002134 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    2134:	0e 94 00 15 	call	0x2a00	; 0x2a00 <abort>

00002138 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2138:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    213a:	91 8d       	ldd	r25, Z+25	; 0x19
    213c:	22 8d       	ldd	r18, Z+26	; 0x1a
    213e:	89 2f       	mov	r24, r25
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	80 5c       	subi	r24, 0xC0	; 192
    2144:	9f 4f       	sbci	r25, 0xFF	; 255
    2146:	82 1b       	sub	r24, r18
    2148:	91 09       	sbc	r25, r1
}
    214a:	8f 73       	andi	r24, 0x3F	; 63
    214c:	99 27       	eor	r25, r25
    214e:	08 95       	ret

00002150 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2150:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2152:	91 8d       	ldd	r25, Z+25	; 0x19
    2154:	82 8d       	ldd	r24, Z+26	; 0x1a
    2156:	98 17       	cp	r25, r24
    2158:	31 f0       	breq	.+12     	; 0x2166 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    215a:	82 8d       	ldd	r24, Z+26	; 0x1a
    215c:	e8 0f       	add	r30, r24
    215e:	f1 1d       	adc	r31, r1
    2160:	85 8d       	ldd	r24, Z+29	; 0x1d
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2166:	8f ef       	ldi	r24, 0xFF	; 255
    2168:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    216a:	08 95       	ret

0000216c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    216c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    216e:	91 8d       	ldd	r25, Z+25	; 0x19
    2170:	82 8d       	ldd	r24, Z+26	; 0x1a
    2172:	98 17       	cp	r25, r24
    2174:	61 f0       	breq	.+24     	; 0x218e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2176:	82 8d       	ldd	r24, Z+26	; 0x1a
    2178:	df 01       	movw	r26, r30
    217a:	a8 0f       	add	r26, r24
    217c:	b1 1d       	adc	r27, r1
    217e:	5d 96       	adiw	r26, 0x1d	; 29
    2180:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2182:	92 8d       	ldd	r25, Z+26	; 0x1a
    2184:	9f 5f       	subi	r25, 0xFF	; 255
    2186:	9f 73       	andi	r25, 0x3F	; 63
    2188:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    218e:	8f ef       	ldi	r24, 0xFF	; 255
    2190:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2192:	08 95       	ret

00002194 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2194:	8f e1       	ldi	r24, 0x1F	; 31
    2196:	92 e1       	ldi	r25, 0x12	; 18
    2198:	89 2b       	or	r24, r25
    219a:	49 f0       	breq	.+18     	; 0x21ae <_Z14serialEventRunv+0x1a>
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	89 2b       	or	r24, r25
    21a2:	29 f0       	breq	.+10     	; 0x21ae <_Z14serialEventRunv+0x1a>
    21a4:	0e 94 1f 12 	call	0x243e	; 0x243e <_Z17Serial0_availablev>
    21a8:	81 11       	cpse	r24, r1
    21aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    21ae:	08 95       	ret

000021b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    21b0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    21b2:	84 8d       	ldd	r24, Z+28	; 0x1c
    21b4:	df 01       	movw	r26, r30
    21b6:	a8 0f       	add	r26, r24
    21b8:	b1 1d       	adc	r27, r1
    21ba:	a3 5a       	subi	r26, 0xA3	; 163
    21bc:	bf 4f       	sbci	r27, 0xFF	; 255
    21be:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    21c0:	84 8d       	ldd	r24, Z+28	; 0x1c
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	01 96       	adiw	r24, 0x01	; 1
    21c6:	8f 73       	andi	r24, 0x3F	; 63
    21c8:	99 27       	eor	r25, r25
    21ca:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    21cc:	a6 89       	ldd	r26, Z+22	; 0x16
    21ce:	b7 89       	ldd	r27, Z+23	; 0x17
    21d0:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    21d2:	a0 89       	ldd	r26, Z+16	; 0x10
    21d4:	b1 89       	ldd	r27, Z+17	; 0x11
    21d6:	8c 91       	ld	r24, X
    21d8:	80 64       	ori	r24, 0x40	; 64
    21da:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    21dc:	93 8d       	ldd	r25, Z+27	; 0x1b
    21de:	84 8d       	ldd	r24, Z+28	; 0x1c
    21e0:	98 13       	cpse	r25, r24
    21e2:	06 c0       	rjmp	.+12     	; 0x21f0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    21e4:	02 88       	ldd	r0, Z+18	; 0x12
    21e6:	f3 89       	ldd	r31, Z+19	; 0x13
    21e8:	e0 2d       	mov	r30, r0
    21ea:	80 81       	ld	r24, Z
    21ec:	8f 7d       	andi	r24, 0xDF	; 223
    21ee:	80 83       	st	Z, r24
    21f0:	08 95       	ret

000021f2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    21f8:	88 8d       	ldd	r24, Y+24	; 0x18
    21fa:	88 23       	and	r24, r24
    21fc:	c9 f0       	breq	.+50     	; 0x2230 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    21fe:	ea 89       	ldd	r30, Y+18	; 0x12
    2200:	fb 89       	ldd	r31, Y+19	; 0x13
    2202:	80 81       	ld	r24, Z
    2204:	85 fd       	sbrc	r24, 5
    2206:	05 c0       	rjmp	.+10     	; 0x2212 <_ZN14HardwareSerial5flushEv+0x20>
    2208:	a8 89       	ldd	r26, Y+16	; 0x10
    220a:	b9 89       	ldd	r27, Y+17	; 0x11
    220c:	8c 91       	ld	r24, X
    220e:	86 fd       	sbrc	r24, 6
    2210:	0f c0       	rjmp	.+30     	; 0x2230 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	07 fc       	sbrc	r0, 7
    2216:	f5 cf       	rjmp	.-22     	; 0x2202 <_ZN14HardwareSerial5flushEv+0x10>
    2218:	80 81       	ld	r24, Z
    221a:	85 ff       	sbrs	r24, 5
    221c:	f2 cf       	rjmp	.-28     	; 0x2202 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    221e:	a8 89       	ldd	r26, Y+16	; 0x10
    2220:	b9 89       	ldd	r27, Y+17	; 0x11
    2222:	8c 91       	ld	r24, X
    2224:	85 ff       	sbrs	r24, 5
    2226:	ed cf       	rjmp	.-38     	; 0x2202 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2228:	ce 01       	movw	r24, r28
    222a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    222e:	e7 cf       	rjmp	.-50     	; 0x21fe <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2230:	df 91       	pop	r29
    2232:	cf 91       	pop	r28
    2234:	08 95       	ret

00002236 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    2236:	ef 92       	push	r14
    2238:	ff 92       	push	r15
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	ec 01       	movw	r28, r24
  _written = true;
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2248:	9b 8d       	ldd	r25, Y+27	; 0x1b
    224a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    224c:	98 13       	cpse	r25, r24
    224e:	05 c0       	rjmp	.+10     	; 0x225a <_ZN14HardwareSerial5writeEh+0x24>
    2250:	e8 89       	ldd	r30, Y+16	; 0x10
    2252:	f9 89       	ldd	r31, Y+17	; 0x11
    2254:	80 81       	ld	r24, Z
    2256:	85 fd       	sbrc	r24, 5
    2258:	24 c0       	rjmp	.+72     	; 0x22a2 <_ZN14HardwareSerial5writeEh+0x6c>
    225a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    225c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    225e:	10 e0       	ldi	r17, 0x00	; 0
    2260:	0f 5f       	subi	r16, 0xFF	; 255
    2262:	1f 4f       	sbci	r17, 0xFF	; 255
    2264:	0f 73       	andi	r16, 0x3F	; 63
    2266:	11 27       	eor	r17, r17
    2268:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    226a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    226c:	e8 12       	cpse	r14, r24
    226e:	0c c0       	rjmp	.+24     	; 0x2288 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	07 fc       	sbrc	r0, 7
    2274:	fa cf       	rjmp	.-12     	; 0x226a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2276:	e8 89       	ldd	r30, Y+16	; 0x10
    2278:	f9 89       	ldd	r31, Y+17	; 0x11
    227a:	80 81       	ld	r24, Z
    227c:	85 ff       	sbrs	r24, 5
    227e:	f5 cf       	rjmp	.-22     	; 0x226a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2280:	ce 01       	movw	r24, r28
    2282:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2286:	f1 cf       	rjmp	.-30     	; 0x226a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2288:	8b 8d       	ldd	r24, Y+27	; 0x1b
    228a:	fe 01       	movw	r30, r28
    228c:	e8 0f       	add	r30, r24
    228e:	f1 1d       	adc	r31, r1
    2290:	e3 5a       	subi	r30, 0xA3	; 163
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    2296:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2298:	ea 89       	ldd	r30, Y+18	; 0x12
    229a:	fb 89       	ldd	r31, Y+19	; 0x13
    229c:	80 81       	ld	r24, Z
    229e:	80 62       	ori	r24, 0x20	; 32
    22a0:	07 c0       	rjmp	.+14     	; 0x22b0 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    22a2:	ee 89       	ldd	r30, Y+22	; 0x16
    22a4:	ff 89       	ldd	r31, Y+23	; 0x17
    22a6:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    22a8:	e8 89       	ldd	r30, Y+16	; 0x10
    22aa:	f9 89       	ldd	r31, Y+17	; 0x11
    22ac:	80 81       	ld	r24, Z
    22ae:	80 64       	ori	r24, 0x40	; 64
    22b0:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	ff 90       	pop	r15
    22c0:	ef 90       	pop	r14
    22c2:	08 95       	ret

000022c4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    22c4:	cf 92       	push	r12
    22c6:	df 92       	push	r13
    22c8:	ef 92       	push	r14
    22ca:	ff 92       	push	r15
    22cc:	1f 93       	push	r17
    22ce:	cf 93       	push	r28
    22d0:	df 93       	push	r29
    22d2:	ec 01       	movw	r28, r24
    22d4:	6a 01       	movw	r12, r20
    22d6:	7b 01       	movw	r14, r22
    22d8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    22da:	e8 89       	ldd	r30, Y+16	; 0x10
    22dc:	f9 89       	ldd	r31, Y+17	; 0x11
    22de:	82 e0       	ldi	r24, 0x02	; 2
    22e0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    22e2:	41 15       	cp	r20, r1
    22e4:	51 4e       	sbci	r21, 0xE1	; 225
    22e6:	61 05       	cpc	r22, r1
    22e8:	71 05       	cpc	r23, r1
    22ea:	b1 f0       	breq	.+44     	; 0x2318 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    22ec:	60 e0       	ldi	r22, 0x00	; 0
    22ee:	79 e0       	ldi	r23, 0x09	; 9
    22f0:	8d e3       	ldi	r24, 0x3D	; 61
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	a7 01       	movw	r20, r14
    22f6:	96 01       	movw	r18, r12
    22f8:	0e 94 ab 13 	call	0x2756	; 0x2756 <__udivmodsi4>
    22fc:	da 01       	movw	r26, r20
    22fe:	c9 01       	movw	r24, r18
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	a1 09       	sbc	r26, r1
    2304:	b1 09       	sbc	r27, r1
    2306:	b6 95       	lsr	r27
    2308:	a7 95       	ror	r26
    230a:	97 95       	ror	r25
    230c:	87 95       	ror	r24
    230e:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2310:	41 15       	cp	r20, r1
    2312:	80 e1       	ldi	r24, 0x10	; 16
    2314:	58 07       	cpc	r21, r24
    2316:	a8 f0       	brcs	.+42     	; 0x2342 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2318:	e8 89       	ldd	r30, Y+16	; 0x10
    231a:	f9 89       	ldd	r31, Y+17	; 0x11
    231c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    231e:	60 e8       	ldi	r22, 0x80	; 128
    2320:	74 e8       	ldi	r23, 0x84	; 132
    2322:	8e e1       	ldi	r24, 0x1E	; 30
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	a7 01       	movw	r20, r14
    2328:	96 01       	movw	r18, r12
    232a:	0e 94 ab 13 	call	0x2756	; 0x2756 <__udivmodsi4>
    232e:	ba 01       	movw	r22, r20
    2330:	a9 01       	movw	r20, r18
    2332:	41 50       	subi	r20, 0x01	; 1
    2334:	51 09       	sbc	r21, r1
    2336:	61 09       	sbc	r22, r1
    2338:	71 09       	sbc	r23, r1
    233a:	76 95       	lsr	r23
    233c:	67 95       	ror	r22
    233e:	57 95       	ror	r21
    2340:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2342:	ec 85       	ldd	r30, Y+12	; 0x0c
    2344:	fd 85       	ldd	r31, Y+13	; 0x0d
    2346:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    2348:	ee 85       	ldd	r30, Y+14	; 0x0e
    234a:	ff 85       	ldd	r31, Y+15	; 0x0f
    234c:	40 83       	st	Z, r20

  _written = false;
    234e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2350:	ec 89       	ldd	r30, Y+20	; 0x14
    2352:	fd 89       	ldd	r31, Y+21	; 0x15
    2354:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2356:	ea 89       	ldd	r30, Y+18	; 0x12
    2358:	fb 89       	ldd	r31, Y+19	; 0x13
    235a:	80 81       	ld	r24, Z
    235c:	80 61       	ori	r24, 0x10	; 16
    235e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2360:	ea 89       	ldd	r30, Y+18	; 0x12
    2362:	fb 89       	ldd	r31, Y+19	; 0x13
    2364:	80 81       	ld	r24, Z
    2366:	88 60       	ori	r24, 0x08	; 8
    2368:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    236a:	ea 89       	ldd	r30, Y+18	; 0x12
    236c:	fb 89       	ldd	r31, Y+19	; 0x13
    236e:	80 81       	ld	r24, Z
    2370:	80 68       	ori	r24, 0x80	; 128
    2372:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2374:	ea 89       	ldd	r30, Y+18	; 0x12
    2376:	fb 89       	ldd	r31, Y+19	; 0x13
    2378:	80 81       	ld	r24, Z
    237a:	8f 7d       	andi	r24, 0xDF	; 223
    237c:	80 83       	st	Z, r24
}
    237e:	df 91       	pop	r29
    2380:	cf 91       	pop	r28
    2382:	1f 91       	pop	r17
    2384:	ff 90       	pop	r15
    2386:	ef 90       	pop	r14
    2388:	df 90       	pop	r13
    238a:	cf 90       	pop	r12
    238c:	08 95       	ret

0000238e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    238e:	1f 92       	push	r1
    2390:	0f 92       	push	r0
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	0f 92       	push	r0
    2396:	11 24       	eor	r1, r1
    2398:	2f 93       	push	r18
    239a:	8f 93       	push	r24
    239c:	9f 93       	push	r25
    239e:	ef 93       	push	r30
    23a0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    23a2:	e0 91 87 02 	lds	r30, 0x0287
    23a6:	f0 91 88 02 	lds	r31, 0x0288
    23aa:	80 81       	ld	r24, Z
    23ac:	e0 91 8d 02 	lds	r30, 0x028D
    23b0:	f0 91 8e 02 	lds	r31, 0x028E
    23b4:	82 fd       	sbrc	r24, 2
    23b6:	12 c0       	rjmp	.+36     	; 0x23dc <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    23b8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    23ba:	80 91 90 02 	lds	r24, 0x0290
    23be:	8f 5f       	subi	r24, 0xFF	; 255
    23c0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    23c2:	20 91 91 02 	lds	r18, 0x0291
    23c6:	82 17       	cp	r24, r18
    23c8:	51 f0       	breq	.+20     	; 0x23de <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    23ca:	e0 91 90 02 	lds	r30, 0x0290
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	e9 58       	subi	r30, 0x89	; 137
    23d2:	fd 4f       	sbci	r31, 0xFD	; 253
    23d4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    23d6:	80 93 90 02 	sts	0x0290, r24
    23da:	01 c0       	rjmp	.+2      	; 0x23de <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    23dc:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    23de:	ff 91       	pop	r31
    23e0:	ef 91       	pop	r30
    23e2:	9f 91       	pop	r25
    23e4:	8f 91       	pop	r24
    23e6:	2f 91       	pop	r18
    23e8:	0f 90       	pop	r0
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	0f 90       	pop	r0
    23ee:	1f 90       	pop	r1
    23f0:	18 95       	reti

000023f2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    23f2:	1f 92       	push	r1
    23f4:	0f 92       	push	r0
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	0f 92       	push	r0
    23fa:	11 24       	eor	r1, r1
    23fc:	2f 93       	push	r18
    23fe:	3f 93       	push	r19
    2400:	4f 93       	push	r20
    2402:	5f 93       	push	r21
    2404:	6f 93       	push	r22
    2406:	7f 93       	push	r23
    2408:	8f 93       	push	r24
    240a:	9f 93       	push	r25
    240c:	af 93       	push	r26
    240e:	bf 93       	push	r27
    2410:	ef 93       	push	r30
    2412:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2414:	87 e7       	ldi	r24, 0x77	; 119
    2416:	92 e0       	ldi	r25, 0x02	; 2
    2418:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    241c:	ff 91       	pop	r31
    241e:	ef 91       	pop	r30
    2420:	bf 91       	pop	r27
    2422:	af 91       	pop	r26
    2424:	9f 91       	pop	r25
    2426:	8f 91       	pop	r24
    2428:	7f 91       	pop	r23
    242a:	6f 91       	pop	r22
    242c:	5f 91       	pop	r21
    242e:	4f 91       	pop	r20
    2430:	3f 91       	pop	r19
    2432:	2f 91       	pop	r18
    2434:	0f 90       	pop	r0
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	0f 90       	pop	r0
    243a:	1f 90       	pop	r1
    243c:	18 95       	reti

0000243e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    243e:	87 e7       	ldi	r24, 0x77	; 119
    2440:	92 e0       	ldi	r25, 0x02	; 2
    2442:	0e 94 9c 10 	call	0x2138	; 0x2138 <_ZN14HardwareSerial9availableEv>
    2446:	21 e0       	ldi	r18, 0x01	; 1
    2448:	89 2b       	or	r24, r25
    244a:	09 f4       	brne	.+2      	; 0x244e <_Z17Serial0_availablev+0x10>
    244c:	20 e0       	ldi	r18, 0x00	; 0
}
    244e:	82 2f       	mov	r24, r18
    2450:	08 95       	ret

00002452 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2452:	e7 e7       	ldi	r30, 0x77	; 119
    2454:	f2 e0       	ldi	r31, 0x02	; 2
    2456:	13 82       	std	Z+3, r1	; 0x03
    2458:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    245a:	88 ee       	ldi	r24, 0xE8	; 232
    245c:	93 e0       	ldi	r25, 0x03	; 3
    245e:	a0 e0       	ldi	r26, 0x00	; 0
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	84 83       	std	Z+4, r24	; 0x04
    2464:	95 83       	std	Z+5, r25	; 0x05
    2466:	a6 83       	std	Z+6, r26	; 0x06
    2468:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    246a:	8b e4       	ldi	r24, 0x4B	; 75
    246c:	91 e0       	ldi	r25, 0x01	; 1
    246e:	91 83       	std	Z+1, r25	; 0x01
    2470:	80 83       	st	Z, r24
    2472:	85 ec       	ldi	r24, 0xC5	; 197
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	95 87       	std	Z+13, r25	; 0x0d
    2478:	84 87       	std	Z+12, r24	; 0x0c
    247a:	84 ec       	ldi	r24, 0xC4	; 196
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	97 87       	std	Z+15, r25	; 0x0f
    2480:	86 87       	std	Z+14, r24	; 0x0e
    2482:	80 ec       	ldi	r24, 0xC0	; 192
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	91 8b       	std	Z+17, r25	; 0x11
    2488:	80 8b       	std	Z+16, r24	; 0x10
    248a:	81 ec       	ldi	r24, 0xC1	; 193
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	93 8b       	std	Z+19, r25	; 0x13
    2490:	82 8b       	std	Z+18, r24	; 0x12
    2492:	82 ec       	ldi	r24, 0xC2	; 194
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	95 8b       	std	Z+21, r25	; 0x15
    2498:	84 8b       	std	Z+20, r24	; 0x14
    249a:	86 ec       	ldi	r24, 0xC6	; 198
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	97 8b       	std	Z+23, r25	; 0x17
    24a0:	86 8b       	std	Z+22, r24	; 0x16
    24a2:	11 8e       	std	Z+25, r1	; 0x19
    24a4:	12 8e       	std	Z+26, r1	; 0x1a
    24a6:	13 8e       	std	Z+27, r1	; 0x1b
    24a8:	14 8e       	std	Z+28, r1	; 0x1c
    24aa:	08 95       	ret

000024ac <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    24ac:	08 95       	ret

000024ae <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    24ae:	0e 94 db 12 	call	0x25b6	; 0x25b6 <init>

	initVariant();
    24b2:	0e 94 56 12 	call	0x24ac	; 0x24ac <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    24b6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    24ba:	ca ec       	ldi	r28, 0xCA	; 202
    24bc:	d0 e1       	ldi	r29, 0x10	; 16
#endif
	
	setup();
    
	for (;;) {
		loop();
    24be:	0e 94 18 03 	call	0x630	; 0x630 <loop>
		if (serialEventRun) serialEventRun();
    24c2:	20 97       	sbiw	r28, 0x00	; 0
    24c4:	e1 f3       	breq	.-8      	; 0x24be <main+0x10>
    24c6:	0e 94 ca 10 	call	0x2194	; 0x2194 <_Z14serialEventRunv>
    24ca:	f9 cf       	rjmp	.-14     	; 0x24be <main+0x10>

000024cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    24cc:	cf 92       	push	r12
    24ce:	df 92       	push	r13
    24d0:	ef 92       	push	r14
    24d2:	ff 92       	push	r15
    24d4:	0f 93       	push	r16
    24d6:	1f 93       	push	r17
    24d8:	cf 93       	push	r28
    24da:	df 93       	push	r29
    24dc:	6c 01       	movw	r12, r24
    24de:	7a 01       	movw	r14, r20
    24e0:	8b 01       	movw	r16, r22
  size_t n = 0;
    24e2:	c0 e0       	ldi	r28, 0x00	; 0
    24e4:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    24e6:	ce 15       	cp	r28, r14
    24e8:	df 05       	cpc	r29, r15
    24ea:	89 f0       	breq	.+34     	; 0x250e <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
    24ec:	d8 01       	movw	r26, r16
    24ee:	6d 91       	ld	r22, X+
    24f0:	8d 01       	movw	r16, r26
    24f2:	d6 01       	movw	r26, r12
    24f4:	ed 91       	ld	r30, X+
    24f6:	fc 91       	ld	r31, X
    24f8:	01 90       	ld	r0, Z+
    24fa:	f0 81       	ld	r31, Z
    24fc:	e0 2d       	mov	r30, r0
    24fe:	c6 01       	movw	r24, r12
    2500:	09 95       	icall
    2502:	89 2b       	or	r24, r25
    2504:	11 f4       	brne	.+4      	; 0x250a <_ZN5Print5writeEPKhj+0x3e>
    2506:	7e 01       	movw	r14, r28
    2508:	02 c0       	rjmp	.+4      	; 0x250e <_ZN5Print5writeEPKhj+0x42>
    250a:	21 96       	adiw	r28, 0x01	; 1
    250c:	ec cf       	rjmp	.-40     	; 0x24e6 <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
    250e:	c7 01       	movw	r24, r14
    2510:	df 91       	pop	r29
    2512:	cf 91       	pop	r28
    2514:	1f 91       	pop	r17
    2516:	0f 91       	pop	r16
    2518:	ff 90       	pop	r15
    251a:	ef 90       	pop	r14
    251c:	df 90       	pop	r13
    251e:	cf 90       	pop	r12
    2520:	08 95       	ret

00002522 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2522:	1f 92       	push	r1
    2524:	0f 92       	push	r0
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	0f 92       	push	r0
    252a:	11 24       	eor	r1, r1
    252c:	2f 93       	push	r18
    252e:	3f 93       	push	r19
    2530:	8f 93       	push	r24
    2532:	9f 93       	push	r25
    2534:	af 93       	push	r26
    2536:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2538:	80 91 15 03 	lds	r24, 0x0315
    253c:	90 91 16 03 	lds	r25, 0x0316
    2540:	a0 91 17 03 	lds	r26, 0x0317
    2544:	b0 91 18 03 	lds	r27, 0x0318
	unsigned char f = timer0_fract;
    2548:	30 91 14 03 	lds	r19, 0x0314

	m += MILLIS_INC;
	f += FRACT_INC;
    254c:	23 e0       	ldi	r18, 0x03	; 3
    254e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    2550:	2d 37       	cpi	r18, 0x7D	; 125
    2552:	20 f4       	brcc	.+8      	; 0x255c <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2554:	01 96       	adiw	r24, 0x01	; 1
    2556:	a1 1d       	adc	r26, r1
    2558:	b1 1d       	adc	r27, r1
    255a:	05 c0       	rjmp	.+10     	; 0x2566 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    255c:	26 e8       	ldi	r18, 0x86	; 134
    255e:	23 0f       	add	r18, r19
		m += 1;
    2560:	02 96       	adiw	r24, 0x02	; 2
    2562:	a1 1d       	adc	r26, r1
    2564:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2566:	20 93 14 03 	sts	0x0314, r18
	timer0_millis = m;
    256a:	80 93 15 03 	sts	0x0315, r24
    256e:	90 93 16 03 	sts	0x0316, r25
    2572:	a0 93 17 03 	sts	0x0317, r26
    2576:	b0 93 18 03 	sts	0x0318, r27
	timer0_overflow_count++;
    257a:	80 91 19 03 	lds	r24, 0x0319
    257e:	90 91 1a 03 	lds	r25, 0x031A
    2582:	a0 91 1b 03 	lds	r26, 0x031B
    2586:	b0 91 1c 03 	lds	r27, 0x031C
    258a:	01 96       	adiw	r24, 0x01	; 1
    258c:	a1 1d       	adc	r26, r1
    258e:	b1 1d       	adc	r27, r1
    2590:	80 93 19 03 	sts	0x0319, r24
    2594:	90 93 1a 03 	sts	0x031A, r25
    2598:	a0 93 1b 03 	sts	0x031B, r26
    259c:	b0 93 1c 03 	sts	0x031C, r27
}
    25a0:	bf 91       	pop	r27
    25a2:	af 91       	pop	r26
    25a4:	9f 91       	pop	r25
    25a6:	8f 91       	pop	r24
    25a8:	3f 91       	pop	r19
    25aa:	2f 91       	pop	r18
    25ac:	0f 90       	pop	r0
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	0f 90       	pop	r0
    25b2:	1f 90       	pop	r1
    25b4:	18 95       	reti

000025b6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    25b6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    25b8:	84 b5       	in	r24, 0x24	; 36
    25ba:	82 60       	ori	r24, 0x02	; 2
    25bc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    25be:	84 b5       	in	r24, 0x24	; 36
    25c0:	81 60       	ori	r24, 0x01	; 1
    25c2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    25c4:	85 b5       	in	r24, 0x25	; 37
    25c6:	82 60       	ori	r24, 0x02	; 2
    25c8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    25ca:	85 b5       	in	r24, 0x25	; 37
    25cc:	81 60       	ori	r24, 0x01	; 1
    25ce:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    25d0:	ee e6       	ldi	r30, 0x6E	; 110
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	81 60       	ori	r24, 0x01	; 1
    25d8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    25da:	e1 e8       	ldi	r30, 0x81	; 129
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    25e0:	80 81       	ld	r24, Z
    25e2:	82 60       	ori	r24, 0x02	; 2
    25e4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    25e6:	80 81       	ld	r24, Z
    25e8:	81 60       	ori	r24, 0x01	; 1
    25ea:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    25ec:	e0 e8       	ldi	r30, 0x80	; 128
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	81 60       	ori	r24, 0x01	; 1
    25f4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    25f6:	e1 eb       	ldi	r30, 0xB1	; 177
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	84 60       	ori	r24, 0x04	; 4
    25fe:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2600:	e0 eb       	ldi	r30, 0xB0	; 176
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	81 60       	ori	r24, 0x01	; 1
    2608:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    260a:	ea e7       	ldi	r30, 0x7A	; 122
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	84 60       	ori	r24, 0x04	; 4
    2612:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2614:	80 81       	ld	r24, Z
    2616:	82 60       	ori	r24, 0x02	; 2
    2618:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    261a:	80 81       	ld	r24, Z
    261c:	81 60       	ori	r24, 0x01	; 1
    261e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2620:	80 81       	ld	r24, Z
    2622:	80 68       	ori	r24, 0x80	; 128
    2624:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2626:	10 92 c1 00 	sts	0x00C1, r1
    262a:	08 95       	ret

0000262c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    262c:	83 30       	cpi	r24, 0x03	; 3
    262e:	81 f0       	breq	.+32     	; 0x2650 <turnOffPWM+0x24>
    2630:	28 f4       	brcc	.+10     	; 0x263c <turnOffPWM+0x10>
    2632:	81 30       	cpi	r24, 0x01	; 1
    2634:	99 f0       	breq	.+38     	; 0x265c <turnOffPWM+0x30>
    2636:	82 30       	cpi	r24, 0x02	; 2
    2638:	a1 f0       	breq	.+40     	; 0x2662 <turnOffPWM+0x36>
    263a:	08 95       	ret
    263c:	87 30       	cpi	r24, 0x07	; 7
    263e:	a9 f0       	breq	.+42     	; 0x266a <turnOffPWM+0x3e>
    2640:	88 30       	cpi	r24, 0x08	; 8
    2642:	b9 f0       	breq	.+46     	; 0x2672 <turnOffPWM+0x46>
    2644:	84 30       	cpi	r24, 0x04	; 4
    2646:	d1 f4       	brne	.+52     	; 0x267c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2648:	80 91 80 00 	lds	r24, 0x0080
    264c:	8f 7d       	andi	r24, 0xDF	; 223
    264e:	03 c0       	rjmp	.+6      	; 0x2656 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2650:	80 91 80 00 	lds	r24, 0x0080
    2654:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2656:	80 93 80 00 	sts	0x0080, r24
    265a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    265c:	84 b5       	in	r24, 0x24	; 36
    265e:	8f 77       	andi	r24, 0x7F	; 127
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2662:	84 b5       	in	r24, 0x24	; 36
    2664:	8f 7d       	andi	r24, 0xDF	; 223
    2666:	84 bd       	out	0x24, r24	; 36
    2668:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    266a:	80 91 b0 00 	lds	r24, 0x00B0
    266e:	8f 77       	andi	r24, 0x7F	; 127
    2670:	03 c0       	rjmp	.+6      	; 0x2678 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2672:	80 91 b0 00 	lds	r24, 0x00B0
    2676:	8f 7d       	andi	r24, 0xDF	; 223
    2678:	80 93 b0 00 	sts	0x00B0, r24
    267c:	08 95       	ret

0000267e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	fc 01       	movw	r30, r24
    2686:	e8 57       	subi	r30, 0x78	; 120
    2688:	fa 4f       	sbci	r31, 0xFA	; 250
    268a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    268c:	fc 01       	movw	r30, r24
    268e:	e4 56       	subi	r30, 0x64	; 100
    2690:	fa 4f       	sbci	r31, 0xFA	; 250
    2692:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2694:	88 23       	and	r24, r24
    2696:	61 f1       	breq	.+88     	; 0x26f0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	88 0f       	add	r24, r24
    269c:	99 1f       	adc	r25, r25
    269e:	fc 01       	movw	r30, r24
    26a0:	e6 54       	subi	r30, 0x46	; 70
    26a2:	fa 4f       	sbci	r31, 0xFA	; 250
    26a4:	c5 91       	lpm	r28, Z+
    26a6:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    26a8:	fc 01       	movw	r30, r24
    26aa:	e0 55       	subi	r30, 0x50	; 80
    26ac:	fa 4f       	sbci	r31, 0xFA	; 250
    26ae:	a5 91       	lpm	r26, Z+
    26b0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    26b2:	61 11       	cpse	r22, r1
    26b4:	09 c0       	rjmp	.+18     	; 0x26c8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    26b6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    26b8:	f8 94       	cli
		*reg &= ~bit;
    26ba:	88 81       	ld	r24, Y
    26bc:	20 95       	com	r18
    26be:	82 23       	and	r24, r18
    26c0:	88 83       	st	Y, r24
		*out &= ~bit;
    26c2:	ec 91       	ld	r30, X
    26c4:	2e 23       	and	r18, r30
    26c6:	0b c0       	rjmp	.+22     	; 0x26de <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    26c8:	62 30       	cpi	r22, 0x02	; 2
    26ca:	61 f4       	brne	.+24     	; 0x26e4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    26cc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    26ce:	f8 94       	cli
		*reg &= ~bit;
    26d0:	38 81       	ld	r19, Y
    26d2:	82 2f       	mov	r24, r18
    26d4:	80 95       	com	r24
    26d6:	83 23       	and	r24, r19
    26d8:	88 83       	st	Y, r24
		*out |= bit;
    26da:	ec 91       	ld	r30, X
    26dc:	2e 2b       	or	r18, r30
    26de:	2c 93       	st	X, r18
		SREG = oldSREG;
    26e0:	9f bf       	out	0x3f, r25	; 63
    26e2:	06 c0       	rjmp	.+12     	; 0x26f0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    26e4:	8f b7       	in	r24, 0x3f	; 63
                cli();
    26e6:	f8 94       	cli
		*reg |= bit;
    26e8:	e8 81       	ld	r30, Y
    26ea:	2e 2b       	or	r18, r30
    26ec:	28 83       	st	Y, r18
		SREG = oldSREG;
    26ee:	8f bf       	out	0x3f, r24	; 63
	}
}
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	08 95       	ret

000026f6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    26f6:	1f 93       	push	r17
    26f8:	cf 93       	push	r28
    26fa:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    26fc:	28 2f       	mov	r18, r24
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	f9 01       	movw	r30, r18
    2702:	ec 58       	subi	r30, 0x8C	; 140
    2704:	fa 4f       	sbci	r31, 0xFA	; 250
    2706:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2708:	f9 01       	movw	r30, r18
    270a:	e8 57       	subi	r30, 0x78	; 120
    270c:	fa 4f       	sbci	r31, 0xFA	; 250
    270e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2710:	f9 01       	movw	r30, r18
    2712:	e4 56       	subi	r30, 0x64	; 100
    2714:	fa 4f       	sbci	r31, 0xFA	; 250
    2716:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2718:	cc 23       	and	r28, r28
    271a:	c9 f0       	breq	.+50     	; 0x274e <digitalWrite+0x58>
    271c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    271e:	81 11       	cpse	r24, r1
    2720:	0e 94 16 13 	call	0x262c	; 0x262c <turnOffPWM>

	out = portOutputRegister(port);
    2724:	ec 2f       	mov	r30, r28
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	ee 0f       	add	r30, r30
    272a:	ff 1f       	adc	r31, r31
    272c:	e0 55       	subi	r30, 0x50	; 80
    272e:	fa 4f       	sbci	r31, 0xFA	; 250
    2730:	a5 91       	lpm	r26, Z+
    2732:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2734:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2736:	f8 94       	cli

	if (val == LOW) {
    2738:	11 11       	cpse	r17, r1
    273a:	05 c0       	rjmp	.+10     	; 0x2746 <digitalWrite+0x50>
		*out &= ~bit;
    273c:	9c 91       	ld	r25, X
    273e:	ed 2f       	mov	r30, r29
    2740:	e0 95       	com	r30
    2742:	e9 23       	and	r30, r25
    2744:	02 c0       	rjmp	.+4      	; 0x274a <digitalWrite+0x54>
	} else {
		*out |= bit;
    2746:	ec 91       	ld	r30, X
    2748:	ed 2b       	or	r30, r29
    274a:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    274c:	8f bf       	out	0x3f, r24	; 63
}
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	1f 91       	pop	r17
    2754:	08 95       	ret

00002756 <__udivmodsi4>:
    2756:	a1 e2       	ldi	r26, 0x21	; 33
    2758:	1a 2e       	mov	r1, r26
    275a:	aa 1b       	sub	r26, r26
    275c:	bb 1b       	sub	r27, r27
    275e:	fd 01       	movw	r30, r26
    2760:	0d c0       	rjmp	.+26     	; 0x277c <__udivmodsi4_ep>

00002762 <__udivmodsi4_loop>:
    2762:	aa 1f       	adc	r26, r26
    2764:	bb 1f       	adc	r27, r27
    2766:	ee 1f       	adc	r30, r30
    2768:	ff 1f       	adc	r31, r31
    276a:	a2 17       	cp	r26, r18
    276c:	b3 07       	cpc	r27, r19
    276e:	e4 07       	cpc	r30, r20
    2770:	f5 07       	cpc	r31, r21
    2772:	20 f0       	brcs	.+8      	; 0x277c <__udivmodsi4_ep>
    2774:	a2 1b       	sub	r26, r18
    2776:	b3 0b       	sbc	r27, r19
    2778:	e4 0b       	sbc	r30, r20
    277a:	f5 0b       	sbc	r31, r21

0000277c <__udivmodsi4_ep>:
    277c:	66 1f       	adc	r22, r22
    277e:	77 1f       	adc	r23, r23
    2780:	88 1f       	adc	r24, r24
    2782:	99 1f       	adc	r25, r25
    2784:	1a 94       	dec	r1
    2786:	69 f7       	brne	.-38     	; 0x2762 <__udivmodsi4_loop>
    2788:	60 95       	com	r22
    278a:	70 95       	com	r23
    278c:	80 95       	com	r24
    278e:	90 95       	com	r25
    2790:	9b 01       	movw	r18, r22
    2792:	ac 01       	movw	r20, r24
    2794:	bd 01       	movw	r22, r26
    2796:	cf 01       	movw	r24, r30
    2798:	08 95       	ret

0000279a <__tablejump2__>:
    279a:	ee 0f       	add	r30, r30
    279c:	ff 1f       	adc	r31, r31
    279e:	05 90       	lpm	r0, Z+
    27a0:	f4 91       	lpm	r31, Z
    27a2:	e0 2d       	mov	r30, r0
    27a4:	09 94       	ijmp

000027a6 <malloc>:
    27a6:	cf 93       	push	r28
    27a8:	df 93       	push	r29
    27aa:	82 30       	cpi	r24, 0x02	; 2
    27ac:	91 05       	cpc	r25, r1
    27ae:	10 f4       	brcc	.+4      	; 0x27b4 <malloc+0xe>
    27b0:	82 e0       	ldi	r24, 0x02	; 2
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	e0 91 1f 03 	lds	r30, 0x031F
    27b8:	f0 91 20 03 	lds	r31, 0x0320
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	c0 e0       	ldi	r28, 0x00	; 0
    27c2:	d0 e0       	ldi	r29, 0x00	; 0
    27c4:	30 97       	sbiw	r30, 0x00	; 0
    27c6:	11 f1       	breq	.+68     	; 0x280c <malloc+0x66>
    27c8:	40 81       	ld	r20, Z
    27ca:	51 81       	ldd	r21, Z+1	; 0x01
    27cc:	48 17       	cp	r20, r24
    27ce:	59 07       	cpc	r21, r25
    27d0:	c0 f0       	brcs	.+48     	; 0x2802 <malloc+0x5c>
    27d2:	48 17       	cp	r20, r24
    27d4:	59 07       	cpc	r21, r25
    27d6:	61 f4       	brne	.+24     	; 0x27f0 <malloc+0x4a>
    27d8:	82 81       	ldd	r24, Z+2	; 0x02
    27da:	93 81       	ldd	r25, Z+3	; 0x03
    27dc:	20 97       	sbiw	r28, 0x00	; 0
    27de:	19 f0       	breq	.+6      	; 0x27e6 <malloc+0x40>
    27e0:	9b 83       	std	Y+3, r25	; 0x03
    27e2:	8a 83       	std	Y+2, r24	; 0x02
    27e4:	2b c0       	rjmp	.+86     	; 0x283c <malloc+0x96>
    27e6:	90 93 20 03 	sts	0x0320, r25
    27ea:	80 93 1f 03 	sts	0x031F, r24
    27ee:	26 c0       	rjmp	.+76     	; 0x283c <malloc+0x96>
    27f0:	21 15       	cp	r18, r1
    27f2:	31 05       	cpc	r19, r1
    27f4:	19 f0       	breq	.+6      	; 0x27fc <malloc+0x56>
    27f6:	42 17       	cp	r20, r18
    27f8:	53 07       	cpc	r21, r19
    27fa:	18 f4       	brcc	.+6      	; 0x2802 <malloc+0x5c>
    27fc:	9a 01       	movw	r18, r20
    27fe:	be 01       	movw	r22, r28
    2800:	df 01       	movw	r26, r30
    2802:	ef 01       	movw	r28, r30
    2804:	02 80       	ldd	r0, Z+2	; 0x02
    2806:	f3 81       	ldd	r31, Z+3	; 0x03
    2808:	e0 2d       	mov	r30, r0
    280a:	dc cf       	rjmp	.-72     	; 0x27c4 <malloc+0x1e>
    280c:	21 15       	cp	r18, r1
    280e:	31 05       	cpc	r19, r1
    2810:	09 f1       	breq	.+66     	; 0x2854 <malloc+0xae>
    2812:	28 1b       	sub	r18, r24
    2814:	39 0b       	sbc	r19, r25
    2816:	24 30       	cpi	r18, 0x04	; 4
    2818:	31 05       	cpc	r19, r1
    281a:	90 f4       	brcc	.+36     	; 0x2840 <malloc+0x9a>
    281c:	12 96       	adiw	r26, 0x02	; 2
    281e:	8d 91       	ld	r24, X+
    2820:	9c 91       	ld	r25, X
    2822:	13 97       	sbiw	r26, 0x03	; 3
    2824:	61 15       	cp	r22, r1
    2826:	71 05       	cpc	r23, r1
    2828:	21 f0       	breq	.+8      	; 0x2832 <malloc+0x8c>
    282a:	fb 01       	movw	r30, r22
    282c:	93 83       	std	Z+3, r25	; 0x03
    282e:	82 83       	std	Z+2, r24	; 0x02
    2830:	04 c0       	rjmp	.+8      	; 0x283a <malloc+0x94>
    2832:	90 93 20 03 	sts	0x0320, r25
    2836:	80 93 1f 03 	sts	0x031F, r24
    283a:	fd 01       	movw	r30, r26
    283c:	32 96       	adiw	r30, 0x02	; 2
    283e:	44 c0       	rjmp	.+136    	; 0x28c8 <malloc+0x122>
    2840:	fd 01       	movw	r30, r26
    2842:	e2 0f       	add	r30, r18
    2844:	f3 1f       	adc	r31, r19
    2846:	81 93       	st	Z+, r24
    2848:	91 93       	st	Z+, r25
    284a:	22 50       	subi	r18, 0x02	; 2
    284c:	31 09       	sbc	r19, r1
    284e:	2d 93       	st	X+, r18
    2850:	3c 93       	st	X, r19
    2852:	3a c0       	rjmp	.+116    	; 0x28c8 <malloc+0x122>
    2854:	20 91 1d 03 	lds	r18, 0x031D
    2858:	30 91 1e 03 	lds	r19, 0x031E
    285c:	23 2b       	or	r18, r19
    285e:	41 f4       	brne	.+16     	; 0x2870 <malloc+0xca>
    2860:	20 91 02 01 	lds	r18, 0x0102
    2864:	30 91 03 01 	lds	r19, 0x0103
    2868:	30 93 1e 03 	sts	0x031E, r19
    286c:	20 93 1d 03 	sts	0x031D, r18
    2870:	20 91 00 01 	lds	r18, 0x0100
    2874:	30 91 01 01 	lds	r19, 0x0101
    2878:	21 15       	cp	r18, r1
    287a:	31 05       	cpc	r19, r1
    287c:	41 f4       	brne	.+16     	; 0x288e <malloc+0xe8>
    287e:	2d b7       	in	r18, 0x3d	; 61
    2880:	3e b7       	in	r19, 0x3e	; 62
    2882:	40 91 04 01 	lds	r20, 0x0104
    2886:	50 91 05 01 	lds	r21, 0x0105
    288a:	24 1b       	sub	r18, r20
    288c:	35 0b       	sbc	r19, r21
    288e:	e0 91 1d 03 	lds	r30, 0x031D
    2892:	f0 91 1e 03 	lds	r31, 0x031E
    2896:	e2 17       	cp	r30, r18
    2898:	f3 07       	cpc	r31, r19
    289a:	a0 f4       	brcc	.+40     	; 0x28c4 <malloc+0x11e>
    289c:	2e 1b       	sub	r18, r30
    289e:	3f 0b       	sbc	r19, r31
    28a0:	28 17       	cp	r18, r24
    28a2:	39 07       	cpc	r19, r25
    28a4:	78 f0       	brcs	.+30     	; 0x28c4 <malloc+0x11e>
    28a6:	ac 01       	movw	r20, r24
    28a8:	4e 5f       	subi	r20, 0xFE	; 254
    28aa:	5f 4f       	sbci	r21, 0xFF	; 255
    28ac:	24 17       	cp	r18, r20
    28ae:	35 07       	cpc	r19, r21
    28b0:	48 f0       	brcs	.+18     	; 0x28c4 <malloc+0x11e>
    28b2:	4e 0f       	add	r20, r30
    28b4:	5f 1f       	adc	r21, r31
    28b6:	50 93 1e 03 	sts	0x031E, r21
    28ba:	40 93 1d 03 	sts	0x031D, r20
    28be:	81 93       	st	Z+, r24
    28c0:	91 93       	st	Z+, r25
    28c2:	02 c0       	rjmp	.+4      	; 0x28c8 <malloc+0x122>
    28c4:	e0 e0       	ldi	r30, 0x00	; 0
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	cf 01       	movw	r24, r30
    28ca:	df 91       	pop	r29
    28cc:	cf 91       	pop	r28
    28ce:	08 95       	ret

000028d0 <free>:
    28d0:	0f 93       	push	r16
    28d2:	1f 93       	push	r17
    28d4:	cf 93       	push	r28
    28d6:	df 93       	push	r29
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	09 f4       	brne	.+2      	; 0x28de <free+0xe>
    28dc:	8c c0       	rjmp	.+280    	; 0x29f6 <free+0x126>
    28de:	fc 01       	movw	r30, r24
    28e0:	32 97       	sbiw	r30, 0x02	; 2
    28e2:	13 82       	std	Z+3, r1	; 0x03
    28e4:	12 82       	std	Z+2, r1	; 0x02
    28e6:	00 91 1f 03 	lds	r16, 0x031F
    28ea:	10 91 20 03 	lds	r17, 0x0320
    28ee:	01 15       	cp	r16, r1
    28f0:	11 05       	cpc	r17, r1
    28f2:	81 f4       	brne	.+32     	; 0x2914 <free+0x44>
    28f4:	20 81       	ld	r18, Z
    28f6:	31 81       	ldd	r19, Z+1	; 0x01
    28f8:	82 0f       	add	r24, r18
    28fa:	93 1f       	adc	r25, r19
    28fc:	20 91 1d 03 	lds	r18, 0x031D
    2900:	30 91 1e 03 	lds	r19, 0x031E
    2904:	28 17       	cp	r18, r24
    2906:	39 07       	cpc	r19, r25
    2908:	79 f5       	brne	.+94     	; 0x2968 <free+0x98>
    290a:	f0 93 1e 03 	sts	0x031E, r31
    290e:	e0 93 1d 03 	sts	0x031D, r30
    2912:	71 c0       	rjmp	.+226    	; 0x29f6 <free+0x126>
    2914:	d8 01       	movw	r26, r16
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	50 e0       	ldi	r21, 0x00	; 0
    291a:	ae 17       	cp	r26, r30
    291c:	bf 07       	cpc	r27, r31
    291e:	50 f4       	brcc	.+20     	; 0x2934 <free+0x64>
    2920:	12 96       	adiw	r26, 0x02	; 2
    2922:	2d 91       	ld	r18, X+
    2924:	3c 91       	ld	r19, X
    2926:	13 97       	sbiw	r26, 0x03	; 3
    2928:	ad 01       	movw	r20, r26
    292a:	21 15       	cp	r18, r1
    292c:	31 05       	cpc	r19, r1
    292e:	09 f1       	breq	.+66     	; 0x2972 <free+0xa2>
    2930:	d9 01       	movw	r26, r18
    2932:	f3 cf       	rjmp	.-26     	; 0x291a <free+0x4a>
    2934:	9d 01       	movw	r18, r26
    2936:	da 01       	movw	r26, r20
    2938:	33 83       	std	Z+3, r19	; 0x03
    293a:	22 83       	std	Z+2, r18	; 0x02
    293c:	60 81       	ld	r22, Z
    293e:	71 81       	ldd	r23, Z+1	; 0x01
    2940:	86 0f       	add	r24, r22
    2942:	97 1f       	adc	r25, r23
    2944:	82 17       	cp	r24, r18
    2946:	93 07       	cpc	r25, r19
    2948:	69 f4       	brne	.+26     	; 0x2964 <free+0x94>
    294a:	ec 01       	movw	r28, r24
    294c:	28 81       	ld	r18, Y
    294e:	39 81       	ldd	r19, Y+1	; 0x01
    2950:	26 0f       	add	r18, r22
    2952:	37 1f       	adc	r19, r23
    2954:	2e 5f       	subi	r18, 0xFE	; 254
    2956:	3f 4f       	sbci	r19, 0xFF	; 255
    2958:	31 83       	std	Z+1, r19	; 0x01
    295a:	20 83       	st	Z, r18
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	9b 81       	ldd	r25, Y+3	; 0x03
    2960:	93 83       	std	Z+3, r25	; 0x03
    2962:	82 83       	std	Z+2, r24	; 0x02
    2964:	45 2b       	or	r20, r21
    2966:	29 f4       	brne	.+10     	; 0x2972 <free+0xa2>
    2968:	f0 93 20 03 	sts	0x0320, r31
    296c:	e0 93 1f 03 	sts	0x031F, r30
    2970:	42 c0       	rjmp	.+132    	; 0x29f6 <free+0x126>
    2972:	13 96       	adiw	r26, 0x03	; 3
    2974:	fc 93       	st	X, r31
    2976:	ee 93       	st	-X, r30
    2978:	12 97       	sbiw	r26, 0x02	; 2
    297a:	ed 01       	movw	r28, r26
    297c:	49 91       	ld	r20, Y+
    297e:	59 91       	ld	r21, Y+
    2980:	9e 01       	movw	r18, r28
    2982:	24 0f       	add	r18, r20
    2984:	35 1f       	adc	r19, r21
    2986:	e2 17       	cp	r30, r18
    2988:	f3 07       	cpc	r31, r19
    298a:	71 f4       	brne	.+28     	; 0x29a8 <free+0xd8>
    298c:	80 81       	ld	r24, Z
    298e:	91 81       	ldd	r25, Z+1	; 0x01
    2990:	84 0f       	add	r24, r20
    2992:	95 1f       	adc	r25, r21
    2994:	02 96       	adiw	r24, 0x02	; 2
    2996:	11 96       	adiw	r26, 0x01	; 1
    2998:	9c 93       	st	X, r25
    299a:	8e 93       	st	-X, r24
    299c:	82 81       	ldd	r24, Z+2	; 0x02
    299e:	93 81       	ldd	r25, Z+3	; 0x03
    29a0:	13 96       	adiw	r26, 0x03	; 3
    29a2:	9c 93       	st	X, r25
    29a4:	8e 93       	st	-X, r24
    29a6:	12 97       	sbiw	r26, 0x02	; 2
    29a8:	e0 e0       	ldi	r30, 0x00	; 0
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	d8 01       	movw	r26, r16
    29ae:	12 96       	adiw	r26, 0x02	; 2
    29b0:	8d 91       	ld	r24, X+
    29b2:	9c 91       	ld	r25, X
    29b4:	13 97       	sbiw	r26, 0x03	; 3
    29b6:	00 97       	sbiw	r24, 0x00	; 0
    29b8:	19 f0       	breq	.+6      	; 0x29c0 <free+0xf0>
    29ba:	f8 01       	movw	r30, r16
    29bc:	8c 01       	movw	r16, r24
    29be:	f6 cf       	rjmp	.-20     	; 0x29ac <free+0xdc>
    29c0:	8d 91       	ld	r24, X+
    29c2:	9c 91       	ld	r25, X
    29c4:	98 01       	movw	r18, r16
    29c6:	2e 5f       	subi	r18, 0xFE	; 254
    29c8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ca:	82 0f       	add	r24, r18
    29cc:	93 1f       	adc	r25, r19
    29ce:	20 91 1d 03 	lds	r18, 0x031D
    29d2:	30 91 1e 03 	lds	r19, 0x031E
    29d6:	28 17       	cp	r18, r24
    29d8:	39 07       	cpc	r19, r25
    29da:	69 f4       	brne	.+26     	; 0x29f6 <free+0x126>
    29dc:	30 97       	sbiw	r30, 0x00	; 0
    29de:	29 f4       	brne	.+10     	; 0x29ea <free+0x11a>
    29e0:	10 92 20 03 	sts	0x0320, r1
    29e4:	10 92 1f 03 	sts	0x031F, r1
    29e8:	02 c0       	rjmp	.+4      	; 0x29ee <free+0x11e>
    29ea:	13 82       	std	Z+3, r1	; 0x03
    29ec:	12 82       	std	Z+2, r1	; 0x02
    29ee:	10 93 1e 03 	sts	0x031E, r17
    29f2:	00 93 1d 03 	sts	0x031D, r16
    29f6:	df 91       	pop	r29
    29f8:	cf 91       	pop	r28
    29fa:	1f 91       	pop	r17
    29fc:	0f 91       	pop	r16
    29fe:	08 95       	ret

00002a00 <abort>:
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	f8 94       	cli
    2a06:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <_exit>

00002a0a <memset>:
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	01 c0       	rjmp	.+2      	; 0x2a10 <memset+0x6>
    2a0e:	6d 93       	st	X+, r22
    2a10:	41 50       	subi	r20, 0x01	; 1
    2a12:	50 40       	sbci	r21, 0x00	; 0
    2a14:	e0 f7       	brcc	.-8      	; 0x2a0e <memset+0x4>
    2a16:	08 95       	ret

00002a18 <_exit>:
    2a18:	f8 94       	cli

00002a1a <__stop_program>:
    2a1a:	ff cf       	rjmp	.-2      	; 0x2a1a <__stop_program>
