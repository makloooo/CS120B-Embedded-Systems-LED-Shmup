
Player Input.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000472  00000506  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000472  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800104  00800104  0000050a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000050a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c8  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002be  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000568  00000000  00000000  00000faa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00001514  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035c  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000655  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000203d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	9c c0       	rjmp	.+312    	; 0x16e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e7       	ldi	r30, 0x72	; 114
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 32       	cpi	r26, 0x21	; 33
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e9 d0       	rcall	.+466    	; 0x296 <main>
  c4:	d4 c1       	rjmp	.+936    	; 0x46e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Player_Input>:
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
		return UDR1;
	}
}
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	19 f0       	breq	.+6      	; 0xd2 <Player_Input+0xa>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	91 05       	cpc	r25, r1
  d0:	49 f5       	brne	.+82     	; 0x124 <Player_Input+0x5c>
  d2:	10 92 1b 01 	sts	0x011B, r1
  d6:	10 92 1a 01 	sts	0x011A, r1
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	80 b1       	in	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 2e       	mov	r0, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <Player_Input+0x26>
  ea:	95 95       	asr	r25
  ec:	87 95       	ror	r24
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <Player_Input+0x22>
  f2:	80 fd       	sbrc	r24, 0
  f4:	0c c0       	rjmp	.+24     	; 0x10e <Player_Input+0x46>
  f6:	40 91 1b 01 	lds	r20, 0x011B
  fa:	cb 01       	movw	r24, r22
  fc:	02 2e       	mov	r0, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <Player_Input+0x3c>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <Player_Input+0x38>
 108:	84 2b       	or	r24, r20
 10a:	80 93 1b 01 	sts	0x011B, r24
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	82 0f       	add	r24, r18
 112:	80 93 1a 01 	sts	0x011A, r24
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	3f 4f       	sbci	r19, 0xFF	; 255
 11a:	28 30       	cpi	r18, 0x08	; 8
 11c:	31 05       	cpc	r19, r1
 11e:	09 f7       	brne	.-62     	; 0xe2 <Player_Input+0x1a>
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	08 95       	ret

00000126 <TimerOn>:
 126:	8b e0       	ldi	r24, 0x0B	; 11
 128:	80 93 81 00 	sts	0x0081, r24
 12c:	8d e7       	ldi	r24, 0x7D	; 125
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 89 00 	sts	0x0089, r25
 134:	80 93 88 00 	sts	0x0088, r24
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	80 93 6f 00 	sts	0x006F, r24
 13e:	10 92 85 00 	sts	0x0085, r1
 142:	10 92 84 00 	sts	0x0084, r1
 146:	80 91 00 01 	lds	r24, 0x0100
 14a:	90 91 01 01 	lds	r25, 0x0101
 14e:	a0 91 02 01 	lds	r26, 0x0102
 152:	b0 91 03 01 	lds	r27, 0x0103
 156:	80 93 1c 01 	sts	0x011C, r24
 15a:	90 93 1d 01 	sts	0x011D, r25
 15e:	a0 93 1e 01 	sts	0x011E, r26
 162:	b0 93 1f 01 	sts	0x011F, r27
 166:	8f b7       	in	r24, 0x3f	; 63
 168:	80 68       	ori	r24, 0x80	; 128
 16a:	8f bf       	out	0x3f, r24	; 63
 16c:	08 95       	ret

0000016e <__vector_13>:
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	af 93       	push	r26
 17e:	bf 93       	push	r27
 180:	80 91 1c 01 	lds	r24, 0x011C
 184:	90 91 1d 01 	lds	r25, 0x011D
 188:	a0 91 1e 01 	lds	r26, 0x011E
 18c:	b0 91 1f 01 	lds	r27, 0x011F
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	a1 09       	sbc	r26, r1
 194:	b1 09       	sbc	r27, r1
 196:	80 93 1c 01 	sts	0x011C, r24
 19a:	90 93 1d 01 	sts	0x011D, r25
 19e:	a0 93 1e 01 	sts	0x011E, r26
 1a2:	b0 93 1f 01 	sts	0x011F, r27
 1a6:	89 2b       	or	r24, r25
 1a8:	8a 2b       	or	r24, r26
 1aa:	8b 2b       	or	r24, r27
 1ac:	99 f4       	brne	.+38     	; 0x1d4 <__vector_13+0x66>
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 20 01 	sts	0x0120, r24
 1b4:	80 91 00 01 	lds	r24, 0x0100
 1b8:	90 91 01 01 	lds	r25, 0x0101
 1bc:	a0 91 02 01 	lds	r26, 0x0102
 1c0:	b0 91 03 01 	lds	r27, 0x0103
 1c4:	80 93 1c 01 	sts	0x011C, r24
 1c8:	90 93 1d 01 	sts	0x011D, r25
 1cc:	a0 93 1e 01 	sts	0x011E, r26
 1d0:	b0 93 1f 01 	sts	0x011F, r27
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <initUSART>:
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	81 f0       	breq	.+32     	; 0x20a <initUSART+0x24>
 1ea:	e1 ec       	ldi	r30, 0xC1	; 193
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	88 61       	ori	r24, 0x18	; 24
 1f2:	80 83       	st	Z, r24
 1f4:	e2 ec       	ldi	r30, 0xC2	; 194
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	86 60       	ori	r24, 0x06	; 6
 1fc:	80 83       	st	Z, r24
 1fe:	83 e3       	ldi	r24, 0x33	; 51
 200:	80 93 c4 00 	sts	0x00C4, r24
 204:	10 92 c5 00 	sts	0x00C5, r1
 208:	08 95       	ret
 20a:	e9 ec       	ldi	r30, 0xC9	; 201
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	88 61       	ori	r24, 0x18	; 24
 212:	80 83       	st	Z, r24
 214:	ea ec       	ldi	r30, 0xCA	; 202
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	86 60       	ori	r24, 0x06	; 6
 21c:	80 83       	st	Z, r24
 21e:	83 e3       	ldi	r24, 0x33	; 51
 220:	80 93 cc 00 	sts	0x00CC, r24
 224:	10 92 cd 00 	sts	0x00CD, r1
 228:	08 95       	ret

0000022a <USART_Send>:
 22a:	61 30       	cpi	r22, 0x01	; 1
 22c:	41 f0       	breq	.+16     	; 0x23e <USART_Send+0x14>
 22e:	e0 ec       	ldi	r30, 0xC0	; 192
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	90 81       	ld	r25, Z
 234:	95 ff       	sbrs	r25, 5
 236:	fd cf       	rjmp	.-6      	; 0x232 <USART_Send+0x8>
 238:	80 93 c6 00 	sts	0x00C6, r24
 23c:	08 95       	ret
 23e:	e8 ec       	ldi	r30, 0xC8	; 200
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	90 81       	ld	r25, Z
 244:	95 ff       	sbrs	r25, 5
 246:	fd cf       	rjmp	.-6      	; 0x242 <USART_Send+0x18>
 248:	80 93 ce 00 	sts	0x00CE, r24
 24c:	08 95       	ret

0000024e <Send_Input>:
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	91 05       	cpc	r25, r1
 252:	31 f0       	breq	.+12     	; 0x260 <Send_Input+0x12>
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	91 05       	cpc	r25, r1
 258:	c1 f0       	breq	.+48     	; 0x28a <Send_Input+0x3c>
 25a:	00 97       	sbiw	r24, 0x00	; 0
 25c:	31 f4       	brne	.+12     	; 0x26a <Send_Input+0x1c>
 25e:	15 c0       	rjmp	.+42     	; 0x28a <Send_Input+0x3c>
 260:	20 91 1b 01 	lds	r18, 0x011B
 264:	21 11       	cpse	r18, r1
 266:	04 c0       	rjmp	.+8      	; 0x270 <Send_Input+0x22>
 268:	08 95       	ret
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	91 05       	cpc	r25, r1
 26e:	91 f4       	brne	.+36     	; 0x294 <Send_Input+0x46>
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	85 b9       	out	0x05, r24	; 5
 274:	80 91 c0 00 	lds	r24, 0x00C0
 278:	85 ff       	sbrs	r24, 5
 27a:	0a c0       	rjmp	.+20     	; 0x290 <Send_Input+0x42>
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	80 91 1b 01 	lds	r24, 0x011B
 282:	d3 df       	rcall	.-90     	; 0x22a <USART_Send>
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	08 95       	ret
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	08 95       	ret
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	08 95       	ret

00000296 <main>:
//unsigned char p2_input = 0;

#include "Player_Input.h"
#include "Send_Input.h"

int main(void) {
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	00 d0       	rcall	.+0      	; 0x29c <main+0x6>
 29c:	00 d0       	rcall	.+0      	; 0x29e <main+0x8>
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF; PORTB = 0x00; // Debug Output
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	84 b9       	out	0x04, r24	; 4
 2a6:	15 b8       	out	0x05, r1	; 5
	DDRA = 0x00; PORTA = 0xFF; // Input
 2a8:	11 b8       	out	0x01, r1	; 1
 2aa:	82 b9       	out	0x02, r24	; 2
	DDRC = 0x00; PORTC = 0xFF; // Input
 2ac:	17 b8       	out	0x07, r1	; 7
 2ae:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFA; PORTD = 0x05; // Output
 2b0:	8a ef       	ldi	r24, 0xFA	; 250
 2b2:	8a b9       	out	0x0a, r24	; 10
 2b4:	85 e0       	ldi	r24, 0x05	; 5
 2b6:	8b b9       	out	0x0b, r24	; 11
 2b8:	0f 2e       	mov	r0, r31
 2ba:	ff e0       	ldi	r31, 0x0F	; 15
 2bc:	ef 2e       	mov	r14, r31
 2be:	f0 2d       	mov	r31, r0
 2c0:	f1 2c       	mov	r15, r1
 2c2:	00 e0       	ldi	r16, 0x00	; 0
 2c4:	10 e0       	ldi	r17, 0x00	; 0
 2c6:	52 e3       	ldi	r21, 0x32	; 50
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <main+0x42>
	unsigned long int c;
	while(1){
		c = a % b;
		if( c == 0 ) { return b; }
		a = b;
		b = c;
 2d0:	e6 2e       	mov	r14, r22
 2d2:	f7 2e       	mov	r15, r23
 2d4:	08 2f       	mov	r16, r24
 2d6:	19 2f       	mov	r17, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 2d8:	65 2f       	mov	r22, r21
 2da:	74 2f       	mov	r23, r20
 2dc:	83 2f       	mov	r24, r19
 2de:	92 2f       	mov	r25, r18
 2e0:	2e 2d       	mov	r18, r14
 2e2:	3f 2d       	mov	r19, r15
 2e4:	40 2f       	mov	r20, r16
 2e6:	51 2f       	mov	r21, r17
 2e8:	a0 d0       	rcall	.+320    	; 0x42a <__udivmodsi4>
 2ea:	5e 2d       	mov	r21, r14
 2ec:	4f 2d       	mov	r20, r15
 2ee:	30 2f       	mov	r19, r16
 2f0:	21 2f       	mov	r18, r17
		if( c == 0 ) { return b; }
 2f2:	61 15       	cp	r22, r1
 2f4:	71 05       	cpc	r23, r1
 2f6:	81 05       	cpc	r24, r1
 2f8:	91 05       	cpc	r25, r1
 2fa:	51 f7       	brne	.-44     	; 0x2d0 <main+0x3a>
	
	// GCD for all tasks or smallest time unit for tasks
	unsigned long GCD = tmpGCD;
	
	// Recalculate GCD periods for scheduler
	unsigned long Player_Input_period = Player_Input_calc/GCD;
 2fc:	62 e3       	ldi	r22, 0x32	; 50
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	2e 2d       	mov	r18, r14
 306:	3f 2d       	mov	r19, r15
 308:	40 2f       	mov	r20, r16
 30a:	51 2f       	mov	r21, r17
 30c:	8e d0       	rcall	.+284    	; 0x42a <__udivmodsi4>
 30e:	49 01       	movw	r8, r18
 310:	5a 01       	movw	r10, r20
	unsigned long Send_Input_period = Send_Input_calc/GCD;
 312:	6f e0       	ldi	r22, 0x0F	; 15
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	2e 2d       	mov	r18, r14
 31c:	3f 2d       	mov	r19, r15
 31e:	40 2f       	mov	r20, r16
 320:	51 2f       	mov	r21, r17
 322:	83 d0       	rcall	.+262    	; 0x42a <__udivmodsi4>
	
	// Declare an array of tasks
	static task task1, task2;
	task* tasks[] = { &task1, &task2 };
 324:	af e0       	ldi	r26, 0x0F	; 15
 326:	b1 e0       	ldi	r27, 0x01	; 1
 328:	ba 83       	std	Y+2, r27	; 0x02
 32a:	a9 83       	std	Y+1, r26	; 0x01
 32c:	e4 e0       	ldi	r30, 0x04	; 4
 32e:	f1 e0       	ldi	r31, 0x01	; 1
 330:	fc 83       	std	Y+4, r31	; 0x04
 332:	eb 83       	std	Y+3, r30	; 0x03
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	// Task 1
	task1.state = Input_Start;
 334:	1c 92       	st	X, r1
	task1.period = Player_Input_period;
 336:	11 96       	adiw	r26, 0x01	; 1
 338:	8d 92       	st	X+, r8
 33a:	9d 92       	st	X+, r9
 33c:	ad 92       	st	X+, r10
 33e:	bc 92       	st	X, r11
 340:	14 97       	sbiw	r26, 0x04	; 4
	task1.elapsedTime = Player_Input_period;
 342:	15 96       	adiw	r26, 0x05	; 5
 344:	8d 92       	st	X+, r8
 346:	9d 92       	st	X+, r9
 348:	ad 92       	st	X+, r10
 34a:	bc 92       	st	X, r11
 34c:	18 97       	sbiw	r26, 0x08	; 8
	task1.TickFct = &Player_Input;
 34e:	84 e6       	ldi	r24, 0x64	; 100
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	1a 96       	adiw	r26, 0x0a	; 10
 354:	9c 93       	st	X, r25
 356:	8e 93       	st	-X, r24
 358:	19 97       	sbiw	r26, 0x09	; 9
	
	// Task 2
	task2.state = Send_Start;
 35a:	10 82       	st	Z, r1
	task2.period = Send_Input_period;
 35c:	21 83       	std	Z+1, r18	; 0x01
 35e:	32 83       	std	Z+2, r19	; 0x02
 360:	43 83       	std	Z+3, r20	; 0x03
 362:	54 83       	std	Z+4, r21	; 0x04
	task2.elapsedTime = Send_Input_period;
 364:	25 83       	std	Z+5, r18	; 0x05
 366:	36 83       	std	Z+6, r19	; 0x06
 368:	47 83       	std	Z+7, r20	; 0x07
 36a:	50 87       	std	Z+8, r21	; 0x08
	task2.TickFct = &Send_Input;
 36c:	87 e2       	ldi	r24, 0x27	; 39
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	92 87       	std	Z+10, r25	; 0x0a
 372:	81 87       	std	Z+9, r24	; 0x09
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 374:	e0 92 00 01 	sts	0x0100, r14
 378:	f0 92 01 01 	sts	0x0101, r15
 37c:	00 93 02 01 	sts	0x0102, r16
 380:	10 93 03 01 	sts	0x0103, r17
	_avr_timer_cntcurr = _avr_timer_M;
 384:	e0 92 1c 01 	sts	0x011C, r14
 388:	f0 92 1d 01 	sts	0x011D, r15
 38c:	00 93 1e 01 	sts	0x011E, r16
 390:	10 93 1f 01 	sts	0x011F, r17
	
	// Set the Timer and turn it on
	TimerSet(GCD);
	TimerOn();
 394:	c8 de       	rcall	.-624    	; 0x126 <TimerOn>
	
	// Initialize USART
	initUSART(0);
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	26 df       	rcall	.-436    	; 0x1e6 <initUSART>
 39a:	6e 01       	movw	r12, r28
 39c:	85 e0       	ldi	r24, 0x05	; 5
 39e:	c8 0e       	add	r12, r24
 3a0:	d1 1c       	adc	r13, r1
 3a2:	de 01       	movw	r26, r28
 3a4:	11 96       	adiw	r26, 0x01	; 1
 3a6:	7d 01       	movw	r14, r26
	while (1)
	{
		// Scheduler code
		for (i = 0; i < numTasks; i++) {
			// Task is ready for tick
			if (tasks[i]->elapsedTime == tasks[i]->period) {
 3a8:	f7 01       	movw	r30, r14
 3aa:	00 81       	ld	r16, Z
 3ac:	11 81       	ldd	r17, Z+1	; 0x01
 3ae:	d8 01       	movw	r26, r16
 3b0:	15 96       	adiw	r26, 0x05	; 5
 3b2:	4d 91       	ld	r20, X+
 3b4:	5d 91       	ld	r21, X+
 3b6:	6d 91       	ld	r22, X+
 3b8:	7c 91       	ld	r23, X
 3ba:	18 97       	sbiw	r26, 0x08	; 8
 3bc:	11 96       	adiw	r26, 0x01	; 1
 3be:	8d 91       	ld	r24, X+
 3c0:	9d 91       	ld	r25, X+
 3c2:	0d 90       	ld	r0, X+
 3c4:	bc 91       	ld	r27, X
 3c6:	a0 2d       	mov	r26, r0
 3c8:	48 17       	cp	r20, r24
 3ca:	59 07       	cpc	r21, r25
 3cc:	6a 07       	cpc	r22, r26
 3ce:	7b 07       	cpc	r23, r27
 3d0:	91 f4       	brne	.+36     	; 0x3f6 <main+0x160>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 3d2:	f8 01       	movw	r30, r16
 3d4:	80 81       	ld	r24, Z
 3d6:	01 84       	ldd	r0, Z+9	; 0x09
 3d8:	f2 85       	ldd	r31, Z+10	; 0x0a
 3da:	e0 2d       	mov	r30, r0
 3dc:	08 2e       	mov	r0, r24
 3de:	00 0c       	add	r0, r0
 3e0:	99 0b       	sbc	r25, r25
 3e2:	09 95       	icall
 3e4:	d8 01       	movw	r26, r16
 3e6:	8c 93       	st	X, r24
				tasks[i]->elapsedTime = 0;
 3e8:	d7 01       	movw	r26, r14
 3ea:	ed 91       	ld	r30, X+
 3ec:	fc 91       	ld	r31, X
 3ee:	15 82       	std	Z+5, r1	; 0x05
 3f0:	16 82       	std	Z+6, r1	; 0x06
 3f2:	17 82       	std	Z+7, r1	; 0x07
 3f4:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 3f6:	f8 01       	movw	r30, r16
 3f8:	85 81       	ldd	r24, Z+5	; 0x05
 3fa:	96 81       	ldd	r25, Z+6	; 0x06
 3fc:	a7 81       	ldd	r26, Z+7	; 0x07
 3fe:	b0 85       	ldd	r27, Z+8	; 0x08
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	a1 1d       	adc	r26, r1
 404:	b1 1d       	adc	r27, r1
 406:	85 83       	std	Z+5, r24	; 0x05
 408:	96 83       	std	Z+6, r25	; 0x06
 40a:	a7 83       	std	Z+7, r26	; 0x07
 40c:	b0 87       	std	Z+8, r27	; 0x08
 40e:	f2 e0       	ldi	r31, 0x02	; 2
 410:	ef 0e       	add	r14, r31
 412:	f1 1c       	adc	r15, r1
	unsigned short i;
	
	while (1)
	{
		// Scheduler code
		for (i = 0; i < numTasks; i++) {
 414:	ec 14       	cp	r14, r12
 416:	fd 04       	cpc	r15, r13
 418:	39 f6       	brne	.-114    	; 0x3a8 <main+0x112>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while (!TimerFlag);
 41a:	80 91 20 01 	lds	r24, 0x0120
 41e:	88 23       	and	r24, r24
 420:	e1 f3       	breq	.-8      	; 0x41a <main+0x184>
		TimerFlag = 0;
 422:	10 92 20 01 	sts	0x0120, r1
		PORTB = 0x00;
 426:	15 b8       	out	0x05, r1	; 5
	}
 428:	bc cf       	rjmp	.-136    	; 0x3a2 <main+0x10c>

0000042a <__udivmodsi4>:
 42a:	a1 e2       	ldi	r26, 0x21	; 33
 42c:	1a 2e       	mov	r1, r26
 42e:	aa 1b       	sub	r26, r26
 430:	bb 1b       	sub	r27, r27
 432:	fd 01       	movw	r30, r26
 434:	0d c0       	rjmp	.+26     	; 0x450 <__udivmodsi4_ep>

00000436 <__udivmodsi4_loop>:
 436:	aa 1f       	adc	r26, r26
 438:	bb 1f       	adc	r27, r27
 43a:	ee 1f       	adc	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	a2 17       	cp	r26, r18
 440:	b3 07       	cpc	r27, r19
 442:	e4 07       	cpc	r30, r20
 444:	f5 07       	cpc	r31, r21
 446:	20 f0       	brcs	.+8      	; 0x450 <__udivmodsi4_ep>
 448:	a2 1b       	sub	r26, r18
 44a:	b3 0b       	sbc	r27, r19
 44c:	e4 0b       	sbc	r30, r20
 44e:	f5 0b       	sbc	r31, r21

00000450 <__udivmodsi4_ep>:
 450:	66 1f       	adc	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	88 1f       	adc	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	1a 94       	dec	r1
 45a:	69 f7       	brne	.-38     	; 0x436 <__udivmodsi4_loop>
 45c:	60 95       	com	r22
 45e:	70 95       	com	r23
 460:	80 95       	com	r24
 462:	90 95       	com	r25
 464:	9b 01       	movw	r18, r22
 466:	ac 01       	movw	r20, r24
 468:	bd 01       	movw	r22, r26
 46a:	cf 01       	movw	r24, r30
 46c:	08 95       	ret

0000046e <_exit>:
 46e:	f8 94       	cli

00000470 <__stop_program>:
 470:	ff cf       	rjmp	.-2      	; 0x470 <__stop_program>
