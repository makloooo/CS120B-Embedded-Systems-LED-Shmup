
Matrix_Logic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00001c5e  00001cf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002cd  00800148  00800148  00001d3a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000710  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001081a  00000000  00000000  000024bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000323a  00000000  00000000  00012cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002be6  00000000  00000000  00015f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000130c  00000000  00000000  00018af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000032f4  00000000  00000000  00019e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000061a0  00000000  00000000  0001d0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000768  00000000  00000000  00023298  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__dtors_end>
       4:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
       8:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
       c:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__vector_3>
      10:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__vector_3>
      14:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__vector_3>
      18:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      1c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      20:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      24:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_9>
      28:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      2c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      30:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      34:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      38:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      3c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      40:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__vector_16>
      44:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      48:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__vector_18>
      4c:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__vector_19>
      50:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      54:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      58:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      5c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      60:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__vector_24>
      64:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	4a 75       	andi	r20, 0x5A	; 90
      6a:	73 74       	andi	r23, 0x43	; 67
      6c:	20 73       	andi	r18, 0x30	; 48
      6e:	65 6e       	ori	r22, 0xE5	; 229
      70:	74 20       	and	r7, r4
      72:	73 74       	andi	r23, 0x43	; 67
      74:	61 72       	andi	r22, 0x21	; 33
      76:	74 20       	and	r7, r4
      78:	63 68       	ori	r22, 0x83	; 131
      7a:	61 72       	andi	r22, 0x21	; 33
      7c:	61 63       	ori	r22, 0x31	; 49
      7e:	74 65       	ori	r23, 0x54	; 84
      80:	72 2e       	mov	r7, r18
	...

00000083 <digital_pin_to_timer_PGM>:
      83:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      93:	00 00 00 00                                         ....

00000097 <digital_pin_to_bit_mask_PGM>:
      97:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a7:	04 08 10 20                                         ... 

000000ab <digital_pin_to_port_PGM>:
      ab:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      bb:	03 03 03 03                                         ....

000000bf <port_to_input_PGM>:
      bf:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000c9 <port_to_output_PGM>:
      c9:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000d3 <port_to_mode_PGM>:
      d3:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000de <__ctors_start>:
      de:	1c 01       	movw	r2, r24
      e0:	16 09       	sbc	r17, r6
      e2:	a7 0a       	sbc	r10, r23

000000e4 <__ctors_end>:
      e4:	2f 01       	movw	r4, r30

000000e6 <__dtors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d8 e0       	ldi	r29, 0x08	; 8
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	11 e0       	ldi	r17, 0x01	; 1
      f4:	a0 e0       	ldi	r26, 0x00	; 0
      f6:	b1 e0       	ldi	r27, 0x01	; 1
      f8:	ee e5       	ldi	r30, 0x5E	; 94
      fa:	fc e1       	ldi	r31, 0x1C	; 28
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
      fe:	05 90       	lpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	a8 34       	cpi	r26, 0x48	; 72
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
     108:	24 e0       	ldi	r18, 0x04	; 4
     10a:	a8 e4       	ldi	r26, 0x48	; 72
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a5 31       	cpi	r26, 0x15	; 21
     114:	b2 07       	cpc	r27, r18
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>

00000118 <__do_global_ctors>:
     118:	10 e0       	ldi	r17, 0x00	; 0
     11a:	c2 e7       	ldi	r28, 0x72	; 114
     11c:	d0 e0       	ldi	r29, 0x00	; 0
     11e:	04 c0       	rjmp	.+8      	; 0x128 <__do_global_ctors+0x10>
     120:	21 97       	sbiw	r28, 0x01	; 1
     122:	fe 01       	movw	r30, r28
     124:	0e 94 ef 0c 	call	0x19de	; 0x19de <__tablejump2__>
     128:	cf 36       	cpi	r28, 0x6F	; 111
     12a:	d1 07       	cpc	r29, r17
     12c:	c9 f7       	brne	.-14     	; 0x120 <__do_global_ctors+0x8>
     12e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <main>
     132:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__do_global_dtors>

00000136 <__bad_interrupt>:
     136:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013a <_Z4Tickv>:
	p1_input = 0x00;
	p2_input = 0x00;
}

void Tick() {
	UpdateFlag = true;
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	80 93 48 01 	sts	0x0148, r24
     140:	08 95       	ret

00000142 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     142:	dc 01       	movw	r26, r24
     144:	ed 91       	ld	r30, X+
     146:	fc 91       	ld	r31, X
     148:	01 90       	ld	r0, Z+
     14a:	f0 81       	ld	r31, Z
     14c:	e0 2d       	mov	r30, r0
     14e:	09 94       	ijmp

00000150 <_Z13clear_signalsv>:
		p2_input = altSerial.read();
	}
}

void clear_signals() {
	game_event = 0x00;
     150:	10 92 6b 01 	sts	0x016B, r1
	p1_input = 0x00;
     154:	10 92 6a 01 	sts	0x016A, r1
	p2_input = 0x00;
     158:	10 92 69 01 	sts	0x0169, r1
     15c:	08 95       	ret

0000015e <setup>:

void Tick() {
	UpdateFlag = true;
}

void setup() {
     15e:	cf 92       	push	r12
     160:	df 92       	push	r13
     162:	ef 92       	push	r14
     164:	ff 92       	push	r15
     166:	0f 93       	push	r16
     168:	1f 93       	push	r17
     16a:	cf 93       	push	r28
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     16c:	26 e0       	ldi	r18, 0x06	; 6
     16e:	40 e8       	ldi	r20, 0x80	; 128
     170:	55 e2       	ldi	r21, 0x25	; 37
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	70 e0       	ldi	r23, 0x00	; 0
     176:	8b e6       	ldi	r24, 0x6B	; 107
     178:	93 e0       	ldi	r25, 0x03	; 3
     17a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_ZN14HardwareSerial5beginEmh>
	// These two are used for P1, P2 input
	Serial.begin(9600);
	while (!Serial);
	altSerial.begin(9600);
     17e:	40 e8       	ldi	r20, 0x80	; 128
     180:	55 e2       	ldi	r21, 0x25	; 37
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	89 e4       	ldi	r24, 0x49	; 73
     188:	91 e0       	ldi	r25, 0x01	; 1
     18a:	0e 94 f7 05 	call	0xbee	; 0xbee <_ZN14SoftwareSerial5beginEl>
	while (!altSerial);
	
	MsTimer2::set(50, Tick);
     18e:	4d e9       	ldi	r20, 0x9D	; 157
     190:	50 e0       	ldi	r21, 0x00	; 0
     192:	62 e3       	ldi	r22, 0x32	; 50
     194:	70 e0       	ldi	r23, 0x00	; 0
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_ZN8MsTimer23setEmPFvvE>
	MsTimer2::start();
     19e:	0e 94 1e 02 	call	0x43c	; 0x43c <_ZN8MsTimer25startEv>
     1a2:	8a e9       	ldi	r24, 0x9A	; 154
     1a4:	e8 2e       	mov	r14, r24
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	f8 2e       	mov	r15, r24
     1aa:	00 e0       	ldi	r16, 0x00	; 0
     1ac:	10 e0       	ldi	r17, 0x00	; 0
	
	for (byte i = 0; i < ES_MAX; ++i) {
     1ae:	c0 e0       	ldi	r28, 0x00	; 0
		if (i < PS_MAX) pl_bullets[i] = new PlayerShot;
     1b0:	c0 32       	cpi	r28, 0x20	; 32
     1b2:	d0 f4       	brcc	.+52     	; 0x1e8 <setup+0x8a>
     1b4:	88 e0       	ldi	r24, 0x08	; 8
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_Znwj>
     1bc:	6c 01       	movw	r12, r24
     1be:	0e 94 04 04 	call	0x808	; 0x808 <_ZN10PlayerShotC1Ev>
     1c2:	f8 01       	movw	r30, r16
     1c4:	e6 5e       	subi	r30, 0xE6	; 230
     1c6:	fd 4f       	sbci	r31, 0xFD	; 253
     1c8:	d1 82       	std	Z+1, r13	; 0x01
     1ca:	c0 82       	st	Z, r12
		if (i < ENM_MAX) enms[i] = new Enemy;
     1cc:	c8 30       	cpi	r28, 0x08	; 8
     1ce:	60 f4       	brcc	.+24     	; 0x1e8 <setup+0x8a>
     1d0:	80 e1       	ldi	r24, 0x10	; 16
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_Znwj>
     1d8:	6c 01       	movw	r12, r24
     1da:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN5EnemyC1Ev>
     1de:	f8 01       	movw	r30, r16
     1e0:	e6 57       	subi	r30, 0x76	; 118
     1e2:	fe 4f       	sbci	r31, 0xFE	; 254
     1e4:	d1 82       	std	Z+1, r13	; 0x01
     1e6:	c0 82       	st	Z, r12
		enm_bullets[i] = new EnmShot;
     1e8:	88 e0       	ldi	r24, 0x08	; 8
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_Znwj>
     1f0:	6c 01       	movw	r12, r24
     1f2:	0e 94 03 03 	call	0x606	; 0x606 <_ZN7EnmShotC1Ev>
     1f6:	f7 01       	movw	r30, r14
     1f8:	c1 92       	st	Z+, r12
     1fa:	d1 92       	st	Z+, r13
     1fc:	7f 01       	movw	r14, r30
	while (!altSerial);
	
	MsTimer2::set(50, Tick);
	MsTimer2::start();
	
	for (byte i = 0; i < ES_MAX; ++i) {
     1fe:	cf 5f       	subi	r28, 0xFF	; 255
     200:	0e 5f       	subi	r16, 0xFE	; 254
     202:	1f 4f       	sbci	r17, 0xFF	; 255
     204:	c0 34       	cpi	r28, 0x40	; 64
     206:	a1 f6       	brne	.-88     	; 0x1b0 <setup+0x52>
		if (i < PS_MAX) pl_bullets[i] = new PlayerShot;
		if (i < ENM_MAX) enms[i] = new Enemy;
		enm_bullets[i] = new EnmShot;
	}
	dir = new Director;
     208:	83 e0       	ldi	r24, 0x03	; 3
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_Znwj>
     210:	8c 01       	movw	r16, r24
     212:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN8DirectorC1Ev>
     216:	10 93 6d 01 	sts	0x016D, r17
     21a:	00 93 6c 01 	sts	0x016C, r16
	
	Wire.begin();
     21e:	89 e1       	ldi	r24, 0x19	; 25
     220:	93 e0       	ldi	r25, 0x03	; 3
     222:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <_ZN7TwoWire5beginEv>
	
	clear_signals();
	return;
}
     226:	cf 91       	pop	r28
     228:	1f 91       	pop	r17
     22a:	0f 91       	pop	r16
     22c:	ff 90       	pop	r15
     22e:	ef 90       	pop	r14
     230:	df 90       	pop	r13
     232:	cf 90       	pop	r12
	}
	dir = new Director;
	
	Wire.begin();
	
	clear_signals();
     234:	0c 94 a8 00 	jmp	0x150	; 0x150 <_Z13clear_signalsv>

00000238 <_GLOBAL__sub_I_num_PS_active>:
EnmShot* enm_bullets[ES_MAX];

byte num_enm_active = 0;
Enemy* enms[ENM_MAX];

Player p1(1, 10);
     238:	4a e0       	ldi	r20, 0x0A	; 10
     23a:	61 e0       	ldi	r22, 0x01	; 1
     23c:	8c e7       	ldi	r24, 0x7C	; 124
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	0e 94 08 03 	call	0x610	; 0x610 <_ZN6PlayerC1Ehh>
Player p2(2, 10);
     244:	4a e0       	ldi	r20, 0x0A	; 10
     246:	62 e0       	ldi	r22, 0x02	; 2
     248:	8e e6       	ldi	r24, 0x6E	; 110
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	0e 94 08 03 	call	0x610	; 0x610 <_ZN6PlayerC1Ehh>
byte p2_input = 0x00;

byte debug = 0;

// RX (p2_input), TX (game_event)
SoftwareSerial altSerial(2, 3);
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	43 e0       	ldi	r20, 0x03	; 3
     254:	62 e0       	ldi	r22, 0x02	; 2
     256:	89 e4       	ldi	r24, 0x49	; 73
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <_ZN14SoftwareSerialC1Ehhb>

0000025e <_GLOBAL__sub_D_num_PS_active>:
     25e:	89 e4       	ldi	r24, 0x49	; 73
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	0c 94 73 05 	jmp	0xae6	; 0xae6 <_ZN14SoftwareSerialD1Ev>

00000266 <loop>:
}

byte x = 0;

void loop() {
	if (UpdateFlag) {
     266:	80 91 48 01 	lds	r24, 0x0148
     26a:	88 23       	and	r24, r24
     26c:	59 f1       	breq	.+86     	; 0x2c4 <loop+0x5e>
	
		// Get inputs from both playersS
		// recieve_signals();
	
		// debug ticker
		if (debug >= 10) {
     26e:	80 91 68 01 	lds	r24, 0x0168
     272:	8a 30       	cpi	r24, 0x0A	; 10
     274:	70 f0       	brcs	.+28     	; 0x292 <loop+0x2c>
			static boolean output = HIGH;
			digitalWrite(LED_BUILTIN, output);
     276:	60 91 06 01 	lds	r22, 0x0106
     27a:	8d e0       	ldi	r24, 0x0D	; 13
     27c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <digitalWrite>
			output = !output;
     280:	90 91 06 01 	lds	r25, 0x0106
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	89 27       	eor	r24, r25
     288:	80 93 06 01 	sts	0x0106, r24
			debug = 0;
     28c:	10 92 68 01 	sts	0x0168, r1
     290:	03 c0       	rjmp	.+6      	; 0x298 <loop+0x32>
		} else ++debug;
     292:	8f 5f       	subi	r24, 0xFF	; 255
     294:	80 93 68 01 	sts	0x0168, r24
		// Tick the director to update the matrix.
		// This also updates game_event as well
		dir->Tick();
     298:	80 91 6c 01 	lds	r24, 0x016C
     29c:	90 91 6d 01 	lds	r25, 0x016D
     2a0:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN8Director4TickEv>
		// Director sends all object data to matrix.
	
		// Send USART signal to UI Chip.
		if (game_event) {
     2a4:	60 91 6b 01 	lds	r22, 0x016B
     2a8:	66 23       	and	r22, r22
     2aa:	51 f0       	breq	.+20     	; 0x2c0 <loop+0x5a>
			Serial.write(game_event);
     2ac:	8b e6       	ldi	r24, 0x6B	; 107
     2ae:	93 e0       	ldi	r25, 0x03	; 3
     2b0:	0e 94 99 09 	call	0x1332	; 0x1332 <_ZN14HardwareSerial5writeEh>
			altSerial.write(game_event);
     2b4:	60 91 6b 01 	lds	r22, 0x016B
     2b8:	89 e4       	ldi	r24, 0x49	; 73
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN14SoftwareSerial5writeEh>
		}
		UpdateFlag = false;
     2c0:	10 92 48 01 	sts	0x0148, r1
     2c4:	08 95       	ret

000002c6 <_Z14Send_To_Matrix7Graphichhh>:
	altSerial.write(boss->y);
	altSerial.write(boss->cnt); // using x0 as cnt
	altSerial.write(0xFE);
}

void Send_To_Matrix(Graphic anim, byte frame, byte x, byte y) {
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <_Z14Send_To_Matrix7Graphichhh+0x8>
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
     2d2:	16 2f       	mov	r17, r22
	altSerial.write(anim);
     2d4:	68 2f       	mov	r22, r24
     2d6:	89 e4       	ldi	r24, 0x49	; 73
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	2a 83       	std	Y+2, r18	; 0x02
     2dc:	49 83       	std	Y+1, r20	; 0x01
     2de:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN14SoftwareSerial5writeEh>
	altSerial.write(frame);
     2e2:	61 2f       	mov	r22, r17
     2e4:	89 e4       	ldi	r24, 0x49	; 73
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN14SoftwareSerial5writeEh>
	altSerial.write(x);
     2ec:	49 81       	ldd	r20, Y+1	; 0x01
     2ee:	64 2f       	mov	r22, r20
     2f0:	89 e4       	ldi	r24, 0x49	; 73
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN14SoftwareSerial5writeEh>
	altSerial.write(y);
     2f8:	2a 81       	ldd	r18, Y+2	; 0x02
     2fa:	62 2f       	mov	r22, r18
     2fc:	89 e4       	ldi	r24, 0x49	; 73
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	1f 91       	pop	r17

void Send_To_Matrix(Graphic anim, byte frame, byte x, byte y) {
	altSerial.write(anim);
	altSerial.write(frame);
	altSerial.write(x);
	altSerial.write(y);
     30a:	0c 94 35 04 	jmp	0x86a	; 0x86a <_ZN14SoftwareSerial5writeEh>

0000030e <_Z14Send_To_MatrixP6Playerh>:

/* Transmission functions. */
// 	enum Graphic {P1, P2, PL_SHOT, ENM_CROSS, ENM_LINE, ENM_TRACER,
// 				  ENM_PANEL, ES_DOT, ES_LASER, ES_BALL,
// 				  BS_EYE, ANIM_EXPLODE, ANIM_BIG_EXPLODE};
void Send_To_Matrix(Player* pl, byte num) {
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	ec 01       	movw	r28, r24
     316:	16 2f       	mov	r17, r22
	++debug;
     318:	80 91 68 01 	lds	r24, 0x0168
     31c:	8f 5f       	subi	r24, 0xFF	; 255
     31e:	80 93 68 01 	sts	0x0168, r24
	
	Wire.beginTransmission(8);
     322:	68 e0       	ldi	r22, 0x08	; 8
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	89 e1       	ldi	r24, 0x19	; 25
     328:	93 e0       	ldi	r25, 0x03	; 3
     32a:	0e 94 fe 08 	call	0x11fc	; 0x11fc <_ZN7TwoWire17beginTransmissionEi>
	Wire.write('<');
     32e:	6c e3       	ldi	r22, 0x3C	; 60
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	89 e1       	ldi	r24, 0x19	; 25
     334:	93 e0       	ldi	r25, 0x03	; 3
     336:	0e 94 a1 00 	call	0x142	; 0x142 <_ZN7TwoWire5writeEi>
	Serial.println(F("Just sent start character."));
     33a:	68 e6       	ldi	r22, 0x68	; 104
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	8b e6       	ldi	r24, 0x6B	; 107
     340:	93 e0       	ldi	r25, 0x03	; 3
     342:	0e 94 4e 0b 	call	0x169c	; 0x169c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (num == 1) Wire.write(P1);
     346:	11 30       	cpi	r17, 0x01	; 1
     348:	19 f4       	brne	.+6      	; 0x350 <_Z14Send_To_MatrixP6Playerh+0x42>
     34a:	60 e0       	ldi	r22, 0x00	; 0
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	02 c0       	rjmp	.+4      	; 0x354 <_Z14Send_To_MatrixP6Playerh+0x46>
	else Wire.write(P2);
     350:	61 e0       	ldi	r22, 0x01	; 1
     352:	70 e0       	ldi	r23, 0x00	; 0
     354:	89 e1       	ldi	r24, 0x19	; 25
     356:	93 e0       	ldi	r25, 0x03	; 3
     358:	0e 94 a1 00 	call	0x142	; 0x142 <_ZN7TwoWire5writeEi>
	Wire.write(pl->frame);
     35c:	6c 85       	ldd	r22, Y+12	; 0x0c
     35e:	89 e1       	ldi	r24, 0x19	; 25
     360:	93 e0       	ldi	r25, 0x03	; 3
     362:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN7TwoWire5writeEh>
	Wire.write(pl->x);
     366:	6a 85       	ldd	r22, Y+10	; 0x0a
     368:	89 e1       	ldi	r24, 0x19	; 25
     36a:	93 e0       	ldi	r25, 0x03	; 3
     36c:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN7TwoWire5writeEh>
	Wire.write(pl->y);
     370:	6b 85       	ldd	r22, Y+11	; 0x0b
     372:	89 e1       	ldi	r24, 0x19	; 25
     374:	93 e0       	ldi	r25, 0x03	; 3
     376:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN7TwoWire5writeEh>
	Wire.write(0);
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	70 e0       	ldi	r23, 0x00	; 0
     37e:	89 e1       	ldi	r24, 0x19	; 25
     380:	93 e0       	ldi	r25, 0x03	; 3
     382:	0e 94 a1 00 	call	0x142	; 0x142 <_ZN7TwoWire5writeEi>
	Wire.write(0);
     386:	60 e0       	ldi	r22, 0x00	; 0
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	89 e1       	ldi	r24, 0x19	; 25
     38c:	93 e0       	ldi	r25, 0x03	; 3
     38e:	0e 94 a1 00 	call	0x142	; 0x142 <_ZN7TwoWire5writeEi>
	Wire.write('>');
     392:	6e e3       	ldi	r22, 0x3E	; 62
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	89 e1       	ldi	r24, 0x19	; 25
     398:	93 e0       	ldi	r25, 0x03	; 3
     39a:	0e 94 a1 00 	call	0x142	; 0x142 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     39e:	89 e1       	ldi	r24, 0x19	; 25
     3a0:	93 e0       	ldi	r25, 0x03	; 3
}
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	1f 91       	pop	r17
	Wire.write(pl->x);
	Wire.write(pl->y);
	Wire.write(0);
	Wire.write(0);
	Wire.write('>');
	Wire.endTransmission();
     3a8:	0c 94 13 09 	jmp	0x1226	; 0x1226 <_ZN7TwoWire15endTransmissionEv>

000003ac <_ZN8MsTimer23setEmPFvvE>:
#endif

void MsTimer2::set(unsigned long ms, void (*f)()) {
	float prescaler = 0.0;
	
	if (ms == 0)
     3ac:	61 15       	cp	r22, r1
     3ae:	71 05       	cpc	r23, r1
     3b0:	81 05       	cpc	r24, r1
     3b2:	91 05       	cpc	r25, r1
     3b4:	69 f4       	brne	.+26     	; 0x3d0 <_ZN8MsTimer23setEmPFvvE+0x24>
		msecs = 1;
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	a0 e0       	ldi	r26, 0x00	; 0
     3bc:	b0 e0       	ldi	r27, 0x00	; 0
     3be:	80 93 63 02 	sts	0x0263, r24
     3c2:	90 93 64 02 	sts	0x0264, r25
     3c6:	a0 93 65 02 	sts	0x0265, r26
     3ca:	b0 93 66 02 	sts	0x0266, r27
     3ce:	08 c0       	rjmp	.+16     	; 0x3e0 <_ZN8MsTimer23setEmPFvvE+0x34>
	else
		msecs = ms;
     3d0:	60 93 63 02 	sts	0x0263, r22
     3d4:	70 93 64 02 	sts	0x0264, r23
     3d8:	80 93 65 02 	sts	0x0265, r24
     3dc:	90 93 66 02 	sts	0x0266, r25
		
	func = f;
     3e0:	50 93 62 02 	sts	0x0262, r21
     3e4:	40 93 61 02 	sts	0x0261, r20

#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TIMSK2 &= ~(1<<TOIE2);
     3e8:	80 91 70 00 	lds	r24, 0x0070
     3ec:	8e 7f       	andi	r24, 0xFE	; 254
     3ee:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~((1<<WGM21) | (1<<WGM20));
     3f2:	80 91 b0 00 	lds	r24, 0x00B0
     3f6:	8c 7f       	andi	r24, 0xFC	; 252
     3f8:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B &= ~(1<<WGM22);
     3fc:	80 91 b1 00 	lds	r24, 0x00B1
     400:	87 7f       	andi	r24, 0xF7	; 247
     402:	80 93 b1 00 	sts	0x00B1, r24
	ASSR &= ~(1<<AS2);
     406:	80 91 b6 00 	lds	r24, 0x00B6
     40a:	8f 7d       	andi	r24, 0xDF	; 223
     40c:	80 93 b6 00 	sts	0x00B6, r24
	TIMSK2 &= ~(1<<OCIE2A);
     410:	80 91 70 00 	lds	r24, 0x0070
     414:	8d 7f       	andi	r24, 0xFD	; 253
     416:	80 93 70 00 	sts	0x0070, r24
	
	if ((F_CPU >= 1000000UL) && (F_CPU <= 16000000UL)) {	// prescaler set to 64
		TCCR2B |= (1<<CS22);
     41a:	80 91 b1 00 	lds	r24, 0x00B1
     41e:	84 60       	ori	r24, 0x04	; 4
     420:	80 93 b1 00 	sts	0x00B1, r24
		TCCR2B &= ~((1<<CS21) | (1<<CS20));
     424:	80 91 b1 00 	lds	r24, 0x00B1
     428:	8c 7f       	andi	r24, 0xFC	; 252
     42a:	80 93 b1 00 	sts	0x00B1, r24
	// nothing needed here
#else
#error Unsupported CPU type
#endif

	tcnt2 = 256 - (int)((float)F_CPU * 0.001 / prescaler);
     42e:	86 e0       	ldi	r24, 0x06	; 6
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	90 93 5b 02 	sts	0x025B, r25
     436:	80 93 5a 02 	sts	0x025A, r24
     43a:	08 95       	ret

0000043c <_ZN8MsTimer25startEv>:
}

void MsTimer2::start() {
	count = 0;
     43c:	10 92 5d 02 	sts	0x025D, r1
     440:	10 92 5e 02 	sts	0x025E, r1
     444:	10 92 5f 02 	sts	0x025F, r1
     448:	10 92 60 02 	sts	0x0260, r1
	overflowing = 0;
     44c:	10 92 5c 02 	sts	0x025C, r1
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined (__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TCNT2 = tcnt2;
     450:	80 91 5a 02 	lds	r24, 0x025A
     454:	90 91 5b 02 	lds	r25, 0x025B
     458:	80 93 b2 00 	sts	0x00B2, r24
	TIMSK2 |= (1<<TOIE2);
     45c:	e0 e7       	ldi	r30, 0x70	; 112
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	81 60       	ori	r24, 0x01	; 1
     464:	80 83       	st	Z, r24
     466:	08 95       	ret

00000468 <_ZN8MsTimer29_overflowEv>:
	itimer.end();
#endif
}

void MsTimer2::_overflow() {
	count += 1;
     468:	80 91 5d 02 	lds	r24, 0x025D
     46c:	90 91 5e 02 	lds	r25, 0x025E
     470:	a0 91 5f 02 	lds	r26, 0x025F
     474:	b0 91 60 02 	lds	r27, 0x0260
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	a1 1d       	adc	r26, r1
     47c:	b1 1d       	adc	r27, r1
     47e:	80 93 5d 02 	sts	0x025D, r24
     482:	90 93 5e 02 	sts	0x025E, r25
     486:	a0 93 5f 02 	sts	0x025F, r26
     48a:	b0 93 60 02 	sts	0x0260, r27
	
	if (count >= msecs && !overflowing) {
     48e:	80 91 5d 02 	lds	r24, 0x025D
     492:	90 91 5e 02 	lds	r25, 0x025E
     496:	a0 91 5f 02 	lds	r26, 0x025F
     49a:	b0 91 60 02 	lds	r27, 0x0260
     49e:	40 91 63 02 	lds	r20, 0x0263
     4a2:	50 91 64 02 	lds	r21, 0x0264
     4a6:	60 91 65 02 	lds	r22, 0x0265
     4aa:	70 91 66 02 	lds	r23, 0x0266
     4ae:	84 17       	cp	r24, r20
     4b0:	95 07       	cpc	r25, r21
     4b2:	a6 07       	cpc	r26, r22
     4b4:	b7 07       	cpc	r27, r23
     4b6:	10 f1       	brcs	.+68     	; 0x4fc <_ZN8MsTimer29_overflowEv+0x94>
     4b8:	80 91 5c 02 	lds	r24, 0x025C
     4bc:	81 11       	cpse	r24, r1
     4be:	1e c0       	rjmp	.+60     	; 0x4fc <_ZN8MsTimer29_overflowEv+0x94>
		overflowing = 1;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	80 93 5c 02 	sts	0x025C, r24
		count = count - msecs; // subtract ms to catch missed overflows
     4c6:	80 91 5d 02 	lds	r24, 0x025D
     4ca:	90 91 5e 02 	lds	r25, 0x025E
     4ce:	a0 91 5f 02 	lds	r26, 0x025F
     4d2:	b0 91 60 02 	lds	r27, 0x0260
     4d6:	84 1b       	sub	r24, r20
     4d8:	95 0b       	sbc	r25, r21
     4da:	a6 0b       	sbc	r26, r22
     4dc:	b7 0b       	sbc	r27, r23
     4de:	80 93 5d 02 	sts	0x025D, r24
     4e2:	90 93 5e 02 	sts	0x025E, r25
     4e6:	a0 93 5f 02 	sts	0x025F, r26
     4ea:	b0 93 60 02 	sts	0x0260, r27
					// set to 0 if you don't want this.
		(*func)();
     4ee:	e0 91 61 02 	lds	r30, 0x0261
     4f2:	f0 91 62 02 	lds	r31, 0x0262
     4f6:	09 95       	icall
		overflowing = 0;
     4f8:	10 92 5c 02 	sts	0x025C, r1
     4fc:	08 95       	ret

000004fe <__vector_9>:

#if defined (__AVR__)
#if defined (__AVR_ATmega32U4__)
ISR(TIMER4_OVF_vect) {
#else
ISR(TIMER2_OVF_vect) {
     4fe:	1f 92       	push	r1
     500:	0f 92       	push	r0
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	0f 92       	push	r0
     506:	11 24       	eor	r1, r1
     508:	2f 93       	push	r18
     50a:	3f 93       	push	r19
     50c:	4f 93       	push	r20
     50e:	5f 93       	push	r21
     510:	6f 93       	push	r22
     512:	7f 93       	push	r23
     514:	8f 93       	push	r24
     516:	9f 93       	push	r25
     518:	af 93       	push	r26
     51a:	bf 93       	push	r27
     51c:	ef 93       	push	r30
     51e:	ff 93       	push	r31
#endif
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined (__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TCNT2 = MsTimer2::tcnt2;
     520:	80 91 5a 02 	lds	r24, 0x025A
     524:	90 91 5b 02 	lds	r25, 0x025B
     528:	80 93 b2 00 	sts	0x00B2, r24
#elif defined (__AVR_ATmega8__)
	TCNT2 = MsTimer2::tcnt2;
#elif defined (__AVR_ATmega32U4__)
	// not necessary on 32u4's high speed timer4
#endif
	MsTimer2::_overflow();
     52c:	0e 94 34 02 	call	0x468	; 0x468 <_ZN8MsTimer29_overflowEv>
}
     530:	ff 91       	pop	r31
     532:	ef 91       	pop	r30
     534:	bf 91       	pop	r27
     536:	af 91       	pop	r26
     538:	9f 91       	pop	r25
     53a:	8f 91       	pop	r24
     53c:	7f 91       	pop	r23
     53e:	6f 91       	pop	r22
     540:	5f 91       	pop	r21
     542:	4f 91       	pop	r20
     544:	3f 91       	pop	r19
     546:	2f 91       	pop	r18
     548:	0f 90       	pop	r0
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	0f 90       	pop	r0
     54e:	1f 90       	pop	r1
     550:	18 95       	reti

00000552 <_ZN8DirectorC1Ev>:
#include "Director.h"

Director::Director() {
	count = 0;
     552:	fc 01       	movw	r30, r24
     554:	12 82       	std	Z+2, r1	; 0x02
     556:	11 82       	std	Z+1, r1	; 0x01
	state = Dir_Start;
     558:	10 82       	st	Z, r1
     55a:	08 95       	ret

0000055c <_ZN8Director4TickEv>:
			enms[i]->create(type, x, y, x_vel, y_vel, _life, _ticks);
		}
	}
}

void Director::Tick() {
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	ec 01       	movw	r28, r24
	switch(state) {
     562:	88 81       	ld	r24, Y
     564:	81 30       	cpi	r24, 0x01	; 1
     566:	41 f0       	breq	.+16     	; 0x578 <_ZN8Director4TickEv+0x1c>
     568:	28 f0       	brcs	.+10     	; 0x574 <_ZN8Director4TickEv+0x18>
     56a:	82 30       	cpi	r24, 0x02	; 2
     56c:	79 f0       	breq	.+30     	; 0x58c <_ZN8Director4TickEv+0x30>
     56e:	83 30       	cpi	r24, 0x03	; 3
     570:	b9 f0       	breq	.+46     	; 0x5a0 <_ZN8Director4TickEv+0x44>
     572:	26 c0       	rjmp	.+76     	; 0x5c0 <_ZN8Director4TickEv+0x64>
		case Dir_Start:
			state = Dir_Menu;
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	23 c0       	rjmp	.+70     	; 0x5be <_ZN8Director4TickEv+0x62>
		break;
		case Dir_Menu:
			if (bitRead(p1_input, SHOT)) {
     578:	80 91 6a 01 	lds	r24, 0x016A
     57c:	86 ff       	sbrs	r24, 6
     57e:	20 c0       	rjmp	.+64     	; 0x5c0 <_ZN8Director4TickEv+0x64>
				bitWrite(game_event, START_GAME, HIGH);
     580:	80 91 6b 01 	lds	r24, 0x016B
     584:	81 60       	ori	r24, 0x01	; 1
     586:	80 93 6b 01 	sts	0x016B, r24
     58a:	18 c0       	rjmp	.+48     	; 0x5bc <_ZN8Director4TickEv+0x60>
				state = Dir_Stage;
			}
		break;
		case Dir_Stage:
			if (bitRead(game_event, WIN)) state = Dir_Win;
     58c:	80 91 6b 01 	lds	r24, 0x016B
     590:	86 ff       	sbrs	r24, 6
     592:	02 c0       	rjmp	.+4      	; 0x598 <_ZN8Director4TickEv+0x3c>
     594:	94 e0       	ldi	r25, 0x04	; 4
     596:	98 83       	st	Y, r25
			if (bitRead(game_event, PAUSE)) state = Dir_Pause;
     598:	85 ff       	sbrs	r24, 5
     59a:	12 c0       	rjmp	.+36     	; 0x5c0 <_ZN8Director4TickEv+0x64>
     59c:	83 e0       	ldi	r24, 0x03	; 3
     59e:	0f c0       	rjmp	.+30     	; 0x5be <_ZN8Director4TickEv+0x62>
		break;
		case Dir_Pause:
			if (bitRead(p1_input, ENTER)) state = Dir_Stage;
     5a0:	80 91 6a 01 	lds	r24, 0x016A
     5a4:	85 ff       	sbrs	r24, 5
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <_ZN8Director4TickEv+0x50>
     5a8:	82 e0       	ldi	r24, 0x02	; 2
     5aa:	88 83       	st	Y, r24
			if (p2.active && bitRead(p2_input, ENTER)) state = Dir_Stage;
     5ac:	80 91 7b 01 	lds	r24, 0x017B
     5b0:	88 23       	and	r24, r24
     5b2:	31 f0       	breq	.+12     	; 0x5c0 <_ZN8Director4TickEv+0x64>
     5b4:	80 91 69 01 	lds	r24, 0x0169
     5b8:	85 ff       	sbrs	r24, 5
     5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <_ZN8Director4TickEv+0x64>
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	88 83       	st	Y, r24
		break;
		default:
		break;
	}
	
	switch(state) {
     5c0:	88 81       	ld	r24, Y
     5c2:	82 30       	cpi	r24, 0x02	; 2
     5c4:	61 f0       	breq	.+24     	; 0x5de <_ZN8Director4TickEv+0x82>
     5c6:	84 30       	cpi	r24, 0x04	; 4
     5c8:	b9 f4       	brne	.+46     	; 0x5f8 <_ZN8Director4TickEv+0x9c>
			// draw pause screen
			// ticking stops, so nothing is drawn
		break;
		case Dir_Win:
			// draw win screen
			p1.Tick();
     5ca:	8c e7       	ldi	r24, 0x7C	; 124
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN6Player4TickEv>
			p2.Tick();
     5d2:	8e e6       	ldi	r24, 0x6E	; 110
     5d4:	91 e0       	ldi	r25, 0x01	; 1
		break;
		default:
		break;
	}
	return;
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
			// ticking stops, so nothing is drawn
		break;
		case Dir_Win:
			// draw win screen
			p1.Tick();
			p2.Tick();
     5da:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <_ZN6Player4TickEv>
			// draw menu screen
		break;
		case Dir_Stage:
			// tick all existing objects
			// drawing is done with each object tick
			p1.Tick();
     5de:	8c e7       	ldi	r24, 0x7C	; 124
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN6Player4TickEv>
			p2.Tick();
     5e6:	8e e6       	ldi	r24, 0x6E	; 110
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN6Player4TickEv>
				boss = new EyeBall();
			}
			*/
			
			// they should be automatically deleted
			++count;
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	9a 81       	ldd	r25, Y+2	; 0x02
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	9a 83       	std	Y+2, r25	; 0x02
     5f6:	89 83       	std	Y+1, r24	; 0x01
		break;
		default:
		break;
	}
	return;
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <_ZN5EnemyC1Ev>:
#include "Enemy.h"

Enemy::Enemy() {
     5fe:	fc 01       	movw	r30, r24
     600:	14 82       	std	Z+4, r1	; 0x04
	active = false;
     602:	17 86       	std	Z+15, r1	; 0x0f
     604:	08 95       	ret

00000606 <_ZN7EnmShotC1Ev>:
		return true;
	}
}

EnmShot::EnmShot() {
	active = false;
     606:	fc 01       	movw	r30, r24
     608:	17 82       	std	Z+7, r1	; 0x07
	state = ES_Exit;
     60a:	22 e0       	ldi	r18, 0x02	; 2
     60c:	20 83       	st	Z, r18
     60e:	08 95       	ret

00000610 <_ZN6PlayerC1Ehh>:
﻿#include "Player.h"

// Events {START_GAME, P1_HIT, P1_EXTEND, P2_HIT, P2_EXTEND, PAUSE, WIN, BOSS_ACTION};
Player::Player(byte _num, byte _life) {
     610:	fc 01       	movw	r30, r24
	num = _num;
     612:	60 83       	st	Z, r22
	life = _life;
     614:	41 83       	std	Z+1, r20	; 0x01
	power = 1;
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	82 83       	std	Z+2, r24	; 0x02
	speed = 1; // Unused as of now.
     61a:	83 83       	std	Z+3, r24	; 0x03
	
	x = (num == 1) ? STG_WIDTH / 2 - 2 : STG_WIDTH / 2 + 2;
     61c:	61 30       	cpi	r22, 0x01	; 1
     61e:	11 f0       	breq	.+4      	; 0x624 <_ZN6PlayerC1Ehh+0x14>
     620:	82 e1       	ldi	r24, 0x12	; 18
     622:	01 c0       	rjmp	.+2      	; 0x626 <_ZN6PlayerC1Ehh+0x16>
     624:	8e e0       	ldi	r24, 0x0E	; 14
     626:	82 87       	std	Z+10, r24	; 0x0a
	y = STG_HEIGHT - 3;
     628:	8d e1       	ldi	r24, 0x1D	; 29
     62a:	83 87       	std	Z+11, r24	; 0x0b

	state = Player_Start;
     62c:	14 82       	std	Z+4, r1	; 0x04
	
	// p1 == red, p2 == green
	//coreColor = (num == 1) ? Colors[RED] : Colors[GREEN];
	active = (num == 1) ? true : false;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	61 30       	cpi	r22, 0x01	; 1
     632:	09 f0       	breq	.+2      	; 0x636 <_ZN6PlayerC1Ehh+0x26>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	85 87       	std	Z+13, r24	; 0x0d
	signal = (num == 1) ? &p1_input : &p2_input;
     638:	81 11       	cpse	r24, r1
     63a:	03 c0       	rjmp	.+6      	; 0x642 <_ZN6PlayerC1Ehh+0x32>
     63c:	89 e6       	ldi	r24, 0x69	; 105
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	02 c0       	rjmp	.+4      	; 0x646 <_ZN6PlayerC1Ehh+0x36>
     642:	8a e6       	ldi	r24, 0x6A	; 106
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	96 83       	std	Z+6, r25	; 0x06
     648:	85 83       	std	Z+5, r24	; 0x05
     64a:	08 95       	ret

0000064c <_ZN6Player5shootEv>:
	// Re-init the player's position on the matrix.
	x = STG_WIDTH / 2;
	y = STG_HEIGHT - 2;
}

void Player::shoot() {
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	7c 01       	movw	r14, r24
     658:	ca e1       	ldi	r28, 0x1A	; 26
     65a:	d2 e0       	ldi	r29, 0x02	; 2
	// 'Spawn' bullet relative to player depending on usart
	// Ensure patten shot is relative to current power
	for (byte i = 0; i < PS_MAX; ++i) {
		if (!pl_bullets[i]->active) {
     65c:	89 91       	ld	r24, Y+
     65e:	99 91       	ld	r25, Y+
     660:	fc 01       	movw	r30, r24
     662:	27 81       	ldd	r18, Z+7	; 0x07
     664:	21 11       	cpse	r18, r1
     666:	06 c0       	rjmp	.+12     	; 0x674 <_ZN6Player5shootEv+0x28>
			pl_bullets[i]->create(x, y, 0, -3);
     668:	0d ef       	ldi	r16, 0xFD	; 253
     66a:	f7 01       	movw	r30, r14
     66c:	43 85       	ldd	r20, Z+11	; 0x0b
     66e:	62 85       	ldd	r22, Z+10	; 0x0a
     670:	0e 94 09 04 	call	0x812	; 0x812 <_ZN10PlayerShot6createEhhhh>
}

void Player::shoot() {
	// 'Spawn' bullet relative to player depending on usart
	// Ensure patten shot is relative to current power
	for (byte i = 0; i < PS_MAX; ++i) {
     674:	f2 e0       	ldi	r31, 0x02	; 2
     676:	ca 35       	cpi	r28, 0x5A	; 90
     678:	df 07       	cpc	r29, r31
     67a:	81 f7       	brne	.-32     	; 0x65c <_ZN6Player5shootEv+0x10>
		if (!pl_bullets[i]->active) {
			pl_bullets[i]->create(x, y, 0, -3);
		}
	}
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	0f 91       	pop	r16
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	08 95       	ret

00000688 <_ZN6Player4moveEv>:

void Player::move() {
     688:	fc 01       	movw	r30, r24
	// Update position on buffer matrix according to usart
	if (bitRead(*signal, UP) && y > 0) --y;
     68a:	a5 81       	ldd	r26, Z+5	; 0x05
     68c:	b6 81       	ldd	r27, Z+6	; 0x06
     68e:	8c 91       	ld	r24, X
     690:	84 ff       	sbrs	r24, 4
     692:	05 c0       	rjmp	.+10     	; 0x69e <_ZN6Player4moveEv+0x16>
     694:	83 85       	ldd	r24, Z+11	; 0x0b
     696:	88 23       	and	r24, r24
     698:	11 f0       	breq	.+4      	; 0x69e <_ZN6Player4moveEv+0x16>
     69a:	81 50       	subi	r24, 0x01	; 1
     69c:	83 87       	std	Z+11, r24	; 0x0b
	if (bitRead(*signal, DOWN) && y < STG_HEIGHT) ++y;
     69e:	8c 91       	ld	r24, X
     6a0:	82 ff       	sbrs	r24, 2
     6a2:	05 c0       	rjmp	.+10     	; 0x6ae <_ZN6Player4moveEv+0x26>
     6a4:	83 85       	ldd	r24, Z+11	; 0x0b
     6a6:	80 32       	cpi	r24, 0x20	; 32
     6a8:	10 f4       	brcc	.+4      	; 0x6ae <_ZN6Player4moveEv+0x26>
     6aa:	8f 5f       	subi	r24, 0xFF	; 255
     6ac:	83 87       	std	Z+11, r24	; 0x0b
	if (bitRead(*signal, LEFT) && x > 0) --x;
     6ae:	8c 91       	ld	r24, X
     6b0:	81 ff       	sbrs	r24, 1
     6b2:	05 c0       	rjmp	.+10     	; 0x6be <_ZN6Player4moveEv+0x36>
     6b4:	82 85       	ldd	r24, Z+10	; 0x0a
     6b6:	88 23       	and	r24, r24
     6b8:	11 f0       	breq	.+4      	; 0x6be <_ZN6Player4moveEv+0x36>
     6ba:	81 50       	subi	r24, 0x01	; 1
     6bc:	82 87       	std	Z+10, r24	; 0x0a
	if (bitRead(*signal, RIGHT) && x < STG_WIDTH) ++x;
     6be:	8c 91       	ld	r24, X
     6c0:	80 ff       	sbrs	r24, 0
     6c2:	05 c0       	rjmp	.+10     	; 0x6ce <_ZN6Player4moveEv+0x46>
     6c4:	82 85       	ldd	r24, Z+10	; 0x0a
     6c6:	80 32       	cpi	r24, 0x20	; 32
     6c8:	10 f4       	brcc	.+4      	; 0x6ce <_ZN6Player4moveEv+0x46>
     6ca:	8f 5f       	subi	r24, 0xFF	; 255
     6cc:	82 87       	std	Z+10, r24	; 0x0a
     6ce:	08 95       	ret

000006d0 <_ZN6Player4drawEv>:
	if (num == 1) bitWrite(game_event, P1_EXTEND, HIGH);
	else bitWrite(game_event, P2_EXTEND, HIGH);
}

void Player::draw() {
	Send_To_Matrix(this, num);
     6d0:	fc 01       	movw	r30, r24
     6d2:	60 81       	ld	r22, Z
     6d4:	0c 94 87 01 	jmp	0x30e	; 0x30e <_Z14Send_To_MatrixP6Playerh>

000006d8 <_ZN6Player12anim_explodeEh>:
}

void Player::anim_explode(byte frame) {
     6d8:	26 2f       	mov	r18, r22
	Send_To_Matrix(ANIM_BIG_EXPLODE, x, y, frame);
     6da:	fc 01       	movw	r30, r24
     6dc:	43 85       	ldd	r20, Z+11	; 0x0b
     6de:	62 85       	ldd	r22, Z+10	; 0x0a
     6e0:	8c e0       	ldi	r24, 0x0C	; 12
     6e2:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <_Z14Send_To_Matrix7Graphichhh>

000006e6 <_ZN6Player4TickEv>:
}

// Controls {RIGHT, LEFT, DOWN, A3_BROKEN, UP, ENTER, SHOT, SUDOKU};
// P_States {Player_Start, Player_Update, Player_Explode, Player_Inactive, Player_Lost};
void Player::Tick() {
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	fc 01       	movw	r30, r24
	
	switch(state) { //  Transitions
     6ee:	84 81       	ldd	r24, Z+4	; 0x04
     6f0:	82 30       	cpi	r24, 0x02	; 2
     6f2:	e1 f0       	breq	.+56     	; 0x72c <_ZN6Player4TickEv+0x46>
     6f4:	28 f4       	brcc	.+10     	; 0x700 <_ZN6Player4TickEv+0x1a>
     6f6:	88 23       	and	r24, r24
     6f8:	41 f0       	breq	.+16     	; 0x70a <_ZN6Player4TickEv+0x24>
     6fa:	81 30       	cpi	r24, 0x01	; 1
     6fc:	79 f0       	breq	.+30     	; 0x71c <_ZN6Player4TickEv+0x36>
     6fe:	2c c0       	rjmp	.+88     	; 0x758 <_ZN6Player4TickEv+0x72>
     700:	83 30       	cpi	r24, 0x03	; 3
     702:	f9 f0       	breq	.+62     	; 0x742 <_ZN6Player4TickEv+0x5c>
     704:	84 30       	cpi	r24, 0x04	; 4
     706:	31 f0       	breq	.+12     	; 0x714 <_ZN6Player4TickEv+0x2e>
     708:	27 c0       	rjmp	.+78     	; 0x758 <_ZN6Player4TickEv+0x72>
		case Player_Start:
			state = Player_Inactive;
     70a:	84 e0       	ldi	r24, 0x04	; 4
     70c:	84 83       	std	Z+4, r24	; 0x04
			wait = false;
     70e:	11 86       	std	Z+9, r1	; 0x09
			honor = false;
     710:	10 86       	std	Z+8, r1	; 0x08
		break;
     712:	22 c0       	rjmp	.+68     	; 0x758 <_ZN6Player4TickEv+0x72>
		
		case Player_Inactive:
			state = (active) ? Player_Update : state;
     714:	95 85       	ldd	r25, Z+13	; 0x0d
     716:	99 23       	and	r25, r25
     718:	69 f0       	breq	.+26     	; 0x734 <_ZN6Player4TickEv+0x4e>
     71a:	1a c0       	rjmp	.+52     	; 0x750 <_ZN6Player4TickEv+0x6a>
		break;
		
		case Player_Update:
			if (bitRead(*signal, SUDOKU)) {
     71c:	a5 81       	ldd	r26, Z+5	; 0x05
     71e:	b6 81       	ldd	r27, Z+6	; 0x06
     720:	9c 91       	ld	r25, X
     722:	97 ff       	sbrs	r25, 7
     724:	19 c0       	rjmp	.+50     	; 0x758 <_ZN6Player4TickEv+0x72>
				honor = true;
     726:	80 87       	std	Z+8, r24	; 0x08
				state = Player_Explode;
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	04 c0       	rjmp	.+8      	; 0x734 <_ZN6Player4TickEv+0x4e>
			// if pos overlap with bullet
			// state = Player_Explode;
		break;
		
		case Player_Explode:
			if (life <= 0) state = Player_Lost;
     72c:	81 81       	ldd	r24, Z+1	; 0x01
     72e:	81 11       	cpse	r24, r1
     730:	03 c0       	rjmp	.+6      	; 0x738 <_ZN6Player4TickEv+0x52>
     732:	85 e0       	ldi	r24, 0x05	; 5
     734:	84 83       	std	Z+4, r24	; 0x04
     736:	10 c0       	rjmp	.+32     	; 0x758 <_ZN6Player4TickEv+0x72>
			else { 
				i = 1;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	87 83       	std	Z+7, r24	; 0x07
				frame = 0;
     73c:	14 86       	std	Z+12, r1	; 0x0c
				state = Player_Respawn;
     73e:	83 e0       	ldi	r24, 0x03	; 3
     740:	f9 cf       	rjmp	.-14     	; 0x734 <_ZN6Player4TickEv+0x4e>
			}
		break;
		
		case Player_Respawn:
			if (i > 30) {
     742:	87 81       	ldd	r24, Z+7	; 0x07
     744:	8f 31       	cpi	r24, 0x1F	; 31
     746:	30 f0       	brcs	.+12     	; 0x754 <_ZN6Player4TickEv+0x6e>
	signal = (num == 1) ? &p1_input : &p2_input;
}

void Player::spawn() {
	// Re-init the player's position on the matrix.
	x = STG_WIDTH / 2;
     748:	80 e1       	ldi	r24, 0x10	; 16
     74a:	82 87       	std	Z+10, r24	; 0x0a
	y = STG_HEIGHT - 2;
     74c:	8e e1       	ldi	r24, 0x1E	; 30
     74e:	83 87       	std	Z+11, r24	; 0x0b
		break;
		
		case Player_Respawn:
			if (i > 30) {
				spawn();
				state = Player_Update;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	f0 cf       	rjmp	.-32     	; 0x734 <_ZN6Player4TickEv+0x4e>
			}
			else ++i;
     754:	8f 5f       	subi	r24, 0xFF	; 255
     756:	87 83       	std	Z+7, r24	; 0x07
		
		default:
		break;
	}
	
	switch (state) {
     758:	14 81       	ldd	r17, Z+4	; 0x04
     75a:	12 30       	cpi	r17, 0x02	; 2
     75c:	99 f1       	breq	.+102    	; 0x7c4 <_ZN6Player4TickEv+0xde>
     75e:	18 f4       	brcc	.+6      	; 0x766 <_ZN6Player4TickEv+0x80>
     760:	11 30       	cpi	r17, 0x01	; 1
     762:	71 f0       	breq	.+28     	; 0x780 <_ZN6Player4TickEv+0x9a>
     764:	4d c0       	rjmp	.+154    	; 0x800 <_ZN6Player4TickEv+0x11a>
     766:	13 30       	cpi	r17, 0x03	; 3
     768:	d9 f1       	breq	.+118    	; 0x7e0 <_ZN6Player4TickEv+0xfa>
     76a:	14 30       	cpi	r17, 0x04	; 4
     76c:	09 f0       	breq	.+2      	; 0x770 <_ZN6Player4TickEv+0x8a>
     76e:	48 c0       	rjmp	.+144    	; 0x800 <_ZN6Player4TickEv+0x11a>
		case Player_Start:
		break;
		
		case Player_Inactive:
			if (bitRead(*signal, ENTER)) active = true;
     770:	a5 81       	ldd	r26, Z+5	; 0x05
     772:	b6 81       	ldd	r27, Z+6	; 0x06
     774:	8c 91       	ld	r24, X
     776:	85 ff       	sbrs	r24, 5
     778:	43 c0       	rjmp	.+134    	; 0x800 <_ZN6Player4TickEv+0x11a>
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	85 87       	std	Z+13, r24	; 0x0d
     77e:	40 c0       	rjmp	.+128    	; 0x800 <_ZN6Player4TickEv+0x11a>
     780:	ef 01       	movw	r28, r30
		break;
		
		case Player_Update:
			move();
     782:	cf 01       	movw	r24, r30
     784:	0e 94 44 03 	call	0x688	; 0x688 <_ZN6Player4moveEv>
			if (bitRead(*signal, SHOT)) {
     788:	ed 81       	ldd	r30, Y+5	; 0x05
     78a:	fe 81       	ldd	r31, Y+6	; 0x06
     78c:	80 81       	ld	r24, Z
     78e:	86 ff       	sbrs	r24, 6
     790:	08 c0       	rjmp	.+16     	; 0x7a2 <_ZN6Player4TickEv+0xbc>
				if (!wait) {
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	81 11       	cpse	r24, r1
     796:	05 c0       	rjmp	.+10     	; 0x7a2 <_ZN6Player4TickEv+0xbc>
					shoot();
     798:	ce 01       	movw	r24, r28
     79a:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN6Player5shootEv>
					wait = true;
     79e:	19 87       	std	Y+9, r17	; 0x09
     7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <_ZN6Player4TickEv+0xbe>
				} else wait = false;
     7a2:	19 86       	std	Y+9, r1	; 0x09
			}
			else wait = false;
			if (bitRead(*signal, ENTER)) {
     7a4:	ed 81       	ldd	r30, Y+5	; 0x05
     7a6:	fe 81       	ldd	r31, Y+6	; 0x06
     7a8:	80 81       	ld	r24, Z
     7aa:	85 ff       	sbrs	r24, 5
     7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <_ZN6Player4TickEv+0xd2>
				// pause entire display
				bitWrite(game_event, PAUSE, HIGH);
     7ae:	80 91 6b 01 	lds	r24, 0x016B
     7b2:	80 62       	ori	r24, 0x20	; 32
     7b4:	80 93 6b 01 	sts	0x016B, r24
			}
			draw();
     7b8:	ce 01       	movw	r24, r28
		break;
		
		default:
		break;
	}
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
			else wait = false;
			if (bitRead(*signal, ENTER)) {
				// pause entire display
				bitWrite(game_event, PAUSE, HIGH);
			}
			draw();
     7c0:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <_ZN6Player4drawEv>
				enm_bullets.add(new EnmLaser(x, y, -1, -1));
				enm_bullets.add(new EnmLaser(x, y, -2, 0));
				enm_bullets.add(new EnmLaser(x, y, -1, 1));
			}
		*/
			--life;
     7c4:	81 81       	ldd	r24, Z+1	; 0x01
     7c6:	81 50       	subi	r24, 0x01	; 1
     7c8:	81 83       	std	Z+1, r24	; 0x01
			
			// Sending event to UI
			if (num == 1) bitWrite(game_event, P1_HIT, HIGH);
     7ca:	90 81       	ld	r25, Z
     7cc:	80 91 6b 01 	lds	r24, 0x016B
     7d0:	91 30       	cpi	r25, 0x01	; 1
     7d2:	11 f4       	brne	.+4      	; 0x7d8 <_ZN6Player4TickEv+0xf2>
     7d4:	82 60       	ori	r24, 0x02	; 2
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <_ZN6Player4TickEv+0xf4>
			else bitWrite(game_event, P2_HIT, HIGH);
     7d8:	88 60       	ori	r24, 0x08	; 8
     7da:	80 93 6b 01 	sts	0x016B, r24
     7de:	10 c0       	rjmp	.+32     	; 0x800 <_ZN6Player4TickEv+0x11a>
		break;
		
		case Player_Respawn:
			if (i % 7 == 0) ++frame;
     7e0:	87 81       	ldd	r24, Z+7	; 0x07
     7e2:	67 e0       	ldi	r22, 0x07	; 7
     7e4:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__udivmodqi4>
     7e8:	91 11       	cpse	r25, r1
     7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <_ZN6Player4TickEv+0x10c>
     7ec:	84 85       	ldd	r24, Z+12	; 0x0c
     7ee:	8f 5f       	subi	r24, 0xFF	; 255
     7f0:	84 87       	std	Z+12, r24	; 0x0c
			anim_explode(frame);
     7f2:	64 85       	ldd	r22, Z+12	; 0x0c
     7f4:	cf 01       	movw	r24, r30
		break;
		
		default:
		break;
	}
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
			else bitWrite(game_event, P2_HIT, HIGH);
		break;
		
		case Player_Respawn:
			if (i % 7 == 0) ++frame;
			anim_explode(frame);
     7fc:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <_ZN6Player12anim_explodeEh>
		break;
		
		default:
		break;
	}
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	08 95       	ret

00000808 <_ZN10PlayerShotC1Ev>:
#include "Player_Shot.h"

PlayerShot::PlayerShot() {
	active = false;
     808:	fc 01       	movw	r30, r24
     80a:	17 82       	std	Z+7, r1	; 0x07
	state = PS_Exit;
     80c:	22 e0       	ldi	r18, 0x02	; 2
     80e:	20 83       	st	Z, r18
     810:	08 95       	ret

00000812 <_ZN10PlayerShot6createEhhhh>:
}

void PlayerShot::create(byte _x, byte _y, byte _xv, byte _yv) {
     812:	0f 93       	push	r16
     814:	fc 01       	movw	r30, r24
	x = _x;
     816:	61 83       	std	Z+1, r22	; 0x01
	y = _y;
     818:	42 83       	std	Z+2, r20	; 0x02
	x_vel = _xv;
     81a:	23 83       	std	Z+3, r18	; 0x03
	y_vel = _yv;
     81c:	04 83       	std	Z+4, r16	; 0x04
	
	active = true;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	87 83       	std	Z+7, r24	; 0x07
	
	state = PS_Start;
     822:	10 82       	st	Z, r1
}
     824:	0f 91       	pop	r16
     826:	08 95       	ret

00000828 <_ZN14SoftwareSerial4readEv>:


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     828:	20 91 a9 02 	lds	r18, 0x02A9
     82c:	30 91 aa 02 	lds	r19, 0x02AA
     830:	28 17       	cp	r18, r24
     832:	39 07       	cpc	r19, r25
     834:	b9 f4       	brne	.+46     	; 0x864 <_ZN14SoftwareSerial4readEv+0x3c>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     836:	90 91 67 02 	lds	r25, 0x0267
     83a:	80 91 68 02 	lds	r24, 0x0268
     83e:	98 17       	cp	r25, r24
     840:	89 f0       	breq	.+34     	; 0x864 <_ZN14SoftwareSerial4readEv+0x3c>
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     842:	e0 91 67 02 	lds	r30, 0x0267
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	e7 59       	subi	r30, 0x97	; 151
     84a:	fd 4f       	sbci	r31, 0xFD	; 253
     84c:	80 81       	ld	r24, Z
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     84e:	20 91 67 02 	lds	r18, 0x0267
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	2f 5f       	subi	r18, 0xFF	; 255
     856:	3f 4f       	sbci	r19, 0xFF	; 255
     858:	2f 73       	andi	r18, 0x3F	; 63
     85a:	33 27       	eor	r19, r19
     85c:	20 93 67 02 	sts	0x0267, r18
  return d;
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	08 95       	ret

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     868:	08 95       	ret

0000086a <_ZN14SoftwareSerial5writeEh>:

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	dc 01       	movw	r26, r24
  if (_tx_delay == 0) {
     872:	5c 96       	adiw	r26, 0x1c	; 28
     874:	2d 91       	ld	r18, X+
     876:	3c 91       	ld	r19, X
     878:	5d 97       	sbiw	r26, 0x1d	; 29
     87a:	21 15       	cp	r18, r1
     87c:	31 05       	cpc	r19, r1
     87e:	39 f4       	brne	.+14     	; 0x88e <_ZN14SoftwareSerial5writeEh+0x24>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	13 96       	adiw	r26, 0x03	; 3
     886:	9c 93       	st	X, r25
     888:	8e 93       	st	-X, r24
     88a:	12 97       	sbiw	r26, 0x02	; 2
    setWriteError();
    return 0;
     88c:	3d c0       	rjmp	.+122    	; 0x908 <__stack+0x9>

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
     88e:	51 96       	adiw	r26, 0x11	; 17
     890:	ed 91       	ld	r30, X+
     892:	fc 91       	ld	r31, X
     894:	52 97       	sbiw	r26, 0x12	; 18
  uint8_t reg_mask = _transmitBitMask;
     896:	50 96       	adiw	r26, 0x10	; 16
     898:	9c 91       	ld	r25, X
     89a:	50 97       	sbiw	r26, 0x10	; 16
  uint8_t inv_mask = ~_transmitBitMask;
     89c:	89 2f       	mov	r24, r25
     89e:	80 95       	com	r24
  uint8_t oldSREG = SREG;
     8a0:	1f b7       	in	r17, 0x3f	; 63
  bool inv = _inverse_logic;
     8a2:	5e 96       	adiw	r26, 0x1e	; 30
     8a4:	4c 91       	ld	r20, X
     8a6:	5e 97       	sbiw	r26, 0x1e	; 30
  uint16_t delay = _tx_delay;

  if (inv)
     8a8:	41 fb       	bst	r20, 1
     8aa:	77 27       	eor	r23, r23
     8ac:	70 f9       	bld	r23, 0
     8ae:	41 fd       	sbrc	r20, 1
    b = ~b;
     8b0:	60 95       	com	r22

  cli();  // turn off interrupts for a clean txmit
     8b2:	f8 94       	cli

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
     8b4:	40 81       	ld	r20, Z
    b = ~b;

  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  if (inv)
     8b6:	77 23       	and	r23, r23
     8b8:	11 f0       	breq	.+4      	; 0x8be <_ZN14SoftwareSerial5writeEh+0x54>
    *reg |= reg_mask;
     8ba:	49 2b       	or	r20, r25
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <_ZN14SoftwareSerial5writeEh+0x56>
  else
    *reg &= inv_mask;
     8be:	48 23       	and	r20, r24
     8c0:	40 83       	st	Z, r20
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     8c2:	e9 01       	movw	r28, r18
     8c4:	21 97       	sbiw	r28, 0x01	; 1
     8c6:	f1 f7       	brne	.-4      	; 0x8c4 <_ZN14SoftwareSerial5writeEh+0x5a>
     8c8:	48 e0       	ldi	r20, 0x08	; 8

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
      *reg |= reg_mask; // send 1
     8ca:	50 81       	ld	r21, Z
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     8cc:	60 ff       	sbrs	r22, 0
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <_ZN14SoftwareSerial5writeEh+0x6a>
      *reg |= reg_mask; // send 1
     8d0:	59 2b       	or	r21, r25
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <_ZN14SoftwareSerial5writeEh+0x6c>
    else
      *reg &= inv_mask; // send 0
     8d4:	58 23       	and	r21, r24
     8d6:	50 83       	st	Z, r21
     8d8:	e9 01       	movw	r28, r18
     8da:	21 97       	sbiw	r28, 0x01	; 1
     8dc:	f1 f7       	brne	.-4      	; 0x8da <_ZN14SoftwareSerial5writeEh+0x70>

    tunedDelay(delay);
    b >>= 1;
     8de:	66 95       	lsr	r22
     8e0:	41 50       	subi	r20, 0x01	; 1
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
     8e2:	99 f7       	brne	.-26     	; 0x8ca <_ZN14SoftwareSerial5writeEh+0x60>
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
     8e4:	77 23       	and	r23, r23
     8e6:	21 f0       	breq	.+8      	; 0x8f0 <_ZN14SoftwareSerial5writeEh+0x86>
    *reg &= inv_mask;
     8e8:	90 81       	ld	r25, Z
     8ea:	89 23       	and	r24, r25
     8ec:	80 83       	st	Z, r24
     8ee:	03 c0       	rjmp	.+6      	; 0x8f6 <_ZN14SoftwareSerial5writeEh+0x8c>
  else
    *reg |= reg_mask;
     8f0:	80 81       	ld	r24, Z
     8f2:	98 2b       	or	r25, r24
     8f4:	90 83       	st	Z, r25

  SREG = oldSREG; // turn interrupts back on
     8f6:	1f bf       	out	0x3f, r17	; 63
     8f8:	5c 96       	adiw	r26, 0x1c	; 28
     8fa:	8d 91       	ld	r24, X+
     8fc:	9c 91       	ld	r25, X
     8fe:	5d 97       	sbiw	r26, 0x1d	; 29
     900:	01 97       	sbiw	r24, 0x01	; 1
     902:	f1 f7       	brne	.-4      	; 0x900 <__stack+0x1>
  tunedDelay(_tx_delay);
  
  return 1;
     904:	21 e0       	ldi	r18, 0x01	; 1
     906:	30 e0       	ldi	r19, 0x00	; 0
}
     908:	c9 01       	movw	r24, r18
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	08 95       	ret

00000912 <_ZN14SoftwareSerial5flushEv>:

void SoftwareSerial::flush()
{
     912:	08 95       	ret

00000914 <_ZN14SoftwareSerial4peekEv>:
  // There is no tx buffering, simply return
}

int SoftwareSerial::peek()
{
  if (!isListening())
     914:	20 91 a9 02 	lds	r18, 0x02A9
     918:	30 91 aa 02 	lds	r19, 0x02AA
     91c:	28 17       	cp	r18, r24
     91e:	39 07       	cpc	r19, r25
     920:	71 f4       	brne	.+28     	; 0x93e <_ZN14SoftwareSerial4peekEv+0x2a>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     922:	90 91 67 02 	lds	r25, 0x0267
     926:	80 91 68 02 	lds	r24, 0x0268
     92a:	98 17       	cp	r25, r24
     92c:	41 f0       	breq	.+16     	; 0x93e <_ZN14SoftwareSerial4peekEv+0x2a>
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     92e:	e0 91 67 02 	lds	r30, 0x0267
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	e7 59       	subi	r30, 0x97	; 151
     936:	fd 4f       	sbci	r31, 0xFD	; 253
     938:	80 81       	ld	r24, Z
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	08 95       	ret
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	9f ef       	ldi	r25, 0xFF	; 255
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     942:	08 95       	ret

00000944 <_ZN14SoftwareSerial9availableEv>:
  return d;
}

int SoftwareSerial::available()
{
  if (!isListening())
     944:	20 91 a9 02 	lds	r18, 0x02A9
     948:	30 91 aa 02 	lds	r19, 0x02AA
     94c:	28 17       	cp	r18, r24
     94e:	39 07       	cpc	r19, r25
     950:	71 f4       	brne	.+28     	; 0x96e <_ZN14SoftwareSerial9availableEv+0x2a>
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     952:	80 91 68 02 	lds	r24, 0x0268
     956:	20 91 67 02 	lds	r18, 0x0267
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	80 5c       	subi	r24, 0xC0	; 192
     95e:	9f 4f       	sbci	r25, 0xFF	; 255
     960:	82 1b       	sub	r24, r18
     962:	91 09       	sbc	r25, r1
     964:	60 e4       	ldi	r22, 0x40	; 64
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__divmodhi4>
     96c:	08 95       	ret
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     972:	08 95       	ret

00000974 <_ZN14SoftwareSerial13stopListeningEv>:
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
     974:	e0 91 a9 02 	lds	r30, 0x02A9
     978:	f0 91 aa 02 	lds	r31, 0x02AA
     97c:	e8 17       	cp	r30, r24
     97e:	f9 07       	cpc	r31, r25
     980:	69 f4       	brne	.+26     	; 0x99c <_ZN14SoftwareSerial13stopListeningEv+0x28>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     982:	a3 89       	ldd	r26, Z+19	; 0x13
     984:	b4 89       	ldd	r27, Z+20	; 0x14
     986:	9c 91       	ld	r25, X
     988:	85 89       	ldd	r24, Z+21	; 0x15
     98a:	80 95       	com	r24
     98c:	89 23       	and	r24, r25
     98e:	8c 93       	st	X, r24
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
     990:	10 92 aa 02 	sts	0x02AA, r1
     994:	10 92 a9 02 	sts	0x02A9, r1
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 95       	ret
    return true;
  }
  return false;
     99c:	80 e0       	ldi	r24, 0x00	; 0
}
     99e:	08 95       	ret

000009a0 <_ZN14SoftwareSerial6listenEv>:
}

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	ec 01       	movw	r28, r24
  if (!_rx_delay_stopbit)
     9a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9a8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9aa:	89 2b       	or	r24, r25
     9ac:	f1 f0       	breq	.+60     	; 0x9ea <_ZN14SoftwareSerial6listenEv+0x4a>
    return false;

  if (active_object != this)
     9ae:	80 91 a9 02 	lds	r24, 0x02A9
     9b2:	90 91 aa 02 	lds	r25, 0x02AA
     9b6:	8c 17       	cp	r24, r28
     9b8:	9d 07       	cpc	r25, r29
     9ba:	b9 f0       	breq	.+46     	; 0x9ea <_ZN14SoftwareSerial6listenEv+0x4a>
  {
    if (active_object)
     9bc:	00 97       	sbiw	r24, 0x00	; 0
     9be:	11 f0       	breq	.+4      	; 0x9c4 <_ZN14SoftwareSerial6listenEv+0x24>
      active_object->stopListening();
     9c0:	0e 94 ba 04 	call	0x974	; 0x974 <_ZN14SoftwareSerial13stopListeningEv>

    _buffer_overflow = false;
     9c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9c6:	8e 7f       	andi	r24, 0xFE	; 254
     9c8:	8e 8f       	std	Y+30, r24	; 0x1e
    _receive_buffer_head = _receive_buffer_tail = 0;
     9ca:	10 92 68 02 	sts	0x0268, r1
     9ce:	10 92 67 02 	sts	0x0267, r1
    active_object = this;
     9d2:	d0 93 aa 02 	sts	0x02AA, r29
     9d6:	c0 93 a9 02 	sts	0x02A9, r28
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
     9da:	eb 89       	ldd	r30, Y+19	; 0x13
     9dc:	fc 89       	ldd	r31, Y+20	; 0x14
     9de:	90 81       	ld	r25, Z
     9e0:	8d 89       	ldd	r24, Y+21	; 0x15
     9e2:	89 2b       	or	r24, r25
     9e4:	80 83       	st	Z, r24
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	01 c0       	rjmp	.+2      	; 0x9ec <_ZN14SoftwareSerial6listenEv+0x4c>
// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
    return false;
     9ea:	80 e0       	ldi	r24, 0x00	; 0
    setRxIntMsk(true);
    return true;
  }

  return false;
}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     9f2:	1f 92       	push	r1
     9f4:	0f 92       	push	r0
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	0f 92       	push	r0
     9fa:	11 24       	eor	r1, r1
     9fc:	2f 93       	push	r18
     9fe:	3f 93       	push	r19
     a00:	4f 93       	push	r20
     a02:	5f 93       	push	r21
     a04:	6f 93       	push	r22
     a06:	7f 93       	push	r23
     a08:	8f 93       	push	r24
     a0a:	9f 93       	push	r25
     a0c:	af 93       	push	r26
     a0e:	bf 93       	push	r27
     a10:	ef 93       	push	r30
     a12:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     a14:	e0 91 a9 02 	lds	r30, 0x02A9
     a18:	f0 91 aa 02 	lds	r31, 0x02AA
     a1c:	30 97       	sbiw	r30, 0x00	; 0
     a1e:	09 f4       	brne	.+2      	; 0xa22 <__vector_3+0x30>
     a20:	51 c0       	rjmp	.+162    	; 0xac4 <__vector_3+0xd2>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     a22:	96 8d       	ldd	r25, Z+30	; 0x1e
     a24:	a6 85       	ldd	r26, Z+14	; 0x0e
     a26:	b7 85       	ldd	r27, Z+15	; 0x0f
     a28:	85 85       	ldd	r24, Z+13	; 0x0d
     a2a:	91 ff       	sbrs	r25, 1
     a2c:	04 c0       	rjmp	.+8      	; 0xa36 <__vector_3+0x44>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     a2e:	9c 91       	ld	r25, X
     a30:	89 23       	and	r24, r25

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     a32:	29 f4       	brne	.+10     	; 0xa3e <__vector_3+0x4c>
     a34:	47 c0       	rjmp	.+142    	; 0xac4 <__vector_3+0xd2>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     a36:	9c 91       	ld	r25, X
     a38:	89 23       	and	r24, r25

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     a3a:	09 f0       	breq	.+2      	; 0xa3e <__vector_3+0x4c>
     a3c:	43 c0       	rjmp	.+134    	; 0xac4 <__vector_3+0xd2>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     a3e:	a3 89       	ldd	r26, Z+19	; 0x13
     a40:	b4 89       	ldd	r27, Z+20	; 0x14
     a42:	9c 91       	ld	r25, X
     a44:	85 89       	ldd	r24, Z+21	; 0x15
     a46:	80 95       	com	r24
     a48:	89 23       	and	r24, r25
     a4a:	8c 93       	st	X, r24
     a4c:	86 89       	ldd	r24, Z+22	; 0x16
     a4e:	97 89       	ldd	r25, Z+23	; 0x17
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	f1 f7       	brne	.-4      	; 0xa50 <__vector_3+0x5e>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
     a54:	60 8d       	ldd	r22, Z+24	; 0x18
     a56:	71 8d       	ldd	r23, Z+25	; 0x19
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     a58:	a6 85       	ldd	r26, Z+14	; 0x0e
     a5a:	b7 85       	ldd	r27, Z+15	; 0x0f
     a5c:	55 85       	ldd	r21, Z+13	; 0x0d
     a5e:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	cb 01       	movw	r24, r22
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <__vector_3+0x72>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
     a68:	82 2f       	mov	r24, r18
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	95 95       	asr	r25
     a6e:	87 95       	ror	r24
     a70:	28 2f       	mov	r18, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     a72:	4c 91       	ld	r20, X
     a74:	45 23       	and	r20, r21
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
     a76:	09 f0       	breq	.+2      	; 0xa7a <__vector_3+0x88>
        d |= 0x80;
     a78:	20 68       	ori	r18, 0x80	; 128
     a7a:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     a7c:	91 f7       	brne	.-28     	; 0xa62 <__vector_3+0x70>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     a7e:	86 8d       	ldd	r24, Z+30	; 0x1e
     a80:	81 fd       	sbrc	r24, 1
      d = ~d;
     a82:	20 95       	com	r18

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     a84:	80 91 68 02 	lds	r24, 0x0268
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	01 96       	adiw	r24, 0x01	; 1
     a8c:	8f 73       	andi	r24, 0x3F	; 63
     a8e:	99 27       	eor	r25, r25
    if (next != _receive_buffer_head)
     a90:	30 91 67 02 	lds	r19, 0x0267
     a94:	38 17       	cp	r19, r24
     a96:	49 f0       	breq	.+18     	; 0xaaa <__vector_3+0xb8>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     a98:	a0 91 68 02 	lds	r26, 0x0268
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	a7 59       	subi	r26, 0x97	; 151
     aa0:	bd 4f       	sbci	r27, 0xFD	; 253
     aa2:	2c 93       	st	X, r18
      _receive_buffer_tail = next;
     aa4:	80 93 68 02 	sts	0x0268, r24
     aa8:	03 c0       	rjmp	.+6      	; 0xab0 <__vector_3+0xbe>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
     aaa:	86 8d       	ldd	r24, Z+30	; 0x1e
     aac:	81 60       	ori	r24, 0x01	; 1
     aae:	86 8f       	std	Z+30, r24	; 0x1e
     ab0:	82 8d       	ldd	r24, Z+26	; 0x1a
     ab2:	93 8d       	ldd	r25, Z+27	; 0x1b
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <__vector_3+0xc2>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
     ab8:	a3 89       	ldd	r26, Z+19	; 0x13
     aba:	b4 89       	ldd	r27, Z+20	; 0x14
     abc:	9c 91       	ld	r25, X
     abe:	85 89       	ldd	r24, Z+21	; 0x15
     ac0:	89 2b       	or	r24, r25
     ac2:	8c 93       	st	X, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     ac4:	ff 91       	pop	r31
     ac6:	ef 91       	pop	r30
     ac8:	bf 91       	pop	r27
     aca:	af 91       	pop	r26
     acc:	9f 91       	pop	r25
     ace:	8f 91       	pop	r24
     ad0:	7f 91       	pop	r23
     ad2:	6f 91       	pop	r22
     ad4:	5f 91       	pop	r21
     ad6:	4f 91       	pop	r20
     ad8:	3f 91       	pop	r19
     ada:	2f 91       	pop	r18
     adc:	0f 90       	pop	r0
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	0f 90       	pop	r0
     ae2:	1f 90       	pop	r1
     ae4:	18 95       	reti

00000ae6 <_ZN14SoftwareSerialD1Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
     ae6:	2b e0       	ldi	r18, 0x0B	; 11
     ae8:	31 e0       	ldi	r19, 0x01	; 1
     aea:	fc 01       	movw	r30, r24
     aec:	31 83       	std	Z+1, r19	; 0x01
     aee:	20 83       	st	Z, r18
      *_pcint_maskreg &= ~_pcint_maskvalue;
}

void SoftwareSerial::end()
{
  stopListening();
     af0:	0c 94 ba 04 	jmp	0x974	; 0x974 <_ZN14SoftwareSerial13stopListeningEv>

00000af4 <_ZN14SoftwareSerial5setTXEh>:
{
  end();
}

void SoftwareSerial::setTX(uint8_t tx)
{
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	ec 01       	movw	r28, r24
     afc:	16 2f       	mov	r17, r22
  // First write, then set output. If we do this the other way around,
  // the pin would be output low for a short while before switching to
  // output high. Now, it is input with pullup for a short while, which
  // is fine. With inverse logic, either order is fine.
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
     afe:	6e 8d       	ldd	r22, Y+30	; 0x1e
     b00:	66 95       	lsr	r22
     b02:	61 70       	andi	r22, 0x01	; 1
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	68 27       	eor	r22, r24
     b08:	81 2f       	mov	r24, r17
     b0a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <digitalWrite>
  pinMode(tx, OUTPUT);
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	81 2f       	mov	r24, r17
     b12:	0e 94 0e 0c 	call	0x181c	; 0x181c <pinMode>
  _transmitBitMask = digitalPinToBitMask(tx);
     b16:	61 2f       	mov	r22, r17
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	fb 01       	movw	r30, r22
     b1c:	e9 56       	subi	r30, 0x69	; 105
     b1e:	ff 4f       	sbci	r31, 0xFF	; 255
     b20:	e4 91       	lpm	r30, Z
     b22:	e8 8b       	std	Y+16, r30	; 0x10
  uint8_t port = digitalPinToPort(tx);
     b24:	fb 01       	movw	r30, r22
     b26:	e5 55       	subi	r30, 0x55	; 85
     b28:	ff 4f       	sbci	r31, 0xFF	; 255
     b2a:	e4 91       	lpm	r30, Z
  _transmitPortRegister = portOutputRegister(port);
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	ee 0f       	add	r30, r30
     b30:	ff 1f       	adc	r31, r31
     b32:	e7 53       	subi	r30, 0x37	; 55
     b34:	ff 4f       	sbci	r31, 0xFF	; 255
     b36:	85 91       	lpm	r24, Z+
     b38:	94 91       	lpm	r25, Z
     b3a:	9a 8b       	std	Y+18, r25	; 0x12
     b3c:	89 8b       	std	Y+17, r24	; 0x11
}
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <_ZN14SoftwareSerial5setRXEh>:

void SoftwareSerial::setRX(uint8_t rx)
{
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	ec 01       	movw	r28, r24
     b4e:	16 2f       	mov	r17, r22
  pinMode(rx, INPUT);
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	81 2f       	mov	r24, r17
     b54:	0e 94 0e 0c 	call	0x181c	; 0x181c <pinMode>
  if (!_inverse_logic)
     b58:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b5a:	81 fd       	sbrc	r24, 1
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <_ZN14SoftwareSerial5setRXEh+0x20>
    digitalWrite(rx, HIGH);  // pullup for normal logic!
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	81 2f       	mov	r24, r17
     b62:	0e 94 4a 0c 	call	0x1894	; 0x1894 <digitalWrite>
  _receivePin = rx;
     b66:	1c 87       	std	Y+12, r17	; 0x0c
  _receiveBitMask = digitalPinToBitMask(rx);
     b68:	61 2f       	mov	r22, r17
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	fb 01       	movw	r30, r22
     b6e:	e9 56       	subi	r30, 0x69	; 105
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	e4 91       	lpm	r30, Z
     b74:	ed 87       	std	Y+13, r30	; 0x0d
  uint8_t port = digitalPinToPort(rx);
     b76:	fb 01       	movw	r30, r22
     b78:	e5 55       	subi	r30, 0x55	; 85
     b7a:	ff 4f       	sbci	r31, 0xFF	; 255
     b7c:	e4 91       	lpm	r30, Z
  _receivePortRegister = portInputRegister(port);
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	e1 54       	subi	r30, 0x41	; 65
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	85 91       	lpm	r24, Z+
     b8a:	94 91       	lpm	r25, Z
     b8c:	9f 87       	std	Y+15, r25	; 0x0f
     b8e:	8e 87       	std	Y+14, r24	; 0x0e
}
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	08 95       	ret

00000b98 <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	ec 01       	movw	r28, r24
     ba0:	16 2f       	mov	r17, r22
  public:
    Print() : write_error(0) {}
     ba2:	1b 82       	std	Y+3, r1	; 0x03
     ba4:	1a 82       	std	Y+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     ba6:	88 ee       	ldi	r24, 0xE8	; 232
     ba8:	93 e0       	ldi	r25, 0x03	; 3
     baa:	a0 e0       	ldi	r26, 0x00	; 0
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	8c 83       	std	Y+4, r24	; 0x04
     bb0:	9d 83       	std	Y+5, r25	; 0x05
     bb2:	ae 83       	std	Y+6, r26	; 0x06
     bb4:	bf 83       	std	Y+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
     bb6:	8b e0       	ldi	r24, 0x0B	; 11
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	99 83       	std	Y+1, r25	; 0x01
     bbc:	88 83       	st	Y, r24
     bbe:	1f 8a       	std	Y+23, r1	; 0x17
     bc0:	1e 8a       	std	Y+22, r1	; 0x16
     bc2:	19 8e       	std	Y+25, r1	; 0x19
     bc4:	18 8e       	std	Y+24, r1	; 0x18
     bc6:	1b 8e       	std	Y+27, r1	; 0x1b
     bc8:	1a 8e       	std	Y+26, r1	; 0x1a
     bca:	1d 8e       	std	Y+29, r1	; 0x1d
     bcc:	1c 8e       	std	Y+28, r1	; 0x1c
     bce:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bd0:	8e 7f       	andi	r24, 0xFE	; 254
     bd2:	20 fb       	bst	r18, 0
     bd4:	81 f9       	bld	r24, 1
     bd6:	8e 8f       	std	Y+30, r24	; 0x1e
{
  setTX(transmitPin);
     bd8:	64 2f       	mov	r22, r20
     bda:	ce 01       	movw	r24, r28
     bdc:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_ZN14SoftwareSerial5setTXEh>
  setRX(receivePin);
     be0:	61 2f       	mov	r22, r17
     be2:	ce 01       	movw	r24, r28
}
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
{
  setTX(transmitPin);
  setRX(receivePin);
     bea:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <_ZN14SoftwareSerial5setRXEh>

00000bee <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	ec 01       	movw	r28, r24
     bf4:	9a 01       	movw	r18, r20
     bf6:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     bf8:	1b 8e       	std	Y+27, r1	; 0x1b
     bfa:	1a 8e       	std	Y+26, r1	; 0x1a
     bfc:	19 8e       	std	Y+25, r1	; 0x19
     bfe:	18 8e       	std	Y+24, r1	; 0x18
     c00:	1f 8a       	std	Y+23, r1	; 0x17
     c02:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	79 e0       	ldi	r23, 0x09	; 9
     c08:	8d e3       	ldi	r24, 0x3D	; 61
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divmodsi4>
     c10:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     c12:	24 30       	cpi	r18, 0x04	; 4
     c14:	31 05       	cpc	r19, r1
     c16:	18 f0       	brcs	.+6      	; 0xc1e <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
     c18:	c9 01       	movw	r24, r18
     c1a:	03 97       	sbiw	r24, 0x03	; 3
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
     c22:	9d 8f       	std	Y+29, r25	; 0x1d
     c24:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
     c26:	6c 85       	ldd	r22, Y+12	; 0x0c
     c28:	66 31       	cpi	r22, 0x16	; 22
     c2a:	08 f0       	brcs	.+2      	; 0xc2e <_ZN14SoftwareSerial5beginEl+0x40>
     c2c:	69 c0       	rjmp	.+210    	; 0xd00 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     c2e:	c9 01       	movw	r24, r18
     c30:	96 95       	lsr	r25
     c32:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     c34:	84 31       	cpi	r24, 0x14	; 20
     c36:	91 05       	cpc	r25, r1
     c38:	10 f0       	brcs	.+4      	; 0xc3e <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
     c3a:	43 97       	sbiw	r24, 0x13	; 19
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     c42:	9f 8b       	std	Y+23, r25	; 0x17
     c44:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     c46:	36 97       	sbiw	r30, 0x06	; 6
     c48:	18 f0       	brcs	.+6      	; 0xc50 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
     c4a:	c9 01       	movw	r24, r18
     c4c:	05 97       	sbiw	r24, 0x05	; 5
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
     c54:	99 8f       	std	Y+25, r25	; 0x19
     c56:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     c58:	c9 01       	movw	r24, r18
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	28 0f       	add	r18, r24
     c60:	39 1f       	adc	r19, r25
     c62:	36 95       	lsr	r19
     c64:	27 95       	ror	r18
     c66:	36 95       	lsr	r19
     c68:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     c6a:	2d 30       	cpi	r18, 0x0D	; 13
     c6c:	31 05       	cpc	r19, r1
     c6e:	18 f0       	brcs	.+6      	; 0xc76 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
     c70:	2c 50       	subi	r18, 0x0C	; 12
     c72:	31 09       	sbc	r19, r1
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
     c76:	21 e0       	ldi	r18, 0x01	; 1
     c78:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     c7a:	3b 8f       	std	Y+27, r19	; 0x1b
     c7c:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     c7e:	90 91 68 00 	lds	r25, 0x0068
     c82:	68 30       	cpi	r22, 0x08	; 8
     c84:	50 f0       	brcs	.+20     	; 0xc9a <_ZN14SoftwareSerial5beginEl+0xac>
     c86:	21 e0       	ldi	r18, 0x01	; 1
     c88:	6e 30       	cpi	r22, 0x0E	; 14
     c8a:	08 f4       	brcc	.+2      	; 0xc8e <_ZN14SoftwareSerial5beginEl+0xa0>
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <_ZN14SoftwareSerial5beginEl+0xa6>
     c92:	88 0f       	add	r24, r24
     c94:	2a 95       	dec	r18
     c96:	ea f7       	brpl	.-6      	; 0xc92 <_ZN14SoftwareSerial5beginEl+0xa4>
     c98:	01 c0       	rjmp	.+2      	; 0xc9c <_ZN14SoftwareSerial5beginEl+0xae>
     c9a:	84 e0       	ldi	r24, 0x04	; 4
     c9c:	89 2b       	or	r24, r25
     c9e:	80 93 68 00 	sts	0x0068, r24
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
     ca2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ca4:	88 30       	cpi	r24, 0x08	; 8
     ca6:	38 f0       	brcs	.+14     	; 0xcb6 <_ZN14SoftwareSerial5beginEl+0xc8>
     ca8:	8e 30       	cpi	r24, 0x0E	; 14
     caa:	40 f0       	brcs	.+16     	; 0xcbc <_ZN14SoftwareSerial5beginEl+0xce>
     cac:	86 31       	cpi	r24, 0x16	; 22
     cae:	48 f0       	brcs	.+18     	; 0xcc2 <_ZN14SoftwareSerial5beginEl+0xd4>
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	08 c0       	rjmp	.+16     	; 0xcc6 <_ZN14SoftwareSerial5beginEl+0xd8>
     cb6:	2d e6       	ldi	r18, 0x6D	; 109
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	05 c0       	rjmp	.+10     	; 0xcc6 <_ZN14SoftwareSerial5beginEl+0xd8>
     cbc:	2b e6       	ldi	r18, 0x6B	; 107
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <_ZN14SoftwareSerial5beginEl+0xd8>
     cc2:	2c e6       	ldi	r18, 0x6C	; 108
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	3c 8b       	std	Y+20, r19	; 0x14
     cc8:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
     cca:	88 30       	cpi	r24, 0x08	; 8
     ccc:	30 f4       	brcc	.+12     	; 0xcda <_ZN14SoftwareSerial5beginEl+0xec>
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <_ZN14SoftwareSerial5beginEl+0xe6>
     cd2:	99 0f       	add	r25, r25
     cd4:	8a 95       	dec	r24
     cd6:	ea f7       	brpl	.-6      	; 0xcd2 <_ZN14SoftwareSerial5beginEl+0xe4>
     cd8:	0e c0       	rjmp	.+28     	; 0xcf6 <_ZN14SoftwareSerial5beginEl+0x108>
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	8e 30       	cpi	r24, 0x0E	; 14
     ce0:	18 f4       	brcc	.+6      	; 0xce8 <_ZN14SoftwareSerial5beginEl+0xfa>
     ce2:	28 50       	subi	r18, 0x08	; 8
     ce4:	31 09       	sbc	r19, r1
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <_ZN14SoftwareSerial5beginEl+0xfe>
     ce8:	2e 50       	subi	r18, 0x0E	; 14
     cea:	31 09       	sbc	r19, r1
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <_ZN14SoftwareSerial5beginEl+0x104>
     cf0:	99 0f       	add	r25, r25
     cf2:	2a 95       	dec	r18
     cf4:	ea f7       	brpl	.-6      	; 0xcf0 <_ZN14SoftwareSerial5beginEl+0x102>
     cf6:	9d 8b       	std	Y+21, r25	; 0x15
     cf8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cfa:	9d 8d       	ldd	r25, Y+29	; 0x1d
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	f1 f7       	brne	.-4      	; 0xcfc <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     d00:	ce 01       	movw	r24, r28
}
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     d06:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <_ZN14SoftwareSerial6listenEv>

00000d0a <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     d0a:	10 92 18 03 	sts	0x0318, r1
  twi_sendStop = true;		// default value
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	80 93 16 03 	sts	0x0316, r24
  twi_inRepStart = false;
     d14:	10 92 15 03 	sts	0x0315, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	82 e1       	ldi	r24, 0x12	; 18
     d1c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <digitalWrite>
  digitalWrite(SCL, 1);
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	83 e1       	ldi	r24, 0x13	; 19
     d24:	0e 94 4a 0c 	call	0x1894	; 0x1894 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     d28:	e9 eb       	ldi	r30, 0xB9	; 185
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8e 7f       	andi	r24, 0xFE	; 254
     d30:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
     d32:	80 81       	ld	r24, Z
     d34:	8d 7f       	andi	r24, 0xFD	; 253
     d36:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     d38:	88 e4       	ldi	r24, 0x48	; 72
     d3a:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     d3e:	85 e4       	ldi	r24, 0x45	; 69
     d40:	80 93 bc 00 	sts	0x00BC, r24
     d44:	08 95       	ret

00000d46 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
     d46:	0f 93       	push	r16
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     d48:	41 32       	cpi	r20, 0x21	; 33
     d4a:	08 f0       	brcs	.+2      	; 0xd4e <twi_writeTo+0x8>
     d4c:	4a c0       	rjmp	.+148    	; 0xde2 <twi_writeTo+0x9c>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     d4e:	90 91 18 03 	lds	r25, 0x0318
     d52:	91 11       	cpse	r25, r1
     d54:	fc cf       	rjmp	.-8      	; 0xd4e <twi_writeTo+0x8>
    continue;
  }
  twi_state = TWI_MTX;
     d56:	32 e0       	ldi	r19, 0x02	; 2
     d58:	30 93 18 03 	sts	0x0318, r19
  twi_sendStop = sendStop;
     d5c:	00 93 16 03 	sts	0x0316, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     d60:	3f ef       	ldi	r19, 0xFF	; 255
     d62:	30 93 ab 02 	sts	0x02AB, r19

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     d66:	10 92 f0 02 	sts	0x02F0, r1
  twi_masterBufferLength = length;
     d6a:	40 93 ef 02 	sts	0x02EF, r20
     d6e:	fb 01       	movw	r30, r22
     d70:	61 ef       	ldi	r22, 0xF1	; 241
     d72:	72 e0       	ldi	r23, 0x02	; 2
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     d74:	db 01       	movw	r26, r22
     d76:	3a 2f       	mov	r19, r26
     d78:	36 1b       	sub	r19, r22
     d7a:	34 17       	cp	r19, r20
     d7c:	18 f4       	brcc	.+6      	; 0xd84 <twi_writeTo+0x3e>
    twi_masterBuffer[i] = data[i];
     d7e:	31 91       	ld	r19, Z+
     d80:	3d 93       	st	X+, r19
     d82:	f9 cf       	rjmp	.-14     	; 0xd76 <twi_writeTo+0x30>
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     d84:	10 92 17 03 	sts	0x0317, r1
  twi_slarw |= address << 1;
     d88:	30 91 17 03 	lds	r19, 0x0317
     d8c:	88 0f       	add	r24, r24
     d8e:	83 2b       	or	r24, r19
     d90:	80 93 17 03 	sts	0x0317, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     d94:	80 91 15 03 	lds	r24, 0x0315
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	61 f4       	brne	.+24     	; 0xdb4 <twi_writeTo+0x6e>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
     d9c:	10 92 15 03 	sts	0x0315, r1
    do {
      TWDR = twi_slarw;				
     da0:	80 91 17 03 	lds	r24, 0x0317
     da4:	80 93 bb 00 	sts	0x00BB, r24
    } while(TWCR & _BV(TWWC));
     da8:	80 91 bc 00 	lds	r24, 0x00BC
     dac:	83 fd       	sbrc	r24, 3
     dae:	f8 cf       	rjmp	.-16     	; 0xda0 <twi_writeTo+0x5a>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
     db0:	85 ec       	ldi	r24, 0xC5	; 197
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <twi_writeTo+0x70>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
     db4:	85 ee       	ldi	r24, 0xE5	; 229
     db6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     dba:	22 23       	and	r18, r18
     dbc:	21 f0       	breq	.+8      	; 0xdc6 <twi_writeTo+0x80>
     dbe:	80 91 18 03 	lds	r24, 0x0318
     dc2:	82 30       	cpi	r24, 0x02	; 2
     dc4:	d1 f3       	breq	.-12     	; 0xdba <twi_writeTo+0x74>
    continue;
  }
  
  if (twi_error == 0xFF)
     dc6:	80 91 ab 02 	lds	r24, 0x02AB
     dca:	8f 3f       	cpi	r24, 0xFF	; 255
     dcc:	79 f0       	breq	.+30     	; 0xdec <twi_writeTo+0xa6>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
     dce:	80 91 ab 02 	lds	r24, 0x02AB
     dd2:	80 32       	cpi	r24, 0x20	; 32
     dd4:	41 f0       	breq	.+16     	; 0xde6 <twi_writeTo+0xa0>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     dd6:	80 91 ab 02 	lds	r24, 0x02AB
     dda:	80 33       	cpi	r24, 0x30	; 48
     ddc:	31 f0       	breq	.+12     	; 0xdea <twi_writeTo+0xa4>
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
     dde:	94 e0       	ldi	r25, 0x04	; 4
     de0:	05 c0       	rjmp	.+10     	; 0xdec <twi_writeTo+0xa6>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	03 c0       	rjmp	.+6      	; 0xdec <twi_writeTo+0xa6>
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
     de6:	92 e0       	ldi	r25, 0x02	; 2
     de8:	01 c0       	rjmp	.+2      	; 0xdec <twi_writeTo+0xa6>
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
     dea:	93 e0       	ldi	r25, 0x03	; 3
  else
    return 4;	// other twi error
}
     dec:	89 2f       	mov	r24, r25
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret

00000df2 <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     df2:	61 32       	cpi	r22, 0x21	; 33
     df4:	98 f4       	brcc	.+38     	; 0xe1c <twi_transmit+0x2a>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     df6:	20 91 18 03 	lds	r18, 0x0318
     dfa:	24 30       	cpi	r18, 0x04	; 4
     dfc:	89 f4       	brne	.+34     	; 0xe20 <twi_transmit+0x2e>
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     dfe:	60 93 cd 02 	sts	0x02CD, r22
     e02:	fc 01       	movw	r30, r24
     e04:	2f ec       	ldi	r18, 0xCF	; 207
     e06:	32 e0       	ldi	r19, 0x02	; 2
  for(i = 0; i < length; ++i){
     e08:	d9 01       	movw	r26, r18
     e0a:	8a 2f       	mov	r24, r26
     e0c:	82 1b       	sub	r24, r18
     e0e:	86 17       	cp	r24, r22
     e10:	18 f4       	brcc	.+6      	; 0xe18 <twi_transmit+0x26>
    twi_txBuffer[i] = data[i];
     e12:	81 91       	ld	r24, Z+
     e14:	8d 93       	st	X+, r24
     e16:	f9 cf       	rjmp	.-14     	; 0xe0a <twi_transmit+0x18>
  }
  
  return 0;
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	08 95       	ret
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
     e20:	82 e0       	ldi	r24, 0x02	; 2
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
     e22:	08 95       	ret

00000e24 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     e24:	85 ed       	ldi	r24, 0xD5	; 213
     e26:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     e2a:	80 91 bc 00 	lds	r24, 0x00BC
     e2e:	84 fd       	sbrc	r24, 4
     e30:	fc cf       	rjmp	.-8      	; 0xe2a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     e32:	10 92 18 03 	sts	0x0318, r1
     e36:	08 95       	ret

00000e38 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     e38:	85 ec       	ldi	r24, 0xC5	; 197
     e3a:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
     e3e:	10 92 18 03 	sts	0x0318, r1
     e42:	08 95       	ret

00000e44 <__vector_24>:
}

ISR(TWI_vect)
{
     e44:	1f 92       	push	r1
     e46:	0f 92       	push	r0
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	0f 92       	push	r0
     e4c:	11 24       	eor	r1, r1
     e4e:	2f 93       	push	r18
     e50:	3f 93       	push	r19
     e52:	4f 93       	push	r20
     e54:	5f 93       	push	r21
     e56:	6f 93       	push	r22
     e58:	7f 93       	push	r23
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	af 93       	push	r26
     e60:	bf 93       	push	r27
     e62:	ef 93       	push	r30
     e64:	ff 93       	push	r31
  switch(TW_STATUS){
     e66:	80 91 b9 00 	lds	r24, 0x00B9
     e6a:	88 7f       	andi	r24, 0xF8	; 248
     e6c:	80 36       	cpi	r24, 0x60	; 96
     e6e:	09 f4       	brne	.+2      	; 0xe72 <__vector_24+0x2e>
     e70:	9e c0       	rjmp	.+316    	; 0xfae <__vector_24+0x16a>
     e72:	78 f5       	brcc	.+94     	; 0xed2 <__vector_24+0x8e>
     e74:	88 32       	cpi	r24, 0x28	; 40
     e76:	09 f4       	brne	.+2      	; 0xe7a <__vector_24+0x36>
     e78:	5d c0       	rjmp	.+186    	; 0xf34 <__vector_24+0xf0>
     e7a:	90 f4       	brcc	.+36     	; 0xea0 <__vector_24+0x5c>
     e7c:	80 31       	cpi	r24, 0x10	; 16
     e7e:	09 f4       	brne	.+2      	; 0xe82 <__vector_24+0x3e>
     e80:	56 c0       	rjmp	.+172    	; 0xf2e <__vector_24+0xea>
     e82:	38 f4       	brcc	.+14     	; 0xe92 <__vector_24+0x4e>
     e84:	88 23       	and	r24, r24
     e86:	09 f4       	brne	.+2      	; 0xe8a <__vector_24+0x46>
     e88:	f5 c0       	rjmp	.+490    	; 0x1074 <__vector_24+0x230>
     e8a:	88 30       	cpi	r24, 0x08	; 8
     e8c:	09 f4       	brne	.+2      	; 0xe90 <__vector_24+0x4c>
     e8e:	4f c0       	rjmp	.+158    	; 0xf2e <__vector_24+0xea>
     e90:	f5 c0       	rjmp	.+490    	; 0x107c <__vector_24+0x238>
     e92:	88 31       	cpi	r24, 0x18	; 24
     e94:	09 f4       	brne	.+2      	; 0xe98 <__vector_24+0x54>
     e96:	4e c0       	rjmp	.+156    	; 0xf34 <__vector_24+0xf0>
     e98:	80 32       	cpi	r24, 0x20	; 32
     e9a:	09 f4       	brne	.+2      	; 0xe9e <__vector_24+0x5a>
     e9c:	5f c0       	rjmp	.+190    	; 0xf5c <__vector_24+0x118>
     e9e:	ee c0       	rjmp	.+476    	; 0x107c <__vector_24+0x238>
     ea0:	80 34       	cpi	r24, 0x40	; 64
     ea2:	09 f4       	brne	.+2      	; 0xea6 <__vector_24+0x62>
     ea4:	6a c0       	rjmp	.+212    	; 0xf7a <__vector_24+0x136>
     ea6:	58 f4       	brcc	.+22     	; 0xebe <__vector_24+0x7a>
     ea8:	80 33       	cpi	r24, 0x30	; 48
     eaa:	09 f4       	brne	.+2      	; 0xeae <__vector_24+0x6a>
     eac:	57 c0       	rjmp	.+174    	; 0xf5c <__vector_24+0x118>
     eae:	88 33       	cpi	r24, 0x38	; 56
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <__vector_24+0x70>
     eb2:	e4 c0       	rjmp	.+456    	; 0x107c <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     eb4:	80 93 ab 02 	sts	0x02AB, r24
      twi_releaseBus();
     eb8:	0e 94 1c 07 	call	0xe38	; 0xe38 <twi_releaseBus>
      break;
     ebc:	df c0       	rjmp	.+446    	; 0x107c <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     ebe:	80 35       	cpi	r24, 0x50	; 80
     ec0:	09 f4       	brne	.+2      	; 0xec4 <__vector_24+0x80>
     ec2:	4f c0       	rjmp	.+158    	; 0xf62 <__vector_24+0x11e>
     ec4:	88 35       	cpi	r24, 0x58	; 88
     ec6:	09 f4       	brne	.+2      	; 0xeca <__vector_24+0x86>
     ec8:	5d c0       	rjmp	.+186    	; 0xf84 <__vector_24+0x140>
     eca:	88 34       	cpi	r24, 0x48	; 72
     ecc:	09 f0       	breq	.+2      	; 0xed0 <__vector_24+0x8c>
     ece:	d6 c0       	rjmp	.+428    	; 0x107c <__vector_24+0x238>
     ed0:	d3 c0       	rjmp	.+422    	; 0x1078 <__vector_24+0x234>
     ed2:	88 39       	cpi	r24, 0x98	; 152
     ed4:	09 f4       	brne	.+2      	; 0xed8 <__vector_24+0x94>
     ed6:	c4 c0       	rjmp	.+392    	; 0x1060 <__vector_24+0x21c>
     ed8:	a8 f4       	brcc	.+42     	; 0xf04 <__vector_24+0xc0>
     eda:	88 37       	cpi	r24, 0x78	; 120
     edc:	09 f4       	brne	.+2      	; 0xee0 <__vector_24+0x9c>
     ede:	67 c0       	rjmp	.+206    	; 0xfae <__vector_24+0x16a>
     ee0:	38 f4       	brcc	.+14     	; 0xef0 <__vector_24+0xac>
     ee2:	88 36       	cpi	r24, 0x68	; 104
     ee4:	09 f4       	brne	.+2      	; 0xee8 <__vector_24+0xa4>
     ee6:	63 c0       	rjmp	.+198    	; 0xfae <__vector_24+0x16a>
     ee8:	80 37       	cpi	r24, 0x70	; 112
     eea:	09 f4       	brne	.+2      	; 0xeee <__vector_24+0xaa>
     eec:	60 c0       	rjmp	.+192    	; 0xfae <__vector_24+0x16a>
     eee:	c6 c0       	rjmp	.+396    	; 0x107c <__vector_24+0x238>
     ef0:	88 38       	cpi	r24, 0x88	; 136
     ef2:	09 f4       	brne	.+2      	; 0xef6 <__vector_24+0xb2>
     ef4:	b5 c0       	rjmp	.+362    	; 0x1060 <__vector_24+0x21c>
     ef6:	80 39       	cpi	r24, 0x90	; 144
     ef8:	09 f4       	brne	.+2      	; 0xefc <__vector_24+0xb8>
     efa:	5f c0       	rjmp	.+190    	; 0xfba <__vector_24+0x176>
     efc:	80 38       	cpi	r24, 0x80	; 128
     efe:	09 f0       	breq	.+2      	; 0xf02 <__vector_24+0xbe>
     f00:	bd c0       	rjmp	.+378    	; 0x107c <__vector_24+0x238>
     f02:	5b c0       	rjmp	.+182    	; 0xfba <__vector_24+0x176>
     f04:	80 3b       	cpi	r24, 0xB0	; 176
     f06:	09 f4       	brne	.+2      	; 0xf0a <__vector_24+0xc6>
     f08:	83 c0       	rjmp	.+262    	; 0x1010 <__vector_24+0x1cc>
     f0a:	38 f4       	brcc	.+14     	; 0xf1a <__vector_24+0xd6>
     f0c:	80 3a       	cpi	r24, 0xA0	; 160
     f0e:	09 f4       	brne	.+2      	; 0xf12 <__vector_24+0xce>
     f10:	66 c0       	rjmp	.+204    	; 0xfde <__vector_24+0x19a>
     f12:	88 3a       	cpi	r24, 0xA8	; 168
     f14:	09 f4       	brne	.+2      	; 0xf18 <__vector_24+0xd4>
     f16:	7c c0       	rjmp	.+248    	; 0x1010 <__vector_24+0x1cc>
     f18:	b1 c0       	rjmp	.+354    	; 0x107c <__vector_24+0x238>
     f1a:	80 3c       	cpi	r24, 0xC0	; 192
     f1c:	09 f4       	brne	.+2      	; 0xf20 <__vector_24+0xdc>
     f1e:	a4 c0       	rjmp	.+328    	; 0x1068 <__vector_24+0x224>
     f20:	88 3c       	cpi	r24, 0xC8	; 200
     f22:	09 f4       	brne	.+2      	; 0xf26 <__vector_24+0xe2>
     f24:	a1 c0       	rjmp	.+322    	; 0x1068 <__vector_24+0x224>
     f26:	88 3b       	cpi	r24, 0xB8	; 184
     f28:	09 f4       	brne	.+2      	; 0xf2c <__vector_24+0xe8>
     f2a:	87 c0       	rjmp	.+270    	; 0x103a <__vector_24+0x1f6>
     f2c:	a7 c0       	rjmp	.+334    	; 0x107c <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     f2e:	80 91 17 03 	lds	r24, 0x0317
     f32:	10 c0       	rjmp	.+32     	; 0xf54 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     f34:	90 91 f0 02 	lds	r25, 0x02F0
     f38:	80 91 ef 02 	lds	r24, 0x02EF
     f3c:	98 17       	cp	r25, r24
     f3e:	70 f5       	brcc	.+92     	; 0xf9c <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     f40:	e0 91 f0 02 	lds	r30, 0x02F0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	8e 0f       	add	r24, r30
     f48:	80 93 f0 02 	sts	0x02F0, r24
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	ef 50       	subi	r30, 0x0F	; 15
     f50:	fd 4f       	sbci	r31, 0xFD	; 253
     f52:	80 81       	ld	r24, Z
     f54:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     f58:	85 ec       	ldi	r24, 0xC5	; 197
     f5a:	83 c0       	rjmp	.+262    	; 0x1062 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     f5c:	80 93 ab 02 	sts	0x02AB, r24
     f60:	8b c0       	rjmp	.+278    	; 0x1078 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     f62:	e0 91 f0 02 	lds	r30, 0x02F0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	8e 0f       	add	r24, r30
     f6a:	80 93 f0 02 	sts	0x02F0, r24
     f6e:	80 91 bb 00 	lds	r24, 0x00BB
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	ef 50       	subi	r30, 0x0F	; 15
     f76:	fd 4f       	sbci	r31, 0xFD	; 253
     f78:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     f7a:	90 91 f0 02 	lds	r25, 0x02F0
     f7e:	80 91 ef 02 	lds	r24, 0x02EF
     f82:	6b c0       	rjmp	.+214    	; 0x105a <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     f84:	e0 91 f0 02 	lds	r30, 0x02F0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	8e 0f       	add	r24, r30
     f8c:	80 93 f0 02 	sts	0x02F0, r24
     f90:	80 91 bb 00 	lds	r24, 0x00BB
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	ef 50       	subi	r30, 0x0F	; 15
     f98:	fd 4f       	sbci	r31, 0xFD	; 253
     f9a:	80 83       	st	Z, r24
	if (twi_sendStop)
     f9c:	80 91 16 03 	lds	r24, 0x0316
     fa0:	81 11       	cpse	r24, r1
     fa2:	6a c0       	rjmp	.+212    	; 0x1078 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	80 93 15 03 	sts	0x0315, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     faa:	84 ea       	ldi	r24, 0xA4	; 164
     fac:	5e c0       	rjmp	.+188    	; 0x106a <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     fae:	83 e0       	ldi	r24, 0x03	; 3
     fb0:	80 93 18 03 	sts	0x0318, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     fb4:	10 92 ac 02 	sts	0x02AC, r1
     fb8:	cf cf       	rjmp	.-98     	; 0xf58 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     fba:	80 91 ac 02 	lds	r24, 0x02AC
     fbe:	80 32       	cpi	r24, 0x20	; 32
     fc0:	08 f0       	brcs	.+2      	; 0xfc4 <__vector_24+0x180>
     fc2:	4e c0       	rjmp	.+156    	; 0x1060 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     fc4:	e0 91 ac 02 	lds	r30, 0x02AC
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	8e 0f       	add	r24, r30
     fcc:	80 93 ac 02 	sts	0x02AC, r24
     fd0:	80 91 bb 00 	lds	r24, 0x00BB
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	e3 55       	subi	r30, 0x53	; 83
     fd8:	fd 4f       	sbci	r31, 0xFD	; 253
     fda:	80 83       	st	Z, r24
     fdc:	bd cf       	rjmp	.-134    	; 0xf58 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     fde:	0e 94 1c 07 	call	0xe38	; 0xe38 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     fe2:	80 91 ac 02 	lds	r24, 0x02AC
     fe6:	80 32       	cpi	r24, 0x20	; 32
     fe8:	30 f4       	brcc	.+12     	; 0xff6 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     fea:	e0 91 ac 02 	lds	r30, 0x02AC
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	e3 55       	subi	r30, 0x53	; 83
     ff2:	fd 4f       	sbci	r31, 0xFD	; 253
     ff4:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     ff6:	60 91 ac 02 	lds	r22, 0x02AC
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	e0 91 11 03 	lds	r30, 0x0311
    1000:	f0 91 12 03 	lds	r31, 0x0312
    1004:	8d ea       	ldi	r24, 0xAD	; 173
    1006:	92 e0       	ldi	r25, 0x02	; 2
    1008:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    100a:	10 92 ac 02 	sts	0x02AC, r1
      break;
    100e:	36 c0       	rjmp	.+108    	; 0x107c <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1010:	84 e0       	ldi	r24, 0x04	; 4
    1012:	80 93 18 03 	sts	0x0318, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1016:	10 92 ce 02 	sts	0x02CE, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    101a:	10 92 cd 02 	sts	0x02CD, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    101e:	e0 91 13 03 	lds	r30, 0x0313
    1022:	f0 91 14 03 	lds	r31, 0x0314
    1026:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1028:	80 91 cd 02 	lds	r24, 0x02CD
    102c:	81 11       	cpse	r24, r1
    102e:	05 c0       	rjmp	.+10     	; 0x103a <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	80 93 cd 02 	sts	0x02CD, r24
        twi_txBuffer[0] = 0x00;
    1036:	10 92 cf 02 	sts	0x02CF, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    103a:	e0 91 ce 02 	lds	r30, 0x02CE
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	8e 0f       	add	r24, r30
    1042:	80 93 ce 02 	sts	0x02CE, r24
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	e1 53       	subi	r30, 0x31	; 49
    104a:	fd 4f       	sbci	r31, 0xFD	; 253
    104c:	80 81       	ld	r24, Z
    104e:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1052:	90 91 ce 02 	lds	r25, 0x02CE
    1056:	80 91 cd 02 	lds	r24, 0x02CD
    105a:	98 17       	cp	r25, r24
    105c:	08 f4       	brcc	.+2      	; 0x1060 <__vector_24+0x21c>
    105e:	7c cf       	rjmp	.-264    	; 0xf58 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1060:	85 e8       	ldi	r24, 0x85	; 133
    1062:	80 93 bc 00 	sts	0x00BC, r24
    1066:	0a c0       	rjmp	.+20     	; 0x107c <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1068:	85 ec       	ldi	r24, 0xC5	; 197
    106a:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    106e:	10 92 18 03 	sts	0x0318, r1
      break;
    1072:	04 c0       	rjmp	.+8      	; 0x107c <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1074:	10 92 ab 02 	sts	0x02AB, r1
      twi_stop();
    1078:	0e 94 12 07 	call	0xe24	; 0xe24 <twi_stop>
      break;
  }
}
    107c:	ff 91       	pop	r31
    107e:	ef 91       	pop	r30
    1080:	bf 91       	pop	r27
    1082:	af 91       	pop	r26
    1084:	9f 91       	pop	r25
    1086:	8f 91       	pop	r24
    1088:	7f 91       	pop	r23
    108a:	6f 91       	pop	r22
    108c:	5f 91       	pop	r21
    108e:	4f 91       	pop	r20
    1090:	3f 91       	pop	r19
    1092:	2f 91       	pop	r18
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    109e:	80 91 49 03 	lds	r24, 0x0349
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	20 91 4a 03 	lds	r18, 0x034A
}
    10a8:	82 1b       	sub	r24, r18
    10aa:	91 09       	sbc	r25, r1
    10ac:	08 95       	ret

000010ae <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    10ae:	90 91 4a 03 	lds	r25, 0x034A
    10b2:	80 91 49 03 	lds	r24, 0x0349
    10b6:	98 17       	cp	r25, r24
    10b8:	50 f4       	brcc	.+20     	; 0x10ce <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
    10ba:	e9 2f       	mov	r30, r25
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	e5 5b       	subi	r30, 0xB5	; 181
    10c0:	fc 4f       	sbci	r31, 0xFC	; 252
    10c2:	20 81       	ld	r18, Z
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    10c6:	9f 5f       	subi	r25, 0xFF	; 255
    10c8:	90 93 4a 03 	sts	0x034A, r25
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <_ZN7TwoWire4readEv+0x24>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    10ce:	2f ef       	ldi	r18, 0xFF	; 255
    10d0:	3f ef       	ldi	r19, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    10d2:	c9 01       	movw	r24, r18
    10d4:	08 95       	ret

000010d6 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    10d6:	e0 91 4a 03 	lds	r30, 0x034A
    10da:	80 91 49 03 	lds	r24, 0x0349
    10de:	e8 17       	cp	r30, r24
    10e0:	30 f4       	brcc	.+12     	; 0x10ee <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	e5 5b       	subi	r30, 0xB5	; 181
    10e6:	fc 4f       	sbci	r31, 0xFC	; 252
    10e8:	80 81       	ld	r24, Z
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    10ee:	8f ef       	ldi	r24, 0xFF	; 255
    10f0:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    10f2:	08 95       	ret

000010f4 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    10f4:	08 95       	ret

000010f6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    10f6:	cf 92       	push	r12
    10f8:	df 92       	push	r13
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	7c 01       	movw	r14, r24
    1108:	26 2f       	mov	r18, r22
    110a:	97 2f       	mov	r25, r23
    110c:	8a 01       	movw	r16, r20
  if(transmitting){
    110e:	80 91 25 03 	lds	r24, 0x0325
    1112:	88 23       	and	r24, r24
    1114:	91 f0       	breq	.+36     	; 0x113a <_ZN7TwoWire5writeEPKhj+0x44>
    1116:	c6 2f       	mov	r28, r22
    1118:	d7 2f       	mov	r29, r23
    111a:	6e 01       	movw	r12, r28
    111c:	c4 0e       	add	r12, r20
    111e:	d5 1e       	adc	r13, r21
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    1120:	cc 15       	cp	r28, r12
    1122:	dd 05       	cpc	r29, r13
    1124:	71 f0       	breq	.+28     	; 0x1142 <_ZN7TwoWire5writeEPKhj+0x4c>
      write(data[i]);
    1126:	69 91       	ld	r22, Y+
    1128:	d7 01       	movw	r26, r14
    112a:	ed 91       	ld	r30, X+
    112c:	fc 91       	ld	r31, X
    112e:	01 90       	ld	r0, Z+
    1130:	f0 81       	ld	r31, Z
    1132:	e0 2d       	mov	r30, r0
    1134:	c7 01       	movw	r24, r14
    1136:	09 95       	icall
    1138:	f3 cf       	rjmp	.-26     	; 0x1120 <_ZN7TwoWire5writeEPKhj+0x2a>
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    113a:	64 2f       	mov	r22, r20
    113c:	82 2f       	mov	r24, r18
    113e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <twi_transmit>
  }
  return quantity;
}
    1142:	c8 01       	movw	r24, r16
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	ff 90       	pop	r15
    114e:	ef 90       	pop	r14
    1150:	df 90       	pop	r13
    1152:	cf 90       	pop	r12
    1154:	08 95       	ret

00001156 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	1f 92       	push	r1
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    1162:	20 91 25 03 	lds	r18, 0x0325
    1166:	22 23       	and	r18, r18
    1168:	d1 f0       	breq	.+52     	; 0x119e <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    116a:	20 91 26 03 	lds	r18, 0x0326
    116e:	20 32       	cpi	r18, 0x20	; 32
    1170:	40 f0       	brcs	.+16     	; 0x1182 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1172:	21 e0       	ldi	r18, 0x01	; 1
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	fc 01       	movw	r30, r24
    1178:	33 83       	std	Z+3, r19	; 0x03
    117a:	22 83       	std	Z+2, r18	; 0x02
      setWriteError();
      return 0;
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	15 c0       	rjmp	.+42     	; 0x11ac <_ZN7TwoWire5writeEh+0x56>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    1182:	80 91 27 03 	lds	r24, 0x0327
    1186:	e8 2f       	mov	r30, r24
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	e8 5d       	subi	r30, 0xD8	; 216
    118c:	fc 4f       	sbci	r31, 0xFC	; 252
    118e:	99 81       	ldd	r25, Y+1	; 0x01
    1190:	90 83       	st	Z, r25
    ++txBufferIndex;
    1192:	8f 5f       	subi	r24, 0xFF	; 255
    1194:	80 93 27 03 	sts	0x0327, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    1198:	80 93 26 03 	sts	0x0326, r24
    119c:	05 c0       	rjmp	.+10     	; 0x11a8 <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    119e:	61 e0       	ldi	r22, 0x01	; 1
    11a0:	ce 01       	movw	r24, r28
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <twi_transmit>
  }
  return 1;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
}
    11ac:	0f 90       	pop	r0
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	08 95       	ret

000011b4 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    11b4:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    11b6:	13 82       	std	Z+3, r1	; 0x03
    11b8:	12 82       	std	Z+2, r1	; 0x02
    11ba:	88 ee       	ldi	r24, 0xE8	; 232
    11bc:	93 e0       	ldi	r25, 0x03	; 3
    11be:	a0 e0       	ldi	r26, 0x00	; 0
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	84 83       	std	Z+4, r24	; 0x04
    11c4:	95 83       	std	Z+5, r25	; 0x05
    11c6:	a6 83       	std	Z+6, r26	; 0x06
    11c8:	b7 83       	std	Z+7, r27	; 0x07
    11ca:	8b e1       	ldi	r24, 0x1B	; 27
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	91 83       	std	Z+1, r25	; 0x01
    11d0:	80 83       	st	Z, r24
    11d2:	08 95       	ret

000011d4 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    11d4:	10 92 4a 03 	sts	0x034A, r1
  rxBufferLength = 0;
    11d8:	10 92 49 03 	sts	0x0349, r1

  txBufferIndex = 0;
    11dc:	10 92 27 03 	sts	0x0327, r1
  txBufferLength = 0;
    11e0:	10 92 26 03 	sts	0x0326, r1

  twi_init();
    11e4:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <twi_init>

000011e8 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	80 93 25 03 	sts	0x0325, r24
  // set address of targeted slave
  txAddress = address;
    11ee:	60 93 48 03 	sts	0x0348, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    11f2:	10 92 27 03 	sts	0x0327, r1
  txBufferLength = 0;
    11f6:	10 92 26 03 	sts	0x0326, r1
    11fa:	08 95       	ret

000011fc <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    11fc:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <_ZN7TwoWire17beginTransmissionEh>

00001200 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    1200:	0f 93       	push	r16
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    1202:	06 2f       	mov	r16, r22
    1204:	21 e0       	ldi	r18, 0x01	; 1
    1206:	40 91 26 03 	lds	r20, 0x0326
    120a:	68 e2       	ldi	r22, 0x28	; 40
    120c:	73 e0       	ldi	r23, 0x03	; 3
    120e:	80 91 48 03 	lds	r24, 0x0348
    1212:	0e 94 a3 06 	call	0xd46	; 0xd46 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1216:	10 92 27 03 	sts	0x0327, r1
  txBufferLength = 0;
    121a:	10 92 26 03 	sts	0x0326, r1
  // indicate that we are done transmitting
  transmitting = 0;
    121e:	10 92 25 03 	sts	0x0325, r1
  return ret;
}
    1222:	0f 91       	pop	r16
    1224:	08 95       	ret

00001226 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    1226:	61 e0       	ldi	r22, 0x01	; 1
    1228:	0c 94 00 09 	jmp	0x1200	; 0x1200 <_ZN7TwoWire15endTransmissionEh>

0000122c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    122c:	89 e1       	ldi	r24, 0x19	; 25
    122e:	93 e0       	ldi	r25, 0x03	; 3
    1230:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <_ZN7TwoWireC1Ev>

00001234 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1234:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1236:	91 8d       	ldd	r25, Z+25	; 0x19
    1238:	22 8d       	ldd	r18, Z+26	; 0x1a
    123a:	89 2f       	mov	r24, r25
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	80 5c       	subi	r24, 0xC0	; 192
    1240:	9f 4f       	sbci	r25, 0xFF	; 255
    1242:	82 1b       	sub	r24, r18
    1244:	91 09       	sbc	r25, r1
}
    1246:	8f 73       	andi	r24, 0x3F	; 63
    1248:	99 27       	eor	r25, r25
    124a:	08 95       	ret

0000124c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    124c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    124e:	91 8d       	ldd	r25, Z+25	; 0x19
    1250:	82 8d       	ldd	r24, Z+26	; 0x1a
    1252:	98 17       	cp	r25, r24
    1254:	31 f0       	breq	.+12     	; 0x1262 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1256:	82 8d       	ldd	r24, Z+26	; 0x1a
    1258:	e8 0f       	add	r30, r24
    125a:	f1 1d       	adc	r31, r1
    125c:	85 8d       	ldd	r24, Z+29	; 0x1d
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1266:	08 95       	ret

00001268 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1268:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    126a:	91 8d       	ldd	r25, Z+25	; 0x19
    126c:	82 8d       	ldd	r24, Z+26	; 0x1a
    126e:	98 17       	cp	r25, r24
    1270:	61 f0       	breq	.+24     	; 0x128a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1272:	82 8d       	ldd	r24, Z+26	; 0x1a
    1274:	df 01       	movw	r26, r30
    1276:	a8 0f       	add	r26, r24
    1278:	b1 1d       	adc	r27, r1
    127a:	5d 96       	adiw	r26, 0x1d	; 29
    127c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    127e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1280:	9f 5f       	subi	r25, 0xFF	; 255
    1282:	9f 73       	andi	r25, 0x3F	; 63
    1284:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    128a:	8f ef       	ldi	r24, 0xFF	; 255
    128c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    128e:	08 95       	ret

00001290 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1290:	8d e9       	ldi	r24, 0x9D	; 157
    1292:	9a e0       	ldi	r25, 0x0A	; 10
    1294:	89 2b       	or	r24, r25
    1296:	49 f0       	breq	.+18     	; 0x12aa <_Z14serialEventRunv+0x1a>
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	89 2b       	or	r24, r25
    129e:	29 f0       	breq	.+10     	; 0x12aa <_Z14serialEventRunv+0x1a>
    12a0:	0e 94 9d 0a 	call	0x153a	; 0x153a <_Z17Serial0_availablev>
    12a4:	81 11       	cpse	r24, r1
    12a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    12aa:	08 95       	ret

000012ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    12ac:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    12ae:	84 8d       	ldd	r24, Z+28	; 0x1c
    12b0:	df 01       	movw	r26, r30
    12b2:	a8 0f       	add	r26, r24
    12b4:	b1 1d       	adc	r27, r1
    12b6:	a3 5a       	subi	r26, 0xA3	; 163
    12b8:	bf 4f       	sbci	r27, 0xFF	; 255
    12ba:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    12bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	8f 73       	andi	r24, 0x3F	; 63
    12c4:	99 27       	eor	r25, r25
    12c6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    12c8:	a6 89       	ldd	r26, Z+22	; 0x16
    12ca:	b7 89       	ldd	r27, Z+23	; 0x17
    12cc:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    12ce:	a0 89       	ldd	r26, Z+16	; 0x10
    12d0:	b1 89       	ldd	r27, Z+17	; 0x11
    12d2:	8c 91       	ld	r24, X
    12d4:	80 64       	ori	r24, 0x40	; 64
    12d6:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    12d8:	93 8d       	ldd	r25, Z+27	; 0x1b
    12da:	84 8d       	ldd	r24, Z+28	; 0x1c
    12dc:	98 13       	cpse	r25, r24
    12de:	06 c0       	rjmp	.+12     	; 0x12ec <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    12e0:	02 88       	ldd	r0, Z+18	; 0x12
    12e2:	f3 89       	ldd	r31, Z+19	; 0x13
    12e4:	e0 2d       	mov	r30, r0
    12e6:	80 81       	ld	r24, Z
    12e8:	8f 7d       	andi	r24, 0xDF	; 223
    12ea:	80 83       	st	Z, r24
    12ec:	08 95       	ret

000012ee <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    12f4:	88 8d       	ldd	r24, Y+24	; 0x18
    12f6:	88 23       	and	r24, r24
    12f8:	c9 f0       	breq	.+50     	; 0x132c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    12fa:	ea 89       	ldd	r30, Y+18	; 0x12
    12fc:	fb 89       	ldd	r31, Y+19	; 0x13
    12fe:	80 81       	ld	r24, Z
    1300:	85 fd       	sbrc	r24, 5
    1302:	05 c0       	rjmp	.+10     	; 0x130e <_ZN14HardwareSerial5flushEv+0x20>
    1304:	a8 89       	ldd	r26, Y+16	; 0x10
    1306:	b9 89       	ldd	r27, Y+17	; 0x11
    1308:	8c 91       	ld	r24, X
    130a:	86 fd       	sbrc	r24, 6
    130c:	0f c0       	rjmp	.+30     	; 0x132c <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	07 fc       	sbrc	r0, 7
    1312:	f5 cf       	rjmp	.-22     	; 0x12fe <_ZN14HardwareSerial5flushEv+0x10>
    1314:	80 81       	ld	r24, Z
    1316:	85 ff       	sbrs	r24, 5
    1318:	f2 cf       	rjmp	.-28     	; 0x12fe <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    131a:	a8 89       	ldd	r26, Y+16	; 0x10
    131c:	b9 89       	ldd	r27, Y+17	; 0x11
    131e:	8c 91       	ld	r24, X
    1320:	85 ff       	sbrs	r24, 5
    1322:	ed cf       	rjmp	.-38     	; 0x12fe <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1324:	ce 01       	movw	r24, r28
    1326:	0e 94 56 09 	call	0x12ac	; 0x12ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    132a:	e7 cf       	rjmp	.-50     	; 0x12fa <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	08 95       	ret

00001332 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1332:	ef 92       	push	r14
    1334:	ff 92       	push	r15
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	ec 01       	movw	r28, r24
  _written = true;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1344:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1346:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1348:	98 13       	cpse	r25, r24
    134a:	05 c0       	rjmp	.+10     	; 0x1356 <_ZN14HardwareSerial5writeEh+0x24>
    134c:	e8 89       	ldd	r30, Y+16	; 0x10
    134e:	f9 89       	ldd	r31, Y+17	; 0x11
    1350:	80 81       	ld	r24, Z
    1352:	85 fd       	sbrc	r24, 5
    1354:	24 c0       	rjmp	.+72     	; 0x139e <_ZN14HardwareSerial5writeEh+0x6c>
    1356:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1358:	0b 8d       	ldd	r16, Y+27	; 0x1b
    135a:	10 e0       	ldi	r17, 0x00	; 0
    135c:	0f 5f       	subi	r16, 0xFF	; 255
    135e:	1f 4f       	sbci	r17, 0xFF	; 255
    1360:	0f 73       	andi	r16, 0x3F	; 63
    1362:	11 27       	eor	r17, r17
    1364:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1366:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1368:	e8 12       	cpse	r14, r24
    136a:	0c c0       	rjmp	.+24     	; 0x1384 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	07 fc       	sbrc	r0, 7
    1370:	fa cf       	rjmp	.-12     	; 0x1366 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1372:	e8 89       	ldd	r30, Y+16	; 0x10
    1374:	f9 89       	ldd	r31, Y+17	; 0x11
    1376:	80 81       	ld	r24, Z
    1378:	85 ff       	sbrs	r24, 5
    137a:	f5 cf       	rjmp	.-22     	; 0x1366 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    137c:	ce 01       	movw	r24, r28
    137e:	0e 94 56 09 	call	0x12ac	; 0x12ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1382:	f1 cf       	rjmp	.-30     	; 0x1366 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1384:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1386:	fe 01       	movw	r30, r28
    1388:	e8 0f       	add	r30, r24
    138a:	f1 1d       	adc	r31, r1
    138c:	e3 5a       	subi	r30, 0xA3	; 163
    138e:	ff 4f       	sbci	r31, 0xFF	; 255
    1390:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1392:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1394:	ea 89       	ldd	r30, Y+18	; 0x12
    1396:	fb 89       	ldd	r31, Y+19	; 0x13
    1398:	80 81       	ld	r24, Z
    139a:	80 62       	ori	r24, 0x20	; 32
    139c:	07 c0       	rjmp	.+14     	; 0x13ac <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    139e:	ee 89       	ldd	r30, Y+22	; 0x16
    13a0:	ff 89       	ldd	r31, Y+23	; 0x17
    13a2:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    13a4:	e8 89       	ldd	r30, Y+16	; 0x10
    13a6:	f9 89       	ldd	r31, Y+17	; 0x11
    13a8:	80 81       	ld	r24, Z
    13aa:	80 64       	ori	r24, 0x40	; 64
    13ac:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	08 95       	ret

000013c0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    13c0:	cf 92       	push	r12
    13c2:	df 92       	push	r13
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	ec 01       	movw	r28, r24
    13d0:	6a 01       	movw	r12, r20
    13d2:	7b 01       	movw	r14, r22
    13d4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    13d6:	e8 89       	ldd	r30, Y+16	; 0x10
    13d8:	f9 89       	ldd	r31, Y+17	; 0x11
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    13de:	41 15       	cp	r20, r1
    13e0:	51 4e       	sbci	r21, 0xE1	; 225
    13e2:	61 05       	cpc	r22, r1
    13e4:	71 05       	cpc	r23, r1
    13e6:	b1 f0       	breq	.+44     	; 0x1414 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	79 e0       	ldi	r23, 0x09	; 9
    13ec:	8d e3       	ldi	r24, 0x3D	; 61
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a7 01       	movw	r20, r14
    13f2:	96 01       	movw	r18, r12
    13f4:	0e 94 ae 0c 	call	0x195c	; 0x195c <__udivmodsi4>
    13f8:	da 01       	movw	r26, r20
    13fa:	c9 01       	movw	r24, r18
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	a1 09       	sbc	r26, r1
    1400:	b1 09       	sbc	r27, r1
    1402:	b6 95       	lsr	r27
    1404:	a7 95       	ror	r26
    1406:	97 95       	ror	r25
    1408:	87 95       	ror	r24
    140a:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    140c:	41 15       	cp	r20, r1
    140e:	80 e1       	ldi	r24, 0x10	; 16
    1410:	58 07       	cpc	r21, r24
    1412:	a8 f0       	brcs	.+42     	; 0x143e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1414:	e8 89       	ldd	r30, Y+16	; 0x10
    1416:	f9 89       	ldd	r31, Y+17	; 0x11
    1418:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    141a:	60 e8       	ldi	r22, 0x80	; 128
    141c:	74 e8       	ldi	r23, 0x84	; 132
    141e:	8e e1       	ldi	r24, 0x1E	; 30
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	a7 01       	movw	r20, r14
    1424:	96 01       	movw	r18, r12
    1426:	0e 94 ae 0c 	call	0x195c	; 0x195c <__udivmodsi4>
    142a:	ba 01       	movw	r22, r20
    142c:	a9 01       	movw	r20, r18
    142e:	41 50       	subi	r20, 0x01	; 1
    1430:	51 09       	sbc	r21, r1
    1432:	61 09       	sbc	r22, r1
    1434:	71 09       	sbc	r23, r1
    1436:	76 95       	lsr	r23
    1438:	67 95       	ror	r22
    143a:	57 95       	ror	r21
    143c:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    143e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1440:	fd 85       	ldd	r31, Y+13	; 0x0d
    1442:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    1444:	ee 85       	ldd	r30, Y+14	; 0x0e
    1446:	ff 85       	ldd	r31, Y+15	; 0x0f
    1448:	40 83       	st	Z, r20

  _written = false;
    144a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    144c:	ec 89       	ldd	r30, Y+20	; 0x14
    144e:	fd 89       	ldd	r31, Y+21	; 0x15
    1450:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1452:	ea 89       	ldd	r30, Y+18	; 0x12
    1454:	fb 89       	ldd	r31, Y+19	; 0x13
    1456:	80 81       	ld	r24, Z
    1458:	80 61       	ori	r24, 0x10	; 16
    145a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    145c:	ea 89       	ldd	r30, Y+18	; 0x12
    145e:	fb 89       	ldd	r31, Y+19	; 0x13
    1460:	80 81       	ld	r24, Z
    1462:	88 60       	ori	r24, 0x08	; 8
    1464:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1466:	ea 89       	ldd	r30, Y+18	; 0x12
    1468:	fb 89       	ldd	r31, Y+19	; 0x13
    146a:	80 81       	ld	r24, Z
    146c:	80 68       	ori	r24, 0x80	; 128
    146e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1470:	ea 89       	ldd	r30, Y+18	; 0x12
    1472:	fb 89       	ldd	r31, Y+19	; 0x13
    1474:	80 81       	ld	r24, Z
    1476:	8f 7d       	andi	r24, 0xDF	; 223
    1478:	80 83       	st	Z, r24
}
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	1f 91       	pop	r17
    1480:	ff 90       	pop	r15
    1482:	ef 90       	pop	r14
    1484:	df 90       	pop	r13
    1486:	cf 90       	pop	r12
    1488:	08 95       	ret

0000148a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    148a:	1f 92       	push	r1
    148c:	0f 92       	push	r0
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	0f 92       	push	r0
    1492:	11 24       	eor	r1, r1
    1494:	2f 93       	push	r18
    1496:	8f 93       	push	r24
    1498:	9f 93       	push	r25
    149a:	ef 93       	push	r30
    149c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    149e:	e0 91 7b 03 	lds	r30, 0x037B
    14a2:	f0 91 7c 03 	lds	r31, 0x037C
    14a6:	80 81       	ld	r24, Z
    14a8:	e0 91 81 03 	lds	r30, 0x0381
    14ac:	f0 91 82 03 	lds	r31, 0x0382
    14b0:	82 fd       	sbrc	r24, 2
    14b2:	12 c0       	rjmp	.+36     	; 0x14d8 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    14b4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    14b6:	80 91 84 03 	lds	r24, 0x0384
    14ba:	8f 5f       	subi	r24, 0xFF	; 255
    14bc:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    14be:	20 91 85 03 	lds	r18, 0x0385
    14c2:	82 17       	cp	r24, r18
    14c4:	51 f0       	breq	.+20     	; 0x14da <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    14c6:	e0 91 84 03 	lds	r30, 0x0384
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	e5 59       	subi	r30, 0x95	; 149
    14ce:	fc 4f       	sbci	r31, 0xFC	; 252
    14d0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    14d2:	80 93 84 03 	sts	0x0384, r24
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    14d8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    14da:	ff 91       	pop	r31
    14dc:	ef 91       	pop	r30
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	2f 91       	pop	r18
    14e4:	0f 90       	pop	r0
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	0f 90       	pop	r0
    14ea:	1f 90       	pop	r1
    14ec:	18 95       	reti

000014ee <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    14ee:	1f 92       	push	r1
    14f0:	0f 92       	push	r0
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	0f 92       	push	r0
    14f6:	11 24       	eor	r1, r1
    14f8:	2f 93       	push	r18
    14fa:	3f 93       	push	r19
    14fc:	4f 93       	push	r20
    14fe:	5f 93       	push	r21
    1500:	6f 93       	push	r22
    1502:	7f 93       	push	r23
    1504:	8f 93       	push	r24
    1506:	9f 93       	push	r25
    1508:	af 93       	push	r26
    150a:	bf 93       	push	r27
    150c:	ef 93       	push	r30
    150e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1510:	8b e6       	ldi	r24, 0x6B	; 107
    1512:	93 e0       	ldi	r25, 0x03	; 3
    1514:	0e 94 56 09 	call	0x12ac	; 0x12ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1518:	ff 91       	pop	r31
    151a:	ef 91       	pop	r30
    151c:	bf 91       	pop	r27
    151e:	af 91       	pop	r26
    1520:	9f 91       	pop	r25
    1522:	8f 91       	pop	r24
    1524:	7f 91       	pop	r23
    1526:	6f 91       	pop	r22
    1528:	5f 91       	pop	r21
    152a:	4f 91       	pop	r20
    152c:	3f 91       	pop	r19
    152e:	2f 91       	pop	r18
    1530:	0f 90       	pop	r0
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	0f 90       	pop	r0
    1536:	1f 90       	pop	r1
    1538:	18 95       	reti

0000153a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    153a:	8b e6       	ldi	r24, 0x6B	; 107
    153c:	93 e0       	ldi	r25, 0x03	; 3
    153e:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZN14HardwareSerial9availableEv>
    1542:	21 e0       	ldi	r18, 0x01	; 1
    1544:	89 2b       	or	r24, r25
    1546:	09 f4       	brne	.+2      	; 0x154a <_Z17Serial0_availablev+0x10>
    1548:	20 e0       	ldi	r18, 0x00	; 0
}
    154a:	82 2f       	mov	r24, r18
    154c:	08 95       	ret

0000154e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    154e:	eb e6       	ldi	r30, 0x6B	; 107
    1550:	f3 e0       	ldi	r31, 0x03	; 3
    1552:	13 82       	std	Z+3, r1	; 0x03
    1554:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1556:	88 ee       	ldi	r24, 0xE8	; 232
    1558:	93 e0       	ldi	r25, 0x03	; 3
    155a:	a0 e0       	ldi	r26, 0x00	; 0
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	84 83       	std	Z+4, r24	; 0x04
    1560:	95 83       	std	Z+5, r25	; 0x05
    1562:	a6 83       	std	Z+6, r26	; 0x06
    1564:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1566:	8b e2       	ldi	r24, 0x2B	; 43
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	91 83       	std	Z+1, r25	; 0x01
    156c:	80 83       	st	Z, r24
    156e:	85 ec       	ldi	r24, 0xC5	; 197
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	95 87       	std	Z+13, r25	; 0x0d
    1574:	84 87       	std	Z+12, r24	; 0x0c
    1576:	84 ec       	ldi	r24, 0xC4	; 196
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	97 87       	std	Z+15, r25	; 0x0f
    157c:	86 87       	std	Z+14, r24	; 0x0e
    157e:	80 ec       	ldi	r24, 0xC0	; 192
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	91 8b       	std	Z+17, r25	; 0x11
    1584:	80 8b       	std	Z+16, r24	; 0x10
    1586:	81 ec       	ldi	r24, 0xC1	; 193
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	93 8b       	std	Z+19, r25	; 0x13
    158c:	82 8b       	std	Z+18, r24	; 0x12
    158e:	82 ec       	ldi	r24, 0xC2	; 194
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	95 8b       	std	Z+21, r25	; 0x15
    1594:	84 8b       	std	Z+20, r24	; 0x14
    1596:	86 ec       	ldi	r24, 0xC6	; 198
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	97 8b       	std	Z+23, r25	; 0x17
    159c:	86 8b       	std	Z+22, r24	; 0x16
    159e:	11 8e       	std	Z+25, r1	; 0x19
    15a0:	12 8e       	std	Z+26, r1	; 0x1a
    15a2:	13 8e       	std	Z+27, r1	; 0x1b
    15a4:	14 8e       	std	Z+28, r1	; 0x1c
    15a6:	08 95       	ret

000015a8 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    15a8:	08 95       	ret

000015aa <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    15aa:	0e 94 aa 0b 	call	0x1754	; 0x1754 <init>

	initVariant();
    15ae:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    15b2:	0e 94 af 00 	call	0x15e	; 0x15e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    15b6:	c8 e4       	ldi	r28, 0x48	; 72
    15b8:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    15ba:	0e 94 33 01 	call	0x266	; 0x266 <loop>
		if (serialEventRun) serialEventRun();
    15be:	20 97       	sbiw	r28, 0x00	; 0
    15c0:	e1 f3       	breq	.-8      	; 0x15ba <main+0x10>
    15c2:	0e 94 48 09 	call	0x1290	; 0x1290 <_Z14serialEventRunv>
    15c6:	f9 cf       	rjmp	.-14     	; 0x15ba <main+0x10>

000015c8 <_Znwj>:
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    15c8:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <malloc>

000015cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    15cc:	cf 92       	push	r12
    15ce:	df 92       	push	r13
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	6c 01       	movw	r12, r24
    15de:	7a 01       	movw	r14, r20
    15e0:	8b 01       	movw	r16, r22
  size_t n = 0;
    15e2:	c0 e0       	ldi	r28, 0x00	; 0
    15e4:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    15e6:	ce 15       	cp	r28, r14
    15e8:	df 05       	cpc	r29, r15
    15ea:	89 f0       	breq	.+34     	; 0x160e <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
    15ec:	d8 01       	movw	r26, r16
    15ee:	6d 91       	ld	r22, X+
    15f0:	8d 01       	movw	r16, r26
    15f2:	d6 01       	movw	r26, r12
    15f4:	ed 91       	ld	r30, X+
    15f6:	fc 91       	ld	r31, X
    15f8:	01 90       	ld	r0, Z+
    15fa:	f0 81       	ld	r31, Z
    15fc:	e0 2d       	mov	r30, r0
    15fe:	c6 01       	movw	r24, r12
    1600:	09 95       	icall
    1602:	89 2b       	or	r24, r25
    1604:	11 f4       	brne	.+4      	; 0x160a <_ZN5Print5writeEPKhj+0x3e>
    1606:	7e 01       	movw	r14, r28
    1608:	02 c0       	rjmp	.+4      	; 0x160e <_ZN5Print5writeEPKhj+0x42>
    160a:	21 96       	adiw	r28, 0x01	; 1
    160c:	ec cf       	rjmp	.-40     	; 0x15e6 <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
    160e:	c7 01       	movw	r24, r14
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	ff 90       	pop	r15
    161a:	ef 90       	pop	r14
    161c:	df 90       	pop	r13
    161e:	cf 90       	pop	r12
    1620:	08 95       	ret

00001622 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1622:	61 15       	cp	r22, r1
    1624:	71 05       	cpc	r23, r1
    1626:	79 f0       	breq	.+30     	; 0x1646 <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
    1628:	fb 01       	movw	r30, r22
    162a:	01 90       	ld	r0, Z+
    162c:	00 20       	and	r0, r0
    162e:	e9 f7       	brne	.-6      	; 0x162a <_ZN5Print5writeEPKc+0x8>
    1630:	31 97       	sbiw	r30, 0x01	; 1
    1632:	af 01       	movw	r20, r30
    1634:	46 1b       	sub	r20, r22
    1636:	57 0b       	sbc	r21, r23
    1638:	dc 01       	movw	r26, r24
    163a:	ed 91       	ld	r30, X+
    163c:	fc 91       	ld	r31, X
    163e:	02 80       	ldd	r0, Z+2	; 0x02
    1640:	f3 81       	ldd	r31, Z+3	; 0x03
    1642:	e0 2d       	mov	r30, r0
    1644:	09 94       	ijmp
    }
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	08 95       	ret

0000164c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    164c:	ef 92       	push	r14
    164e:	ff 92       	push	r15
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	8c 01       	movw	r16, r24
    165a:	7b 01       	movw	r14, r22
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
    165c:	c0 e0       	ldi	r28, 0x00	; 0
    165e:	d0 e0       	ldi	r29, 0x00	; 0
    1660:	f7 01       	movw	r30, r14
    1662:	ec 0f       	add	r30, r28
    1664:	fd 1f       	adc	r31, r29
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    1666:	64 91       	lpm	r22, Z
    if (c == 0) break;
    1668:	66 23       	and	r22, r22
    166a:	61 f0       	breq	.+24     	; 0x1684 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    if (write(c)) n++;
    166c:	d8 01       	movw	r26, r16
    166e:	ed 91       	ld	r30, X+
    1670:	fc 91       	ld	r31, X
    1672:	01 90       	ld	r0, Z+
    1674:	f0 81       	ld	r31, Z
    1676:	e0 2d       	mov	r30, r0
    1678:	c8 01       	movw	r24, r16
    167a:	09 95       	icall
    167c:	89 2b       	or	r24, r25
    167e:	11 f0       	breq	.+4      	; 0x1684 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1680:	21 96       	adiw	r28, 0x01	; 1
    else break;
  }
  return n;
    1682:	ee cf       	rjmp	.-36     	; 0x1660 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
}
    1684:	ce 01       	movw	r24, r28
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	0f 91       	pop	r16
    168e:	ff 90       	pop	r15
    1690:	ef 90       	pop	r14
    1692:	08 95       	ret

00001694 <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
    1694:	67 e3       	ldi	r22, 0x37	; 55
    1696:	71 e0       	ldi	r23, 0x01	; 1
    1698:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <_ZN5Print5writeEPKc>

0000169c <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	ec 01       	movw	r28, r24
  size_t n = print(ifsh);
    16a6:	0e 94 26 0b 	call	0x164c	; 0x164c <_ZN5Print5printEPK19__FlashStringHelper>
    16aa:	8c 01       	movw	r16, r24
  n += println();
    16ac:	ce 01       	movw	r24, r28
    16ae:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZN5Print7printlnEv>
  return n;
}
    16b2:	80 0f       	add	r24, r16
    16b4:	91 1f       	adc	r25, r17
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	1f 91       	pop	r17
    16bc:	0f 91       	pop	r16
    16be:	08 95       	ret

000016c0 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    16c0:	1f 92       	push	r1
    16c2:	0f 92       	push	r0
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	0f 92       	push	r0
    16c8:	11 24       	eor	r1, r1
    16ca:	2f 93       	push	r18
    16cc:	3f 93       	push	r19
    16ce:	8f 93       	push	r24
    16d0:	9f 93       	push	r25
    16d2:	af 93       	push	r26
    16d4:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    16d6:	80 91 09 04 	lds	r24, 0x0409
    16da:	90 91 0a 04 	lds	r25, 0x040A
    16de:	a0 91 0b 04 	lds	r26, 0x040B
    16e2:	b0 91 0c 04 	lds	r27, 0x040C
	unsigned char f = timer0_fract;
    16e6:	30 91 08 04 	lds	r19, 0x0408

	m += MILLIS_INC;
	f += FRACT_INC;
    16ea:	23 e0       	ldi	r18, 0x03	; 3
    16ec:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    16ee:	2d 37       	cpi	r18, 0x7D	; 125
    16f0:	20 f4       	brcc	.+8      	; 0x16fa <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    16f2:	01 96       	adiw	r24, 0x01	; 1
    16f4:	a1 1d       	adc	r26, r1
    16f6:	b1 1d       	adc	r27, r1
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    16fa:	26 e8       	ldi	r18, 0x86	; 134
    16fc:	23 0f       	add	r18, r19
		m += 1;
    16fe:	02 96       	adiw	r24, 0x02	; 2
    1700:	a1 1d       	adc	r26, r1
    1702:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1704:	20 93 08 04 	sts	0x0408, r18
	timer0_millis = m;
    1708:	80 93 09 04 	sts	0x0409, r24
    170c:	90 93 0a 04 	sts	0x040A, r25
    1710:	a0 93 0b 04 	sts	0x040B, r26
    1714:	b0 93 0c 04 	sts	0x040C, r27
	timer0_overflow_count++;
    1718:	80 91 0d 04 	lds	r24, 0x040D
    171c:	90 91 0e 04 	lds	r25, 0x040E
    1720:	a0 91 0f 04 	lds	r26, 0x040F
    1724:	b0 91 10 04 	lds	r27, 0x0410
    1728:	01 96       	adiw	r24, 0x01	; 1
    172a:	a1 1d       	adc	r26, r1
    172c:	b1 1d       	adc	r27, r1
    172e:	80 93 0d 04 	sts	0x040D, r24
    1732:	90 93 0e 04 	sts	0x040E, r25
    1736:	a0 93 0f 04 	sts	0x040F, r26
    173a:	b0 93 10 04 	sts	0x0410, r27
}
    173e:	bf 91       	pop	r27
    1740:	af 91       	pop	r26
    1742:	9f 91       	pop	r25
    1744:	8f 91       	pop	r24
    1746:	3f 91       	pop	r19
    1748:	2f 91       	pop	r18
    174a:	0f 90       	pop	r0
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	0f 90       	pop	r0
    1750:	1f 90       	pop	r1
    1752:	18 95       	reti

00001754 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1754:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1756:	84 b5       	in	r24, 0x24	; 36
    1758:	82 60       	ori	r24, 0x02	; 2
    175a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    175c:	84 b5       	in	r24, 0x24	; 36
    175e:	81 60       	ori	r24, 0x01	; 1
    1760:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1762:	85 b5       	in	r24, 0x25	; 37
    1764:	82 60       	ori	r24, 0x02	; 2
    1766:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1768:	85 b5       	in	r24, 0x25	; 37
    176a:	81 60       	ori	r24, 0x01	; 1
    176c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    176e:	ee e6       	ldi	r30, 0x6E	; 110
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	81 60       	ori	r24, 0x01	; 1
    1776:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1778:	e1 e8       	ldi	r30, 0x81	; 129
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    177e:	80 81       	ld	r24, Z
    1780:	82 60       	ori	r24, 0x02	; 2
    1782:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1784:	80 81       	ld	r24, Z
    1786:	81 60       	ori	r24, 0x01	; 1
    1788:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    178a:	e0 e8       	ldi	r30, 0x80	; 128
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	81 60       	ori	r24, 0x01	; 1
    1792:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1794:	e1 eb       	ldi	r30, 0xB1	; 177
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	84 60       	ori	r24, 0x04	; 4
    179c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    179e:	e0 eb       	ldi	r30, 0xB0	; 176
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	81 60       	ori	r24, 0x01	; 1
    17a6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    17a8:	ea e7       	ldi	r30, 0x7A	; 122
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	84 60       	ori	r24, 0x04	; 4
    17b0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    17b2:	80 81       	ld	r24, Z
    17b4:	82 60       	ori	r24, 0x02	; 2
    17b6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    17b8:	80 81       	ld	r24, Z
    17ba:	81 60       	ori	r24, 0x01	; 1
    17bc:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    17be:	80 81       	ld	r24, Z
    17c0:	80 68       	ori	r24, 0x80	; 128
    17c2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    17c4:	10 92 c1 00 	sts	0x00C1, r1
    17c8:	08 95       	ret

000017ca <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    17ca:	83 30       	cpi	r24, 0x03	; 3
    17cc:	81 f0       	breq	.+32     	; 0x17ee <turnOffPWM+0x24>
    17ce:	28 f4       	brcc	.+10     	; 0x17da <turnOffPWM+0x10>
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	99 f0       	breq	.+38     	; 0x17fa <turnOffPWM+0x30>
    17d4:	82 30       	cpi	r24, 0x02	; 2
    17d6:	a1 f0       	breq	.+40     	; 0x1800 <turnOffPWM+0x36>
    17d8:	08 95       	ret
    17da:	87 30       	cpi	r24, 0x07	; 7
    17dc:	a9 f0       	breq	.+42     	; 0x1808 <turnOffPWM+0x3e>
    17de:	88 30       	cpi	r24, 0x08	; 8
    17e0:	b9 f0       	breq	.+46     	; 0x1810 <turnOffPWM+0x46>
    17e2:	84 30       	cpi	r24, 0x04	; 4
    17e4:	d1 f4       	brne	.+52     	; 0x181a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    17e6:	80 91 80 00 	lds	r24, 0x0080
    17ea:	8f 7d       	andi	r24, 0xDF	; 223
    17ec:	03 c0       	rjmp	.+6      	; 0x17f4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    17ee:	80 91 80 00 	lds	r24, 0x0080
    17f2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    17f4:	80 93 80 00 	sts	0x0080, r24
    17f8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    17fa:	84 b5       	in	r24, 0x24	; 36
    17fc:	8f 77       	andi	r24, 0x7F	; 127
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1800:	84 b5       	in	r24, 0x24	; 36
    1802:	8f 7d       	andi	r24, 0xDF	; 223
    1804:	84 bd       	out	0x24, r24	; 36
    1806:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1808:	80 91 b0 00 	lds	r24, 0x00B0
    180c:	8f 77       	andi	r24, 0x7F	; 127
    180e:	03 c0       	rjmp	.+6      	; 0x1816 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1810:	80 91 b0 00 	lds	r24, 0x00B0
    1814:	8f 7d       	andi	r24, 0xDF	; 223
    1816:	80 93 b0 00 	sts	0x00B0, r24
    181a:	08 95       	ret

0000181c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	fc 01       	movw	r30, r24
    1824:	e9 56       	subi	r30, 0x69	; 105
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    182a:	fc 01       	movw	r30, r24
    182c:	e5 55       	subi	r30, 0x55	; 85
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1832:	88 23       	and	r24, r24
    1834:	61 f1       	breq	.+88     	; 0x188e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	fc 01       	movw	r30, r24
    183e:	ed 52       	subi	r30, 0x2D	; 45
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	c5 91       	lpm	r28, Z+
    1844:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1846:	fc 01       	movw	r30, r24
    1848:	e7 53       	subi	r30, 0x37	; 55
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	a5 91       	lpm	r26, Z+
    184e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1850:	61 11       	cpse	r22, r1
    1852:	09 c0       	rjmp	.+18     	; 0x1866 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1854:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1856:	f8 94       	cli
		*reg &= ~bit;
    1858:	88 81       	ld	r24, Y
    185a:	20 95       	com	r18
    185c:	82 23       	and	r24, r18
    185e:	88 83       	st	Y, r24
		*out &= ~bit;
    1860:	ec 91       	ld	r30, X
    1862:	2e 23       	and	r18, r30
    1864:	0b c0       	rjmp	.+22     	; 0x187c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1866:	62 30       	cpi	r22, 0x02	; 2
    1868:	61 f4       	brne	.+24     	; 0x1882 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    186a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    186c:	f8 94       	cli
		*reg &= ~bit;
    186e:	38 81       	ld	r19, Y
    1870:	82 2f       	mov	r24, r18
    1872:	80 95       	com	r24
    1874:	83 23       	and	r24, r19
    1876:	88 83       	st	Y, r24
		*out |= bit;
    1878:	ec 91       	ld	r30, X
    187a:	2e 2b       	or	r18, r30
    187c:	2c 93       	st	X, r18
		SREG = oldSREG;
    187e:	9f bf       	out	0x3f, r25	; 63
    1880:	06 c0       	rjmp	.+12     	; 0x188e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1882:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1884:	f8 94       	cli
		*reg |= bit;
    1886:	e8 81       	ld	r30, Y
    1888:	2e 2b       	or	r18, r30
    188a:	28 83       	st	Y, r18
		SREG = oldSREG;
    188c:	8f bf       	out	0x3f, r24	; 63
	}
}
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	08 95       	ret

00001894 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1894:	1f 93       	push	r17
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	f9 01       	movw	r30, r18
    18a0:	ed 57       	subi	r30, 0x7D	; 125
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    18a6:	f9 01       	movw	r30, r18
    18a8:	e9 56       	subi	r30, 0x69	; 105
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    18ae:	f9 01       	movw	r30, r18
    18b0:	e5 55       	subi	r30, 0x55	; 85
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    18b6:	cc 23       	and	r28, r28
    18b8:	c9 f0       	breq	.+50     	; 0x18ec <digitalWrite+0x58>
    18ba:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    18bc:	81 11       	cpse	r24, r1
    18be:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <turnOffPWM>

	out = portOutputRegister(port);
    18c2:	ec 2f       	mov	r30, r28
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	ee 0f       	add	r30, r30
    18c8:	ff 1f       	adc	r31, r31
    18ca:	e7 53       	subi	r30, 0x37	; 55
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	a5 91       	lpm	r26, Z+
    18d0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    18d2:	8f b7       	in	r24, 0x3f	; 63
	cli();
    18d4:	f8 94       	cli

	if (val == LOW) {
    18d6:	11 11       	cpse	r17, r1
    18d8:	05 c0       	rjmp	.+10     	; 0x18e4 <digitalWrite+0x50>
		*out &= ~bit;
    18da:	9c 91       	ld	r25, X
    18dc:	ed 2f       	mov	r30, r29
    18de:	e0 95       	com	r30
    18e0:	e9 23       	and	r30, r25
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <digitalWrite+0x54>
	} else {
		*out |= bit;
    18e4:	ec 91       	ld	r30, X
    18e6:	ed 2b       	or	r30, r29
    18e8:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    18ea:	8f bf       	out	0x3f, r24	; 63
}
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	1f 91       	pop	r17
    18f2:	08 95       	ret

000018f4 <__udivmodqi4>:
    18f4:	99 1b       	sub	r25, r25
    18f6:	79 e0       	ldi	r23, 0x09	; 9
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <__udivmodqi4_ep>

000018fa <__udivmodqi4_loop>:
    18fa:	99 1f       	adc	r25, r25
    18fc:	96 17       	cp	r25, r22
    18fe:	08 f0       	brcs	.+2      	; 0x1902 <__udivmodqi4_ep>
    1900:	96 1b       	sub	r25, r22

00001902 <__udivmodqi4_ep>:
    1902:	88 1f       	adc	r24, r24
    1904:	7a 95       	dec	r23
    1906:	c9 f7       	brne	.-14     	; 0x18fa <__udivmodqi4_loop>
    1908:	80 95       	com	r24
    190a:	08 95       	ret

0000190c <__udivmodhi4>:
    190c:	aa 1b       	sub	r26, r26
    190e:	bb 1b       	sub	r27, r27
    1910:	51 e1       	ldi	r21, 0x11	; 17
    1912:	07 c0       	rjmp	.+14     	; 0x1922 <__udivmodhi4_ep>

00001914 <__udivmodhi4_loop>:
    1914:	aa 1f       	adc	r26, r26
    1916:	bb 1f       	adc	r27, r27
    1918:	a6 17       	cp	r26, r22
    191a:	b7 07       	cpc	r27, r23
    191c:	10 f0       	brcs	.+4      	; 0x1922 <__udivmodhi4_ep>
    191e:	a6 1b       	sub	r26, r22
    1920:	b7 0b       	sbc	r27, r23

00001922 <__udivmodhi4_ep>:
    1922:	88 1f       	adc	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	5a 95       	dec	r21
    1928:	a9 f7       	brne	.-22     	; 0x1914 <__udivmodhi4_loop>
    192a:	80 95       	com	r24
    192c:	90 95       	com	r25
    192e:	bc 01       	movw	r22, r24
    1930:	cd 01       	movw	r24, r26
    1932:	08 95       	ret

00001934 <__divmodhi4>:
    1934:	97 fb       	bst	r25, 7
    1936:	07 2e       	mov	r0, r23
    1938:	16 f4       	brtc	.+4      	; 0x193e <__divmodhi4+0xa>
    193a:	00 94       	com	r0
    193c:	07 d0       	rcall	.+14     	; 0x194c <__divmodhi4_neg1>
    193e:	77 fd       	sbrc	r23, 7
    1940:	09 d0       	rcall	.+18     	; 0x1954 <__divmodhi4_neg2>
    1942:	0e 94 86 0c 	call	0x190c	; 0x190c <__udivmodhi4>
    1946:	07 fc       	sbrc	r0, 7
    1948:	05 d0       	rcall	.+10     	; 0x1954 <__divmodhi4_neg2>
    194a:	3e f4       	brtc	.+14     	; 0x195a <__divmodhi4_exit>

0000194c <__divmodhi4_neg1>:
    194c:	90 95       	com	r25
    194e:	81 95       	neg	r24
    1950:	9f 4f       	sbci	r25, 0xFF	; 255
    1952:	08 95       	ret

00001954 <__divmodhi4_neg2>:
    1954:	70 95       	com	r23
    1956:	61 95       	neg	r22
    1958:	7f 4f       	sbci	r23, 0xFF	; 255

0000195a <__divmodhi4_exit>:
    195a:	08 95       	ret

0000195c <__udivmodsi4>:
    195c:	a1 e2       	ldi	r26, 0x21	; 33
    195e:	1a 2e       	mov	r1, r26
    1960:	aa 1b       	sub	r26, r26
    1962:	bb 1b       	sub	r27, r27
    1964:	fd 01       	movw	r30, r26
    1966:	0d c0       	rjmp	.+26     	; 0x1982 <__udivmodsi4_ep>

00001968 <__udivmodsi4_loop>:
    1968:	aa 1f       	adc	r26, r26
    196a:	bb 1f       	adc	r27, r27
    196c:	ee 1f       	adc	r30, r30
    196e:	ff 1f       	adc	r31, r31
    1970:	a2 17       	cp	r26, r18
    1972:	b3 07       	cpc	r27, r19
    1974:	e4 07       	cpc	r30, r20
    1976:	f5 07       	cpc	r31, r21
    1978:	20 f0       	brcs	.+8      	; 0x1982 <__udivmodsi4_ep>
    197a:	a2 1b       	sub	r26, r18
    197c:	b3 0b       	sbc	r27, r19
    197e:	e4 0b       	sbc	r30, r20
    1980:	f5 0b       	sbc	r31, r21

00001982 <__udivmodsi4_ep>:
    1982:	66 1f       	adc	r22, r22
    1984:	77 1f       	adc	r23, r23
    1986:	88 1f       	adc	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	1a 94       	dec	r1
    198c:	69 f7       	brne	.-38     	; 0x1968 <__udivmodsi4_loop>
    198e:	60 95       	com	r22
    1990:	70 95       	com	r23
    1992:	80 95       	com	r24
    1994:	90 95       	com	r25
    1996:	9b 01       	movw	r18, r22
    1998:	ac 01       	movw	r20, r24
    199a:	bd 01       	movw	r22, r26
    199c:	cf 01       	movw	r24, r30
    199e:	08 95       	ret

000019a0 <__divmodsi4>:
    19a0:	05 2e       	mov	r0, r21
    19a2:	97 fb       	bst	r25, 7
    19a4:	1e f4       	brtc	.+6      	; 0x19ac <__divmodsi4+0xc>
    19a6:	00 94       	com	r0
    19a8:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__negsi2>
    19ac:	57 fd       	sbrc	r21, 7
    19ae:	07 d0       	rcall	.+14     	; 0x19be <__divmodsi4_neg2>
    19b0:	0e 94 ae 0c 	call	0x195c	; 0x195c <__udivmodsi4>
    19b4:	07 fc       	sbrc	r0, 7
    19b6:	03 d0       	rcall	.+6      	; 0x19be <__divmodsi4_neg2>
    19b8:	4e f4       	brtc	.+18     	; 0x19cc <__divmodsi4_exit>
    19ba:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <__negsi2>

000019be <__divmodsi4_neg2>:
    19be:	50 95       	com	r21
    19c0:	40 95       	com	r20
    19c2:	30 95       	com	r19
    19c4:	21 95       	neg	r18
    19c6:	3f 4f       	sbci	r19, 0xFF	; 255
    19c8:	4f 4f       	sbci	r20, 0xFF	; 255
    19ca:	5f 4f       	sbci	r21, 0xFF	; 255

000019cc <__divmodsi4_exit>:
    19cc:	08 95       	ret

000019ce <__negsi2>:
    19ce:	90 95       	com	r25
    19d0:	80 95       	com	r24
    19d2:	70 95       	com	r23
    19d4:	61 95       	neg	r22
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	8f 4f       	sbci	r24, 0xFF	; 255
    19da:	9f 4f       	sbci	r25, 0xFF	; 255
    19dc:	08 95       	ret

000019de <__tablejump2__>:
    19de:	ee 0f       	add	r30, r30
    19e0:	ff 1f       	adc	r31, r31
    19e2:	05 90       	lpm	r0, Z+
    19e4:	f4 91       	lpm	r31, Z
    19e6:	e0 2d       	mov	r30, r0
    19e8:	09 94       	ijmp

000019ea <malloc>:
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	82 30       	cpi	r24, 0x02	; 2
    19f0:	91 05       	cpc	r25, r1
    19f2:	10 f4       	brcc	.+4      	; 0x19f8 <malloc+0xe>
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	e0 91 13 04 	lds	r30, 0x0413
    19fc:	f0 91 14 04 	lds	r31, 0x0414
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	c0 e0       	ldi	r28, 0x00	; 0
    1a06:	d0 e0       	ldi	r29, 0x00	; 0
    1a08:	30 97       	sbiw	r30, 0x00	; 0
    1a0a:	11 f1       	breq	.+68     	; 0x1a50 <malloc+0x66>
    1a0c:	40 81       	ld	r20, Z
    1a0e:	51 81       	ldd	r21, Z+1	; 0x01
    1a10:	48 17       	cp	r20, r24
    1a12:	59 07       	cpc	r21, r25
    1a14:	c0 f0       	brcs	.+48     	; 0x1a46 <malloc+0x5c>
    1a16:	48 17       	cp	r20, r24
    1a18:	59 07       	cpc	r21, r25
    1a1a:	61 f4       	brne	.+24     	; 0x1a34 <malloc+0x4a>
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	20 97       	sbiw	r28, 0x00	; 0
    1a22:	19 f0       	breq	.+6      	; 0x1a2a <malloc+0x40>
    1a24:	9b 83       	std	Y+3, r25	; 0x03
    1a26:	8a 83       	std	Y+2, r24	; 0x02
    1a28:	2b c0       	rjmp	.+86     	; 0x1a80 <malloc+0x96>
    1a2a:	90 93 14 04 	sts	0x0414, r25
    1a2e:	80 93 13 04 	sts	0x0413, r24
    1a32:	26 c0       	rjmp	.+76     	; 0x1a80 <malloc+0x96>
    1a34:	21 15       	cp	r18, r1
    1a36:	31 05       	cpc	r19, r1
    1a38:	19 f0       	breq	.+6      	; 0x1a40 <malloc+0x56>
    1a3a:	42 17       	cp	r20, r18
    1a3c:	53 07       	cpc	r21, r19
    1a3e:	18 f4       	brcc	.+6      	; 0x1a46 <malloc+0x5c>
    1a40:	9a 01       	movw	r18, r20
    1a42:	be 01       	movw	r22, r28
    1a44:	df 01       	movw	r26, r30
    1a46:	ef 01       	movw	r28, r30
    1a48:	02 80       	ldd	r0, Z+2	; 0x02
    1a4a:	f3 81       	ldd	r31, Z+3	; 0x03
    1a4c:	e0 2d       	mov	r30, r0
    1a4e:	dc cf       	rjmp	.-72     	; 0x1a08 <malloc+0x1e>
    1a50:	21 15       	cp	r18, r1
    1a52:	31 05       	cpc	r19, r1
    1a54:	09 f1       	breq	.+66     	; 0x1a98 <malloc+0xae>
    1a56:	28 1b       	sub	r18, r24
    1a58:	39 0b       	sbc	r19, r25
    1a5a:	24 30       	cpi	r18, 0x04	; 4
    1a5c:	31 05       	cpc	r19, r1
    1a5e:	90 f4       	brcc	.+36     	; 0x1a84 <malloc+0x9a>
    1a60:	12 96       	adiw	r26, 0x02	; 2
    1a62:	8d 91       	ld	r24, X+
    1a64:	9c 91       	ld	r25, X
    1a66:	13 97       	sbiw	r26, 0x03	; 3
    1a68:	61 15       	cp	r22, r1
    1a6a:	71 05       	cpc	r23, r1
    1a6c:	21 f0       	breq	.+8      	; 0x1a76 <malloc+0x8c>
    1a6e:	fb 01       	movw	r30, r22
    1a70:	93 83       	std	Z+3, r25	; 0x03
    1a72:	82 83       	std	Z+2, r24	; 0x02
    1a74:	04 c0       	rjmp	.+8      	; 0x1a7e <malloc+0x94>
    1a76:	90 93 14 04 	sts	0x0414, r25
    1a7a:	80 93 13 04 	sts	0x0413, r24
    1a7e:	fd 01       	movw	r30, r26
    1a80:	32 96       	adiw	r30, 0x02	; 2
    1a82:	44 c0       	rjmp	.+136    	; 0x1b0c <malloc+0x122>
    1a84:	fd 01       	movw	r30, r26
    1a86:	e2 0f       	add	r30, r18
    1a88:	f3 1f       	adc	r31, r19
    1a8a:	81 93       	st	Z+, r24
    1a8c:	91 93       	st	Z+, r25
    1a8e:	22 50       	subi	r18, 0x02	; 2
    1a90:	31 09       	sbc	r19, r1
    1a92:	2d 93       	st	X+, r18
    1a94:	3c 93       	st	X, r19
    1a96:	3a c0       	rjmp	.+116    	; 0x1b0c <malloc+0x122>
    1a98:	20 91 11 04 	lds	r18, 0x0411
    1a9c:	30 91 12 04 	lds	r19, 0x0412
    1aa0:	23 2b       	or	r18, r19
    1aa2:	41 f4       	brne	.+16     	; 0x1ab4 <malloc+0xca>
    1aa4:	20 91 02 01 	lds	r18, 0x0102
    1aa8:	30 91 03 01 	lds	r19, 0x0103
    1aac:	30 93 12 04 	sts	0x0412, r19
    1ab0:	20 93 11 04 	sts	0x0411, r18
    1ab4:	20 91 00 01 	lds	r18, 0x0100
    1ab8:	30 91 01 01 	lds	r19, 0x0101
    1abc:	21 15       	cp	r18, r1
    1abe:	31 05       	cpc	r19, r1
    1ac0:	41 f4       	brne	.+16     	; 0x1ad2 <malloc+0xe8>
    1ac2:	2d b7       	in	r18, 0x3d	; 61
    1ac4:	3e b7       	in	r19, 0x3e	; 62
    1ac6:	40 91 04 01 	lds	r20, 0x0104
    1aca:	50 91 05 01 	lds	r21, 0x0105
    1ace:	24 1b       	sub	r18, r20
    1ad0:	35 0b       	sbc	r19, r21
    1ad2:	e0 91 11 04 	lds	r30, 0x0411
    1ad6:	f0 91 12 04 	lds	r31, 0x0412
    1ada:	e2 17       	cp	r30, r18
    1adc:	f3 07       	cpc	r31, r19
    1ade:	a0 f4       	brcc	.+40     	; 0x1b08 <malloc+0x11e>
    1ae0:	2e 1b       	sub	r18, r30
    1ae2:	3f 0b       	sbc	r19, r31
    1ae4:	28 17       	cp	r18, r24
    1ae6:	39 07       	cpc	r19, r25
    1ae8:	78 f0       	brcs	.+30     	; 0x1b08 <malloc+0x11e>
    1aea:	ac 01       	movw	r20, r24
    1aec:	4e 5f       	subi	r20, 0xFE	; 254
    1aee:	5f 4f       	sbci	r21, 0xFF	; 255
    1af0:	24 17       	cp	r18, r20
    1af2:	35 07       	cpc	r19, r21
    1af4:	48 f0       	brcs	.+18     	; 0x1b08 <malloc+0x11e>
    1af6:	4e 0f       	add	r20, r30
    1af8:	5f 1f       	adc	r21, r31
    1afa:	50 93 12 04 	sts	0x0412, r21
    1afe:	40 93 11 04 	sts	0x0411, r20
    1b02:	81 93       	st	Z+, r24
    1b04:	91 93       	st	Z+, r25
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <malloc+0x122>
    1b08:	e0 e0       	ldi	r30, 0x00	; 0
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	cf 01       	movw	r24, r30
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	08 95       	ret

00001b14 <free>:
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <free+0xe>
    1b20:	8c c0       	rjmp	.+280    	; 0x1c3a <free+0x126>
    1b22:	fc 01       	movw	r30, r24
    1b24:	32 97       	sbiw	r30, 0x02	; 2
    1b26:	13 82       	std	Z+3, r1	; 0x03
    1b28:	12 82       	std	Z+2, r1	; 0x02
    1b2a:	00 91 13 04 	lds	r16, 0x0413
    1b2e:	10 91 14 04 	lds	r17, 0x0414
    1b32:	01 15       	cp	r16, r1
    1b34:	11 05       	cpc	r17, r1
    1b36:	81 f4       	brne	.+32     	; 0x1b58 <free+0x44>
    1b38:	20 81       	ld	r18, Z
    1b3a:	31 81       	ldd	r19, Z+1	; 0x01
    1b3c:	82 0f       	add	r24, r18
    1b3e:	93 1f       	adc	r25, r19
    1b40:	20 91 11 04 	lds	r18, 0x0411
    1b44:	30 91 12 04 	lds	r19, 0x0412
    1b48:	28 17       	cp	r18, r24
    1b4a:	39 07       	cpc	r19, r25
    1b4c:	79 f5       	brne	.+94     	; 0x1bac <free+0x98>
    1b4e:	f0 93 12 04 	sts	0x0412, r31
    1b52:	e0 93 11 04 	sts	0x0411, r30
    1b56:	71 c0       	rjmp	.+226    	; 0x1c3a <free+0x126>
    1b58:	d8 01       	movw	r26, r16
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	50 e0       	ldi	r21, 0x00	; 0
    1b5e:	ae 17       	cp	r26, r30
    1b60:	bf 07       	cpc	r27, r31
    1b62:	50 f4       	brcc	.+20     	; 0x1b78 <free+0x64>
    1b64:	12 96       	adiw	r26, 0x02	; 2
    1b66:	2d 91       	ld	r18, X+
    1b68:	3c 91       	ld	r19, X
    1b6a:	13 97       	sbiw	r26, 0x03	; 3
    1b6c:	ad 01       	movw	r20, r26
    1b6e:	21 15       	cp	r18, r1
    1b70:	31 05       	cpc	r19, r1
    1b72:	09 f1       	breq	.+66     	; 0x1bb6 <free+0xa2>
    1b74:	d9 01       	movw	r26, r18
    1b76:	f3 cf       	rjmp	.-26     	; 0x1b5e <free+0x4a>
    1b78:	9d 01       	movw	r18, r26
    1b7a:	da 01       	movw	r26, r20
    1b7c:	33 83       	std	Z+3, r19	; 0x03
    1b7e:	22 83       	std	Z+2, r18	; 0x02
    1b80:	60 81       	ld	r22, Z
    1b82:	71 81       	ldd	r23, Z+1	; 0x01
    1b84:	86 0f       	add	r24, r22
    1b86:	97 1f       	adc	r25, r23
    1b88:	82 17       	cp	r24, r18
    1b8a:	93 07       	cpc	r25, r19
    1b8c:	69 f4       	brne	.+26     	; 0x1ba8 <free+0x94>
    1b8e:	ec 01       	movw	r28, r24
    1b90:	28 81       	ld	r18, Y
    1b92:	39 81       	ldd	r19, Y+1	; 0x01
    1b94:	26 0f       	add	r18, r22
    1b96:	37 1f       	adc	r19, r23
    1b98:	2e 5f       	subi	r18, 0xFE	; 254
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	31 83       	std	Z+1, r19	; 0x01
    1b9e:	20 83       	st	Z, r18
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba4:	93 83       	std	Z+3, r25	; 0x03
    1ba6:	82 83       	std	Z+2, r24	; 0x02
    1ba8:	45 2b       	or	r20, r21
    1baa:	29 f4       	brne	.+10     	; 0x1bb6 <free+0xa2>
    1bac:	f0 93 14 04 	sts	0x0414, r31
    1bb0:	e0 93 13 04 	sts	0x0413, r30
    1bb4:	42 c0       	rjmp	.+132    	; 0x1c3a <free+0x126>
    1bb6:	13 96       	adiw	r26, 0x03	; 3
    1bb8:	fc 93       	st	X, r31
    1bba:	ee 93       	st	-X, r30
    1bbc:	12 97       	sbiw	r26, 0x02	; 2
    1bbe:	ed 01       	movw	r28, r26
    1bc0:	49 91       	ld	r20, Y+
    1bc2:	59 91       	ld	r21, Y+
    1bc4:	9e 01       	movw	r18, r28
    1bc6:	24 0f       	add	r18, r20
    1bc8:	35 1f       	adc	r19, r21
    1bca:	e2 17       	cp	r30, r18
    1bcc:	f3 07       	cpc	r31, r19
    1bce:	71 f4       	brne	.+28     	; 0x1bec <free+0xd8>
    1bd0:	80 81       	ld	r24, Z
    1bd2:	91 81       	ldd	r25, Z+1	; 0x01
    1bd4:	84 0f       	add	r24, r20
    1bd6:	95 1f       	adc	r25, r21
    1bd8:	02 96       	adiw	r24, 0x02	; 2
    1bda:	11 96       	adiw	r26, 0x01	; 1
    1bdc:	9c 93       	st	X, r25
    1bde:	8e 93       	st	-X, r24
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	93 81       	ldd	r25, Z+3	; 0x03
    1be4:	13 96       	adiw	r26, 0x03	; 3
    1be6:	9c 93       	st	X, r25
    1be8:	8e 93       	st	-X, r24
    1bea:	12 97       	sbiw	r26, 0x02	; 2
    1bec:	e0 e0       	ldi	r30, 0x00	; 0
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	d8 01       	movw	r26, r16
    1bf2:	12 96       	adiw	r26, 0x02	; 2
    1bf4:	8d 91       	ld	r24, X+
    1bf6:	9c 91       	ld	r25, X
    1bf8:	13 97       	sbiw	r26, 0x03	; 3
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	19 f0       	breq	.+6      	; 0x1c04 <free+0xf0>
    1bfe:	f8 01       	movw	r30, r16
    1c00:	8c 01       	movw	r16, r24
    1c02:	f6 cf       	rjmp	.-20     	; 0x1bf0 <free+0xdc>
    1c04:	8d 91       	ld	r24, X+
    1c06:	9c 91       	ld	r25, X
    1c08:	98 01       	movw	r18, r16
    1c0a:	2e 5f       	subi	r18, 0xFE	; 254
    1c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0e:	82 0f       	add	r24, r18
    1c10:	93 1f       	adc	r25, r19
    1c12:	20 91 11 04 	lds	r18, 0x0411
    1c16:	30 91 12 04 	lds	r19, 0x0412
    1c1a:	28 17       	cp	r18, r24
    1c1c:	39 07       	cpc	r19, r25
    1c1e:	69 f4       	brne	.+26     	; 0x1c3a <free+0x126>
    1c20:	30 97       	sbiw	r30, 0x00	; 0
    1c22:	29 f4       	brne	.+10     	; 0x1c2e <free+0x11a>
    1c24:	10 92 14 04 	sts	0x0414, r1
    1c28:	10 92 13 04 	sts	0x0413, r1
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <free+0x11e>
    1c2e:	13 82       	std	Z+3, r1	; 0x03
    1c30:	12 82       	std	Z+2, r1	; 0x02
    1c32:	10 93 12 04 	sts	0x0412, r17
    1c36:	00 93 11 04 	sts	0x0411, r16
    1c3a:	df 91       	pop	r29
    1c3c:	cf 91       	pop	r28
    1c3e:	1f 91       	pop	r17
    1c40:	0f 91       	pop	r16
    1c42:	08 95       	ret

00001c44 <__do_global_dtors>:
    1c44:	10 e0       	ldi	r17, 0x00	; 0
    1c46:	c2 e7       	ldi	r28, 0x72	; 114
    1c48:	d0 e0       	ldi	r29, 0x00	; 0
    1c4a:	04 c0       	rjmp	.+8      	; 0x1c54 <__do_global_dtors+0x10>
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	0e 94 ef 0c 	call	0x19de	; 0x19de <__tablejump2__>
    1c52:	21 96       	adiw	r28, 0x01	; 1
    1c54:	c3 37       	cpi	r28, 0x73	; 115
    1c56:	d1 07       	cpc	r29, r17
    1c58:	c9 f7       	brne	.-14     	; 0x1c4c <__do_global_dtors+0x8>
    1c5a:	f8 94       	cli

00001c5c <__stop_program>:
    1c5c:	ff cf       	rjmp	.-2      	; 0x1c5c <__stop_program>
